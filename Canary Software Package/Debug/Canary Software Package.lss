
Canary Software Package.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00001058  000010ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b0  0080015a  0080015a  00001146  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001146  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d46  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012df  00000000  00000000  0000516a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001861  00000000  00000000  00006449  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006bc  00000000  00000000  00007cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ecf  00000000  00000000  00008368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029fe  00000000  00000000  00009237  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000bc35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8e c0       	rjmp	.+284    	; 0x11e <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	95 c0       	rjmp	.+298    	; 0x154 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	93 c0       	rjmp	.+294    	; 0x154 <__bad_interrupt>
      2e:	00 00       	nop
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c3       	rjmp	.+1772   	; 0x722 <__vector_13>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c3       	rjmp	.+1758   	; 0x720 <__vector_16>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	9f c4       	rjmp	.+2366   	; 0x994 <__vector_21>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	ca c3       	rjmp	.+1940   	; 0x7fe <__vector_26>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ba c4       	rjmp	.+2420   	; 0x9e6 <__vector_28>
      72:	00 00       	nop
      74:	d7 c4       	rjmp	.+2478   	; 0xa24 <__vector_29>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	19 04       	cpc	r1, r9
      7e:	6b 04       	cpc	r6, r11
      80:	6b 04       	cpc	r6, r11
      82:	6b 04       	cpc	r6, r11
      84:	6b 04       	cpc	r6, r11
      86:	6b 04       	cpc	r6, r11
      88:	6b 04       	cpc	r6, r11
      8a:	6b 04       	cpc	r6, r11
      8c:	19 04       	cpc	r1, r9
      8e:	6b 04       	cpc	r6, r11
      90:	6b 04       	cpc	r6, r11
      92:	6b 04       	cpc	r6, r11
      94:	6b 04       	cpc	r6, r11
      96:	6b 04       	cpc	r6, r11
      98:	6b 04       	cpc	r6, r11
      9a:	6b 04       	cpc	r6, r11
      9c:	1b 04       	cpc	r1, r11
      9e:	6b 04       	cpc	r6, r11
      a0:	6b 04       	cpc	r6, r11
      a2:	6b 04       	cpc	r6, r11
      a4:	6b 04       	cpc	r6, r11
      a6:	6b 04       	cpc	r6, r11
      a8:	6b 04       	cpc	r6, r11
      aa:	6b 04       	cpc	r6, r11
      ac:	6b 04       	cpc	r6, r11
      ae:	6b 04       	cpc	r6, r11
      b0:	6b 04       	cpc	r6, r11
      b2:	6b 04       	cpc	r6, r11
      b4:	6b 04       	cpc	r6, r11
      b6:	6b 04       	cpc	r6, r11
      b8:	6b 04       	cpc	r6, r11
      ba:	6b 04       	cpc	r6, r11
      bc:	1b 04       	cpc	r1, r11
      be:	6b 04       	cpc	r6, r11
      c0:	6b 04       	cpc	r6, r11
      c2:	6b 04       	cpc	r6, r11
      c4:	6b 04       	cpc	r6, r11
      c6:	6b 04       	cpc	r6, r11
      c8:	6b 04       	cpc	r6, r11
      ca:	6b 04       	cpc	r6, r11
      cc:	6b 04       	cpc	r6, r11
      ce:	6b 04       	cpc	r6, r11
      d0:	6b 04       	cpc	r6, r11
      d2:	6b 04       	cpc	r6, r11
      d4:	6b 04       	cpc	r6, r11
      d6:	6b 04       	cpc	r6, r11
      d8:	6b 04       	cpc	r6, r11
      da:	6b 04       	cpc	r6, r11
      dc:	67 04       	cpc	r6, r7
      de:	6b 04       	cpc	r6, r11
      e0:	6b 04       	cpc	r6, r11
      e2:	6b 04       	cpc	r6, r11
      e4:	6b 04       	cpc	r6, r11
      e6:	6b 04       	cpc	r6, r11
      e8:	6b 04       	cpc	r6, r11
      ea:	6b 04       	cpc	r6, r11
      ec:	44 04       	cpc	r4, r4
      ee:	6b 04       	cpc	r6, r11
      f0:	6b 04       	cpc	r6, r11
      f2:	6b 04       	cpc	r6, r11
      f4:	6b 04       	cpc	r6, r11
      f6:	6b 04       	cpc	r6, r11
      f8:	6b 04       	cpc	r6, r11
      fa:	6b 04       	cpc	r6, r11
      fc:	6b 04       	cpc	r6, r11
      fe:	6b 04       	cpc	r6, r11
     100:	6b 04       	cpc	r6, r11
     102:	6b 04       	cpc	r6, r11
     104:	6b 04       	cpc	r6, r11
     106:	6b 04       	cpc	r6, r11
     108:	6b 04       	cpc	r6, r11
     10a:	6b 04       	cpc	r6, r11
     10c:	38 04       	cpc	r3, r8
     10e:	6b 04       	cpc	r6, r11
     110:	6b 04       	cpc	r6, r11
     112:	6b 04       	cpc	r6, r11
     114:	6b 04       	cpc	r6, r11
     116:	6b 04       	cpc	r6, r11
     118:	6b 04       	cpc	r6, r11
     11a:	6b 04       	cpc	r6, r11
     11c:	56 04       	cpc	r5, r6

0000011e <__ctors_end>:
     11e:	11 24       	eor	r1, r1
     120:	1f be       	out	0x3f, r1	; 63
     122:	cf ef       	ldi	r28, 0xFF	; 255
     124:	d8 e0       	ldi	r29, 0x08	; 8
     126:	de bf       	out	0x3e, r29	; 62
     128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_copy_data>:
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	e8 e5       	ldi	r30, 0x58	; 88
     132:	f0 e1       	ldi	r31, 0x10	; 16
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x10>
     136:	05 90       	lpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	aa 35       	cpi	r26, 0x5A	; 90
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0xc>

00000140 <__do_clear_bss>:
     140:	26 e0       	ldi	r18, 0x06	; 6
     142:	aa e5       	ldi	r26, 0x5A	; 90
     144:	b1 e0       	ldi	r27, 0x01	; 1
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	aa 30       	cpi	r26, 0x0A	; 10
     14c:	b2 07       	cpc	r27, r18
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	a1 d2       	rcall	.+1346   	; 0x694 <main>
     152:	80 c7       	rjmp	.+3840   	; 0x1054 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <null_ptr_check>:
	} else {
		rslt = BME280_E_NULL_PTR;
	}

	return rslt;
}
     156:	fc 01       	movw	r30, r24
     158:	89 2b       	or	r24, r25
     15a:	81 f0       	breq	.+32     	; 0x17c <null_ptr_check+0x26>
     15c:	83 81       	ldd	r24, Z+3	; 0x03
     15e:	94 81       	ldd	r25, Z+4	; 0x04
     160:	89 2b       	or	r24, r25
     162:	71 f0       	breq	.+28     	; 0x180 <null_ptr_check+0x2a>
     164:	85 81       	ldd	r24, Z+5	; 0x05
     166:	96 81       	ldd	r25, Z+6	; 0x06
     168:	89 2b       	or	r24, r25
     16a:	61 f0       	breq	.+24     	; 0x184 <null_ptr_check+0x2e>
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	27 81       	ldd	r18, Z+7	; 0x07
     170:	30 85       	ldd	r19, Z+8	; 0x08
     172:	23 2b       	or	r18, r19
     174:	09 f0       	breq	.+2      	; 0x178 <null_ptr_check+0x22>
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	81 95       	neg	r24
     17a:	08 95       	ret
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	08 95       	ret
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	08 95       	ret
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	08 95       	ret

00000188 <bme280_get_regs>:
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	18 2f       	mov	r17, r24
     198:	7b 01       	movw	r14, r22
     19a:	6a 01       	movw	r12, r20
     19c:	e9 01       	movw	r28, r18
     19e:	c9 01       	movw	r24, r18
     1a0:	da df       	rcall	.-76     	; 0x156 <null_ptr_check>
     1a2:	81 11       	cpse	r24, r1
     1a4:	0d c0       	rjmp	.+26     	; 0x1c0 <bme280_get_regs+0x38>
     1a6:	8a 81       	ldd	r24, Y+2	; 0x02
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	09 f0       	breq	.+2      	; 0x1ae <bme280_get_regs+0x26>
     1ac:	10 68       	ori	r17, 0x80	; 128
     1ae:	eb 81       	ldd	r30, Y+3	; 0x03
     1b0:	fc 81       	ldd	r31, Y+4	; 0x04
     1b2:	96 01       	movw	r18, r12
     1b4:	a7 01       	movw	r20, r14
     1b6:	61 2f       	mov	r22, r17
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	09 95       	icall
     1bc:	81 11       	cpse	r24, r1
     1be:	8c ef       	ldi	r24, 0xFC	; 252
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	1f 91       	pop	r17
     1c6:	ff 90       	pop	r15
     1c8:	ef 90       	pop	r14
     1ca:	df 90       	pop	r13
     1cc:	cf 90       	pop	r12
     1ce:	08 95       	ret

000001d0 <bme280_set_regs>:
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	64 97       	sbiw	r28, 0x14	; 20
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	7c 01       	movw	r14, r24
     1f4:	6b 01       	movw	r12, r22
     1f6:	89 01       	movw	r16, r18
     1f8:	b4 2e       	mov	r11, r20
     1fa:	8a e0       	ldi	r24, 0x0A	; 10
     1fc:	84 17       	cp	r24, r20
     1fe:	20 f4       	brcc	.+8      	; 0x208 <bme280_set_regs+0x38>
     200:	0f 2e       	mov	r0, r31
     202:	fa e0       	ldi	r31, 0x0A	; 10
     204:	bf 2e       	mov	r11, r31
     206:	f0 2d       	mov	r31, r0
     208:	c8 01       	movw	r24, r16
     20a:	a5 df       	rcall	.-182    	; 0x156 <null_ptr_check>
     20c:	81 11       	cpse	r24, r1
     20e:	56 c0       	rjmp	.+172    	; 0x2bc <bme280_set_regs+0xec>
     210:	e1 14       	cp	r14, r1
     212:	f1 04       	cpc	r15, r1
     214:	09 f4       	brne	.+2      	; 0x218 <bme280_set_regs+0x48>
     216:	54 c0       	rjmp	.+168    	; 0x2c0 <bme280_set_regs+0xf0>
     218:	c1 14       	cp	r12, r1
     21a:	d1 04       	cpc	r13, r1
     21c:	09 f4       	brne	.+2      	; 0x220 <bme280_set_regs+0x50>
     21e:	52 c0       	rjmp	.+164    	; 0x2c4 <bme280_set_regs+0xf4>
     220:	bb 20       	and	r11, r11
     222:	09 f4       	brne	.+2      	; 0x226 <bme280_set_regs+0x56>
     224:	51 c0       	rjmp	.+162    	; 0x2c8 <bme280_set_regs+0xf8>
     226:	d6 01       	movw	r26, r12
     228:	8c 91       	ld	r24, X
     22a:	89 83       	std	Y+1, r24	; 0x01
     22c:	f8 01       	movw	r30, r16
     22e:	82 81       	ldd	r24, Z+2	; 0x02
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	09 f4       	brne	.+2      	; 0x236 <bme280_set_regs+0x66>
     234:	4b c0       	rjmp	.+150    	; 0x2cc <bme280_set_regs+0xfc>
     236:	f7 01       	movw	r30, r14
     238:	2f ef       	ldi	r18, 0xFF	; 255
     23a:	2b 0d       	add	r18, r11
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	2f 5f       	subi	r18, 0xFF	; 255
     240:	3f 4f       	sbci	r19, 0xFF	; 255
     242:	2e 0d       	add	r18, r14
     244:	3f 1d       	adc	r19, r15
     246:	90 81       	ld	r25, Z
     248:	9f 77       	andi	r25, 0x7F	; 127
     24a:	91 93       	st	Z+, r25
     24c:	e2 17       	cp	r30, r18
     24e:	f3 07       	cpc	r31, r19
     250:	d1 f7       	brne	.-12     	; 0x246 <bme280_set_regs+0x76>
     252:	f1 e0       	ldi	r31, 0x01	; 1
     254:	fb 15       	cp	r31, r11
     256:	f0 f4       	brcc	.+60     	; 0x294 <bme280_set_regs+0xc4>
     258:	97 01       	movw	r18, r14
     25a:	2f 5f       	subi	r18, 0xFF	; 255
     25c:	3f 4f       	sbci	r19, 0xFF	; 255
     25e:	8f ef       	ldi	r24, 0xFF	; 255
     260:	c8 1a       	sub	r12, r24
     262:	d8 0a       	sbc	r13, r24
     264:	fe 01       	movw	r30, r28
     266:	33 96       	adiw	r30, 0x03	; 3
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	d9 01       	movw	r26, r18
     26c:	9d 91       	ld	r25, X+
     26e:	9d 01       	movw	r18, r26
     270:	af 01       	movw	r20, r30
     272:	41 50       	subi	r20, 0x01	; 1
     274:	51 09       	sbc	r21, r1
     276:	da 01       	movw	r26, r20
     278:	9c 93       	st	X, r25
     27a:	d6 01       	movw	r26, r12
     27c:	9d 91       	ld	r25, X+
     27e:	6d 01       	movw	r12, r26
     280:	90 83       	st	Z, r25
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	32 96       	adiw	r30, 0x02	; 2
     286:	8b 15       	cp	r24, r11
     288:	80 f3       	brcs	.-32     	; 0x26a <bme280_set_regs+0x9a>
     28a:	2b 2d       	mov	r18, r11
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	22 0f       	add	r18, r18
     290:	33 1f       	adc	r19, r19
     292:	02 c0       	rjmp	.+4      	; 0x298 <bme280_set_regs+0xc8>
     294:	2b 2d       	mov	r18, r11
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	d8 01       	movw	r26, r16
     29a:	15 96       	adiw	r26, 0x05	; 5
     29c:	ed 91       	ld	r30, X+
     29e:	fc 91       	ld	r31, X
     2a0:	16 97       	sbiw	r26, 0x06	; 6
     2a2:	ae 01       	movw	r20, r28
     2a4:	4f 5f       	subi	r20, 0xFF	; 255
     2a6:	5f 4f       	sbci	r21, 0xFF	; 255
     2a8:	d7 01       	movw	r26, r14
     2aa:	6c 91       	ld	r22, X
     2ac:	d8 01       	movw	r26, r16
     2ae:	11 96       	adiw	r26, 0x01	; 1
     2b0:	8c 91       	ld	r24, X
     2b2:	09 95       	icall
     2b4:	88 23       	and	r24, r24
     2b6:	71 f0       	breq	.+28     	; 0x2d4 <bme280_set_regs+0x104>
     2b8:	8c ef       	ldi	r24, 0xFC	; 252
     2ba:	0c c0       	rjmp	.+24     	; 0x2d4 <bme280_set_regs+0x104>
     2bc:	8f ef       	ldi	r24, 0xFF	; 255
     2be:	0a c0       	rjmp	.+20     	; 0x2d4 <bme280_set_regs+0x104>
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	08 c0       	rjmp	.+16     	; 0x2d4 <bme280_set_regs+0x104>
     2c4:	8f ef       	ldi	r24, 0xFF	; 255
     2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <bme280_set_regs+0x104>
     2c8:	8d ef       	ldi	r24, 0xFD	; 253
     2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <bme280_set_regs+0x104>
     2cc:	b1 e0       	ldi	r27, 0x01	; 1
     2ce:	bb 15       	cp	r27, r11
     2d0:	18 f2       	brcs	.-122    	; 0x258 <bme280_set_regs+0x88>
     2d2:	e0 cf       	rjmp	.-64     	; 0x294 <bme280_set_regs+0xc4>
     2d4:	64 96       	adiw	r28, 0x14	; 20
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	08 95       	ret

000002f4 <bme280_soft_reset>:
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	1f 93       	push	r17
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	00 d0       	rcall	.+0      	; 0x300 <bme280_soft_reset+0xc>
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	7c 01       	movw	r14, r24
     306:	80 ee       	ldi	r24, 0xE0	; 224
     308:	89 83       	std	Y+1, r24	; 0x01
     30a:	86 eb       	ldi	r24, 0xB6	; 182
     30c:	8a 83       	std	Y+2, r24	; 0x02
     30e:	c7 01       	movw	r24, r14
     310:	22 df       	rcall	.-444    	; 0x156 <null_ptr_check>
     312:	18 2f       	mov	r17, r24
     314:	81 11       	cpse	r24, r1
     316:	13 c0       	rjmp	.+38     	; 0x33e <bme280_soft_reset+0x4a>
     318:	97 01       	movw	r18, r14
     31a:	41 e0       	ldi	r20, 0x01	; 1
     31c:	be 01       	movw	r22, r28
     31e:	6e 5f       	subi	r22, 0xFE	; 254
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	ce 01       	movw	r24, r28
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	54 df       	rcall	.-344    	; 0x1d0 <bme280_set_regs>
     328:	18 2f       	mov	r17, r24
     32a:	d7 01       	movw	r26, r14
     32c:	17 96       	adiw	r26, 0x07	; 7
     32e:	ed 91       	ld	r30, X+
     330:	fc 91       	ld	r31, X
     332:	18 97       	sbiw	r26, 0x08	; 8
     334:	62 e0       	ldi	r22, 0x02	; 2
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	09 95       	icall
     33e:	81 2f       	mov	r24, r17
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	ff 90       	pop	r15
     34c:	ef 90       	pop	r14
     34e:	08 95       	ret

00000350 <bme280_init>:
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
     35e:	6b 97       	sbiw	r28, 0x1b	; 27
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	7c 01       	movw	r14, r24
     36c:	19 82       	std	Y+1, r1	; 0x01
     36e:	f3 de       	rcall	.-538    	; 0x156 <null_ptr_check>
     370:	81 11       	cpse	r24, r1
     372:	e3 c0       	rjmp	.+454    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     374:	15 e0       	ldi	r17, 0x05	; 5
     376:	97 01       	movw	r18, r14
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	be 01       	movw	r22, r28
     37e:	6f 5f       	subi	r22, 0xFF	; 255
     380:	7f 4f       	sbci	r23, 0xFF	; 255
     382:	80 ed       	ldi	r24, 0xD0	; 208
     384:	01 df       	rcall	.-510    	; 0x188 <bme280_get_regs>
     386:	81 11       	cpse	r24, r1
     388:	c6 c0       	rjmp	.+396    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	80 36       	cpi	r24, 0x60	; 96
     38e:	09 f0       	breq	.+2      	; 0x392 <bme280_init+0x42>
     390:	c2 c0       	rjmp	.+388    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     392:	d7 01       	movw	r26, r14
     394:	8c 93       	st	X, r24
     396:	c7 01       	movw	r24, r14
     398:	ad df       	rcall	.-166    	; 0x2f4 <bme280_soft_reset>
     39a:	81 11       	cpse	r24, r1
     39c:	cb c0       	rjmp	.+406    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     39e:	be 01       	movw	r22, r28
     3a0:	6e 5f       	subi	r22, 0xFE	; 254
     3a2:	7f 4f       	sbci	r23, 0xFF	; 255
     3a4:	8a e1       	ldi	r24, 0x1A	; 26
     3a6:	fb 01       	movw	r30, r22
     3a8:	11 92       	st	Z+, r1
     3aa:	8a 95       	dec	r24
     3ac:	e9 f7       	brne	.-6      	; 0x3a8 <bme280_init+0x58>
     3ae:	97 01       	movw	r18, r14
     3b0:	4a e1       	ldi	r20, 0x1A	; 26
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	88 e8       	ldi	r24, 0x88	; 136
     3b6:	e8 de       	rcall	.-560    	; 0x188 <bme280_get_regs>
     3b8:	81 11       	cpse	r24, r1
     3ba:	bc c0       	rjmp	.+376    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     3bc:	8b 81       	ldd	r24, Y+3	; 0x03
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	98 2f       	mov	r25, r24
     3c2:	88 27       	eor	r24, r24
     3c4:	2a 81       	ldd	r18, Y+2	; 0x02
     3c6:	82 2b       	or	r24, r18
     3c8:	d7 01       	movw	r26, r14
     3ca:	1a 96       	adiw	r26, 0x0a	; 10
     3cc:	9c 93       	st	X, r25
     3ce:	8e 93       	st	-X, r24
     3d0:	19 97       	sbiw	r26, 0x09	; 9
     3d2:	8d 81       	ldd	r24, Y+5	; 0x05
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	98 2f       	mov	r25, r24
     3d8:	88 27       	eor	r24, r24
     3da:	2c 81       	ldd	r18, Y+4	; 0x04
     3dc:	82 2b       	or	r24, r18
     3de:	1c 96       	adiw	r26, 0x0c	; 12
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
     3e4:	1b 97       	sbiw	r26, 0x0b	; 11
     3e6:	8f 81       	ldd	r24, Y+7	; 0x07
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	98 2f       	mov	r25, r24
     3ec:	88 27       	eor	r24, r24
     3ee:	2e 81       	ldd	r18, Y+6	; 0x06
     3f0:	82 2b       	or	r24, r18
     3f2:	1e 96       	adiw	r26, 0x0e	; 14
     3f4:	9c 93       	st	X, r25
     3f6:	8e 93       	st	-X, r24
     3f8:	1d 97       	sbiw	r26, 0x0d	; 13
     3fa:	89 85       	ldd	r24, Y+9	; 0x09
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	98 2f       	mov	r25, r24
     400:	88 27       	eor	r24, r24
     402:	28 85       	ldd	r18, Y+8	; 0x08
     404:	82 2b       	or	r24, r18
     406:	50 96       	adiw	r26, 0x10	; 16
     408:	9c 93       	st	X, r25
     40a:	8e 93       	st	-X, r24
     40c:	1f 97       	sbiw	r26, 0x0f	; 15
     40e:	8b 85       	ldd	r24, Y+11	; 0x0b
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	98 2f       	mov	r25, r24
     414:	88 27       	eor	r24, r24
     416:	2a 85       	ldd	r18, Y+10	; 0x0a
     418:	82 2b       	or	r24, r18
     41a:	52 96       	adiw	r26, 0x12	; 18
     41c:	9c 93       	st	X, r25
     41e:	8e 93       	st	-X, r24
     420:	51 97       	sbiw	r26, 0x11	; 17
     422:	8d 85       	ldd	r24, Y+13	; 0x0d
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	98 2f       	mov	r25, r24
     428:	88 27       	eor	r24, r24
     42a:	2c 85       	ldd	r18, Y+12	; 0x0c
     42c:	82 2b       	or	r24, r18
     42e:	54 96       	adiw	r26, 0x14	; 20
     430:	9c 93       	st	X, r25
     432:	8e 93       	st	-X, r24
     434:	53 97       	sbiw	r26, 0x13	; 19
     436:	8f 85       	ldd	r24, Y+15	; 0x0f
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	98 2f       	mov	r25, r24
     43c:	88 27       	eor	r24, r24
     43e:	2e 85       	ldd	r18, Y+14	; 0x0e
     440:	82 2b       	or	r24, r18
     442:	56 96       	adiw	r26, 0x16	; 22
     444:	9c 93       	st	X, r25
     446:	8e 93       	st	-X, r24
     448:	55 97       	sbiw	r26, 0x15	; 21
     44a:	89 89       	ldd	r24, Y+17	; 0x11
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	98 2f       	mov	r25, r24
     450:	88 27       	eor	r24, r24
     452:	28 89       	ldd	r18, Y+16	; 0x10
     454:	82 2b       	or	r24, r18
     456:	58 96       	adiw	r26, 0x18	; 24
     458:	9c 93       	st	X, r25
     45a:	8e 93       	st	-X, r24
     45c:	57 97       	sbiw	r26, 0x17	; 23
     45e:	8b 89       	ldd	r24, Y+19	; 0x13
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	98 2f       	mov	r25, r24
     464:	88 27       	eor	r24, r24
     466:	2a 89       	ldd	r18, Y+18	; 0x12
     468:	82 2b       	or	r24, r18
     46a:	5a 96       	adiw	r26, 0x1a	; 26
     46c:	9c 93       	st	X, r25
     46e:	8e 93       	st	-X, r24
     470:	59 97       	sbiw	r26, 0x19	; 25
     472:	8d 89       	ldd	r24, Y+21	; 0x15
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	98 2f       	mov	r25, r24
     478:	88 27       	eor	r24, r24
     47a:	2c 89       	ldd	r18, Y+20	; 0x14
     47c:	82 2b       	or	r24, r18
     47e:	5c 96       	adiw	r26, 0x1c	; 28
     480:	9c 93       	st	X, r25
     482:	8e 93       	st	-X, r24
     484:	5b 97       	sbiw	r26, 0x1b	; 27
     486:	8f 89       	ldd	r24, Y+23	; 0x17
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	98 2f       	mov	r25, r24
     48c:	88 27       	eor	r24, r24
     48e:	2e 89       	ldd	r18, Y+22	; 0x16
     490:	82 2b       	or	r24, r18
     492:	5e 96       	adiw	r26, 0x1e	; 30
     494:	9c 93       	st	X, r25
     496:	8e 93       	st	-X, r24
     498:	5d 97       	sbiw	r26, 0x1d	; 29
     49a:	89 8d       	ldd	r24, Y+25	; 0x19
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	98 2f       	mov	r25, r24
     4a0:	88 27       	eor	r24, r24
     4a2:	28 8d       	ldd	r18, Y+24	; 0x18
     4a4:	82 2b       	or	r24, r18
     4a6:	90 96       	adiw	r26, 0x20	; 32
     4a8:	9c 93       	st	X, r25
     4aa:	8e 93       	st	-X, r24
     4ac:	5f 97       	sbiw	r26, 0x1f	; 31
     4ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4b0:	91 96       	adiw	r26, 0x21	; 33
     4b2:	8c 93       	st	X, r24
     4b4:	97 01       	movw	r18, r14
     4b6:	47 e0       	ldi	r20, 0x07	; 7
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	be 01       	movw	r22, r28
     4bc:	6e 5f       	subi	r22, 0xFE	; 254
     4be:	7f 4f       	sbci	r23, 0xFF	; 255
     4c0:	81 ee       	ldi	r24, 0xE1	; 225
     4c2:	62 de       	rcall	.-828    	; 0x188 <bme280_get_regs>
     4c4:	81 11       	cpse	r24, r1
     4c6:	36 c0       	rjmp	.+108    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     4c8:	2b 81       	ldd	r18, Y+3	; 0x03
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	32 2f       	mov	r19, r18
     4ce:	22 27       	eor	r18, r18
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	29 2b       	or	r18, r25
     4d4:	f7 01       	movw	r30, r14
     4d6:	33 a3       	std	Z+35, r19	; 0x23
     4d8:	22 a3       	std	Z+34, r18	; 0x22
     4da:	9c 81       	ldd	r25, Y+4	; 0x04
     4dc:	94 a3       	std	Z+36, r25	; 0x24
     4de:	9e 81       	ldd	r25, Y+6	; 0x06
     4e0:	2d 81       	ldd	r18, Y+5	; 0x05
     4e2:	f0 e1       	ldi	r31, 0x10	; 16
     4e4:	2f 02       	muls	r18, r31
     4e6:	90 01       	movw	r18, r0
     4e8:	11 24       	eor	r1, r1
     4ea:	49 2f       	mov	r20, r25
     4ec:	4f 70       	andi	r20, 0x0F	; 15
     4ee:	24 2b       	or	r18, r20
     4f0:	d7 01       	movw	r26, r14
     4f2:	96 96       	adiw	r26, 0x26	; 38
     4f4:	3c 93       	st	X, r19
     4f6:	2e 93       	st	-X, r18
     4f8:	95 97       	sbiw	r26, 0x25	; 37
     4fa:	2f 81       	ldd	r18, Y+7	; 0x07
     4fc:	b0 e1       	ldi	r27, 0x10	; 16
     4fe:	2b 02       	muls	r18, r27
     500:	90 01       	movw	r18, r0
     502:	11 24       	eor	r1, r1
     504:	92 95       	swap	r25
     506:	9f 70       	andi	r25, 0x0F	; 15
     508:	29 2b       	or	r18, r25
     50a:	f7 01       	movw	r30, r14
     50c:	30 a7       	std	Z+40, r19	; 0x28
     50e:	27 a3       	std	Z+39, r18	; 0x27
     510:	98 85       	ldd	r25, Y+8	; 0x08
     512:	91 a7       	std	Z+41, r25	; 0x29
     514:	0f c0       	rjmp	.+30     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     516:	d7 01       	movw	r26, r14
     518:	17 96       	adiw	r26, 0x07	; 7
     51a:	ed 91       	ld	r30, X+
     51c:	fc 91       	ld	r31, X
     51e:	18 97       	sbiw	r26, 0x08	; 8
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	09 95       	icall
     52a:	11 50       	subi	r17, 0x01	; 1
     52c:	09 f0       	breq	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     52e:	23 cf       	rjmp	.-442    	; 0x376 <bme280_init+0x26>
     530:	8e ef       	ldi	r24, 0xFE	; 254
     532:	03 c0       	rjmp	.+6      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     534:	11 11       	cpse	r17, r1
     536:	01 c0       	rjmp	.+2      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     538:	8e ef       	ldi	r24, 0xFE	; 254
     53a:	6b 96       	adiw	r28, 0x1b	; 27
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	08 95       	ret

00000552 <user_delay_ms>:

	return rslt;
}

void user_delay_ms(uint32_t period)
{
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	8b 01       	movw	r16, r22
     558:	9c 01       	movw	r18, r24
	uint16_t i;
	for (i=0; i<period; i++) {
     55a:	67 2b       	or	r22, r23
     55c:	68 2b       	or	r22, r24
     55e:	69 2b       	or	r22, r25
     560:	89 f0       	breq	.+34     	; 0x584 <user_delay_ms+0x32>
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     566:	e7 e8       	ldi	r30, 0x87	; 135
     568:	f3 e1       	ldi	r31, 0x13	; 19
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <user_delay_ms+0x18>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <user_delay_ms+0x1e>
     570:	00 00       	nop
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	ac 01       	movw	r20, r24
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	40 17       	cp	r20, r16
     57c:	51 07       	cpc	r21, r17
     57e:	62 07       	cpc	r22, r18
     580:	73 07       	cpc	r23, r19
     582:	88 f3       	brcs	.-30     	; 0x566 <user_delay_ms+0x14>
		_delay_ms(1);
	}
}
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	08 95       	ret

0000058a <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
     58a:	d9 01       	movw	r26, r18
	int8_t rslt = 0;
	int8_t i;

	// Write device address
	BMEmessageBuf[0] = dev_id << 1; // BME280 device ID is 0x76 if SDO is connected to ground and 0x77 if SDO is connected to VDDIO
     58c:	ed ec       	ldi	r30, 0xCD	; 205
     58e:	f4 e0       	ldi	r31, 0x04	; 4
     590:	88 0f       	add	r24, r24
     592:	80 83       	st	Z, r24
	
	// Write register address
	BMEmessageBuf[1] = reg_addr;
     594:	61 83       	std	Z+1, r22	; 0x01
	
	// Write reg_data
	if (len>0) {
     596:	10 97       	sbiw	r26, 0x00	; 0
     598:	b1 f0       	breq	.+44     	; 0x5c6 <user_i2c_write+0x3c>
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
		for(i = 0; i < len; i++)
		{
			BMEmessageBuf[i + 2] = reg_data[i];
     5a0:	fa 01       	movw	r30, r20
     5a2:	e8 0f       	add	r30, r24
     5a4:	f9 1f       	adc	r31, r25
     5a6:	80 81       	ld	r24, Z
     5a8:	e3 2f       	mov	r30, r19
     5aa:	03 2e       	mov	r0, r19
     5ac:	00 0c       	add	r0, r0
     5ae:	ff 0b       	sbc	r31, r31
     5b0:	e3 53       	subi	r30, 0x33	; 51
     5b2:	fb 4f       	sbci	r31, 0xFB	; 251
     5b4:	82 83       	std	Z+2, r24	; 0x02
     5b6:	3f 5f       	subi	r19, 0xFF	; 255
	// Write register address
	BMEmessageBuf[1] = reg_addr;
	
	// Write reg_data
	if (len>0) {
		for(i = 0; i < len; i++)
     5b8:	83 2f       	mov	r24, r19
     5ba:	03 2e       	mov	r0, r19
     5bc:	00 0c       	add	r0, r0
     5be:	99 0b       	sbc	r25, r25
     5c0:	8a 17       	cp	r24, r26
     5c2:	9b 07       	cpc	r25, r27
     5c4:	68 f3       	brcs	.-38     	; 0x5a0 <user_i2c_write+0x16>
			BMEmessageBuf[i + 2] = reg_data[i];
		}	
	}
	
	// Write to the TWI interface
	TWI_Start_Transceiver_With_Data(&BMEmessageBuf[0], len + 2);
     5c6:	62 e0       	ldi	r22, 0x02	; 2
     5c8:	6a 0f       	add	r22, r26
     5ca:	8d ec       	ldi	r24, 0xCD	; 205
     5cc:	94 e0       	ldi	r25, 0x04	; 4
     5ce:	cc d0       	rcall	.+408    	; 0x768 <TWI_Start_Transceiver_With_Data>
	
	// Let the transfer complete
	while(TWI_Transceiver_Busy())
     5d0:	c7 d0       	rcall	.+398    	; 0x760 <TWI_Transceiver_Busy>
     5d2:	81 11       	cpse	r24, r1
     5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <user_i2c_write+0x46>
	}
	
	// If something bad has happened, rslt = 1
	
	return rslt;
}
     5d6:	08 95       	ret

000005d8 <user_i2c_read>:

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	18 2f       	mov	r17, r24
     5e0:	e9 01       	movw	r28, r18

	int8_t rslt = 0;
	int8_t i = 0;
	
	// Write device address (for writing)
	BMEmessageBuf[0] = dev_id << 1; // Device ID is 0x76 if SDO is connected to ground and 0x77 if SDO is connected to VDDIO
     5e2:	ed ec       	ldi	r30, 0xCD	; 205
     5e4:	f4 e0       	ldi	r31, 0x04	; 4
     5e6:	88 0f       	add	r24, r24
     5e8:	80 83       	st	Z, r24
	
	// Write the register address from which we want to start reading 
	BMEmessageBuf[1] = reg_addr;
     5ea:	61 83       	std	Z+1, r22	; 0x01
	
	// Send the ID and register data out onto the TWI bus...
	TWI_Start_Transceiver_With_Data(&BMEmessageBuf[0], 2); // Send register address
     5ec:	62 e0       	ldi	r22, 0x02	; 2
     5ee:	cf 01       	movw	r24, r30
     5f0:	bb d0       	rcall	.+374    	; 0x768 <TWI_Start_Transceiver_With_Data>
	
	// And wait for the transaction to complete...
	while(TWI_Transceiver_Busy())
     5f2:	b6 d0       	rcall	.+364    	; 0x760 <TWI_Transceiver_Busy>
     5f4:	81 11       	cpse	r24, r1
     5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <user_i2c_read+0x1a>
	{
		// Wait
	}
	
	// Now go tell the device to send the data (set the read bit)... 
	BMEmessageBuf[0] = (dev_id << 1) | 1; // Now we want to do the read
     5f8:	11 0f       	add	r17, r17
     5fa:	11 60       	ori	r17, 0x01	; 1
     5fc:	10 93 cd 04 	sts	0x04CD, r17	; 0x8004cd <BMEmessageBuf>
	
	TWI_Start_Transceiver_With_Data(&BMEmessageBuf[0], 1); 
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	8d ec       	ldi	r24, 0xCD	; 205
     604:	94 e0       	ldi	r25, 0x04	; 4
     606:	b0 d0       	rcall	.+352    	; 0x768 <TWI_Start_Transceiver_With_Data>
	
	// And wait for the transaction to complete...
	while(TWI_Transceiver_Busy())
     608:	ab d0       	rcall	.+342    	; 0x760 <TWI_Transceiver_Busy>
     60a:	81 11       	cpse	r24, r1
     60c:	fd cf       	rjmp	.-6      	; 0x608 <user_i2c_read+0x30>
	{
		// Wait
	}
	
	// Data is received, now go get it from the AVR TWI data structure...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(&BMEmessageBuf[0], len);
     60e:	6c 2f       	mov	r22, r28
     610:	8d ec       	ldi	r24, 0xCD	; 205
     612:	94 e0       	ldi	r25, 0x04	; 4
     614:	d5 d0       	rcall	.+426    	; 0x7c0 <TWI_Get_Data_From_Transceiver>
     616:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <TWI_XFER_STATUS>
	 
	// The data is now in our own BMEmessageBuf.  IF WE NEED TO, copy it to another variable 
	// before it gets overwritten by another exchange...
	for (i = 0; i < len; i++)
     61a:	20 97       	sbiw	r28, 0x00	; 0
     61c:	a9 f0       	breq	.+42     	; 0x648 <user_i2c_read+0x70>
     61e:	30 e0       	ldi	r19, 0x00	; 0
	{
		 BME_data[i] = BMEmessageBuf[i];
     620:	83 2f       	mov	r24, r19
     622:	03 2e       	mov	r0, r19
     624:	00 0c       	add	r0, r0
     626:	99 0b       	sbc	r25, r25
     628:	fc 01       	movw	r30, r24
     62a:	e3 5b       	subi	r30, 0xB3	; 179
     62c:	fa 4f       	sbci	r31, 0xFA	; 250
     62e:	dc 01       	movw	r26, r24
     630:	a3 53       	subi	r26, 0x33	; 51
     632:	bb 4f       	sbci	r27, 0xFB	; 251
     634:	8c 91       	ld	r24, X
     636:	80 83       	st	Z, r24
     638:	3f 5f       	subi	r19, 0xFF	; 255
	// Data is received, now go get it from the AVR TWI data structure...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(&BMEmessageBuf[0], len);
	 
	// The data is now in our own BMEmessageBuf.  IF WE NEED TO, copy it to another variable 
	// before it gets overwritten by another exchange...
	for (i = 0; i < len; i++)
     63a:	83 2f       	mov	r24, r19
     63c:	03 2e       	mov	r0, r19
     63e:	00 0c       	add	r0, r0
     640:	99 0b       	sbc	r25, r25
     642:	8c 17       	cp	r24, r28
     644:	9d 07       	cpc	r25, r29
     646:	60 f3       	brcs	.-40     	; 0x620 <user_i2c_read+0x48>
	}
	
	// If something bad has happened, rslt = 1
	
	return rslt;
}
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	08 95       	ret

00000652 <canary_io_pin_initialization>:
	}
}

void canary_io_pin_initialization(void) {
	// For Canary, Port B pins 0, 1, and 2 are the red, green, and blue LED feedback pins
	DDRB  = 0x07;
     652:	87 e0       	ldi	r24, 0x07	; 7
     654:	84 b9       	out	0x04, r24	; 4
	//
	// Set all LEDs off
	PORTB &= !0x07;
     656:	85 b1       	in	r24, 0x05	; 5
     658:	15 b8       	out	0x05, r1	; 5
	// The Canary start button is on Port B pin 3.  Set the pull-up resistor for pin 3:
	SetBit(PORTB, PORTB3);
     65a:	2b 9a       	sbi	0x05, 3	; 5
	//
	// Set the Data Direction Register and pullups for the TWI system
	SetBit(DDRC, PORTC0); // Set clock as output
     65c:	38 9a       	sbi	0x07, 0	; 7
	SetBit(DDRC, PORTC1); // Data Line as output
     65e:	39 9a       	sbi	0x07, 1	; 7
	SetBit(PORTC, PORTC0); //Set pull-up resistor for clock
     660:	40 9a       	sbi	0x08, 0	; 8
	SetBit(PORTC, PORTC1); //Set pull-up resistor for data
     662:	41 9a       	sbi	0x08, 1	; 8
     664:	08 95       	ret

00000666 <bme280_structure_and_device_init>:
/********************************************************************************
						Functions
********************************************************************************/

void bme280_structure_and_device_init(void) {
	dev.dev_id = BME280_I2C_ADDR_PRIM;
     666:	ed ec       	ldi	r30, 0xCD	; 205
     668:	f5 e0       	ldi	r31, 0x05	; 5
     66a:	86 e7       	ldi	r24, 0x76	; 118
     66c:	81 83       	std	Z+1, r24	; 0x01
	dev.intf = BME280_I2C_INTF;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	82 83       	std	Z+2, r24	; 0x02
	dev.read = user_i2c_read;
     672:	8c ee       	ldi	r24, 0xEC	; 236
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	94 83       	std	Z+4, r25	; 0x04
     678:	83 83       	std	Z+3, r24	; 0x03
	dev.write = user_i2c_write;
     67a:	85 ec       	ldi	r24, 0xC5	; 197
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	96 83       	std	Z+6, r25	; 0x06
     680:	85 83       	std	Z+5, r24	; 0x05
	dev.delay_ms = user_delay_ms;
     682:	89 ea       	ldi	r24, 0xA9	; 169
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	90 87       	std	Z+8, r25	; 0x08
     688:	87 83       	std	Z+7, r24	; 0x07
	// Call the HW initialization routine
	rslt = bme280_init(&dev);
     68a:	cf 01       	movw	r24, r30
     68c:	61 de       	rcall	.-830    	; 0x350 <bme280_init>
     68e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
     692:	08 95       	ret

00000694 <main>:
	// *************************************************************************
	//        Initialization code & device configuration
	// *************************************************************************
 	//
	// Set the I/O pins
	canary_io_pin_initialization();
     694:	de df       	rcall	.-68     	; 0x652 <canary_io_pin_initialization>
	//
	// Set a simple counter for the loop below.  Debug only.
	seconds=0;
     696:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <seconds+0x1>
     69a:	10 92 02 06 	sts	0x0602, r1	; 0x800602 <seconds>
	ItsTime=0;
     69e:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <ItsTime>
	//
	// set up our output for handling printf and string operations,,,
	stdout = &mystdout;
     6a2:	8a e2       	ldi	r24, 0x2A	; 42
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	90 93 07 06 	sts	0x0607, r25	; 0x800607 <__iob+0x3>
     6aa:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__iob+0x2>
	//
	// Initialize the timer counter 1 for 1Hz interrupt
	initialize_timer_counter_1();
     6ae:	2b d0       	rcall	.+86     	; 0x706 <initialize_timer_counter_1>
	//
	// Initialize timer counter 0 for 100Hz interrupt (used for SD card debug only)
	// initialize_timer_counter_0();  // ONLY ENABLE if using SD card
	//
	// Initialize our main communication to the ground (UART0)
	USART0_init(MYUBRR0);
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	24 d1       	rcall	.+584    	; 0x8fe <USART0_init>
	//
	// Initialize the TWI peripheral
	TWI_Master_Initialise();
     6b6:	4a d0       	rcall	.+148    	; 0x74c <TWI_Master_Initialise>
	//
 	// initialize the gas sensors
	//gas_sensors_init();
	// 
	// Start all interrupts
	sei();
     6b8:	78 94       	sei
	//
	// Create an instance of bme280_dev to initialize the BME280
	// Initialize the pressure / temperature /  humidity sensor
	bme280_structure_and_device_init();
     6ba:	d5 df       	rcall	.-86     	; 0x666 <bme280_structure_and_device_init>
	// Wait here for the start/standby button to be selected.. (PORTB pin 3).
	// Now call the routines to "kick off" the sensor measurements
	
	// ===================================================
	// The next few lines are for debugging the (working at one time) UART0 routines...remove these lines once it is working again.
	USART0_putstring(String);
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	5b d1       	rcall	.+694    	; 0x978 <USART0_putstring>
	// Send another text message via our std out using printf
	printf("Hi, again, world.\n");
     6c2:	89 e3       	ldi	r24, 0x39	; 57
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	27 d2       	rcall	.+1102   	; 0xb16 <puts>
		// reached steady state...do nothing for the moment - wait for interrupts.
		// The variable ItsTime gets set to 1 every second...
		if (ItsTime == 1){ //wait for our 1Hz flag
			ItsTime = 0; 
			seconds++;
			printf("\nSeconds = %u", seconds);
     6c8:	cb e4       	ldi	r28, 0x4B	; 75
     6ca:	d1 e0       	ldi	r29, 0x01	; 1
		// USART0_TransmitByte(USART0_ReceiveByte());
		//////////////////////////////////////////////////////////////
		//
		// reached steady state...do nothing for the moment - wait for interrupts.
		// The variable ItsTime gets set to 1 every second...
		if (ItsTime == 1){ //wait for our 1Hz flag
     6cc:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <ItsTime>
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <main+0x38>
			ItsTime = 0; 
     6d4:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <ItsTime>
			seconds++;
     6d8:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <seconds>
     6dc:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <seconds+0x1>
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <seconds+0x1>
     6e6:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <seconds>
			printf("\nSeconds = %u", seconds);
     6ea:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <seconds>
     6ee:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <seconds+0x1>
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	fa d1       	rcall	.+1012   	; 0xaf0 <printf>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	e3 cf       	rjmp	.-58     	; 0x6cc <main+0x38>

00000706 <initialize_timer_counter_1>:
	Not using any of the other compare features, so all other CR bits are 0
	Finally, we have to enable the interrupt vector on compare register A
	TCCR1A = 0; Control Register A is reset to 0x00 on startup. */
	//  
	// Set the WGM mode and prescaler select in control register B
	TCCR1B = ((1<<WGM12) | (1<<CS12) | (1<<CS10));
     706:	8d e0       	ldi	r24, 0x0D	; 13
     708:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// TCCR1C = 0; Control Register C is reset to 0x00 on startup.
	// Now we need to enter out TOP value in OCR1A
	OCR1A = 19530;
     70c:	8a e4       	ldi	r24, 0x4A	; 74
     70e:	9c e4       	ldi	r25, 0x4C	; 76
     710:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     714:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// Now enable the interrupt on the compare register A
	TIMSK1 = (1<<OCIE1A);
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     71e:	08 95       	ret

00000720 <__vector_16>:
*********************************************************************************
********************************************************************************/


// 100Hz timer interrupt generated by OC0A and used by the FATFS code.
EMPTY_INTERRUPT(TIMER0_COMPA_vect);
     720:	18 95       	reti

00000722 <__vector_13>:
}
*/


ISR(TIMER1_COMPA_vect)
{
     722:	1f 92       	push	r1
     724:	0f 92       	push	r0
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	0f 92       	push	r0
     72a:	11 24       	eor	r1, r1
     72c:	8f 93       	push	r24
     72e:	9f 93       	push	r25
	ToggleBit(PORTB, PORTB1); //for now, just toggle the green status LED
     730:	95 b1       	in	r25, 0x05	; 5
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	89 27       	eor	r24, r25
     736:	85 b9       	out	0x05, r24	; 5
	ItsTime = 1;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <ItsTime>
}
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	0f 90       	pop	r0
     744:	0f be       	out	0x3f, r0	; 63
     746:	0f 90       	pop	r0
     748:	1f 90       	pop	r1
     74a:	18 95       	reti

0000074c <TWI_Master_Initialise>:
void TWI_Start_Transceiver( void )
{
  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
  TWI_statusReg.all = 0;      
  TWI_state         = TWI_NO_STATE ;
  TWCR = (1<<TWEN)|                             // TWI Interface enabled.
     74c:	81 e1       	ldi	r24, 0x11	; 17
     74e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     758:	84 e0       	ldi	r24, 0x04	; 4
     75a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     75e:	08 95       	ret

00000760 <TWI_Transceiver_Busy>:
     760:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     764:	81 78       	andi	r24, 0x81	; 129
     766:	08 95       	ret

00000768 <TWI_Start_Transceiver_With_Data>:
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
     76e:	ec eb       	ldi	r30, 0xBC	; 188
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	90 81       	ld	r25, Z
     774:	91 78       	andi	r25, 0x81	; 129
     776:	e9 f7       	brne	.-6      	; 0x772 <TWI_Start_Transceiver_With_Data+0xa>
     778:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <TWI_msgSize>
     77c:	88 81       	ld	r24, Y
     77e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <TWI_buf>
     782:	80 fd       	sbrc	r24, 0
     784:	12 c0       	rjmp	.+36     	; 0x7aa <TWI_Start_Transceiver_With_Data+0x42>
     786:	62 30       	cpi	r22, 0x02	; 2
     788:	80 f0       	brcs	.+32     	; 0x7aa <TWI_Start_Transceiver_With_Data+0x42>
     78a:	fe 01       	movw	r30, r28
     78c:	31 96       	adiw	r30, 0x01	; 1
     78e:	af e5       	ldi	r26, 0x5F	; 95
     790:	b1 e0       	ldi	r27, 0x01	; 1
     792:	62 50       	subi	r22, 0x02	; 2
     794:	26 2f       	mov	r18, r22
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	2e 5f       	subi	r18, 0xFE	; 254
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	2c 0f       	add	r18, r28
     79e:	3d 1f       	adc	r19, r29
     7a0:	91 91       	ld	r25, Z+
     7a2:	9d 93       	st	X+, r25
     7a4:	e2 17       	cp	r30, r18
     7a6:	f3 07       	cpc	r31, r19
     7a8:	d9 f7       	brne	.-10     	; 0x7a0 <TWI_Start_Transceiver_With_Data+0x38>
     7aa:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <TWI_statusReg>
     7ae:	88 ef       	ldi	r24, 0xF8	; 248
     7b0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <TWI_state>
     7b4:	85 ea       	ldi	r24, 0xA5	; 165
     7b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <TWI_Get_Data_From_Transceiver>:
requested (including the address field) in the function call. The function will hold execution (loop)
until the TWI_ISR has completed with the previous operation, before reading out the data and returning.
If there was an error in the previous transmission the function will return the TWI error code.
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
     7c0:	ac 01       	movw	r20, r24
/****************************************************************************
Call this function to test if the TWI_ISR is busy transmitting.
****************************************************************************/
unsigned char TWI_Transceiver_Busy( void )
{
  return ( TWCR & ((1<<TWIE)|(1<<TWINT)));                  // IF TWI Interrupt is enabled then the Transceiver is busy
     7c2:	ec eb       	ldi	r30, 0xBC	; 188
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	90 81       	ld	r25, Z
     7c8:	91 78       	andi	r25, 0x81	; 129
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
  unsigned char i;

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
     7ca:	e9 f7       	brne	.-6      	; 0x7c6 <TWI_Get_Data_From_Transceiver+0x6>

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
     7cc:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <TWI_statusReg>
     7d0:	80 ff       	sbrs	r24, 0
     7d2:	11 c0       	rjmp	.+34     	; 0x7f6 <TWI_Get_Data_From_Transceiver+0x36>
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
     7d4:	66 23       	and	r22, r22
     7d6:	79 f0       	breq	.+30     	; 0x7f6 <TWI_Get_Data_From_Transceiver+0x36>
     7d8:	ae e5       	ldi	r26, 0x5E	; 94
     7da:	b1 e0       	ldi	r27, 0x01	; 1
     7dc:	fa 01       	movw	r30, r20
     7de:	61 50       	subi	r22, 0x01	; 1
     7e0:	26 2f       	mov	r18, r22
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	2f 5f       	subi	r18, 0xFF	; 255
     7e6:	3f 4f       	sbci	r19, 0xFF	; 255
     7e8:	24 0f       	add	r18, r20
     7ea:	35 1f       	adc	r19, r21
    {
      msg[ i ] = TWI_buf[ i ];
     7ec:	9d 91       	ld	r25, X+
     7ee:	91 93       	st	Z+, r25

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
     7f0:	e2 17       	cp	r30, r18
     7f2:	f3 07       	cpc	r31, r19
     7f4:	d9 f7       	brne	.-10     	; 0x7ec <TWI_Get_Data_From_Transceiver+0x2c>
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
     7f6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <TWI_statusReg>
}
     7fa:	81 70       	andi	r24, 0x01	; 1
     7fc:	08 95       	ret

000007fe <__vector_26>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     7fe:	1f 92       	push	r1
     800:	0f 92       	push	r0
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	0f 92       	push	r0
     806:	11 24       	eor	r1, r1
     808:	2f 93       	push	r18
     80a:	3f 93       	push	r19
     80c:	8f 93       	push	r24
     80e:	9f 93       	push	r25
     810:	af 93       	push	r26
     812:	bf 93       	push	r27
     814:	ef 93       	push	r30
     816:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
     818:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     81c:	8e 2f       	mov	r24, r30
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	fc 01       	movw	r30, r24
     822:	38 97       	sbiw	r30, 0x08	; 8
     824:	e1 35       	cpi	r30, 0x51	; 81
     826:	f1 05       	cpc	r31, r1
     828:	08 f0       	brcs	.+2      	; 0x82c <__vector_26+0x2e>
     82a:	55 c0       	rjmp	.+170    	; 0x8d6 <__vector_26+0xd8>
     82c:	e2 5c       	subi	r30, 0xC2	; 194
     82e:	ff 4f       	sbci	r31, 0xFF	; 255
     830:	22 c1       	rjmp	.+580    	; 0xa76 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     832:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <TWI_bufPtr.1555>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
     836:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI_bufPtr.1555>
     83a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <TWI_msgSize>
     83e:	e8 17       	cp	r30, r24
     840:	70 f4       	brcc	.+28     	; 0x85e <__vector_26+0x60>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	8e 0f       	add	r24, r30
     846:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <TWI_bufPtr.1555>
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	e2 5a       	subi	r30, 0xA2	; 162
     84e:	fe 4f       	sbci	r31, 0xFE	; 254
     850:	80 81       	ld	r24, Z
     852:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     856:	85 e8       	ldi	r24, 0x85	; 133
     858:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     85c:	43 c0       	rjmp	.+134    	; 0x8e4 <__vector_26+0xe6>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     85e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <TWI_statusReg>
     862:	81 60       	ori	r24, 0x01	; 1
     864:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     868:	84 e9       	ldi	r24, 0x94	; 148
     86a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     86e:	3a c0       	rjmp	.+116    	; 0x8e4 <__vector_26+0xe6>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
     870:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI_bufPtr.1555>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	8e 0f       	add	r24, r30
     878:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <TWI_bufPtr.1555>
     87c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	e2 5a       	subi	r30, 0xA2	; 162
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     888:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <TWI_bufPtr.1555>
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <TWI_msgSize>
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	28 17       	cp	r18, r24
     898:	39 07       	cpc	r19, r25
     89a:	24 f4       	brge	.+8      	; 0x8a4 <__vector_26+0xa6>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     89c:	85 ec       	ldi	r24, 0xC5	; 197
     89e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     8a2:	20 c0       	rjmp	.+64     	; 0x8e4 <__vector_26+0xe6>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     8a4:	85 e8       	ldi	r24, 0x85	; 133
     8a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     8aa:	1c c0       	rjmp	.+56     	; 0x8e4 <__vector_26+0xe6>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
     8ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     8b0:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI_bufPtr.1555>
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	e2 5a       	subi	r30, 0xA2	; 162
     8b8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ba:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     8bc:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <TWI_statusReg>
     8c0:	81 60       	ori	r24, 0x01	; 1
     8c2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     8c6:	84 e9       	ldi	r24, 0x94	; 148
     8c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
     8cc:	0b c0       	rjmp	.+22     	; 0x8e4 <__vector_26+0xe6>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     8ce:	85 ea       	ldi	r24, 0xA5	; 165
     8d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
     8d4:	07 c0       	rjmp	.+14     	; 0x8e4 <__vector_26+0xe6>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     8d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     8da:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <TWI_state>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <USART0_init>:
	tmptail = (UART0_RxTail + 1) & UART0_RX_BUFFER_MASK;
	// Store new index 
	UART0_RxTail = tmptail;
	// Return data 
	return UART0_RxBuf[tmptail];
}
     8fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     902:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     906:	88 e9       	ldi	r24, 0x98	; 152
     908:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     90c:	8e e0       	ldi	r24, 0x0E	; 14
     90e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     912:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <UART0_RxTail>
     916:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <UART0_RxHead>
     91a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <UART0_TxTail>
     91e:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <UART0_TxHead>
     922:	08 95       	ret

00000924 <USART0_TransmitByte>:

void USART0_TransmitByte(unsigned char data)
{
	unsigned char tmphead;
	// Calculate buffer index
	tmphead = (UART0_TxHead + 1) & UART0_TX_BUFFER_MASK;
     924:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <UART0_TxHead>
     928:	2f 5f       	subi	r18, 0xFF	; 255
	// Wait for free space in buffer
	while (tmphead == UART0_TxTail);
     92a:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <UART0_TxTail>
     92e:	29 17       	cp	r18, r25
     930:	e1 f3       	breq	.-8      	; 0x92a <USART0_TransmitByte+0x6>
	// Store data in buffer 
	UART0_TxBuf[tmphead] = data;
     932:	e2 2f       	mov	r30, r18
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	e0 59       	subi	r30, 0x90	; 144
     938:	fe 4f       	sbci	r31, 0xFE	; 254
     93a:	80 83       	st	Z, r24
	// Store new index 
	UART0_TxHead = tmphead;
     93c:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <UART0_TxHead>
	// Enable UDRE interrupt 
	UCSR0B |= (1<<UDRIE0);
     940:	e1 ec       	ldi	r30, 0xC1	; 193
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	80 62       	ori	r24, 0x20	; 32
     948:	80 83       	st	Z, r24
     94a:	08 95       	ret

0000094c <USART0_Transmit_IO>:
//This version is used to send formatted strings...
int USART0_Transmit_IO(char data, FILE *stream)
{
	unsigned char tmphead;
	// Calculate buffer index
	tmphead = (UART0_TxHead + 1) & UART0_TX_BUFFER_MASK;
     94c:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <UART0_TxHead>
     950:	2f 5f       	subi	r18, 0xFF	; 255
	// Wait for free space in buffer
	while (tmphead == UART0_TxTail);
     952:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <UART0_TxTail>
     956:	29 17       	cp	r18, r25
     958:	e1 f3       	breq	.-8      	; 0x952 <USART0_Transmit_IO+0x6>
	// Store data in buffer
	UART0_TxBuf[tmphead] = data;
     95a:	e2 2f       	mov	r30, r18
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	e0 59       	subi	r30, 0x90	; 144
     960:	fe 4f       	sbci	r31, 0xFE	; 254
     962:	80 83       	st	Z, r24
	// Store new index
	UART0_TxHead = tmphead;
     964:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <UART0_TxHead>
	// Enable UDRE interrupt
	UCSR0B |= (1<<UDRIE0);
     968:	e1 ec       	ldi	r30, 0xC1	; 193
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	80 62       	ori	r24, 0x20	; 32
     970:	80 83       	st	Z, r24
	return(0);
}
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	08 95       	ret

00000978 <USART0_putstring>:

// This put string function stops when it reaches the end of a string, which is
// always a null character (0x00) in c.
void USART0_putstring(char* StringPtr) {
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00) {
     97e:	88 81       	ld	r24, Y
     980:	88 23       	and	r24, r24
     982:	29 f0       	breq	.+10     	; 0x98e <USART0_putstring+0x16>
     984:	21 96       	adiw	r28, 0x01	; 1
		USART0_TransmitByte(*StringPtr);
     986:	ce df       	rcall	.-100    	; 0x924 <USART0_TransmitByte>
}

// This put string function stops when it reaches the end of a string, which is
// always a null character (0x00) in c.
void USART0_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
     988:	89 91       	ld	r24, Y+
     98a:	81 11       	cpse	r24, r1
     98c:	fc cf       	rjmp	.-8      	; 0x986 <USART0_putstring+0xe>
		USART0_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <__vector_21>:
	// Store received data in buffer 
	UART0_RxBuf[tmphead] = data;
}*/

ISR(USART0_UDRE_vect)
{
     994:	1f 92       	push	r1
     996:	0f 92       	push	r0
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	0f 92       	push	r0
     99c:	11 24       	eor	r1, r1
     99e:	8f 93       	push	r24
     9a0:	9f 93       	push	r25
     9a2:	ef 93       	push	r30
     9a4:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted 
	if (UART0_TxHead != UART0_TxTail) {
     9a6:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <UART0_TxHead>
     9aa:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <UART0_TxTail>
     9ae:	98 17       	cp	r25, r24
     9b0:	61 f0       	breq	.+24     	; 0x9ca <__vector_21+0x36>
		// Calculate buffer index
		tmptail = ( UART0_TxTail + 1 ) & UART0_TX_BUFFER_MASK;
     9b2:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <UART0_TxTail>
     9b6:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index 
		UART0_TxTail = tmptail;
     9b8:	e0 93 6e 01 	sts	0x016E, r30	; 0x80016e <UART0_TxTail>
		// Start transmission 
		UDR0 = UART0_TxBuf[tmptail];
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	e0 59       	subi	r30, 0x90	; 144
     9c0:	fe 4f       	sbci	r31, 0xFE	; 254
     9c2:	80 81       	ld	r24, Z
     9c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__vector_21+0x40>
		} else {
		// Disable UDRE interrupt 
		UCSR0B &= ~(1<<UDRIE0);
     9ca:	e1 ec       	ldi	r30, 0xC1	; 193
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	8f 7d       	andi	r24, 0xDF	; 223
     9d2:	80 83       	st	Z, r24
	}
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	9f 91       	pop	r25
     9da:	8f 91       	pop	r24
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	1f 90       	pop	r1
     9e4:	18 95       	reti

000009e6 <__vector_28>:
*********************************************************************************
********************************************************************************/


ISR(USART1_RX_vect)
{
     9e6:	1f 92       	push	r1
     9e8:	0f 92       	push	r0
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	0f 92       	push	r0
     9ee:	11 24       	eor	r1, r1
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
	unsigned char data;
	unsigned char tmphead;
	
	// Read the received data 
	data = UDR1;
     9f8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	// Calculate buffer index 
	tmphead = (UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
     9fc:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <UART1_RxHead>
     a00:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index 
	UART1_RxHead = tmphead;
     a02:	e0 93 75 03 	sts	0x0375, r30	; 0x800375 <UART1_RxHead>

	if (tmphead == UART1_RxTail) {
     a06:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <UART1_RxTail>
		// ERROR! Receive buffer overflow 
	}
	// Store received data in buffer 
	UART1_RxBuf[tmphead] = data;
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	ea 58       	subi	r30, 0x8A	; 138
     a0e:	fc 4f       	sbci	r31, 0xFC	; 252
     a10:	80 83       	st	Z, r24
}
     a12:	ff 91       	pop	r31
     a14:	ef 91       	pop	r30
     a16:	9f 91       	pop	r25
     a18:	8f 91       	pop	r24
     a1a:	0f 90       	pop	r0
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	0f 90       	pop	r0
     a20:	1f 90       	pop	r1
     a22:	18 95       	reti

00000a24 <__vector_29>:

ISR(USART1_UDRE_vect)
{
     a24:	1f 92       	push	r1
     a26:	0f 92       	push	r0
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	0f 92       	push	r0
     a2c:	11 24       	eor	r1, r1
     a2e:	8f 93       	push	r24
     a30:	9f 93       	push	r25
     a32:	ef 93       	push	r30
     a34:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted 
	if (UART1_TxHead != UART1_TxTail) {
     a36:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <UART1_TxHead>
     a3a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <UART1_TxTail>
     a3e:	98 17       	cp	r25, r24
     a40:	61 f0       	breq	.+24     	; 0xa5a <__vector_29+0x36>
		// Calculate buffer index
		tmptail = ( UART1_TxTail + 1 ) & UART1_TX_BUFFER_MASK;
     a42:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <UART1_TxTail>
     a46:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index 
		UART1_TxTail = tmptail;
     a48:	e0 93 72 02 	sts	0x0272, r30	; 0x800272 <UART1_TxTail>
		// Start transmission 
		UDR1 = UART1_TxBuf[tmptail];
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	ec 58       	subi	r30, 0x8C	; 140
     a50:	fd 4f       	sbci	r31, 0xFD	; 253
     a52:	80 81       	ld	r24, Z
     a54:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     a58:	05 c0       	rjmp	.+10     	; 0xa64 <__vector_29+0x40>
		} else {
		// Disable UDRE interrupt 
		UCSR1B &= ~(1<<UDRIE1);
     a5a:	e9 ec       	ldi	r30, 0xC9	; 201
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	8f 7d       	andi	r24, 0xDF	; 223
     a62:	80 83       	st	Z, r24
	}
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	1f 90       	pop	r1
     a74:	18 95       	reti

00000a76 <__tablejump2__>:
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	05 90       	lpm	r0, Z+
     a7c:	f4 91       	lpm	r31, Z
     a7e:	e0 2d       	mov	r30, r0
     a80:	09 94       	ijmp

00000a82 <__prologue_saves__>:
     a82:	2f 92       	push	r2
     a84:	3f 92       	push	r3
     a86:	4f 92       	push	r4
     a88:	5f 92       	push	r5
     a8a:	6f 92       	push	r6
     a8c:	7f 92       	push	r7
     a8e:	8f 92       	push	r8
     a90:	9f 92       	push	r9
     a92:	af 92       	push	r10
     a94:	bf 92       	push	r11
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	ca 1b       	sub	r28, r26
     aac:	db 0b       	sbc	r29, r27
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	09 94       	ijmp

00000aba <__epilogue_restores__>:
     aba:	2a 88       	ldd	r2, Y+18	; 0x12
     abc:	39 88       	ldd	r3, Y+17	; 0x11
     abe:	48 88       	ldd	r4, Y+16	; 0x10
     ac0:	5f 84       	ldd	r5, Y+15	; 0x0f
     ac2:	6e 84       	ldd	r6, Y+14	; 0x0e
     ac4:	7d 84       	ldd	r7, Y+13	; 0x0d
     ac6:	8c 84       	ldd	r8, Y+12	; 0x0c
     ac8:	9b 84       	ldd	r9, Y+11	; 0x0b
     aca:	aa 84       	ldd	r10, Y+10	; 0x0a
     acc:	b9 84       	ldd	r11, Y+9	; 0x09
     ace:	c8 84       	ldd	r12, Y+8	; 0x08
     ad0:	df 80       	ldd	r13, Y+7	; 0x07
     ad2:	ee 80       	ldd	r14, Y+6	; 0x06
     ad4:	fd 80       	ldd	r15, Y+5	; 0x05
     ad6:	0c 81       	ldd	r16, Y+4	; 0x04
     ad8:	1b 81       	ldd	r17, Y+3	; 0x03
     ada:	aa 81       	ldd	r26, Y+2	; 0x02
     adc:	b9 81       	ldd	r27, Y+1	; 0x01
     ade:	ce 0f       	add	r28, r30
     ae0:	d1 1d       	adc	r29, r1
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	ed 01       	movw	r28, r26
     aee:	08 95       	ret

00000af0 <printf>:
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	ed e7       	ldi	r30, 0x7D	; 125
     af6:	f5 e0       	ldi	r31, 0x05	; 5
     af8:	d4 cf       	rjmp	.-88     	; 0xaa2 <__prologue_saves__+0x20>
     afa:	ae 01       	movw	r20, r28
     afc:	4b 5f       	subi	r20, 0xFB	; 251
     afe:	5f 4f       	sbci	r21, 0xFF	; 255
     b00:	fa 01       	movw	r30, r20
     b02:	61 91       	ld	r22, Z+
     b04:	71 91       	ld	r23, Z+
     b06:	af 01       	movw	r20, r30
     b08:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__iob+0x2>
     b0c:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <__iob+0x3>
     b10:	32 d0       	rcall	.+100    	; 0xb76 <vfprintf>
     b12:	e2 e0       	ldi	r30, 0x02	; 2
     b14:	e2 cf       	rjmp	.-60     	; 0xada <__epilogue_restores__+0x20>

00000b16 <puts>:
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	e0 91 06 06 	lds	r30, 0x0606	; 0x800606 <__iob+0x2>
     b22:	f0 91 07 06 	lds	r31, 0x0607	; 0x800607 <__iob+0x3>
     b26:	23 81       	ldd	r18, Z+3	; 0x03
     b28:	21 ff       	sbrs	r18, 1
     b2a:	1b c0       	rjmp	.+54     	; 0xb62 <puts+0x4c>
     b2c:	8c 01       	movw	r16, r24
     b2e:	d0 e0       	ldi	r29, 0x00	; 0
     b30:	c0 e0       	ldi	r28, 0x00	; 0
     b32:	f8 01       	movw	r30, r16
     b34:	81 91       	ld	r24, Z+
     b36:	8f 01       	movw	r16, r30
     b38:	60 91 06 06 	lds	r22, 0x0606	; 0x800606 <__iob+0x2>
     b3c:	70 91 07 06 	lds	r23, 0x0607	; 0x800607 <__iob+0x3>
     b40:	db 01       	movw	r26, r22
     b42:	18 96       	adiw	r26, 0x08	; 8
     b44:	ed 91       	ld	r30, X+
     b46:	fc 91       	ld	r31, X
     b48:	19 97       	sbiw	r26, 0x09	; 9
     b4a:	88 23       	and	r24, r24
     b4c:	31 f0       	breq	.+12     	; 0xb5a <puts+0x44>
     b4e:	09 95       	icall
     b50:	89 2b       	or	r24, r25
     b52:	79 f3       	breq	.-34     	; 0xb32 <puts+0x1c>
     b54:	df ef       	ldi	r29, 0xFF	; 255
     b56:	cf ef       	ldi	r28, 0xFF	; 255
     b58:	ec cf       	rjmp	.-40     	; 0xb32 <puts+0x1c>
     b5a:	8a e0       	ldi	r24, 0x0A	; 10
     b5c:	09 95       	icall
     b5e:	89 2b       	or	r24, r25
     b60:	19 f0       	breq	.+6      	; 0xb68 <puts+0x52>
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <puts+0x56>
     b68:	8d 2f       	mov	r24, r29
     b6a:	9c 2f       	mov	r25, r28
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	08 95       	ret

00000b76 <vfprintf>:
     b76:	ac e0       	ldi	r26, 0x0C	; 12
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e0 ec       	ldi	r30, 0xC0	; 192
     b7c:	f5 e0       	ldi	r31, 0x05	; 5
     b7e:	81 cf       	rjmp	.-254    	; 0xa82 <__prologue_saves__>
     b80:	7c 01       	movw	r14, r24
     b82:	6b 01       	movw	r12, r22
     b84:	8a 01       	movw	r16, r20
     b86:	fc 01       	movw	r30, r24
     b88:	17 82       	std	Z+7, r1	; 0x07
     b8a:	16 82       	std	Z+6, r1	; 0x06
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	81 ff       	sbrs	r24, 1
     b90:	b0 c1       	rjmp	.+864    	; 0xef2 <vfprintf+0x37c>
     b92:	ce 01       	movw	r24, r28
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	4c 01       	movw	r8, r24
     b98:	f7 01       	movw	r30, r14
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	f6 01       	movw	r30, r12
     b9e:	93 fd       	sbrc	r25, 3
     ba0:	85 91       	lpm	r24, Z+
     ba2:	93 ff       	sbrs	r25, 3
     ba4:	81 91       	ld	r24, Z+
     ba6:	6f 01       	movw	r12, r30
     ba8:	88 23       	and	r24, r24
     baa:	09 f4       	brne	.+2      	; 0xbae <vfprintf+0x38>
     bac:	9e c1       	rjmp	.+828    	; 0xeea <vfprintf+0x374>
     bae:	85 32       	cpi	r24, 0x25	; 37
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <vfprintf+0x4a>
     bb2:	93 fd       	sbrc	r25, 3
     bb4:	85 91       	lpm	r24, Z+
     bb6:	93 ff       	sbrs	r25, 3
     bb8:	81 91       	ld	r24, Z+
     bba:	6f 01       	movw	r12, r30
     bbc:	85 32       	cpi	r24, 0x25	; 37
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <vfprintf+0x52>
     bc0:	b7 01       	movw	r22, r14
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	b1 d1       	rcall	.+866    	; 0xf28 <fputc>
     bc6:	e8 cf       	rjmp	.-48     	; 0xb98 <vfprintf+0x22>
     bc8:	51 2c       	mov	r5, r1
     bca:	31 2c       	mov	r3, r1
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	20 32       	cpi	r18, 0x20	; 32
     bd0:	a0 f4       	brcc	.+40     	; 0xbfa <vfprintf+0x84>
     bd2:	8b 32       	cpi	r24, 0x2B	; 43
     bd4:	69 f0       	breq	.+26     	; 0xbf0 <vfprintf+0x7a>
     bd6:	30 f4       	brcc	.+12     	; 0xbe4 <vfprintf+0x6e>
     bd8:	80 32       	cpi	r24, 0x20	; 32
     bda:	59 f0       	breq	.+22     	; 0xbf2 <vfprintf+0x7c>
     bdc:	83 32       	cpi	r24, 0x23	; 35
     bde:	69 f4       	brne	.+26     	; 0xbfa <vfprintf+0x84>
     be0:	20 61       	ori	r18, 0x10	; 16
     be2:	2c c0       	rjmp	.+88     	; 0xc3c <vfprintf+0xc6>
     be4:	8d 32       	cpi	r24, 0x2D	; 45
     be6:	39 f0       	breq	.+14     	; 0xbf6 <vfprintf+0x80>
     be8:	80 33       	cpi	r24, 0x30	; 48
     bea:	39 f4       	brne	.+14     	; 0xbfa <vfprintf+0x84>
     bec:	21 60       	ori	r18, 0x01	; 1
     bee:	26 c0       	rjmp	.+76     	; 0xc3c <vfprintf+0xc6>
     bf0:	22 60       	ori	r18, 0x02	; 2
     bf2:	24 60       	ori	r18, 0x04	; 4
     bf4:	23 c0       	rjmp	.+70     	; 0xc3c <vfprintf+0xc6>
     bf6:	28 60       	ori	r18, 0x08	; 8
     bf8:	21 c0       	rjmp	.+66     	; 0xc3c <vfprintf+0xc6>
     bfa:	27 fd       	sbrc	r18, 7
     bfc:	27 c0       	rjmp	.+78     	; 0xc4c <vfprintf+0xd6>
     bfe:	30 ed       	ldi	r19, 0xD0	; 208
     c00:	38 0f       	add	r19, r24
     c02:	3a 30       	cpi	r19, 0x0A	; 10
     c04:	78 f4       	brcc	.+30     	; 0xc24 <vfprintf+0xae>
     c06:	26 ff       	sbrs	r18, 6
     c08:	06 c0       	rjmp	.+12     	; 0xc16 <vfprintf+0xa0>
     c0a:	fa e0       	ldi	r31, 0x0A	; 10
     c0c:	5f 9e       	mul	r5, r31
     c0e:	30 0d       	add	r19, r0
     c10:	11 24       	eor	r1, r1
     c12:	53 2e       	mov	r5, r19
     c14:	13 c0       	rjmp	.+38     	; 0xc3c <vfprintf+0xc6>
     c16:	8a e0       	ldi	r24, 0x0A	; 10
     c18:	38 9e       	mul	r3, r24
     c1a:	30 0d       	add	r19, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	33 2e       	mov	r3, r19
     c20:	20 62       	ori	r18, 0x20	; 32
     c22:	0c c0       	rjmp	.+24     	; 0xc3c <vfprintf+0xc6>
     c24:	8e 32       	cpi	r24, 0x2E	; 46
     c26:	21 f4       	brne	.+8      	; 0xc30 <vfprintf+0xba>
     c28:	26 fd       	sbrc	r18, 6
     c2a:	5f c1       	rjmp	.+702    	; 0xeea <vfprintf+0x374>
     c2c:	20 64       	ori	r18, 0x40	; 64
     c2e:	06 c0       	rjmp	.+12     	; 0xc3c <vfprintf+0xc6>
     c30:	8c 36       	cpi	r24, 0x6C	; 108
     c32:	11 f4       	brne	.+4      	; 0xc38 <vfprintf+0xc2>
     c34:	20 68       	ori	r18, 0x80	; 128
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <vfprintf+0xc6>
     c38:	88 36       	cpi	r24, 0x68	; 104
     c3a:	41 f4       	brne	.+16     	; 0xc4c <vfprintf+0xd6>
     c3c:	f6 01       	movw	r30, r12
     c3e:	93 fd       	sbrc	r25, 3
     c40:	85 91       	lpm	r24, Z+
     c42:	93 ff       	sbrs	r25, 3
     c44:	81 91       	ld	r24, Z+
     c46:	6f 01       	movw	r12, r30
     c48:	81 11       	cpse	r24, r1
     c4a:	c1 cf       	rjmp	.-126    	; 0xbce <vfprintf+0x58>
     c4c:	98 2f       	mov	r25, r24
     c4e:	9f 7d       	andi	r25, 0xDF	; 223
     c50:	95 54       	subi	r25, 0x45	; 69
     c52:	93 30       	cpi	r25, 0x03	; 3
     c54:	28 f4       	brcc	.+10     	; 0xc60 <vfprintf+0xea>
     c56:	0c 5f       	subi	r16, 0xFC	; 252
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
     c5a:	ff e3       	ldi	r31, 0x3F	; 63
     c5c:	f9 83       	std	Y+1, r31	; 0x01
     c5e:	0d c0       	rjmp	.+26     	; 0xc7a <vfprintf+0x104>
     c60:	83 36       	cpi	r24, 0x63	; 99
     c62:	31 f0       	breq	.+12     	; 0xc70 <vfprintf+0xfa>
     c64:	83 37       	cpi	r24, 0x73	; 115
     c66:	71 f0       	breq	.+28     	; 0xc84 <vfprintf+0x10e>
     c68:	83 35       	cpi	r24, 0x53	; 83
     c6a:	09 f0       	breq	.+2      	; 0xc6e <vfprintf+0xf8>
     c6c:	57 c0       	rjmp	.+174    	; 0xd1c <vfprintf+0x1a6>
     c6e:	21 c0       	rjmp	.+66     	; 0xcb2 <vfprintf+0x13c>
     c70:	f8 01       	movw	r30, r16
     c72:	80 81       	ld	r24, Z
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	0e 5f       	subi	r16, 0xFE	; 254
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	44 24       	eor	r4, r4
     c7c:	43 94       	inc	r4
     c7e:	51 2c       	mov	r5, r1
     c80:	54 01       	movw	r10, r8
     c82:	14 c0       	rjmp	.+40     	; 0xcac <vfprintf+0x136>
     c84:	38 01       	movw	r6, r16
     c86:	f2 e0       	ldi	r31, 0x02	; 2
     c88:	6f 0e       	add	r6, r31
     c8a:	71 1c       	adc	r7, r1
     c8c:	f8 01       	movw	r30, r16
     c8e:	a0 80       	ld	r10, Z
     c90:	b1 80       	ldd	r11, Z+1	; 0x01
     c92:	26 ff       	sbrs	r18, 6
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <vfprintf+0x126>
     c96:	65 2d       	mov	r22, r5
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <vfprintf+0x12a>
     c9c:	6f ef       	ldi	r22, 0xFF	; 255
     c9e:	7f ef       	ldi	r23, 0xFF	; 255
     ca0:	c5 01       	movw	r24, r10
     ca2:	2c 87       	std	Y+12, r18	; 0x0c
     ca4:	36 d1       	rcall	.+620    	; 0xf12 <strnlen>
     ca6:	2c 01       	movw	r4, r24
     ca8:	83 01       	movw	r16, r6
     caa:	2c 85       	ldd	r18, Y+12	; 0x0c
     cac:	2f 77       	andi	r18, 0x7F	; 127
     cae:	22 2e       	mov	r2, r18
     cb0:	16 c0       	rjmp	.+44     	; 0xcde <vfprintf+0x168>
     cb2:	38 01       	movw	r6, r16
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	6f 0e       	add	r6, r31
     cb8:	71 1c       	adc	r7, r1
     cba:	f8 01       	movw	r30, r16
     cbc:	a0 80       	ld	r10, Z
     cbe:	b1 80       	ldd	r11, Z+1	; 0x01
     cc0:	26 ff       	sbrs	r18, 6
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <vfprintf+0x154>
     cc4:	65 2d       	mov	r22, r5
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <vfprintf+0x158>
     cca:	6f ef       	ldi	r22, 0xFF	; 255
     ccc:	7f ef       	ldi	r23, 0xFF	; 255
     cce:	c5 01       	movw	r24, r10
     cd0:	2c 87       	std	Y+12, r18	; 0x0c
     cd2:	14 d1       	rcall	.+552    	; 0xefc <strnlen_P>
     cd4:	2c 01       	movw	r4, r24
     cd6:	2c 85       	ldd	r18, Y+12	; 0x0c
     cd8:	20 68       	ori	r18, 0x80	; 128
     cda:	22 2e       	mov	r2, r18
     cdc:	83 01       	movw	r16, r6
     cde:	23 fc       	sbrc	r2, 3
     ce0:	19 c0       	rjmp	.+50     	; 0xd14 <vfprintf+0x19e>
     ce2:	83 2d       	mov	r24, r3
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	48 16       	cp	r4, r24
     ce8:	59 06       	cpc	r5, r25
     cea:	a0 f4       	brcc	.+40     	; 0xd14 <vfprintf+0x19e>
     cec:	b7 01       	movw	r22, r14
     cee:	80 e2       	ldi	r24, 0x20	; 32
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	1a d1       	rcall	.+564    	; 0xf28 <fputc>
     cf4:	3a 94       	dec	r3
     cf6:	f5 cf       	rjmp	.-22     	; 0xce2 <vfprintf+0x16c>
     cf8:	f5 01       	movw	r30, r10
     cfa:	27 fc       	sbrc	r2, 7
     cfc:	85 91       	lpm	r24, Z+
     cfe:	27 fe       	sbrs	r2, 7
     d00:	81 91       	ld	r24, Z+
     d02:	5f 01       	movw	r10, r30
     d04:	b7 01       	movw	r22, r14
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0f d1       	rcall	.+542    	; 0xf28 <fputc>
     d0a:	31 10       	cpse	r3, r1
     d0c:	3a 94       	dec	r3
     d0e:	f1 e0       	ldi	r31, 0x01	; 1
     d10:	4f 1a       	sub	r4, r31
     d12:	51 08       	sbc	r5, r1
     d14:	41 14       	cp	r4, r1
     d16:	51 04       	cpc	r5, r1
     d18:	79 f7       	brne	.-34     	; 0xcf8 <vfprintf+0x182>
     d1a:	de c0       	rjmp	.+444    	; 0xed8 <vfprintf+0x362>
     d1c:	84 36       	cpi	r24, 0x64	; 100
     d1e:	11 f0       	breq	.+4      	; 0xd24 <vfprintf+0x1ae>
     d20:	89 36       	cpi	r24, 0x69	; 105
     d22:	31 f5       	brne	.+76     	; 0xd70 <vfprintf+0x1fa>
     d24:	f8 01       	movw	r30, r16
     d26:	27 ff       	sbrs	r18, 7
     d28:	07 c0       	rjmp	.+14     	; 0xd38 <vfprintf+0x1c2>
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	0c 5f       	subi	r16, 0xFC	; 252
     d34:	1f 4f       	sbci	r17, 0xFF	; 255
     d36:	08 c0       	rjmp	.+16     	; 0xd48 <vfprintf+0x1d2>
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	07 2e       	mov	r0, r23
     d3e:	00 0c       	add	r0, r0
     d40:	88 0b       	sbc	r24, r24
     d42:	99 0b       	sbc	r25, r25
     d44:	0e 5f       	subi	r16, 0xFE	; 254
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	2f 76       	andi	r18, 0x6F	; 111
     d4a:	72 2e       	mov	r7, r18
     d4c:	97 ff       	sbrs	r25, 7
     d4e:	09 c0       	rjmp	.+18     	; 0xd62 <vfprintf+0x1ec>
     d50:	90 95       	com	r25
     d52:	80 95       	com	r24
     d54:	70 95       	com	r23
     d56:	61 95       	neg	r22
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
     d5a:	8f 4f       	sbci	r24, 0xFF	; 255
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	20 68       	ori	r18, 0x80	; 128
     d60:	72 2e       	mov	r7, r18
     d62:	2a e0       	ldi	r18, 0x0A	; 10
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	a4 01       	movw	r20, r8
     d68:	17 d1       	rcall	.+558    	; 0xf98 <__ultoa_invert>
     d6a:	a8 2e       	mov	r10, r24
     d6c:	a8 18       	sub	r10, r8
     d6e:	43 c0       	rjmp	.+134    	; 0xdf6 <vfprintf+0x280>
     d70:	85 37       	cpi	r24, 0x75	; 117
     d72:	29 f4       	brne	.+10     	; 0xd7e <vfprintf+0x208>
     d74:	2f 7e       	andi	r18, 0xEF	; 239
     d76:	b2 2e       	mov	r11, r18
     d78:	2a e0       	ldi	r18, 0x0A	; 10
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	25 c0       	rjmp	.+74     	; 0xdc8 <vfprintf+0x252>
     d7e:	f2 2f       	mov	r31, r18
     d80:	f9 7f       	andi	r31, 0xF9	; 249
     d82:	bf 2e       	mov	r11, r31
     d84:	8f 36       	cpi	r24, 0x6F	; 111
     d86:	c1 f0       	breq	.+48     	; 0xdb8 <vfprintf+0x242>
     d88:	18 f4       	brcc	.+6      	; 0xd90 <vfprintf+0x21a>
     d8a:	88 35       	cpi	r24, 0x58	; 88
     d8c:	79 f0       	breq	.+30     	; 0xdac <vfprintf+0x236>
     d8e:	ad c0       	rjmp	.+346    	; 0xeea <vfprintf+0x374>
     d90:	80 37       	cpi	r24, 0x70	; 112
     d92:	19 f0       	breq	.+6      	; 0xd9a <vfprintf+0x224>
     d94:	88 37       	cpi	r24, 0x78	; 120
     d96:	21 f0       	breq	.+8      	; 0xda0 <vfprintf+0x22a>
     d98:	a8 c0       	rjmp	.+336    	; 0xeea <vfprintf+0x374>
     d9a:	2f 2f       	mov	r18, r31
     d9c:	20 61       	ori	r18, 0x10	; 16
     d9e:	b2 2e       	mov	r11, r18
     da0:	b4 fe       	sbrs	r11, 4
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <vfprintf+0x248>
     da4:	8b 2d       	mov	r24, r11
     da6:	84 60       	ori	r24, 0x04	; 4
     da8:	b8 2e       	mov	r11, r24
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <vfprintf+0x248>
     dac:	24 ff       	sbrs	r18, 4
     dae:	0a c0       	rjmp	.+20     	; 0xdc4 <vfprintf+0x24e>
     db0:	9f 2f       	mov	r25, r31
     db2:	96 60       	ori	r25, 0x06	; 6
     db4:	b9 2e       	mov	r11, r25
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <vfprintf+0x24e>
     db8:	28 e0       	ldi	r18, 0x08	; 8
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <vfprintf+0x252>
     dbe:	20 e1       	ldi	r18, 0x10	; 16
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x252>
     dc4:	20 e1       	ldi	r18, 0x10	; 16
     dc6:	32 e0       	ldi	r19, 0x02	; 2
     dc8:	f8 01       	movw	r30, r16
     dca:	b7 fe       	sbrs	r11, 7
     dcc:	07 c0       	rjmp	.+14     	; 0xddc <vfprintf+0x266>
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	0c 5f       	subi	r16, 0xFC	; 252
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	06 c0       	rjmp	.+12     	; 0xde8 <vfprintf+0x272>
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 5f       	subi	r16, 0xFE	; 254
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	a4 01       	movw	r20, r8
     dea:	d6 d0       	rcall	.+428    	; 0xf98 <__ultoa_invert>
     dec:	a8 2e       	mov	r10, r24
     dee:	a8 18       	sub	r10, r8
     df0:	fb 2d       	mov	r31, r11
     df2:	ff 77       	andi	r31, 0x7F	; 127
     df4:	7f 2e       	mov	r7, r31
     df6:	76 fe       	sbrs	r7, 6
     df8:	0b c0       	rjmp	.+22     	; 0xe10 <vfprintf+0x29a>
     dfa:	37 2d       	mov	r19, r7
     dfc:	3e 7f       	andi	r19, 0xFE	; 254
     dfe:	a5 14       	cp	r10, r5
     e00:	50 f4       	brcc	.+20     	; 0xe16 <vfprintf+0x2a0>
     e02:	74 fe       	sbrs	r7, 4
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <vfprintf+0x2a4>
     e06:	72 fc       	sbrc	r7, 2
     e08:	08 c0       	rjmp	.+16     	; 0xe1a <vfprintf+0x2a4>
     e0a:	37 2d       	mov	r19, r7
     e0c:	3e 7e       	andi	r19, 0xEE	; 238
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <vfprintf+0x2a4>
     e10:	ba 2c       	mov	r11, r10
     e12:	37 2d       	mov	r19, r7
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <vfprintf+0x2a6>
     e16:	ba 2c       	mov	r11, r10
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <vfprintf+0x2a6>
     e1a:	b5 2c       	mov	r11, r5
     e1c:	34 ff       	sbrs	r19, 4
     e1e:	0d c0       	rjmp	.+26     	; 0xe3a <vfprintf+0x2c4>
     e20:	fe 01       	movw	r30, r28
     e22:	ea 0d       	add	r30, r10
     e24:	f1 1d       	adc	r31, r1
     e26:	80 81       	ld	r24, Z
     e28:	80 33       	cpi	r24, 0x30	; 48
     e2a:	11 f4       	brne	.+4      	; 0xe30 <vfprintf+0x2ba>
     e2c:	39 7e       	andi	r19, 0xE9	; 233
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <vfprintf+0x2cc>
     e30:	32 ff       	sbrs	r19, 2
     e32:	06 c0       	rjmp	.+12     	; 0xe40 <vfprintf+0x2ca>
     e34:	b3 94       	inc	r11
     e36:	b3 94       	inc	r11
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <vfprintf+0x2cc>
     e3a:	83 2f       	mov	r24, r19
     e3c:	86 78       	andi	r24, 0x86	; 134
     e3e:	09 f0       	breq	.+2      	; 0xe42 <vfprintf+0x2cc>
     e40:	b3 94       	inc	r11
     e42:	33 fd       	sbrc	r19, 3
     e44:	12 c0       	rjmp	.+36     	; 0xe6a <vfprintf+0x2f4>
     e46:	30 ff       	sbrs	r19, 0
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <vfprintf+0x2e0>
     e4a:	5a 2c       	mov	r5, r10
     e4c:	b3 14       	cp	r11, r3
     e4e:	18 f4       	brcc	.+6      	; 0xe56 <vfprintf+0x2e0>
     e50:	53 0c       	add	r5, r3
     e52:	5b 18       	sub	r5, r11
     e54:	b3 2c       	mov	r11, r3
     e56:	b3 14       	cp	r11, r3
     e58:	60 f4       	brcc	.+24     	; 0xe72 <vfprintf+0x2fc>
     e5a:	b7 01       	movw	r22, r14
     e5c:	80 e2       	ldi	r24, 0x20	; 32
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	3c 87       	std	Y+12, r19	; 0x0c
     e62:	62 d0       	rcall	.+196    	; 0xf28 <fputc>
     e64:	b3 94       	inc	r11
     e66:	3c 85       	ldd	r19, Y+12	; 0x0c
     e68:	f6 cf       	rjmp	.-20     	; 0xe56 <vfprintf+0x2e0>
     e6a:	b3 14       	cp	r11, r3
     e6c:	10 f4       	brcc	.+4      	; 0xe72 <vfprintf+0x2fc>
     e6e:	3b 18       	sub	r3, r11
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <vfprintf+0x2fe>
     e72:	31 2c       	mov	r3, r1
     e74:	34 ff       	sbrs	r19, 4
     e76:	11 c0       	rjmp	.+34     	; 0xe9a <vfprintf+0x324>
     e78:	b7 01       	movw	r22, r14
     e7a:	80 e3       	ldi	r24, 0x30	; 48
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	3c 87       	std	Y+12, r19	; 0x0c
     e80:	53 d0       	rcall	.+166    	; 0xf28 <fputc>
     e82:	3c 85       	ldd	r19, Y+12	; 0x0c
     e84:	32 ff       	sbrs	r19, 2
     e86:	16 c0       	rjmp	.+44     	; 0xeb4 <vfprintf+0x33e>
     e88:	31 fd       	sbrc	r19, 1
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <vfprintf+0x31c>
     e8c:	88 e7       	ldi	r24, 0x78	; 120
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <vfprintf+0x320>
     e92:	88 e5       	ldi	r24, 0x58	; 88
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	b7 01       	movw	r22, r14
     e98:	0c c0       	rjmp	.+24     	; 0xeb2 <vfprintf+0x33c>
     e9a:	83 2f       	mov	r24, r19
     e9c:	86 78       	andi	r24, 0x86	; 134
     e9e:	51 f0       	breq	.+20     	; 0xeb4 <vfprintf+0x33e>
     ea0:	31 ff       	sbrs	r19, 1
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <vfprintf+0x332>
     ea4:	8b e2       	ldi	r24, 0x2B	; 43
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <vfprintf+0x334>
     ea8:	80 e2       	ldi	r24, 0x20	; 32
     eaa:	37 fd       	sbrc	r19, 7
     eac:	8d e2       	ldi	r24, 0x2D	; 45
     eae:	b7 01       	movw	r22, r14
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	3a d0       	rcall	.+116    	; 0xf28 <fputc>
     eb4:	a5 14       	cp	r10, r5
     eb6:	30 f4       	brcc	.+12     	; 0xec4 <vfprintf+0x34e>
     eb8:	b7 01       	movw	r22, r14
     eba:	80 e3       	ldi	r24, 0x30	; 48
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	34 d0       	rcall	.+104    	; 0xf28 <fputc>
     ec0:	5a 94       	dec	r5
     ec2:	f8 cf       	rjmp	.-16     	; 0xeb4 <vfprintf+0x33e>
     ec4:	aa 94       	dec	r10
     ec6:	f4 01       	movw	r30, r8
     ec8:	ea 0d       	add	r30, r10
     eca:	f1 1d       	adc	r31, r1
     ecc:	80 81       	ld	r24, Z
     ece:	b7 01       	movw	r22, r14
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	2a d0       	rcall	.+84     	; 0xf28 <fputc>
     ed4:	a1 10       	cpse	r10, r1
     ed6:	f6 cf       	rjmp	.-20     	; 0xec4 <vfprintf+0x34e>
     ed8:	33 20       	and	r3, r3
     eda:	09 f4       	brne	.+2      	; 0xede <vfprintf+0x368>
     edc:	5d ce       	rjmp	.-838    	; 0xb98 <vfprintf+0x22>
     ede:	b7 01       	movw	r22, r14
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	21 d0       	rcall	.+66     	; 0xf28 <fputc>
     ee6:	3a 94       	dec	r3
     ee8:	f7 cf       	rjmp	.-18     	; 0xed8 <vfprintf+0x362>
     eea:	f7 01       	movw	r30, r14
     eec:	86 81       	ldd	r24, Z+6	; 0x06
     eee:	97 81       	ldd	r25, Z+7	; 0x07
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <vfprintf+0x380>
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	9f ef       	ldi	r25, 0xFF	; 255
     ef6:	2c 96       	adiw	r28, 0x0c	; 12
     ef8:	e2 e1       	ldi	r30, 0x12	; 18
     efa:	df cd       	rjmp	.-1090   	; 0xaba <__epilogue_restores__>

00000efc <strnlen_P>:
     efc:	fc 01       	movw	r30, r24
     efe:	05 90       	lpm	r0, Z+
     f00:	61 50       	subi	r22, 0x01	; 1
     f02:	70 40       	sbci	r23, 0x00	; 0
     f04:	01 10       	cpse	r0, r1
     f06:	d8 f7       	brcc	.-10     	; 0xefe <strnlen_P+0x2>
     f08:	80 95       	com	r24
     f0a:	90 95       	com	r25
     f0c:	8e 0f       	add	r24, r30
     f0e:	9f 1f       	adc	r25, r31
     f10:	08 95       	ret

00000f12 <strnlen>:
     f12:	fc 01       	movw	r30, r24
     f14:	61 50       	subi	r22, 0x01	; 1
     f16:	70 40       	sbci	r23, 0x00	; 0
     f18:	01 90       	ld	r0, Z+
     f1a:	01 10       	cpse	r0, r1
     f1c:	d8 f7       	brcc	.-10     	; 0xf14 <strnlen+0x2>
     f1e:	80 95       	com	r24
     f20:	90 95       	com	r25
     f22:	8e 0f       	add	r24, r30
     f24:	9f 1f       	adc	r25, r31
     f26:	08 95       	ret

00000f28 <fputc>:
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	fb 01       	movw	r30, r22
     f32:	23 81       	ldd	r18, Z+3	; 0x03
     f34:	21 fd       	sbrc	r18, 1
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <fputc+0x16>
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	9f ef       	ldi	r25, 0xFF	; 255
     f3c:	28 c0       	rjmp	.+80     	; 0xf8e <fputc+0x66>
     f3e:	22 ff       	sbrs	r18, 2
     f40:	16 c0       	rjmp	.+44     	; 0xf6e <fputc+0x46>
     f42:	46 81       	ldd	r20, Z+6	; 0x06
     f44:	57 81       	ldd	r21, Z+7	; 0x07
     f46:	24 81       	ldd	r18, Z+4	; 0x04
     f48:	35 81       	ldd	r19, Z+5	; 0x05
     f4a:	42 17       	cp	r20, r18
     f4c:	53 07       	cpc	r21, r19
     f4e:	44 f4       	brge	.+16     	; 0xf60 <fputc+0x38>
     f50:	a0 81       	ld	r26, Z
     f52:	b1 81       	ldd	r27, Z+1	; 0x01
     f54:	9d 01       	movw	r18, r26
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	31 83       	std	Z+1, r19	; 0x01
     f5c:	20 83       	st	Z, r18
     f5e:	8c 93       	st	X, r24
     f60:	26 81       	ldd	r18, Z+6	; 0x06
     f62:	37 81       	ldd	r19, Z+7	; 0x07
     f64:	2f 5f       	subi	r18, 0xFF	; 255
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	37 83       	std	Z+7, r19	; 0x07
     f6a:	26 83       	std	Z+6, r18	; 0x06
     f6c:	10 c0       	rjmp	.+32     	; 0xf8e <fputc+0x66>
     f6e:	eb 01       	movw	r28, r22
     f70:	09 2f       	mov	r16, r25
     f72:	18 2f       	mov	r17, r24
     f74:	00 84       	ldd	r0, Z+8	; 0x08
     f76:	f1 85       	ldd	r31, Z+9	; 0x09
     f78:	e0 2d       	mov	r30, r0
     f7a:	09 95       	icall
     f7c:	89 2b       	or	r24, r25
     f7e:	e1 f6       	brne	.-72     	; 0xf38 <fputc+0x10>
     f80:	8e 81       	ldd	r24, Y+6	; 0x06
     f82:	9f 81       	ldd	r25, Y+7	; 0x07
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	9f 83       	std	Y+7, r25	; 0x07
     f88:	8e 83       	std	Y+6, r24	; 0x06
     f8a:	81 2f       	mov	r24, r17
     f8c:	90 2f       	mov	r25, r16
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	08 95       	ret

00000f98 <__ultoa_invert>:
     f98:	fa 01       	movw	r30, r20
     f9a:	aa 27       	eor	r26, r26
     f9c:	28 30       	cpi	r18, 0x08	; 8
     f9e:	51 f1       	breq	.+84     	; 0xff4 <__ultoa_invert+0x5c>
     fa0:	20 31       	cpi	r18, 0x10	; 16
     fa2:	81 f1       	breq	.+96     	; 0x1004 <__ultoa_invert+0x6c>
     fa4:	e8 94       	clt
     fa6:	6f 93       	push	r22
     fa8:	6e 7f       	andi	r22, 0xFE	; 254
     faa:	6e 5f       	subi	r22, 0xFE	; 254
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	af 4f       	sbci	r26, 0xFF	; 255
     fb4:	b1 e0       	ldi	r27, 0x01	; 1
     fb6:	3e d0       	rcall	.+124    	; 0x1034 <__ultoa_invert+0x9c>
     fb8:	b4 e0       	ldi	r27, 0x04	; 4
     fba:	3c d0       	rcall	.+120    	; 0x1034 <__ultoa_invert+0x9c>
     fbc:	67 0f       	add	r22, r23
     fbe:	78 1f       	adc	r23, r24
     fc0:	89 1f       	adc	r24, r25
     fc2:	9a 1f       	adc	r25, r26
     fc4:	a1 1d       	adc	r26, r1
     fc6:	68 0f       	add	r22, r24
     fc8:	79 1f       	adc	r23, r25
     fca:	8a 1f       	adc	r24, r26
     fcc:	91 1d       	adc	r25, r1
     fce:	a1 1d       	adc	r26, r1
     fd0:	6a 0f       	add	r22, r26
     fd2:	71 1d       	adc	r23, r1
     fd4:	81 1d       	adc	r24, r1
     fd6:	91 1d       	adc	r25, r1
     fd8:	a1 1d       	adc	r26, r1
     fda:	20 d0       	rcall	.+64     	; 0x101c <__ultoa_invert+0x84>
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <__ultoa_invert+0x48>
     fde:	68 94       	set
     fe0:	3f 91       	pop	r19
     fe2:	2a e0       	ldi	r18, 0x0A	; 10
     fe4:	26 9f       	mul	r18, r22
     fe6:	11 24       	eor	r1, r1
     fe8:	30 19       	sub	r19, r0
     fea:	30 5d       	subi	r19, 0xD0	; 208
     fec:	31 93       	st	Z+, r19
     fee:	de f6       	brtc	.-74     	; 0xfa6 <__ultoa_invert+0xe>
     ff0:	cf 01       	movw	r24, r30
     ff2:	08 95       	ret
     ff4:	46 2f       	mov	r20, r22
     ff6:	47 70       	andi	r20, 0x07	; 7
     ff8:	40 5d       	subi	r20, 0xD0	; 208
     ffa:	41 93       	st	Z+, r20
     ffc:	b3 e0       	ldi	r27, 0x03	; 3
     ffe:	0f d0       	rcall	.+30     	; 0x101e <__ultoa_invert+0x86>
    1000:	c9 f7       	brne	.-14     	; 0xff4 <__ultoa_invert+0x5c>
    1002:	f6 cf       	rjmp	.-20     	; 0xff0 <__ultoa_invert+0x58>
    1004:	46 2f       	mov	r20, r22
    1006:	4f 70       	andi	r20, 0x0F	; 15
    1008:	40 5d       	subi	r20, 0xD0	; 208
    100a:	4a 33       	cpi	r20, 0x3A	; 58
    100c:	18 f0       	brcs	.+6      	; 0x1014 <__ultoa_invert+0x7c>
    100e:	49 5d       	subi	r20, 0xD9	; 217
    1010:	31 fd       	sbrc	r19, 1
    1012:	40 52       	subi	r20, 0x20	; 32
    1014:	41 93       	st	Z+, r20
    1016:	02 d0       	rcall	.+4      	; 0x101c <__ultoa_invert+0x84>
    1018:	a9 f7       	brne	.-22     	; 0x1004 <__ultoa_invert+0x6c>
    101a:	ea cf       	rjmp	.-44     	; 0xff0 <__ultoa_invert+0x58>
    101c:	b4 e0       	ldi	r27, 0x04	; 4
    101e:	a6 95       	lsr	r26
    1020:	97 95       	ror	r25
    1022:	87 95       	ror	r24
    1024:	77 95       	ror	r23
    1026:	67 95       	ror	r22
    1028:	ba 95       	dec	r27
    102a:	c9 f7       	brne	.-14     	; 0x101e <__ultoa_invert+0x86>
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	61 05       	cpc	r22, r1
    1030:	71 05       	cpc	r23, r1
    1032:	08 95       	ret
    1034:	9b 01       	movw	r18, r22
    1036:	ac 01       	movw	r20, r24
    1038:	0a 2e       	mov	r0, r26
    103a:	06 94       	lsr	r0
    103c:	57 95       	ror	r21
    103e:	47 95       	ror	r20
    1040:	37 95       	ror	r19
    1042:	27 95       	ror	r18
    1044:	ba 95       	dec	r27
    1046:	c9 f7       	brne	.-14     	; 0x103a <__ultoa_invert+0xa2>
    1048:	62 0f       	add	r22, r18
    104a:	73 1f       	adc	r23, r19
    104c:	84 1f       	adc	r24, r20
    104e:	95 1f       	adc	r25, r21
    1050:	a0 1d       	adc	r26, r0
    1052:	08 95       	ret

00001054 <_exit>:
    1054:	f8 94       	cli

00001056 <__stop_program>:
    1056:	ff cf       	rjmp	.-2      	; 0x1056 <__stop_program>

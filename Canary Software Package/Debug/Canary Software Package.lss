
Canary Software Package.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00002342  000023d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000507  008001ca  008001ca  000024a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00002540  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000051e8  00000000  00000000  00002848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001978  00000000  00000000  00007a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022ec  00000000  00000000  000093a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f8  00000000  00000000  0000b694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010de  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000038a6  00000000  00000000  0000d16a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00010a10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	9d c0       	rjmp	.+314    	; 0x16c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__vector_13>
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__vector_16>
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_21>
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	83 c0       	rjmp	.+262    	; 0x16c <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__vector_28>
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d3 0b       	sbc	r29, r19
      8e:	25 0c       	add	r2, r5
      90:	25 0c       	add	r2, r5
      92:	25 0c       	add	r2, r5
      94:	25 0c       	add	r2, r5
      96:	25 0c       	add	r2, r5
      98:	25 0c       	add	r2, r5
      9a:	25 0c       	add	r2, r5
      9c:	d3 0b       	sbc	r29, r19
      9e:	25 0c       	add	r2, r5
      a0:	25 0c       	add	r2, r5
      a2:	25 0c       	add	r2, r5
      a4:	25 0c       	add	r2, r5
      a6:	25 0c       	add	r2, r5
      a8:	25 0c       	add	r2, r5
      aa:	25 0c       	add	r2, r5
      ac:	d5 0b       	sbc	r29, r21
      ae:	25 0c       	add	r2, r5
      b0:	25 0c       	add	r2, r5
      b2:	25 0c       	add	r2, r5
      b4:	25 0c       	add	r2, r5
      b6:	25 0c       	add	r2, r5
      b8:	25 0c       	add	r2, r5
      ba:	25 0c       	add	r2, r5
      bc:	25 0c       	add	r2, r5
      be:	25 0c       	add	r2, r5
      c0:	25 0c       	add	r2, r5
      c2:	25 0c       	add	r2, r5
      c4:	25 0c       	add	r2, r5
      c6:	25 0c       	add	r2, r5
      c8:	25 0c       	add	r2, r5
      ca:	25 0c       	add	r2, r5
      cc:	d5 0b       	sbc	r29, r21
      ce:	25 0c       	add	r2, r5
      d0:	25 0c       	add	r2, r5
      d2:	25 0c       	add	r2, r5
      d4:	25 0c       	add	r2, r5
      d6:	25 0c       	add	r2, r5
      d8:	25 0c       	add	r2, r5
      da:	25 0c       	add	r2, r5
      dc:	25 0c       	add	r2, r5
      de:	25 0c       	add	r2, r5
      e0:	25 0c       	add	r2, r5
      e2:	25 0c       	add	r2, r5
      e4:	25 0c       	add	r2, r5
      e6:	25 0c       	add	r2, r5
      e8:	25 0c       	add	r2, r5
      ea:	25 0c       	add	r2, r5
      ec:	21 0c       	add	r2, r1
      ee:	25 0c       	add	r2, r5
      f0:	25 0c       	add	r2, r5
      f2:	25 0c       	add	r2, r5
      f4:	25 0c       	add	r2, r5
      f6:	25 0c       	add	r2, r5
      f8:	25 0c       	add	r2, r5
      fa:	25 0c       	add	r2, r5
      fc:	fe 0b       	sbc	r31, r30
      fe:	25 0c       	add	r2, r5
     100:	25 0c       	add	r2, r5
     102:	25 0c       	add	r2, r5
     104:	25 0c       	add	r2, r5
     106:	25 0c       	add	r2, r5
     108:	25 0c       	add	r2, r5
     10a:	25 0c       	add	r2, r5
     10c:	25 0c       	add	r2, r5
     10e:	25 0c       	add	r2, r5
     110:	25 0c       	add	r2, r5
     112:	25 0c       	add	r2, r5
     114:	25 0c       	add	r2, r5
     116:	25 0c       	add	r2, r5
     118:	25 0c       	add	r2, r5
     11a:	25 0c       	add	r2, r5
     11c:	f2 0b       	sbc	r31, r18
     11e:	25 0c       	add	r2, r5
     120:	25 0c       	add	r2, r5
     122:	25 0c       	add	r2, r5
     124:	25 0c       	add	r2, r5
     126:	25 0c       	add	r2, r5
     128:	25 0c       	add	r2, r5
     12a:	25 0c       	add	r2, r5
     12c:	10 0c       	add	r1, r0

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e4       	ldi	r29, 0x40	; 64
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e2 e4       	ldi	r30, 0x42	; 66
     142:	f3 e2       	ldi	r31, 0x23	; 35
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	aa 3c       	cpi	r26, 0xCA	; 202
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	26 e0       	ldi	r18, 0x06	; 6
     156:	aa ec       	ldi	r26, 0xCA	; 202
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a1 3d       	cpi	r26, 0xD1	; 209
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 00 0a 	call	0x1400	; 0x1400 <main>
     168:	0c 94 9f 11 	jmp	0x233e	; 0x233e <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_default>

00000170 <ADC_SetMux>:
********************************************************************************/
void ADC_SetMux(uint8_t source) // 
{
	/* A short routine to clear the ADC input select mux bits then set
	those same bits to the source defined in the input.  */
	ADMUX &= 0b11100000; // Clear the select bits then
     170:	ec e7       	ldi	r30, 0x7C	; 124
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	90 81       	ld	r25, Z
     176:	90 7e       	andi	r25, 0xE0	; 224
     178:	90 83       	st	Z, r25
	ADMUX |= source; // Set the ADC input source
     17a:	90 81       	ld	r25, Z
     17c:	89 2b       	or	r24, r25
     17e:	80 83       	st	Z, r24
     180:	08 95       	ret

00000182 <ADC_init>:
}

void ADC_init(void)
{
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
	/* This routine is design to set up the ADC hardware on the ATMega324PA for our use. */
	static volatile int16_t ADC_result;
	
	// Select the external AVCC pin as the ADC reference voltage by setting the REFS[1:0] pin in the ADC MUX register to 0b01
	SetBit(ADMUX, REFS0);
     186:	ec e7       	ldi	r30, 0x7C	; 124
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	80 64       	ori	r24, 0x40	; 64
     18e:	80 83       	st	Z, r24
	
	// Set clock prescaler to 128 to provide a 156kHz ADC clock.  ADPS[2:0] = 0b111
	SetBit(ADCSRA, ADPS0);
     190:	ca e7       	ldi	r28, 0x7A	; 122
     192:	d0 e0       	ldi	r29, 0x00	; 0
     194:	88 81       	ld	r24, Y
     196:	81 60       	ori	r24, 0x01	; 1
     198:	88 83       	st	Y, r24
	SetBit(ADCSRA, ADPS1);
     19a:	88 81       	ld	r24, Y
     19c:	82 60       	ori	r24, 0x02	; 2
     19e:	88 83       	st	Y, r24
	SetBit(ADCSRA, ADPS2);
     1a0:	88 81       	ld	r24, Y
     1a2:	84 60       	ori	r24, 0x04	; 4
     1a4:	88 83       	st	Y, r24
	
	// Clears power reduction register to ensure we get power to the ADC hardware
	ClearBit(PRR0, PRADC);
     1a6:	a4 e6       	ldi	r26, 0x64	; 100
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	8c 91       	ld	r24, X
     1ac:	8e 7f       	andi	r24, 0xFE	; 254
     1ae:	8c 93       	st	X, r24
	
	// Clears the Left Adjust Result bit. This means that output will be right adjusted to get the max resolution
	ClearBit(ADMUX, ADLAR);
     1b0:	80 81       	ld	r24, Z
     1b2:	8f 7d       	andi	r24, 0xDF	; 223
     1b4:	80 83       	st	Z, r24
	
	// Sets Digital Input Disable Register. Writing a one to bits in the DIDR0 to disable the digital input circuitry
	DIDR0 = 0b00111111;
     1b6:	8f e3       	ldi	r24, 0x3F	; 63
     1b8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
     1bc:	88 81       	ld	r24, Y
     1be:	80 68       	ori	r24, 0x80	; 128
     1c0:	88 83       	st	Y, r24
	// Enable the ADC interrupt
	//*************TURNED OFF FOR LAB TESTING********************************
	// SetBit(ADCSRA, ADIE);  // May have to turn this off for debug
	
	// Set Register ADCSRB to free running mode, single input mode (ADTS[2:0] = 0x00);
	ADCSRB = 0x00;
     1c2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	//  Select test source = ground (GND;  ADMUX.MUX = 0b11111). Result should be 0V.
	ADC_SetMux(0b00011111); 
     1c6:	8f e1       	ldi	r24, 0x1F	; 31
     1c8:	d3 df       	rcall	.-90     	; 0x170 <ADC_SetMux>
	
	// Discard the first conversion and use the second one
	// Sets ADC Start Conversion bit
	SetBit(ADCSRA, ADSC);
     1ca:	88 81       	ld	r24, Y
     1cc:	80 64       	ori	r24, 0x40	; 64
     1ce:	88 83       	st	Y, r24
	while (BitIsClear(ADCSRA, ADIF))
     1d0:	ea e7       	ldi	r30, 0x7A	; 122
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	84 ff       	sbrs	r24, 4
     1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <ADC_init+0x52>
	{
		// Wait for conversion to be complete
	}
	
	//   Restart conversion. We'll use this result.
	SetBit(ADCSRA, ADSC);
     1da:	ea e7       	ldi	r30, 0x7A	; 122
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 64       	ori	r24, 0x40	; 64
     1e2:	80 83       	st	Z, r24
	while (BitIsClear(ADCSRA, ADIF))
     1e4:	80 81       	ld	r24, Z
     1e6:	84 ff       	sbrs	r24, 4
     1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <ADC_init+0x62>
	{
		// Wait for conversion to be complete
	}
	
	//  Read result and report error if not real close to zero
	ADC_result = ADCL;
     1ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     1f4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	ADC_result = ADC_result + (ADCH<<8);
     1f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1fc:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <__data_end>
     200:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <__data_end+0x1>
     204:	89 2f       	mov	r24, r25
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	98 2f       	mov	r25, r24
     20a:	88 27       	eor	r24, r24
     20c:	82 0f       	add	r24, r18
     20e:	93 1f       	adc	r25, r19
     210:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     214:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	if (abs(ADC_result) >4 ) //   We want to be within a few LSBs of zero.
     218:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     21c:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__data_end+0x1>
     220:	99 23       	and	r25, r25
     222:	1c f4       	brge	.+6      	; 0x22a <ADC_init+0xa8>
     224:	91 95       	neg	r25
     226:	81 95       	neg	r24
     228:	91 09       	sbc	r25, r1
     22a:	05 97       	sbiw	r24, 0x05	; 5
     22c:	2c f0       	brlt	.+10     	; 0x238 <ADC_init+0xb6>
	{
		SetBit(gas_sensor_initialization_errors, ADC_gnd_test_error);
     22e:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <gas_sensor_initialization_errors>
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <gas_sensor_initialization_errors>
	}
	
	// Select test source = bandgap (BG;  ADMUX.MUX = 0b11110). Result should be 1.1V
	ADC_SetMux(0b00011110); 
     238:	8e e1       	ldi	r24, 0x1E	; 30
     23a:	9a df       	rcall	.-204    	; 0x170 <ADC_SetMux>
	SetBit(ADCSRA, ADSC); // Start conversion process
     23c:	ea e7       	ldi	r30, 0x7A	; 122
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 64       	ori	r24, 0x40	; 64
     244:	80 83       	st	Z, r24
	while (BitIsClear(ADCSRA, ADIF))
     246:	80 81       	ld	r24, Z
     248:	84 ff       	sbrs	r24, 4
     24a:	fd cf       	rjmp	.-6      	; 0x246 <ADC_init+0xc4>
	{
		// Wait for conversion to be complete
	}
	
	// Read result and report error if not 1.1
	ADC_result = ADCL;
     24c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     256:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	ADC_result = ADC_result + (ADCH<<8);
     25a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     25e:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <__data_end>
     262:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <__data_end+0x1>
     266:	89 2f       	mov	r24, r25
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	98 2f       	mov	r25, r24
     26c:	88 27       	eor	r24, r24
     26e:	82 0f       	add	r24, r18
     270:	93 1f       	adc	r25, r19
     272:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     276:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	ADC_result -= 225;  // 225 is the expected value: 1.1V*1023/5v=225
     27a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     27e:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__data_end+0x1>
     282:	81 5e       	subi	r24, 0xE1	; 225
     284:	91 09       	sbc	r25, r1
     286:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     28a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	if (abs(ADC_result) >= 5)  // We want to be within 4 of target voltage reading.
     28e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     292:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__data_end+0x1>
     296:	99 23       	and	r25, r25
     298:	1c f4       	brge	.+6      	; 0x2a0 <ADC_init+0x11e>
     29a:	91 95       	neg	r25
     29c:	81 95       	neg	r24
     29e:	91 09       	sbc	r25, r1
     2a0:	05 97       	sbiw	r24, 0x05	; 5
     2a2:	2c f0       	brlt	.+10     	; 0x2ae <ADC_init+0x12c>
	{
		SetBit(gas_sensor_initialization_errors, ADC_BG_test_error);
     2a4:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <gas_sensor_initialization_errors>
     2a8:	82 60       	ori	r24, 0x02	; 2
     2aa:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <gas_sensor_initialization_errors>
	}
	
	// Clear the analog to digital enable bit until we need it again
	ClearBit(ADCSRA, ADEN);
     2ae:	ea e7       	ldi	r30, 0x7A	; 122
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8f 77       	andi	r24, 0x7F	; 127
     2b6:	80 83       	st	Z, r24
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <canary_io_pin_initialization>:
	}
}

void canary_io_pin_initialization(void) {
	// For Canary, Port B pins 0, 1, and 2 are the red, green, and blue LED feedback pins
	DDRB  = 0x07;
     2be:	87 e0       	ldi	r24, 0x07	; 7
     2c0:	84 b9       	out	0x04, r24	; 4
	//
	// Set all LEDs off
	PORTB &= !0x07;
     2c2:	85 b1       	in	r24, 0x05	; 5
     2c4:	15 b8       	out	0x05, r1	; 5
	// The Canary start button is on Port B pin 3.  Set the pull-up resistor for pin 3:
	SetBit(PORTB, PORTB3);
     2c6:	2b 9a       	sbi	0x05, 3	; 5
	//
	// Set the Data Direction Register and pullups for the TWI system
	SetBit(DDRC, PORTC0); // Set clock as output
     2c8:	38 9a       	sbi	0x07, 0	; 7
	SetBit(DDRC, PORTC1); // Data Line as output
     2ca:	39 9a       	sbi	0x07, 1	; 7
	SetBit(PORTC, PORTC0); //Set pull-up resistor for clock
     2cc:	40 9a       	sbi	0x08, 0	; 8
	SetBit(PORTC, PORTC1); //Set pull-up resistor for data
     2ce:	41 9a       	sbi	0x08, 1	; 8
     2d0:	08 95       	ret

000002d2 <get_gas_sensor_limits>:
#include "gas_sensors.h"

/********************************************************************************
						Functions
********************************************************************************/
void get_gas_sensor_limits(void) {
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
	This just sets some upper and lower bounds for the initialization code to use.
	Actual values will need to be derived empirically (using the UCAR test chamber) */
	for (ii=0; ii<5; ii++)
	{
		gas_sensor_boundaries[ii][0] = 0;
		gas_sensor_boundaries[ii][1] = 1023;
     2d6:	2f ef       	ldi	r18, 0xFF	; 255
     2d8:	33 e0       	ldi	r19, 0x03	; 3
	/* THIS IS A TEMPORARY ROUTINE, to be replaced by the EEPROM read commented out below.
	This just sets some upper and lower bounds for the initialization code to use.
	Actual values will need to be derived empirically (using the UCAR test chamber) */
	for (ii=0; ii<5; ii++)
	{
		gas_sensor_boundaries[ii][0] = 0;
     2da:	fc 01       	movw	r30, r24
     2dc:	ee 0f       	add	r30, r30
     2de:	ff 1f       	adc	r31, r31
     2e0:	ee 0f       	add	r30, r30
     2e2:	ff 1f       	adc	r31, r31
     2e4:	e1 50       	subi	r30, 0x01	; 1
     2e6:	fd 4f       	sbci	r31, 0xFD	; 253
     2e8:	11 82       	std	Z+1, r1	; 0x01
     2ea:	10 82       	st	Z, r1
		gas_sensor_boundaries[ii][1] = 1023;
     2ec:	33 83       	std	Z+3, r19	; 0x03
     2ee:	22 83       	std	Z+2, r18	; 0x02
     2f0:	01 96       	adiw	r24, 0x01	; 1
void get_gas_sensor_limits(void) {
	uint8_t ii;
	/* THIS IS A TEMPORARY ROUTINE, to be replaced by the EEPROM read commented out below.
	This just sets some upper and lower bounds for the initialization code to use.
	Actual values will need to be derived empirically (using the UCAR test chamber) */
	for (ii=0; ii<5; ii++)
     2f2:	85 30       	cpi	r24, 0x05	; 5
     2f4:	91 05       	cpc	r25, r1
     2f6:	89 f7       	brne	.-30     	; 0x2da <get_gas_sensor_limits+0x8>
	{
		gas_sensor_boundaries[ii][0] = 0;
		gas_sensor_boundaries[ii][1] = 1023;
	}
}
     2f8:	08 95       	ret

000002fa <get_gas_sensor_limits_from_EEPROM>:

void get_gas_sensor_limits_from_EEPROM(void) {
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	0f 2e       	mov	r0, r31
     308:	f9 ee       	ldi	r31, 0xE9	; 233
     30a:	ef 2e       	mov	r14, r31
     30c:	f2 e0       	ldi	r31, 0x02	; 2
     30e:	ff 2e       	mov	r15, r31
     310:	f0 2d       	mov	r31, r0
     312:	00 e0       	ldi	r16, 0x00	; 0
     314:	10 e0       	ldi	r17, 0x00	; 0
	// This routine reads the empirically derived upper and lower limits
	// for the gas sensors from EEPROM.  We can also use defined constants
	// if we need to...
	for (ii=0; ii<5; ii++)
	{
		gas_sensor_boundaries[ii][0] = eeprom_read_word(&gas_sensor_boundary_constants[ii][0]);
     316:	c7 01       	movw	r24, r14
     318:	0e 94 8a 11 	call	0x2314	; 0x2314 <eeprom_read_word>
     31c:	e8 01       	movw	r28, r16
     31e:	cc 0f       	add	r28, r28
     320:	dd 1f       	adc	r29, r29
     322:	cc 0f       	add	r28, r28
     324:	dd 1f       	adc	r29, r29
     326:	c1 50       	subi	r28, 0x01	; 1
     328:	dd 4f       	sbci	r29, 0xFD	; 253
     32a:	99 83       	std	Y+1, r25	; 0x01
     32c:	88 83       	st	Y, r24
		gas_sensor_boundaries[ii][1] = eeprom_read_word(&gas_sensor_boundary_constants[ii][1]);
     32e:	c7 01       	movw	r24, r14
     330:	02 96       	adiw	r24, 0x02	; 2
     332:	0e 94 8a 11 	call	0x2314	; 0x2314 <eeprom_read_word>
     336:	9b 83       	std	Y+3, r25	; 0x03
     338:	8a 83       	std	Y+2, r24	; 0x02
     33a:	0f 5f       	subi	r16, 0xFF	; 255
     33c:	1f 4f       	sbci	r17, 0xFF	; 255
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	e8 0e       	add	r14, r24
     342:	f1 1c       	adc	r15, r1
void get_gas_sensor_limits_from_EEPROM(void) {
	uint8_t ii;
	// This routine reads the empirically derived upper and lower limits
	// for the gas sensors from EEPROM.  We can also use defined constants
	// if we need to...
	for (ii=0; ii<5; ii++)
     344:	05 30       	cpi	r16, 0x05	; 5
     346:	11 05       	cpc	r17, r1
     348:	31 f7       	brne	.-52     	; 0x316 <get_gas_sensor_limits_from_EEPROM+0x1c>
	{
		gas_sensor_boundaries[ii][0] = eeprom_read_word(&gas_sensor_boundary_constants[ii][0]);
		gas_sensor_boundaries[ii][1] = eeprom_read_word(&gas_sensor_boundary_constants[ii][1]);
	}
}
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	08 95       	ret

00000358 <gas_sensors_init>:

void gas_sensors_init(void)
{
     358:	af 92       	push	r10
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	1f 92       	push	r1
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t sensor_id;
	int16_t ADC_result;
	
	// Clear our error trackers
	gas_sensor_initialization_errors=0; // Keeps track (by bit) of errors we've encountered.
     372:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <gas_sensor_initialization_errors>
	gas_sensor_operational_errors=0;  // Keeps track (by bit) of errors we've encountered.
     376:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <gas_sensor_operational_errors>
	// Get the upper and lower boundaries on the gas sensors...
	// The first cal is just to test the EEPROM code
	get_gas_sensor_limits_from_EEPROM();
     37a:	bf df       	rcall	.-130    	; 0x2fa <get_gas_sensor_limits_from_EEPROM>
	// This second cal is temporary and simply initializes the array to usable values...
	get_gas_sensor_limits();
     37c:	aa df       	rcall	.-172    	; 0x2d2 <get_gas_sensor_limits>
     37e:	ea e7       	ldi	r30, 0x7A	; 122
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	80 68       	ori	r24, 0x80	; 128
     386:	80 83       	st	Z, r24
     388:	19 82       	std	Y+1, r1	; 0x01
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	85 30       	cpi	r24, 0x05	; 5
     38e:	08 f0       	brcs	.+2      	; 0x392 <gas_sensors_init+0x3a>
     390:	51 c0       	rjmp	.+162    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     392:	0a e7       	ldi	r16, 0x7A	; 122
	{
		ADC_SetMux(sensor_id);
		// Start conversion
		SetBit(ADCSRA, ADSC);
     394:	10 e0       	ldi	r17, 0x00	; 0
     396:	0f 2e       	mov	r0, r31
		while (BitIsClear(ADCSRA, ADIF))
		{
			// Wait for conversion to be complete
		}
		// Read result
		ADC_result = ADC;
     398:	f8 e7       	ldi	r31, 0x78	; 120
     39a:	ef 2e       	mov	r14, r31
     39c:	f1 2c       	mov	r15, r1
     39e:	f0 2d       	mov	r31, r0
     3a0:	bb 24       	eor	r11, r11
		// sen0 = ADC_result;
		// Test the reading to ensure it is within acceptable boundaries
		if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
     3a2:	b3 94       	inc	r11
     3a4:	a1 2c       	mov	r10, r1
     3a6:	cc 24       	eor	r12, r12
		{
			SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
     3a8:	c3 94       	inc	r12
     3aa:	d1 2c       	mov	r13, r1
	SetBit(ADCSRA, ADEN);
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
	{
		ADC_SetMux(sensor_id);
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	e0 de       	rcall	.-576    	; 0x170 <ADC_SetMux>
     3b0:	f8 01       	movw	r30, r16
		// Start conversion
		SetBit(ADCSRA, ADSC);
     3b2:	80 81       	ld	r24, Z
     3b4:	80 64       	ori	r24, 0x40	; 64
     3b6:	80 83       	st	Z, r24
     3b8:	f8 01       	movw	r30, r16
		while (BitIsClear(ADCSRA, ADIF))
     3ba:	80 81       	ld	r24, Z
     3bc:	84 ff       	sbrs	r24, 4
     3be:	fc cf       	rjmp	.-8      	; 0x3b8 <gas_sensors_init+0x60>
     3c0:	f7 01       	movw	r30, r14
		{
			// Wait for conversion to be complete
		}
		// Read result
		ADC_result = ADC;
     3c2:	80 81       	ld	r24, Z
     3c4:	91 81       	ldd	r25, Z+1	; 0x01
     3c6:	e9 81       	ldd	r30, Y+1	; 0x01
		// sen0 = ADC_result;
		// Test the reading to ensure it is within acceptable boundaries
		if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	e1 50       	subi	r30, 0x01	; 1
     3d4:	fd 4f       	sbci	r31, 0xFD	; 253
     3d6:	20 81       	ld	r18, Z
     3d8:	31 81       	ldd	r19, Z+1	; 0x01
     3da:	e9 81       	ldd	r30, Y+1	; 0x01
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	e1 50       	subi	r30, 0x01	; 1
     3e8:	fd 4f       	sbci	r31, 0xFD	; 253
     3ea:	62 81       	ldd	r22, Z+2	; 0x02
     3ec:	73 81       	ldd	r23, Z+3	; 0x03
     3ee:	4b 2d       	mov	r20, r11
     3f0:	82 17       	cp	r24, r18
     3f2:	93 07       	cpc	r25, r19
     3f4:	08 f0       	brcs	.+2      	; 0x3f8 <gas_sensors_init+0xa0>
     3f6:	4a 2d       	mov	r20, r10
     3f8:	41 11       	cpse	r20, r1
     3fa:	07 c0       	rjmp	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3fc:	2b 2d       	mov	r18, r11
     3fe:	68 17       	cp	r22, r24
     400:	79 07       	cpc	r23, r25
     402:	08 f0       	brcs	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	2a 2d       	mov	r18, r10
     406:	22 23       	and	r18, r18
     408:	71 f0       	breq	.+28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     40a:	99 81       	ldd	r25, Y+1	; 0x01
		{
			SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
     40c:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <gas_sensor_initialization_errors>
     410:	9d 5f       	subi	r25, 0xFD	; 253
     412:	a6 01       	movw	r20, r12
     414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     416:	44 0f       	add	r20, r20
     418:	55 1f       	adc	r21, r21
     41a:	9a 95       	dec	r25
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	ca 01       	movw	r24, r20
     420:	82 2b       	or	r24, r18
     422:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <gas_sensor_initialization_errors>
     426:	89 81       	ldd	r24, Y+1	; 0x01
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
     428:	8f 5f       	subi	r24, 0xFF	; 255
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	85 30       	cpi	r24, 0x05	; 5
     430:	08 f4       	brcc	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	bc cf       	rjmp	.-136    	; 0x3ac <gas_sensors_init+0x54>
     434:	ea e7       	ldi	r30, 0x7A	; 122
		if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
		{
			SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
		}		
	}
	ClearBit(ADCSRA, ADEN);  //Disable the ADC until we go operational
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	8f 77       	andi	r24, 0x7F	; 127
     43c:	80 83       	st	Z, r24
     43e:	0f 90       	pop	r0
	// Report status via the LED that the gas sensors are ready (or not)
	//display_status(gas_sensors, gas_sensor_initialization_errors);
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	bf 90       	pop	r11
     452:	af 90       	pop	r10
     454:	08 95       	ret

00000456 <start_gas_sensor_read>:
     456:	af 92       	push	r10

void start_gas_sensor_read(void)
{
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	00 d0       	rcall	.+0      	; 0x46c <start_gas_sensor_read+0x16>
     46c:	1f 92       	push	r1
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	int16_t ADC_result;
	volatile int16_t total;
	int16_t gas_average;
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
     472:	ea e7       	ldi	r30, 0x7A	; 122
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	80 68       	ori	r24, 0x80	; 128
     47a:	80 83       	st	Z, r24
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
     47c:	19 82       	std	Y+1, r1	; 0x01
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	85 30       	cpi	r24, 0x05	; 5
     482:	08 f0       	brcs	.+2      	; 0x486 <start_gas_sensor_read+0x30>
     484:	73 c0       	rjmp	.+230    	; 0x56c <start_gas_sensor_read+0x116>
		total = 0;	// re-zero the average
		
		for(int i = 0; i < max_gas_sample_count; i++)
		{
			// Start conversion
			SetBit(ADCSRA, ADSC);
     486:	0a e7       	ldi	r16, 0x7A	; 122
     488:	10 e0       	ldi	r17, 0x00	; 0
			{
				// Wait for conversion to be complete
				// NOTE: In production version, we should wait for the interrupt and process in the background
			}
			// Read result
			ADC_result = ADC;
     48a:	0f 2e       	mov	r0, r31
     48c:	f8 e7       	ldi	r31, 0x78	; 120
     48e:	ef 2e       	mov	r14, r31
     490:	f1 2c       	mov	r15, r1
     492:	f0 2d       	mov	r31, r0
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
     494:	cc 24       	eor	r12, r12
     496:	c3 94       	inc	r12
     498:	d1 2c       	mov	r13, r1
				// NOTE: In production version, we should wait for the interrupt and process in the background
			}
			// Read result
			ADC_result = ADC;
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
     49a:	bb 24       	eor	r11, r11
     49c:	b3 94       	inc	r11
     49e:	a1 2c       	mov	r10, r1
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
	{
		ADC_SetMux(sensor_id);
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	66 de       	rcall	.-820    	; 0x170 <ADC_SetMux>
		total = 0;	// re-zero the average
     4a4:	1b 82       	std	Y+3, r1	; 0x03
     4a6:	1a 82       	std	Y+2, r1	; 0x02
     4a8:	24 e0       	ldi	r18, 0x04	; 4
     4aa:	30 e0       	ldi	r19, 0x00	; 0
		
		for(int i = 0; i < max_gas_sample_count; i++)
		{
			// Start conversion
			SetBit(ADCSRA, ADSC);
     4ac:	f8 01       	movw	r30, r16
     4ae:	80 81       	ld	r24, Z
     4b0:	80 64       	ori	r24, 0x40	; 64
     4b2:	80 83       	st	Z, r24
			while (BitIsClear(ADCSRA, ADIF))
     4b4:	f8 01       	movw	r30, r16
     4b6:	80 81       	ld	r24, Z
     4b8:	84 ff       	sbrs	r24, 4
     4ba:	fc cf       	rjmp	.-8      	; 0x4b4 <start_gas_sensor_read+0x5e>
			{
				// Wait for conversion to be complete
				// NOTE: In production version, we should wait for the interrupt and process in the background
			}
			// Read result
			ADC_result = ADC;
     4bc:	f7 01       	movw	r30, r14
     4be:	80 81       	ld	r24, Z
     4c0:	91 81       	ldd	r25, Z+1	; 0x01
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
     4c2:	e9 81       	ldd	r30, Y+1	; 0x01
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	e1 50       	subi	r30, 0x01	; 1
     4d0:	fd 4f       	sbci	r31, 0xFD	; 253
     4d2:	40 81       	ld	r20, Z
     4d4:	51 81       	ldd	r21, Z+1	; 0x01
     4d6:	e9 81       	ldd	r30, Y+1	; 0x01
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	e1 50       	subi	r30, 0x01	; 1
     4e4:	fd 4f       	sbci	r31, 0xFD	; 253
     4e6:	02 80       	ldd	r0, Z+2	; 0x02
     4e8:	f3 81       	ldd	r31, Z+3	; 0x03
     4ea:	e0 2d       	mov	r30, r0
     4ec:	6b 2d       	mov	r22, r11
     4ee:	84 17       	cp	r24, r20
     4f0:	95 07       	cpc	r25, r21
     4f2:	08 f0       	brcs	.+2      	; 0x4f6 <start_gas_sensor_read+0xa0>
     4f4:	6a 2d       	mov	r22, r10
     4f6:	61 11       	cpse	r22, r1
     4f8:	07 c0       	rjmp	.+14     	; 0x508 <start_gas_sensor_read+0xb2>
     4fa:	4b 2d       	mov	r20, r11
     4fc:	e8 17       	cp	r30, r24
     4fe:	f9 07       	cpc	r31, r25
     500:	08 f0       	brcs	.+2      	; 0x504 <start_gas_sensor_read+0xae>
     502:	4a 2d       	mov	r20, r10
     504:	44 23       	and	r20, r20
     506:	71 f0       	breq	.+28     	; 0x524 <start_gas_sensor_read+0xce>
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
     508:	59 81       	ldd	r21, Y+1	; 0x01
     50a:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <gas_sensor_initialization_errors>
     50e:	5d 5f       	subi	r21, 0xFD	; 253
     510:	f6 01       	movw	r30, r12
     512:	02 c0       	rjmp	.+4      	; 0x518 <start_gas_sensor_read+0xc2>
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	5a 95       	dec	r21
     51a:	e2 f7       	brpl	.-8      	; 0x514 <start_gas_sensor_read+0xbe>
     51c:	af 01       	movw	r20, r30
     51e:	46 2b       	or	r20, r22
     520:	40 93 2a 03 	sts	0x032A, r20	; 0x80032a <gas_sensor_initialization_errors>
			}
			total += ADC_result;
     524:	4a 81       	ldd	r20, Y+2	; 0x02
     526:	5b 81       	ldd	r21, Y+3	; 0x03
     528:	84 0f       	add	r24, r20
     52a:	95 1f       	adc	r25, r21
     52c:	9b 83       	std	Y+3, r25	; 0x03
     52e:	8a 83       	std	Y+2, r24	; 0x02
     530:	21 50       	subi	r18, 0x01	; 1
     532:	31 09       	sbc	r19, r1
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
	{
		ADC_SetMux(sensor_id);
		total = 0;	// re-zero the average
		
		for(int i = 0; i < max_gas_sample_count; i++)
     534:	09 f0       	breq	.+2      	; 0x538 <start_gas_sensor_read+0xe2>
     536:	ba cf       	rjmp	.-140    	; 0x4ac <start_gas_sensor_read+0x56>
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
			}
			total += ADC_result;
		}
		gas_average = total / max_gas_sample_count;
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	9b 81       	ldd	r25, Y+3	; 0x03
		raw_gas_vector[sensor_id] = gas_average;
     53c:	e9 81       	ldd	r30, Y+1	; 0x01
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	e2 5e       	subi	r30, 0xE2	; 226
     546:	fc 4f       	sbci	r31, 0xFC	; 252
     548:	9c 01       	movw	r18, r24
     54a:	99 23       	and	r25, r25
     54c:	14 f4       	brge	.+4      	; 0x552 <start_gas_sensor_read+0xfc>
     54e:	2d 5f       	subi	r18, 0xFD	; 253
     550:	3f 4f       	sbci	r19, 0xFF	; 255
     552:	35 95       	asr	r19
     554:	27 95       	ror	r18
     556:	35 95       	asr	r19
     558:	27 95       	ror	r18
     55a:	31 83       	std	Z+1, r19	; 0x01
     55c:	20 83       	st	Z, r18
	int16_t gas_average;
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	85 30       	cpi	r24, 0x05	; 5
     568:	08 f4       	brcc	.+2      	; 0x56c <start_gas_sensor_read+0x116>
     56a:	9a cf       	rjmp	.-204    	; 0x4a0 <start_gas_sensor_read+0x4a>
			total += ADC_result;
		}
		gas_average = total / max_gas_sample_count;
		raw_gas_vector[sensor_id] = gas_average;
	}
}
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	08 95       	ret

00000588 <LIDAR_distance>:

/********************************************************************************
						Functions
********************************************************************************/

uint16_t LIDAR_distance(void) {
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
	uint16_t Ldistance;
	// From the LIDAR datasheet page 4, simplest way to use the LIDAR:
	// Step 1: Write bias correction use (0x04) to register 0
	messageBuf[0] = LIDAR_WRITE; // LIDAR slave address +W.
     58e:	e1 e3       	ldi	r30, 0x31	; 49
     590:	f3 e0       	ldi	r31, 0x03	; 3
     592:	84 ec       	ldi	r24, 0xC4	; 196
     594:	80 83       	st	Z, r24
	messageBuf[1] = 0x00; // Select register 0x00
     596:	11 82       	std	Z+1, r1	; 0x01
	messageBuf[2] = LIDAR_USE_BIAS_CORRECTION; // What we're gonna write
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	82 83       	std	Z+2, r24	; 0x02
	TWI_Start_Transceiver_With_Data( messageBuf, 3);
     59c:	63 e0       	ldi	r22, 0x03	; 3
     59e:	cf 01       	movw	r24, r30
     5a0:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     5a4:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <TWI_Transceiver_Busy>
     5a8:	81 11       	cpse	r24, r1
     5aa:	fc cf       	rjmp	.-8      	; 0x5a4 <LIDAR_distance+0x1c>
	//
	// Step 2: read register 0x01 and watch the low bit.  
	// From page 6, we have to write the address we want to read first...
	messageBuf[0] = LIDAR_WRITE; // LIDAR slave address +W.
     5ac:	e1 e3       	ldi	r30, 0x31	; 49
     5ae:	f3 e0       	ldi	r31, 0x03	; 3
     5b0:	84 ec       	ldi	r24, 0xC4	; 196
     5b2:	80 83       	st	Z, r24
	messageBuf[1] = 0x01; // Select register 0x01
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( messageBuf, 2);
     5b8:	62 e0       	ldi	r22, 0x02	; 2
     5ba:	cf 01       	movw	r24, r30
     5bc:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );	
     5c0:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <TWI_Transceiver_Busy>
     5c4:	81 11       	cpse	r24, r1
     5c6:	fc cf       	rjmp	.-8      	; 0x5c0 <LIDAR_distance+0x38>
	// Now verify we're talking to the right device...set up a read of the chip ID:
	messageBuf[1] = 0x01; // Set up to wait for 0x01 LSB to go low...
	while (messageBuf[1] & 0x01)
	{
		messageBuf[0] = LIDAR_READ; // LIDAR slave address +R.
     5c8:	c1 e3       	ldi	r28, 0x31	; 49
     5ca:	d3 e0       	ldi	r29, 0x03	; 3
     5cc:	15 ec       	ldi	r17, 0xC5	; 197
     5ce:	18 83       	st	Y, r17
		messageBuf[1] = 0x00; // Clear the field where reg 0x01 will be written
     5d0:	19 82       	std	Y+1, r1	; 0x01
		TWI_Start_Transceiver_With_Data( messageBuf, 2);
     5d2:	62 e0       	ldi	r22, 0x02	; 2
     5d4:	ce 01       	movw	r24, r28
     5d6:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <TWI_Start_Transceiver_With_Data>
		while ( TWI_Transceiver_Busy() );	
     5da:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <TWI_Transceiver_Busy>
     5de:	81 11       	cpse	r24, r1
     5e0:	fc cf       	rjmp	.-8      	; 0x5da <LIDAR_distance+0x52>
		// Now get the data we just read...note that it starts in messageBuf[1], not [0]
		TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(messageBuf, 2);
     5e2:	62 e0       	ldi	r22, 0x02	; 2
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 98 0b 	call	0x1730	; 0x1730 <TWI_Get_Data_From_Transceiver>
     5ea:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <TWI_XFER_STATUS>
		testing = messageBuf[1]; //This is here for debug purposes
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <testing>
	TWI_Start_Transceiver_With_Data( messageBuf, 2);
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );	
	// Now verify we're talking to the right device...set up a read of the chip ID:
	messageBuf[1] = 0x01; // Set up to wait for 0x01 LSB to go low...
	while (messageBuf[1] & 0x01)
     5f4:	80 fd       	sbrc	r24, 0
     5f6:	eb cf       	rjmp	.-42     	; 0x5ce <LIDAR_distance+0x46>
	}
	// return;
	// LSB must now be low, so...
	// Step 3: Read two bytes from 0x8f (distance reg high byte, low byte)
	// First, WRITE the read-from address...
	messageBuf[0] = LIDAR_WRITE; // LIDAR slave address +W.
     5f8:	e1 e3       	ldi	r30, 0x31	; 49
     5fa:	f3 e0       	ldi	r31, 0x03	; 3
     5fc:	84 ec       	ldi	r24, 0xC4	; 196
     5fe:	80 83       	st	Z, r24
	messageBuf[1] = LIDAR_AUTO_INCREMENT_ON_READ | LIDAR_DISTANCE_HIGH_BYTE;
     600:	8f e8       	ldi	r24, 0x8F	; 143
     602:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( messageBuf, 2);
     604:	62 e0       	ldi	r22, 0x02	; 2
     606:	cf 01       	movw	r24, r30
     608:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while (TWI_Transceiver_Busy());
     60c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <TWI_Transceiver_Busy>
     610:	81 11       	cpse	r24, r1
     612:	fc cf       	rjmp	.-8      	; 0x60c <LIDAR_distance+0x84>
	// Now READ from that address
	messageBuf[0] = LIDAR_READ; // LIDAR slave address +R.
     614:	e1 e3       	ldi	r30, 0x31	; 49
     616:	f3 e0       	ldi	r31, 0x03	; 3
     618:	85 ec       	ldi	r24, 0xC5	; 197
     61a:	80 83       	st	Z, r24
	messageBuf[1] = 0x00; //clear the receive area to see if it gets written
     61c:	11 82       	std	Z+1, r1	; 0x01
	messageBuf[2] = 0x00; //clear the receive area to see if it gets written	
     61e:	12 82       	std	Z+2, r1	; 0x02
	TWI_Start_Transceiver_With_Data( messageBuf, 3);
     620:	63 e0       	ldi	r22, 0x03	; 3
     622:	cf 01       	movw	r24, r30
     624:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	while ( TWI_Transceiver_Busy() );	
     628:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <TWI_Transceiver_Busy>
     62c:	81 11       	cpse	r24, r1
     62e:	fc cf       	rjmp	.-8      	; 0x628 <LIDAR_distance+0xa0>
	// Now transfer the data into our buffer
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(messageBuf, 3);
     630:	63 e0       	ldi	r22, 0x03	; 3
     632:	81 e3       	ldi	r24, 0x31	; 49
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	0e 94 98 0b 	call	0x1730	; 0x1730 <TWI_Get_Data_From_Transceiver>
     63a:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <TWI_XFER_STATUS>
	Ldistance = (messageBuf[1]<<8) + messageBuf[2];
     63e:	e1 e3       	ldi	r30, 0x31	; 49
     640:	f3 e0       	ldi	r31, 0x03	; 3
	// That's all, folks...
	return(Ldistance);
     642:	81 81       	ldd	r24, Z+1	; 0x01
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	98 2f       	mov	r25, r24
     648:	88 27       	eor	r24, r24
     64a:	22 81       	ldd	r18, Z+2	; 0x02
}
     64c:	82 0f       	add	r24, r18
     64e:	91 1d       	adc	r25, r1
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	08 95       	ret

00000658 <BME_read_correction_coefficients>:
// 	// Call the HW initialization routine
// 	rslt = bme280_init(&dev);
// 	
// }

void BME_read_correction_coefficients(void) {
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
// 	BMEmessageBuf[1] = 0x88; // The register we want to start reading from
/*	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);*/
	// Let initialization transaction complete...
/*	while ( TWI_Transceiver_Busy() );*/
	static volatile uint8_t BMEbusy = 1;
	while (BMEbusy) {
     662:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     666:	88 23       	and	r24, r24
     668:	59 f1       	breq	.+86     	; 0x6c0 <BME_read_correction_coefficients+0x68>
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     66a:	c2 e4       	ldi	r28, 0x42	; 66
     66c:	d3 e0       	ldi	r29, 0x03	; 3
     66e:	0f 2e       	mov	r0, r31
     670:	fc ee       	ldi	r31, 0xEC	; 236
     672:	ff 2e       	mov	r15, r31
     674:	f0 2d       	mov	r31, r0
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     676:	03 ef       	ldi	r16, 0xF3	; 243
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). 
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     678:	1d ee       	ldi	r17, 0xED	; 237
/*	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);*/
	// Let initialization transaction complete...
/*	while ( TWI_Transceiver_Busy() );*/
	static volatile uint8_t BMEbusy = 1;
	while (BMEbusy) {
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     67a:	f8 82       	st	Y, r15
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     67c:	09 83       	std	Y+1, r16	; 0x01
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     67e:	62 e0       	ldi	r22, 0x02	; 2
     680:	ce 01       	movw	r24, r28
     682:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     686:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <TWI_Transceiver_Busy>
     68a:	81 11       	cpse	r24, r1
     68c:	fc cf       	rjmp	.-8      	; 0x686 <BME_read_correction_coefficients+0x2e>
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). 
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     68e:	18 83       	st	Y, r17
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 26); //We want one bytes back, so use 2 in the function call.
     690:	6a e1       	ldi	r22, 0x1A	; 26
     692:	ce 01       	movw	r24, r28
     694:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     698:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <TWI_Transceiver_Busy>
     69c:	81 11       	cpse	r24, r1
     69e:	fc cf       	rjmp	.-8      	; 0x698 <BME_read_correction_coefficients+0x40>
		// Copy the data we want...
		TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 26);
     6a0:	6a e1       	ldi	r22, 0x1A	; 26
     6a2:	ce 01       	movw	r24, r28
     6a4:	0e 94 98 0b 	call	0x1730	; 0x1730 <TWI_Get_Data_From_Transceiver>
     6a8:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <TWI_XFER_STATUS>
		// CHeck to see if things are still busy
		BMEbusy = ((0b00001000 & BMEmessageBuf[1])>>3);
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	83 fb       	bst	r24, 3
     6b0:	88 27       	eor	r24, r24
     6b2:	80 f9       	bld	r24, 0
     6b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
// 	BMEmessageBuf[1] = 0x88; // The register we want to start reading from
/*	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);*/
	// Let initialization transaction complete...
/*	while ( TWI_Transceiver_Busy() );*/
	static volatile uint8_t BMEbusy = 1;
	while (BMEbusy) {
     6b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6bc:	81 11       	cpse	r24, r1
     6be:	dd cf       	rjmp	.-70     	; 0x67a <BME_read_correction_coefficients+0x22>
// 	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 26);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
		// Device is completed the measurement cycle, now get the temperature data...
	// We want to start reading the data from register 0xF7 and read to register 0xFE - 8 bytes total
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     6c0:	e2 e4       	ldi	r30, 0x42	; 66
     6c2:	f3 e0       	ldi	r31, 0x03	; 3
     6c4:	8c ee       	ldi	r24, 0xEC	; 236
     6c6:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0x88; // The register we want to start reading from 
     6c8:	88 e8       	ldi	r24, 0x88	; 136
     6ca:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     6cc:	62 e0       	ldi	r22, 0x02	; 2
     6ce:	cf 01       	movw	r24, r30
     6d0:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     6d4:	fd d7       	rcall	.+4090   	; 0x16d0 <TWI_Transceiver_Busy>
     6d6:	81 11       	cpse	r24, r1
     6d8:	fd cf       	rjmp	.-6      	; 0x6d4 <BME_read_correction_coefficients+0x7c>
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read eight bytes, we pass "9".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     6da:	8d ee       	ldi	r24, 0xED	; 237
     6dc:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 27); //We want eight bytes back, so use 9 in the function call.
     6e0:	6b e1       	ldi	r22, 0x1B	; 27
     6e2:	82 e4       	ldi	r24, 0x42	; 66
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	f8 d7       	rcall	.+4080   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     6e8:	f3 d7       	rcall	.+4070   	; 0x16d0 <TWI_Transceiver_Busy>
     6ea:	81 11       	cpse	r24, r1
     6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <BME_read_correction_coefficients+0x90>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 27);
     6ee:	6b e1       	ldi	r22, 0x1B	; 27
     6f0:	82 e4       	ldi	r24, 0x42	; 66
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	0e 94 98 0b 	call	0x1730	; 0x1730 <TWI_Get_Data_From_Transceiver>
     6f8:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <TWI_XFER_STATUS>
     6fc:	c3 e4       	ldi	r28, 0x43	; 67
     6fe:	d3 e0       	ldi	r29, 0x03	; 3
     700:	0b e4       	ldi	r16, 0x4B	; 75
     702:	14 e0       	ldi	r17, 0x04	; 4
     704:	2e e5       	ldi	r18, 0x5E	; 94
     706:	33 e0       	ldi	r19, 0x03	; 3
     708:	d8 01       	movw	r26, r16
     70a:	fe 01       	movw	r30, r28
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<27;i++) 	{
		RawBMEdata[i] = BMEmessageBuf[i+1];
     70c:	81 91       	ld	r24, Z+
     70e:	8d 93       	st	X+, r24
	while ( TWI_Transceiver_Busy() );
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 27);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<27;i++) 	{
     710:	e2 17       	cp	r30, r18
     712:	f3 07       	cpc	r31, r19
     714:	d9 f7       	brne	.-10     	; 0x70c <BME_read_correction_coefficients+0xb4>
     716:	8b e1       	ldi	r24, 0x1B	; 27
     718:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <i.2425>
		RawBMEdata[i] = BMEmessageBuf[i+1];
	}
	dig_T1 = /*0x7069;*/ RawBMEdata[0] | (RawBMEdata[1]<<8);
     71c:	eb e4       	ldi	r30, 0x4B	; 75
     71e:	f4 e0       	ldi	r31, 0x04	; 4
     720:	81 81       	ldd	r24, Z+1	; 0x01
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	98 2f       	mov	r25, r24
     726:	88 27       	eor	r24, r24
     728:	20 81       	ld	r18, Z
     72a:	82 2b       	or	r24, r18
     72c:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <dig_T1+0x1>
     730:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <dig_T1>
	dig_T2 = /*0x6738;*/ RawBMEdata[2] | (RawBMEdata[3]<<8);
     734:	83 81       	ldd	r24, Z+3	; 0x03
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	98 2f       	mov	r25, r24
     73a:	88 27       	eor	r24, r24
     73c:	22 81       	ldd	r18, Z+2	; 0x02
     73e:	82 2b       	or	r24, r18
     740:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <dig_T2+0x1>
     744:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <dig_T2>
	dig_T3 = /*0x32; */RawBMEdata[4] | (RawBMEdata[5]<<8);
     748:	85 81       	ldd	r24, Z+5	; 0x05
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 2f       	mov	r25, r24
     74e:	88 27       	eor	r24, r24
     750:	24 81       	ldd	r18, Z+4	; 0x04
     752:	82 2b       	or	r24, r18
     754:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <dig_T3+0x1>
     758:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <dig_T3>
	dig_P1 = RawBMEdata[6] | (RawBMEdata[7]<<8);
     75c:	87 81       	ldd	r24, Z+7	; 0x07
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	98 2f       	mov	r25, r24
     762:	88 27       	eor	r24, r24
     764:	26 81       	ldd	r18, Z+6	; 0x06
     766:	82 2b       	or	r24, r18
     768:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <dig_P1+0x1>
     76c:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <dig_P1>
	dig_P2 = RawBMEdata[8] | (RawBMEdata[9]<<8);
     770:	81 85       	ldd	r24, Z+9	; 0x09
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	98 2f       	mov	r25, r24
     776:	88 27       	eor	r24, r24
     778:	20 85       	ldd	r18, Z+8	; 0x08
     77a:	82 2b       	or	r24, r18
     77c:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <dig_P2+0x1>
     780:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <dig_P2>
	dig_P3 = RawBMEdata[10] | (RawBMEdata[11]<<8);
     784:	83 85       	ldd	r24, Z+11	; 0x0b
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	98 2f       	mov	r25, r24
     78a:	88 27       	eor	r24, r24
     78c:	22 85       	ldd	r18, Z+10	; 0x0a
     78e:	82 2b       	or	r24, r18
     790:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <dig_P3+0x1>
     794:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <dig_P3>
	dig_P4 = RawBMEdata[12] | (RawBMEdata[13]<<8);
     798:	85 85       	ldd	r24, Z+13	; 0x0d
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	98 2f       	mov	r25, r24
     79e:	88 27       	eor	r24, r24
     7a0:	24 85       	ldd	r18, Z+12	; 0x0c
     7a2:	82 2b       	or	r24, r18
     7a4:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <dig_P4+0x1>
     7a8:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <dig_P4>
	dig_P5 = RawBMEdata[14] | (RawBMEdata[15]<<8);
     7ac:	87 85       	ldd	r24, Z+15	; 0x0f
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	98 2f       	mov	r25, r24
     7b2:	88 27       	eor	r24, r24
     7b4:	26 85       	ldd	r18, Z+14	; 0x0e
     7b6:	82 2b       	or	r24, r18
     7b8:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <dig_P5+0x1>
     7bc:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <dig_P5>
	dig_P6 = RawBMEdata[16] | (RawBMEdata[17]<<8);
     7c0:	81 89       	ldd	r24, Z+17	; 0x11
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	98 2f       	mov	r25, r24
     7c6:	88 27       	eor	r24, r24
     7c8:	20 89       	ldd	r18, Z+16	; 0x10
     7ca:	82 2b       	or	r24, r18
     7cc:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <dig_P6+0x1>
     7d0:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <dig_P6>
	dig_P7 = RawBMEdata[18] | (RawBMEdata[19]<<8);
     7d4:	83 89       	ldd	r24, Z+19	; 0x13
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	98 2f       	mov	r25, r24
     7da:	88 27       	eor	r24, r24
     7dc:	22 89       	ldd	r18, Z+18	; 0x12
     7de:	82 2b       	or	r24, r18
     7e0:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <dig_P7+0x1>
     7e4:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <dig_P7>
	dig_P8 = RawBMEdata[20] | (RawBMEdata[21]<<8);
     7e8:	85 89       	ldd	r24, Z+21	; 0x15
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	98 2f       	mov	r25, r24
     7ee:	88 27       	eor	r24, r24
     7f0:	24 89       	ldd	r18, Z+20	; 0x14
     7f2:	82 2b       	or	r24, r18
     7f4:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <dig_P8+0x1>
     7f8:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <dig_P8>
	dig_P9 = RawBMEdata[22] | (RawBMEdata[23]<<8);
     7fc:	87 89       	ldd	r24, Z+23	; 0x17
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	98 2f       	mov	r25, r24
     802:	88 27       	eor	r24, r24
     804:	26 89       	ldd	r18, Z+22	; 0x16
     806:	82 2b       	or	r24, r18
     808:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <dig_P9+0x1>
     80c:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <dig_P9>
	dig_H1 = RawBMEdata[25];
     810:	81 8d       	ldd	r24, Z+25	; 0x19
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <dig_H1+0x1>
     818:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <dig_H1>
	//Now grab the rest of the humidity sensor data
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     81c:	e2 e4       	ldi	r30, 0x42	; 66
     81e:	f3 e0       	ldi	r31, 0x03	; 3
     820:	8c ee       	ldi	r24, 0xEC	; 236
     822:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xE1; // The register we want to start reading from
     824:	81 ee       	ldi	r24, 0xE1	; 225
     826:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     828:	62 e0       	ldi	r22, 0x02	; 2
     82a:	cf 01       	movw	r24, r30
     82c:	55 d7       	rcall	.+3754   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     82e:	50 d7       	rcall	.+3744   	; 0x16d0 <TWI_Transceiver_Busy>
     830:	81 11       	cpse	r24, r1
     832:	fd cf       	rjmp	.-6      	; 0x82e <BME_read_correction_coefficients+0x1d6>
     834:	8d ee       	ldi	r24, 0xED	; 237
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read eight bytes, we pass "9".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     836:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <BMEmessageBuf>
     83a:	68 e0       	ldi	r22, 0x08	; 8
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 8); //We want eight bytes back, so use 9 in the function call.
     83c:	82 e4       	ldi	r24, 0x42	; 66
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	4b d7       	rcall	.+3734   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     842:	46 d7       	rcall	.+3724   	; 0x16d0 <TWI_Transceiver_Busy>
     844:	81 11       	cpse	r24, r1
     846:	fd cf       	rjmp	.-6      	; 0x842 <BME_read_correction_coefficients+0x1ea>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 8);
     848:	68 e0       	ldi	r22, 0x08	; 8
     84a:	82 e4       	ldi	r24, 0x42	; 66
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	70 d7       	rcall	.+3808   	; 0x1730 <TWI_Get_Data_From_Transceiver>
     850:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <TWI_XFER_STATUS>
     854:	2a e4       	ldi	r18, 0x4A	; 74
     856:	33 e0       	ldi	r19, 0x03	; 3
     858:	89 91       	ld	r24, Y+
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<7;i++) 	{
		RawBMEdata[i] = BMEmessageBuf[i+1];
     85a:	f8 01       	movw	r30, r16
     85c:	81 93       	st	Z+, r24
     85e:	8f 01       	movw	r16, r30
     860:	c2 17       	cp	r28, r18
	while ( TWI_Transceiver_Busy() );
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 8);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<7;i++) 	{
     862:	d3 07       	cpc	r29, r19
     864:	c9 f7       	brne	.-14     	; 0x858 <BME_read_correction_coefficients+0x200>
     866:	87 e0       	ldi	r24, 0x07	; 7
     868:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <i.2425>
     86c:	eb e4       	ldi	r30, 0x4B	; 75
		RawBMEdata[i] = BMEmessageBuf[i+1];
	}
	dig_H2 = RawBMEdata[1] | (RawBMEdata[2]<<8); 
     86e:	f4 e0       	ldi	r31, 0x04	; 4
     870:	82 81       	ldd	r24, Z+2	; 0x02
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	98 2f       	mov	r25, r24
     876:	88 27       	eor	r24, r24
     878:	21 81       	ldd	r18, Z+1	; 0x01
     87a:	82 2b       	or	r24, r18
     87c:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <dig_H2+0x1>
     880:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <dig_H2>
     884:	83 81       	ldd	r24, Z+3	; 0x03
	dig_H3 = RawBMEdata[3]; 
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <dig_H3+0x1>
     88c:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <dig_H3>
     890:	85 81       	ldd	r24, Z+5	; 0x05
	dig_H4 = (RawBMEdata[4]<<4) | (RawBMEdata[5]>>5);
     892:	82 95       	swap	r24
     894:	86 95       	lsr	r24
     896:	87 70       	andi	r24, 0x07	; 7
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	24 81       	ldd	r18, Z+4	; 0x04
     89c:	40 e1       	ldi	r20, 0x10	; 16
     89e:	24 9f       	mul	r18, r20
     8a0:	90 01       	movw	r18, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	28 2b       	or	r18, r24
     8a6:	39 2b       	or	r19, r25
     8a8:	30 93 48 04 	sts	0x0448, r19	; 0x800448 <dig_H4+0x1>
     8ac:	20 93 47 04 	sts	0x0447, r18	; 0x800447 <dig_H4>
     8b0:	26 81       	ldd	r18, Z+6	; 0x06
	dig_H5 = (RawBMEdata[5]>>5) | (RawBMEdata[6]<<4);
     8b2:	40 e1       	ldi	r20, 0x10	; 16
     8b4:	24 9f       	mul	r18, r20
     8b6:	90 01       	movw	r18, r0
     8b8:	11 24       	eor	r1, r1
     8ba:	82 2b       	or	r24, r18
     8bc:	93 2b       	or	r25, r19
     8be:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <dig_H5+0x1>
     8c2:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <dig_H5>
     8c6:	87 81       	ldd	r24, Z+7	; 0x07
	dig_H6 = RawBMEdata[7];
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <dig_H6+0x1>
     8ce:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <dig_H6>
     8d2:	df 91       	pop	r29
}
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	08 95       	ret

000008de <bme280basic_init>:
     8de:	e2 e4       	ldi	r30, 0x42	; 66
	// 3) Send the two bytes and restart
	// 4) First byte is the sensor I2C address (x2) and the read/write bit set to 1
	// 5) Start the transaction and send a NACK after you've received the last byte you want.
	//
	// First, reset the device per section 5.4.2 of the data sheet
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     8e0:	f3 e0       	ldi	r31, 0x03	; 3
     8e2:	8c ee       	ldi	r24, 0xEC	; 236
     8e4:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xE0; // The register we want to write to
     8e6:	80 ee       	ldi	r24, 0xE0	; 224
     8e8:	81 83       	std	Z+1, r24	; 0x01
	BMEmessageBuf[2] = 0xB6; // This value forces a reset to the device
     8ea:	86 eb       	ldi	r24, 0xB6	; 182
     8ec:	82 83       	std	Z+2, r24	; 0x02
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     8ee:	63 e0       	ldi	r22, 0x03	; 3
     8f0:	cf 01       	movw	r24, r30
     8f2:	f2 d6       	rcall	.+3556   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Wait for the transaction to complete...
	while ( TWI_Transceiver_Busy() );
     8f4:	ed d6       	rcall	.+3546   	; 0x16d0 <TWI_Transceiver_Busy>
     8f6:	81 11       	cpse	r24, r1
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <bme280basic_init+0x16>
     8fa:	e2 e4       	ldi	r30, 0x42	; 66
	//
	// Now read the chip ID from register 0x0D
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     8fc:	f3 e0       	ldi	r31, 0x03	; 3
     8fe:	8c ee       	ldi	r24, 0xEC	; 236
     900:	80 83       	st	Z, r24
     902:	80 ed       	ldi	r24, 0xD0	; 208
	BMEmessageBuf[1] = 0xD0; // The register we want to read from
     904:	81 83       	std	Z+1, r24	; 0x01
     906:	62 e0       	ldi	r22, 0x02	; 2
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     908:	cf 01       	movw	r24, r30
     90a:	e6 d6       	rcall	.+3532   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     90c:	e1 d6       	rcall	.+3522   	; 0x16d0 <TWI_Transceiver_Busy>
     90e:	81 11       	cpse	r24, r1
     910:	fd cf       	rjmp	.-6      	; 0x90c <bme280basic_init+0x2e>
     912:	8d ee       	ldi	r24, 0xED	; 237
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read one byte, we pass "2".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     914:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2); //We only want one byte back, so use 2 in the function call.
     918:	62 e0       	ldi	r22, 0x02	; 2
     91a:	82 e4       	ldi	r24, 0x42	; 66
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	dc d6       	rcall	.+3512   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     920:	d7 d6       	rcall	.+3502   	; 0x16d0 <TWI_Transceiver_Busy>
     922:	81 11       	cpse	r24, r1
     924:	fd cf       	rjmp	.-6      	; 0x920 <bme280basic_init+0x42>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 2);
     926:	62 e0       	ldi	r22, 0x02	; 2
     928:	82 e4       	ldi	r24, 0x42	; 66
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	01 d7       	rcall	.+3586   	; 0x1730 <TWI_Get_Data_From_Transceiver>
     92e:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <TWI_XFER_STATUS>
     932:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <BMEmessageBuf+0x1>
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	if (BMEmessageBuf[1]==0x60) { 
     936:	80 36       	cpi	r24, 0x60	; 96
     938:	69 f5       	brne	.+90     	; 0x994 <bme280basic_init+0xb6>
     93a:	e2 e4       	ldi	r30, 0x42	; 66
		// We're talking to the right device.  Set up the control registers...
		//
		// We want Humidity oversampling set to x1 (ctrl_hum (0xF2) [2:0] = 0b001)
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     93c:	f3 e0       	ldi	r31, 0x03	; 3
     93e:	8c ee       	ldi	r24, 0xEC	; 236
     940:	80 83       	st	Z, r24
		BMEmessageBuf[1] = 0xF2; // The register we want to write to
     942:	82 ef       	ldi	r24, 0xF2	; 242
		BMEmessageBuf[2] = 0x01; // Set humidity oversampling to x1
     944:	81 83       	std	Z+1, r24	; 0x01
     946:	81 e0       	ldi	r24, 0x01	; 1
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     948:	82 83       	std	Z+2, r24	; 0x02
     94a:	63 e0       	ldi	r22, 0x03	; 3
     94c:	cf 01       	movw	r24, r30
     94e:	c4 d6       	rcall	.+3464   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
		// Wait for the transaction to complete...
		while ( TWI_Transceiver_Busy() );
     950:	bf d6       	rcall	.+3454   	; 0x16d0 <TWI_Transceiver_Busy>
     952:	81 11       	cpse	r24, r1
     954:	fd cf       	rjmp	.-6      	; 0x950 <bme280basic_init+0x72>
     956:	e2 e4       	ldi	r30, 0x42	; 66
		//		
		//Set Tstandby to its smallest value (0)
		//  Per table 12 and 28 we want the filter coefficient at 16 (config (0xF5) [4:2] = 0b100)
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     958:	f3 e0       	ldi	r31, 0x03	; 3
     95a:	8c ee       	ldi	r24, 0xEC	; 236
		BMEmessageBuf[1] = 0xF5; // The register we want to write to
     95c:	80 83       	st	Z, r24
		BMEmessageBuf[2] = (0b100<<2); // Set temp, pressure, and mode
     95e:	85 ef       	ldi	r24, 0xF5	; 245
     960:	81 83       	std	Z+1, r24	; 0x01
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     962:	80 e1       	ldi	r24, 0x10	; 16
     964:	82 83       	std	Z+2, r24	; 0x02
     966:	63 e0       	ldi	r22, 0x03	; 3
     968:	cf 01       	movw	r24, r30
		// Wait for the transaction to complete...
		while ( TWI_Transceiver_Busy() );
     96a:	b6 d6       	rcall	.+3436   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
     96c:	b1 d6       	rcall	.+3426   	; 0x16d0 <TWI_Transceiver_Busy>
     96e:	81 11       	cpse	r24, r1
     970:	fd cf       	rjmp	.-6      	; 0x96c <bme280basic_init+0x8e>
		//
		BME_read_correction_coefficients();
     972:	72 de       	rcall	.-796    	; 0x658 <BME_read_correction_coefficients>
     974:	81 e3       	ldi	r24, 0x31	; 49
		// We want Temperature oversampling set to x1 (ctrl_meas (0xF4) [7:5] = 0b001)
		// We want Pressure oversampling set to x8 (ctrl_meas (0xF4) [4:2] = 0b100)
		// Put the device into Forced mode (we want to tell the device to "go measure") (ctrl_meas (0xF4) [1:0] = 0b01)
		BMEtriggerbyte = (0b01<<5) | (0b100<<2) | (0b01<<0);
     976:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <BMEtriggerbyte>
		// NOTE: THIS BYTE MUST BE RESENT EACH TIME TO GET A NEW MEASUREMENT
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     97a:	e2 e4       	ldi	r30, 0x42	; 66
     97c:	f3 e0       	ldi	r31, 0x03	; 3
     97e:	9c ee       	ldi	r25, 0xEC	; 236
		BMEmessageBuf[1] = 0xF4; // The register we want to write to
     980:	90 83       	st	Z, r25
     982:	94 ef       	ldi	r25, 0xF4	; 244
		BMEmessageBuf[2] = BMEtriggerbyte; // Set temp, pressure, and mode
     984:	91 83       	std	Z+1, r25	; 0x01
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     986:	82 83       	std	Z+2, r24	; 0x02
     988:	63 e0       	ldi	r22, 0x03	; 3
     98a:	cf 01       	movw	r24, r30
     98c:	a5 d6       	rcall	.+3402   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
		// Wait for the transaction to complete...
		while ( TWI_Transceiver_Busy() );
     98e:	a0 d6       	rcall	.+3392   	; 0x16d0 <TWI_Transceiver_Busy>
     990:	81 11       	cpse	r24, r1
     992:	fd cf       	rjmp	.-6      	; 0x98e <bme280basic_init+0xb0>
     994:	08 95       	ret

00000996 <bme280basic_bulk_data_read>:
     996:	ff 92       	push	r15
		//  All done - and first measurement cycle has  been kicked off!
	}
}

void bme280basic_bulk_data_read(void) {
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
	// See the bme280basic_init routine for the read and write protocols for using this sensor...
	uint8_t i;
	static volatile uint8_t BMEbusy;
	//
	// Ensure the device has completed the read cycle...
	BMEbusy = 1;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <BMEbusy.2479>
	while (BMEbusy) {
     9a6:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <BMEbusy.2479>
     9aa:	88 23       	and	r24, r24
     9ac:	31 f1       	breq	.+76     	; 0x9fa <bme280basic_bulk_data_read+0x64>
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     9ae:	c2 e4       	ldi	r28, 0x42	; 66
     9b0:	d3 e0       	ldi	r29, 0x03	; 3
     9b2:	0f 2e       	mov	r0, r31
     9b4:	fc ee       	ldi	r31, 0xEC	; 236
     9b6:	ff 2e       	mov	r15, r31
     9b8:	f0 2d       	mov	r31, r0
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     9ba:	03 ef       	ldi	r16, 0xF3	; 243
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). 
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     9bc:	1d ee       	ldi	r17, 0xED	; 237
	static volatile uint8_t BMEbusy;
	//
	// Ensure the device has completed the read cycle...
	BMEbusy = 1;
	while (BMEbusy) {
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     9be:	f8 82       	st	Y, r15
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     9c0:	09 83       	std	Y+1, r16	; 0x01
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     9c2:	62 e0       	ldi	r22, 0x02	; 2
     9c4:	ce 01       	movw	r24, r28
     9c6:	88 d6       	rcall	.+3344   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     9c8:	83 d6       	rcall	.+3334   	; 0x16d0 <TWI_Transceiver_Busy>
     9ca:	81 11       	cpse	r24, r1
     9cc:	fd cf       	rjmp	.-6      	; 0x9c8 <bme280basic_bulk_data_read+0x32>
     9ce:	18 83       	st	Y, r17
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). 
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     9d0:	62 e0       	ldi	r22, 0x02	; 2
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2); //We want one bytes back, so use 2 in the function call.
     9d2:	ce 01       	movw	r24, r28
     9d4:	81 d6       	rcall	.+3330   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     9d6:	7c d6       	rcall	.+3320   	; 0x16d0 <TWI_Transceiver_Busy>
     9d8:	81 11       	cpse	r24, r1
     9da:	fd cf       	rjmp	.-6      	; 0x9d6 <bme280basic_bulk_data_read+0x40>
		// Copy the data we want...
		TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 2);
     9dc:	62 e0       	ldi	r22, 0x02	; 2
     9de:	ce 01       	movw	r24, r28
     9e0:	a7 d6       	rcall	.+3406   	; 0x1730 <TWI_Get_Data_From_Transceiver>
     9e2:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <TWI_XFER_STATUS>
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
		// CHeck to see if things are still busy
		BMEbusy = ((0b00001000 & BMEmessageBuf[1])>>3);
     9e8:	83 fb       	bst	r24, 3
     9ea:	88 27       	eor	r24, r24
     9ec:	80 f9       	bld	r24, 0
     9ee:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <BMEbusy.2479>
     9f2:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <BMEbusy.2479>
	uint8_t i;
	static volatile uint8_t BMEbusy;
	//
	// Ensure the device has completed the read cycle...
	BMEbusy = 1;
	while (BMEbusy) {
     9f6:	81 11       	cpse	r24, r1
     9f8:	e2 cf       	rjmp	.-60     	; 0x9be <bme280basic_bulk_data_read+0x28>
     9fa:	e2 e4       	ldi	r30, 0x42	; 66
		BMEbusy = ((0b00001000 & BMEmessageBuf[1])>>3);
	}
	//
	// Device is completed the measurement cycle, now get the temperature data...
	// We want to start reading the data from register 0xF7 and read to register 0xFE - 8 bytes total
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     9fc:	f3 e0       	ldi	r31, 0x03	; 3
     9fe:	8c ee       	ldi	r24, 0xEC	; 236
     a00:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xF7; // The register we want to start reading from 
     a02:	87 ef       	ldi	r24, 0xF7	; 247
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     a04:	81 83       	std	Z+1, r24	; 0x01
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	cf 01       	movw	r24, r30
     a0a:	66 d6       	rcall	.+3276   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     a0c:	61 d6       	rcall	.+3266   	; 0x16d0 <TWI_Transceiver_Busy>
     a0e:	81 11       	cpse	r24, r1
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <bme280basic_bulk_data_read+0x76>
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read eight bytes, we pass "9".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     a12:	8d ee       	ldi	r24, 0xED	; 237
     a14:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 9); //We want eight bytes back, so use 9 in the function call.
     a18:	69 e0       	ldi	r22, 0x09	; 9
     a1a:	82 e4       	ldi	r24, 0x42	; 66
     a1c:	93 e0       	ldi	r25, 0x03	; 3
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     a1e:	5c d6       	rcall	.+3256   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
     a20:	57 d6       	rcall	.+3246   	; 0x16d0 <TWI_Transceiver_Busy>
     a22:	81 11       	cpse	r24, r1
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <bme280basic_bulk_data_read+0x8a>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 9);
     a26:	69 e0       	ldi	r22, 0x09	; 9
     a28:	82 e4       	ldi	r24, 0x42	; 66
     a2a:	93 e0       	ldi	r25, 0x03	; 3
     a2c:	81 d6       	rcall	.+3330   	; 0x1730 <TWI_Get_Data_From_Transceiver>
     a2e:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <TWI_XFER_STATUS>
     a32:	e3 e4       	ldi	r30, 0x43	; 67
     a34:	f3 e0       	ldi	r31, 0x03	; 3
     a36:	ab e4       	ldi	r26, 0x4B	; 75
     a38:	b4 e0       	ldi	r27, 0x04	; 4
     a3a:	2b e4       	ldi	r18, 0x4B	; 75
     a3c:	33 e0       	ldi	r19, 0x03	; 3
     a3e:	81 91       	ld	r24, Z+
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<8;i++) 	{
		RawBMEdata[i] = BMEmessageBuf[i+1];
     a40:	8d 93       	st	X+, r24
     a42:	e2 17       	cp	r30, r18
	while ( TWI_Transceiver_Busy() );
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 9);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<8;i++) 	{
     a44:	f3 07       	cpc	r31, r19
     a46:	d9 f7       	brne	.-10     	; 0xa3e <bme280basic_bulk_data_read+0xa8>
     a48:	eb e4       	ldi	r30, 0x4B	; 75
		RawBMEdata[i] = BMEmessageBuf[i+1];
	}
	rawPress = ((uint32_t)RawBMEdata[0]<<12) | ((uint32_t)RawBMEdata[1]<<4) | ((uint32_t)RawBMEdata[2]>>4);
     a4a:	f4 e0       	ldi	r31, 0x04	; 4
     a4c:	80 81       	ld	r24, Z
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	ac 01       	movw	r20, r24
     a56:	bd 01       	movw	r22, r26
     a58:	03 2e       	mov	r0, r19
     a5a:	3c e0       	ldi	r19, 0x0C	; 12
     a5c:	44 0f       	add	r20, r20
     a5e:	55 1f       	adc	r21, r21
     a60:	66 1f       	adc	r22, r22
     a62:	77 1f       	adc	r23, r23
     a64:	3a 95       	dec	r19
     a66:	d1 f7       	brne	.-12     	; 0xa5c <bme280basic_bulk_data_read+0xc6>
     a68:	30 2d       	mov	r19, r0
     a6a:	91 81       	ldd	r25, Z+1	; 0x01
     a6c:	89 2f       	mov	r24, r25
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	aa 1f       	adc	r26, r26
     a7a:	bb 1f       	adc	r27, r27
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	aa 1f       	adc	r26, r26
     a82:	bb 1f       	adc	r27, r27
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	aa 1f       	adc	r26, r26
     a8a:	bb 1f       	adc	r27, r27
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	aa 1f       	adc	r26, r26
     a92:	bb 1f       	adc	r27, r27
     a94:	84 2b       	or	r24, r20
     a96:	95 2b       	or	r25, r21
     a98:	a6 2b       	or	r26, r22
     a9a:	b7 2b       	or	r27, r23
     a9c:	22 81       	ldd	r18, Z+2	; 0x02
     a9e:	22 95       	swap	r18
     aa0:	2f 70       	andi	r18, 0x0F	; 15
     aa2:	82 2b       	or	r24, r18
     aa4:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <rawPress>
     aa8:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <rawPress+0x1>
     aac:	a0 93 93 04 	sts	0x0493, r26	; 0x800493 <rawPress+0x2>
     ab0:	b0 93 94 04 	sts	0x0494, r27	; 0x800494 <rawPress+0x3>
     ab4:	83 81       	ldd	r24, Z+3	; 0x03
	rawTemp = ((uint32_t)RawBMEdata[3]<<12) | ((uint32_t)RawBMEdata[4]<<4) | ((uint32_t)RawBMEdata[5]>>4);
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	ac 01       	movw	r20, r24
     abe:	bd 01       	movw	r22, r26
     ac0:	03 2e       	mov	r0, r19
     ac2:	3c e0       	ldi	r19, 0x0C	; 12
     ac4:	44 0f       	add	r20, r20
     ac6:	55 1f       	adc	r21, r21
     ac8:	66 1f       	adc	r22, r22
     aca:	77 1f       	adc	r23, r23
     acc:	3a 95       	dec	r19
     ace:	d1 f7       	brne	.-12     	; 0xac4 <bme280basic_bulk_data_read+0x12e>
     ad0:	30 2d       	mov	r19, r0
     ad2:	94 81       	ldd	r25, Z+4	; 0x04
     ad4:	89 2f       	mov	r24, r25
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	a0 e0       	ldi	r26, 0x00	; 0
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	aa 1f       	adc	r26, r26
     ae2:	bb 1f       	adc	r27, r27
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	aa 1f       	adc	r26, r26
     aea:	bb 1f       	adc	r27, r27
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	aa 1f       	adc	r26, r26
     af2:	bb 1f       	adc	r27, r27
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	aa 1f       	adc	r26, r26
     afa:	bb 1f       	adc	r27, r27
     afc:	84 2b       	or	r24, r20
     afe:	95 2b       	or	r25, r21
     b00:	a6 2b       	or	r26, r22
     b02:	b7 2b       	or	r27, r23
     b04:	25 81       	ldd	r18, Z+5	; 0x05
     b06:	22 95       	swap	r18
     b08:	2f 70       	andi	r18, 0x0F	; 15
     b0a:	82 2b       	or	r24, r18
     b0c:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <rawTemp>
     b10:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <rawTemp+0x1>
     b14:	a0 93 7b 04 	sts	0x047B, r26	; 0x80047b <rawTemp+0x2>
     b18:	b0 93 7c 04 	sts	0x047C, r27	; 0x80047c <rawTemp+0x3>
     b1c:	86 81       	ldd	r24, Z+6	; 0x06
	rawHum = ((uint32_t)RawBMEdata[6]<<8) | (uint32_t)RawBMEdata[7];
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	ba 2f       	mov	r27, r26
     b26:	a9 2f       	mov	r26, r25
     b28:	98 2f       	mov	r25, r24
     b2a:	88 27       	eor	r24, r24
     b2c:	27 81       	ldd	r18, Z+7	; 0x07
     b2e:	82 2b       	or	r24, r18
     b30:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <rawHum>
     b34:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <rawHum+0x1>
     b38:	a0 93 97 04 	sts	0x0497, r26	; 0x800497 <rawHum+0x2>
     b3c:	b0 93 98 04 	sts	0x0498, r27	; 0x800498 <rawHum+0x3>
     b40:	e2 e4       	ldi	r30, 0x42	; 66
	// We want Temperature oversampling set to x1 (ctrl_meas (0xF4) [7:5] = 0b001)
	// We want Pressure oversampling set to x8 (ctrl_meas (0xF4) [4:2] = 0b100)
	// Put the device into Forced mode (we want to tell the device to "go measure") (ctrl_meas (0xF4) [1:0] = 0b01)
	// BMEtriggerbyte ^= 0x03; // toggle the forced mode (not sure this is required)
	// NOTE: THIS BYTE MUST BE RESENT EACH TIME TO GET A NEW MEASUREMENT
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     b42:	f3 e0       	ldi	r31, 0x03	; 3
     b44:	8c ee       	ldi	r24, 0xEC	; 236
	BMEmessageBuf[1] = 0xF4; // The register we want to write to
     b46:	80 83       	st	Z, r24
     b48:	84 ef       	ldi	r24, 0xF4	; 244
	BMEmessageBuf[2] = (0b01<<5) | (0b100<<2) | (0b01<<0); // Set temp, pressure, and mode
     b4a:	81 83       	std	Z+1, r24	; 0x01
     b4c:	81 e3       	ldi	r24, 0x31	; 49
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     b4e:	82 83       	std	Z+2, r24	; 0x02
     b50:	63 e0       	ldi	r22, 0x03	; 3
     b52:	cf 01       	movw	r24, r30
     b54:	c1 d5       	rcall	.+2946   	; 0x16d8 <TWI_Start_Transceiver_With_Data>
	// Wait for the transaction to complete...
	while ( TWI_Transceiver_Busy() );
     b56:	bc d5       	rcall	.+2936   	; 0x16d0 <TWI_Transceiver_Busy>
     b58:	81 11       	cpse	r24, r1
     b5a:	fd cf       	rjmp	.-6      	; 0xb56 <bme280basic_bulk_data_read+0x1c0>
     b5c:	df 91       	pop	r29
	//  All done - and the next measurement cycle has  been kicked off!
}
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	08 95       	ret

00000b68 <BME280_compensate_T_int32>:
     b68:	8f 92       	push	r8

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of ?5123? equals 51.23 Deg C.
// t_fine carries fine temperature as global value
long BME280_compensate_T_int32(long adc_T) {
     b6a:	9f 92       	push	r9
     b6c:	af 92       	push	r10
     b6e:	bf 92       	push	r11
     b70:	cf 92       	push	r12
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
	long var1, var2, T;
	var1  = ((((adc_T>>3) - (dig_T1<<1))) * (dig_T2)) >> 11;
     b78:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <dig_T1>
     b7c:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <dig_T1+0x1>
	var2  = (((((adc_T>>4) - (dig_T1)) * ((adc_T>>4) - (dig_T1))) >> 12) * (dig_T3)) >> 14;
     b80:	6b 01       	movw	r12, r22
     b82:	7c 01       	movw	r14, r24
     b84:	68 94       	set
     b86:	13 f8       	bld	r1, 3
     b88:	f5 94       	asr	r15
     b8a:	e7 94       	ror	r14
     b8c:	d7 94       	ror	r13
     b8e:	c7 94       	ror	r12
     b90:	16 94       	lsr	r1
     b92:	d1 f7       	brne	.-12     	; 0xb88 <BME280_compensate_T_int32+0x20>
     b94:	c2 1a       	sub	r12, r18
     b96:	d3 0a       	sbc	r13, r19
     b98:	e1 08       	sbc	r14, r1
     b9a:	f1 08       	sbc	r15, r1
	t_fine = var1 + var2;
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	68 94       	set
     ba2:	12 f8       	bld	r1, 2
     ba4:	b5 95       	asr	r27
     ba6:	a7 95       	ror	r26
     ba8:	97 95       	ror	r25
     baa:	87 95       	ror	r24
     bac:	16 94       	lsr	r1
     bae:	d1 f7       	brne	.-12     	; 0xba4 <BME280_compensate_T_int32+0x3c>
     bb0:	22 0f       	add	r18, r18
     bb2:	33 1f       	adc	r19, r19
     bb4:	4c 01       	movw	r8, r24
     bb6:	5d 01       	movw	r10, r26
     bb8:	82 1a       	sub	r8, r18
     bba:	93 0a       	sbc	r9, r19
     bbc:	a1 08       	sbc	r10, r1
     bbe:	b1 08       	sbc	r11, r1
     bc0:	a5 01       	movw	r20, r10
     bc2:	94 01       	movw	r18, r8
     bc4:	a0 91 49 04 	lds	r26, 0x0449	; 0x800449 <dig_T2>
     bc8:	b0 91 4a 04 	lds	r27, 0x044A	; 0x80044a <dig_T2+0x1>
     bcc:	58 d7       	rcall	.+3760   	; 0x1a7e <__mulshisi3>
     bce:	4b 01       	movw	r8, r22
     bd0:	5c 01       	movw	r10, r24
     bd2:	07 2e       	mov	r0, r23
     bd4:	7b e0       	ldi	r23, 0x0B	; 11
     bd6:	b5 94       	asr	r11
     bd8:	a7 94       	ror	r10
     bda:	97 94       	ror	r9
     bdc:	87 94       	ror	r8
     bde:	7a 95       	dec	r23
     be0:	d1 f7       	brne	.-12     	; 0xbd6 <BME280_compensate_T_int32+0x6e>
     be2:	70 2d       	mov	r23, r0
     be4:	a7 01       	movw	r20, r14
     be6:	96 01       	movw	r18, r12
     be8:	c7 01       	movw	r24, r14
     bea:	b6 01       	movw	r22, r12
     bec:	26 d7       	rcall	.+3660   	; 0x1a3a <__mulsi3>
     bee:	9b 01       	movw	r18, r22
     bf0:	ac 01       	movw	r20, r24
     bf2:	01 2e       	mov	r0, r17
     bf4:	1c e0       	ldi	r17, 0x0C	; 12
     bf6:	55 95       	asr	r21
     bf8:	47 95       	ror	r20
     bfa:	37 95       	ror	r19
     bfc:	27 95       	ror	r18
     bfe:	1a 95       	dec	r17
     c00:	d1 f7       	brne	.-12     	; 0xbf6 <BME280_compensate_T_int32+0x8e>
     c02:	10 2d       	mov	r17, r0
     c04:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <dig_T3>
     c08:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <dig_T3+0x1>
     c0c:	38 d7       	rcall	.+3696   	; 0x1a7e <__mulshisi3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	07 2e       	mov	r0, r23
     c14:	7e e0       	ldi	r23, 0x0E	; 14
     c16:	b5 95       	asr	r27
     c18:	a7 95       	ror	r26
     c1a:	97 95       	ror	r25
     c1c:	87 95       	ror	r24
     c1e:	7a 95       	dec	r23
     c20:	d1 f7       	brne	.-12     	; 0xc16 <BME280_compensate_T_int32+0xae>
     c22:	70 2d       	mov	r23, r0
     c24:	88 0d       	add	r24, r8
     c26:	99 1d       	adc	r25, r9
     c28:	aa 1d       	adc	r26, r10
     c2a:	bb 1d       	adc	r27, r11
     c2c:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <t_fine>
     c30:	90 93 c8 04 	sts	0x04C8, r25	; 0x8004c8 <t_fine+0x1>
     c34:	a0 93 c9 04 	sts	0x04C9, r26	; 0x8004c9 <t_fine+0x2>
     c38:	b0 93 ca 04 	sts	0x04CA, r27	; 0x8004ca <t_fine+0x3>
	T  = (t_fine * 5 + 128) >> 8;
	return T;
     c3c:	6c 01       	movw	r12, r24
     c3e:	7d 01       	movw	r14, r26
     c40:	cc 0c       	add	r12, r12
     c42:	dd 1c       	adc	r13, r13
     c44:	ee 1c       	adc	r14, r14
     c46:	ff 1c       	adc	r15, r15
     c48:	cc 0c       	add	r12, r12
     c4a:	dd 1c       	adc	r13, r13
     c4c:	ee 1c       	adc	r14, r14
     c4e:	ff 1c       	adc	r15, r15
     c50:	8c 0d       	add	r24, r12
     c52:	9d 1d       	adc	r25, r13
     c54:	ae 1d       	adc	r26, r14
     c56:	bf 1d       	adc	r27, r15
     c58:	80 58       	subi	r24, 0x80	; 128
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	af 4f       	sbci	r26, 0xFF	; 255
     c5e:	bf 4f       	sbci	r27, 0xFF	; 255
     c60:	69 2f       	mov	r22, r25
     c62:	7a 2f       	mov	r23, r26
     c64:	8b 2f       	mov	r24, r27
     c66:	99 27       	eor	r25, r25
     c68:	87 fd       	sbrc	r24, 7
     c6a:	9a 95       	dec	r25
}
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	bf 90       	pop	r11
     c76:	af 90       	pop	r10
     c78:	9f 90       	pop	r9
     c7a:	8f 90       	pop	r8
     c7c:	08 95       	ret

00000c7e <BME280_compensate_P_int64>:


//Return pressure in Pa as unsigned 32 bit int in Q24.8 format(24 int bits, 8 fractional)
//Output value of "24674867" represents 24674867/256 = 96386.2 Pa = 963.862 hPa
long BME280_compensate_P_int64(long adc_P)
{
     c7e:	2f 92       	push	r2
     c80:	3f 92       	push	r3
     c82:	4f 92       	push	r4
     c84:	5f 92       	push	r5
     c86:	6f 92       	push	r6
     c88:	7f 92       	push	r7
     c8a:	8f 92       	push	r8
     c8c:	9f 92       	push	r9
     c8e:	af 92       	push	r10
     c90:	bf 92       	push	r11
     c92:	cf 92       	push	r12
     c94:	df 92       	push	r13
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	66 97       	sbiw	r28, 0x16	; 22
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	69 8b       	std	Y+17, r22	; 0x11
     cb4:	7a 8b       	std	Y+18, r23	; 0x12
     cb6:	8b 8b       	std	Y+19, r24	; 0x13
     cb8:	9c 8b       	std	Y+20, r25	; 0x14
	long long var1, var2, p;
	var1 = ((long)t_fine)-128000;
     cba:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <t_fine>
     cbe:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <t_fine+0x1>
     cc2:	a0 91 c9 04 	lds	r26, 0x04C9	; 0x8004c9 <t_fine+0x2>
     cc6:	b0 91 ca 04 	lds	r27, 0x04CA	; 0x8004ca <t_fine+0x3>
     cca:	9c 01       	movw	r18, r24
     ccc:	ad 01       	movw	r20, r26
     cce:	34 5f       	subi	r19, 0xF4	; 244
     cd0:	41 40       	sbci	r20, 0x01	; 1
     cd2:	51 09       	sbc	r21, r1
     cd4:	29 83       	std	Y+1, r18	; 0x01
     cd6:	3a 83       	std	Y+2, r19	; 0x02
     cd8:	4b 83       	std	Y+3, r20	; 0x03
     cda:	5c 83       	std	Y+4, r21	; 0x04
     cdc:	55 0f       	add	r21, r21
     cde:	22 0b       	sbc	r18, r18
     ce0:	32 2f       	mov	r19, r18
     ce2:	a9 01       	movw	r20, r18
     ce4:	2d 83       	std	Y+5, r18	; 0x05
     ce6:	3e 83       	std	Y+6, r19	; 0x06
     ce8:	4f 83       	std	Y+7, r20	; 0x07
     cea:	58 87       	std	Y+8, r21	; 0x08
	var2 = var1*var1*(long)dig_P6;
     cec:	a9 80       	ldd	r10, Y+1	; 0x01
     cee:	ba 80       	ldd	r11, Y+2	; 0x02
     cf0:	cb 80       	ldd	r12, Y+3	; 0x03
     cf2:	dc 80       	ldd	r13, Y+4	; 0x04
     cf4:	ed 80       	ldd	r14, Y+5	; 0x05
     cf6:	fe 2c       	mov	r15, r14
     cf8:	0e 2d       	mov	r16, r14
     cfa:	1e 2d       	mov	r17, r14
     cfc:	2a 2d       	mov	r18, r10
     cfe:	3b 2d       	mov	r19, r11
     d00:	4c 2d       	mov	r20, r12
     d02:	5d 2d       	mov	r21, r13
     d04:	60 2f       	mov	r22, r16
     d06:	70 2f       	mov	r23, r16
     d08:	80 2f       	mov	r24, r16
     d0a:	9e 2d       	mov	r25, r14
     d0c:	be d6       	rcall	.+3452   	; 0x1a8a <__muldi3>
     d0e:	29 87       	std	Y+9, r18	; 0x09
     d10:	3a 87       	std	Y+10, r19	; 0x0a
     d12:	4b 87       	std	Y+11, r20	; 0x0b
     d14:	5c 87       	std	Y+12, r21	; 0x0c
     d16:	6d 87       	std	Y+13, r22	; 0x0d
     d18:	7e 87       	std	Y+14, r23	; 0x0e
     d1a:	8f 87       	std	Y+15, r24	; 0x0f
     d1c:	98 8b       	std	Y+16, r25	; 0x10
	var2 = var2 + ((var1*(long)dig_P5)<<17);
	var2 = var2 + (((long long)dig_P4)<<35);
	var1 = ((var1*var1*(long)dig_P3)>>8)+((var1*(long)dig_P2)<<12);
     d1e:	30 91 7e 04 	lds	r19, 0x047E	; 0x80047e <dig_P2+0x1>
     d22:	20 91 7d 04 	lds	r18, 0x047D	; 0x80047d <dig_P2>
     d26:	93 2f       	mov	r25, r19
     d28:	99 0f       	add	r25, r25
     d2a:	99 0b       	sbc	r25, r25
     d2c:	e0 2e       	mov	r14, r16
     d2e:	0f 2d       	mov	r16, r15
     d30:	49 2f       	mov	r20, r25
     d32:	59 2f       	mov	r21, r25
     d34:	69 2f       	mov	r22, r25
     d36:	79 2f       	mov	r23, r25
     d38:	89 2f       	mov	r24, r25
     d3a:	a7 d6       	rcall	.+3406   	; 0x1a8a <__muldi3>
     d3c:	0c e0       	ldi	r16, 0x0C	; 12
     d3e:	c6 d7       	rcall	.+3980   	; 0x1ccc <__ashldi3>
     d40:	62 2e       	mov	r6, r18
     d42:	73 2e       	mov	r7, r19
     d44:	84 2e       	mov	r8, r20
     d46:	95 2e       	mov	r9, r21
     d48:	6e 8b       	std	Y+22, r22	; 0x16
     d4a:	7d 8b       	std	Y+21, r23	; 0x15
     d4c:	58 2e       	mov	r5, r24
     d4e:	49 2e       	mov	r4, r25
	var1 = (((((long long)1)<<47)+var1))*((long long)dig_P1)>>33;
     d50:	30 91 b8 04 	lds	r19, 0x04B8	; 0x8004b8 <dig_P3+0x1>
     d54:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <dig_P3>
     d58:	93 2f       	mov	r25, r19
     d5a:	99 0f       	add	r25, r25
     d5c:	99 0b       	sbc	r25, r25
     d5e:	a9 84       	ldd	r10, Y+9	; 0x09
     d60:	ba 84       	ldd	r11, Y+10	; 0x0a
     d62:	cb 84       	ldd	r12, Y+11	; 0x0b
     d64:	dc 84       	ldd	r13, Y+12	; 0x0c
     d66:	ed 84       	ldd	r14, Y+13	; 0x0d
     d68:	fe 84       	ldd	r15, Y+14	; 0x0e
     d6a:	0f 85       	ldd	r16, Y+15	; 0x0f
     d6c:	18 89       	ldd	r17, Y+16	; 0x10
     d6e:	49 2f       	mov	r20, r25
     d70:	59 2f       	mov	r21, r25
     d72:	69 2f       	mov	r22, r25
     d74:	79 2f       	mov	r23, r25
     d76:	89 2f       	mov	r24, r25
     d78:	88 d6       	rcall	.+3344   	; 0x1a8a <__muldi3>
     d7a:	08 e0       	ldi	r16, 0x08	; 8
     d7c:	c0 d7       	rcall	.+3968   	; 0x1cfe <__ashrdi3>
     d7e:	a6 2c       	mov	r10, r6
     d80:	b7 2c       	mov	r11, r7
     d82:	c8 2c       	mov	r12, r8
     d84:	d9 2c       	mov	r13, r9
     d86:	ee 88       	ldd	r14, Y+22	; 0x16
     d88:	fd 88       	ldd	r15, Y+21	; 0x15
     d8a:	05 2d       	mov	r16, r5
     d8c:	14 2d       	mov	r17, r4
     d8e:	d5 d7       	rcall	.+4010   	; 0x1d3a <__adddi3>
     d90:	70 58       	subi	r23, 0x80	; 128
     d92:	8f 4f       	sbci	r24, 0xFF	; 255
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	20 90 b5 04 	lds	r2, 0x04B5	; 0x8004b5 <dig_P1>
     d9a:	30 90 b6 04 	lds	r3, 0x04B6	; 0x8004b6 <dig_P1+0x1>
     d9e:	a2 2c       	mov	r10, r2
     da0:	b3 2c       	mov	r11, r3
     da2:	c1 2c       	mov	r12, r1
     da4:	d1 2c       	mov	r13, r1
     da6:	e1 2c       	mov	r14, r1
     da8:	f1 2c       	mov	r15, r1
     daa:	00 e0       	ldi	r16, 0x00	; 0
     dac:	10 e0       	ldi	r17, 0x00	; 0
     dae:	6d d6       	rcall	.+3290   	; 0x1a8a <__muldi3>
     db0:	01 e2       	ldi	r16, 0x21	; 33
     db2:	a5 d7       	rcall	.+3914   	; 0x1cfe <__ashrdi3>
     db4:	32 2e       	mov	r3, r18
     db6:	23 2e       	mov	r2, r19
     db8:	94 2e       	mov	r9, r20
     dba:	5e 8b       	std	Y+22, r21	; 0x16
     dbc:	6d 8b       	std	Y+21, r22	; 0x15
     dbe:	47 2e       	mov	r4, r23
     dc0:	58 2e       	mov	r5, r24
	if (var1 == 0)
     dc2:	69 2e       	mov	r6, r25
     dc4:	a0 e0       	ldi	r26, 0x00	; 0
     dc6:	cb d7       	rcall	.+3990   	; 0x1d5e <__cmpdi2_s8>
     dc8:	09 f4       	brne	.+2      	; 0xdcc <BME280_compensate_P_int64+0x14e>
     dca:	37 c1       	rjmp	.+622    	; 0x103a <BME280_compensate_P_int64+0x3bc>
//Output value of "24674867" represents 24674867/256 = 96386.2 Pa = 963.862 hPa
long BME280_compensate_P_int64(long adc_P)
{
	long long var1, var2, p;
	var1 = ((long)t_fine)-128000;
	var2 = var1*var1*(long)dig_P6;
     dcc:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <dig_P6+0x1>
     dd0:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <dig_P6>
     dd4:	93 2f       	mov	r25, r19
     dd6:	99 0f       	add	r25, r25
     dd8:	99 0b       	sbc	r25, r25
     dda:	a9 84       	ldd	r10, Y+9	; 0x09
     ddc:	ba 84       	ldd	r11, Y+10	; 0x0a
     dde:	cb 84       	ldd	r12, Y+11	; 0x0b
     de0:	dc 84       	ldd	r13, Y+12	; 0x0c
     de2:	ed 84       	ldd	r14, Y+13	; 0x0d
     de4:	fe 84       	ldd	r15, Y+14	; 0x0e
     de6:	0f 85       	ldd	r16, Y+15	; 0x0f
     de8:	18 89       	ldd	r17, Y+16	; 0x10
     dea:	49 2f       	mov	r20, r25
     dec:	59 2f       	mov	r21, r25
     dee:	69 2f       	mov	r22, r25
     df0:	79 2f       	mov	r23, r25
     df2:	89 2f       	mov	r24, r25
     df4:	4a d6       	rcall	.+3220   	; 0x1a8a <__muldi3>
     df6:	29 87       	std	Y+9, r18	; 0x09
     df8:	3a 87       	std	Y+10, r19	; 0x0a
     dfa:	4b 87       	std	Y+11, r20	; 0x0b
     dfc:	75 2e       	mov	r7, r21
     dfe:	86 2e       	mov	r8, r22
     e00:	7c 87       	std	Y+12, r23	; 0x0c
     e02:	8d 87       	std	Y+13, r24	; 0x0d
     e04:	9e 87       	std	Y+14, r25	; 0x0e
	var2 = var2 + ((var1*(long)dig_P5)<<17);
     e06:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <dig_P5+0x1>
     e0a:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <dig_P5>
     e0e:	93 2f       	mov	r25, r19
     e10:	99 0f       	add	r25, r25
     e12:	99 0b       	sbc	r25, r25
     e14:	a9 80       	ldd	r10, Y+1	; 0x01
     e16:	ba 80       	ldd	r11, Y+2	; 0x02
     e18:	cb 80       	ldd	r12, Y+3	; 0x03
     e1a:	dc 80       	ldd	r13, Y+4	; 0x04
     e1c:	ed 80       	ldd	r14, Y+5	; 0x05
     e1e:	fe 2c       	mov	r15, r14
     e20:	0e 2d       	mov	r16, r14
     e22:	1e 2d       	mov	r17, r14
     e24:	49 2f       	mov	r20, r25
     e26:	59 2f       	mov	r21, r25
     e28:	69 2f       	mov	r22, r25
     e2a:	79 2f       	mov	r23, r25
     e2c:	89 2f       	mov	r24, r25
     e2e:	2d d6       	rcall	.+3162   	; 0x1a8a <__muldi3>
     e30:	01 e1       	ldi	r16, 0x11	; 17
     e32:	4c d7       	rcall	.+3736   	; 0x1ccc <__ashldi3>
     e34:	a9 84       	ldd	r10, Y+9	; 0x09
     e36:	ba 84       	ldd	r11, Y+10	; 0x0a
     e38:	cb 84       	ldd	r12, Y+11	; 0x0b
     e3a:	d7 2c       	mov	r13, r7
     e3c:	e8 2c       	mov	r14, r8
     e3e:	fc 84       	ldd	r15, Y+12	; 0x0c
     e40:	0d 85       	ldd	r16, Y+13	; 0x0d
     e42:	1e 85       	ldd	r17, Y+14	; 0x0e
     e44:	7a d7       	rcall	.+3828   	; 0x1d3a <__adddi3>
     e46:	a2 2e       	mov	r10, r18
     e48:	b3 2e       	mov	r11, r19
     e4a:	c4 2e       	mov	r12, r20
     e4c:	d5 2e       	mov	r13, r21
     e4e:	e6 2e       	mov	r14, r22
     e50:	f7 2e       	mov	r15, r23
     e52:	78 2e       	mov	r7, r24
     e54:	19 2f       	mov	r17, r25
	if (var1 == 0)
	{
		return 0;
	}
	p = 1048576 - adc_P;
	p = (((p<<31)-var2)*3125)/var1;
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a0 e1       	ldi	r26, 0x10	; 16
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	29 89       	ldd	r18, Y+17	; 0x11
     e60:	3a 89       	ldd	r19, Y+18	; 0x12
     e62:	4b 89       	ldd	r20, Y+19	; 0x13
     e64:	5c 89       	ldd	r21, Y+20	; 0x14
     e66:	82 1b       	sub	r24, r18
     e68:	93 0b       	sbc	r25, r19
     e6a:	a4 0b       	sbc	r26, r20
     e6c:	b5 0b       	sbc	r27, r21
     e6e:	9c 01       	movw	r18, r24
     e70:	ad 01       	movw	r20, r26
     e72:	55 0f       	add	r21, r21
     e74:	22 0b       	sbc	r18, r18
     e76:	32 2f       	mov	r19, r18
     e78:	a9 01       	movw	r20, r18
     e7a:	29 83       	std	Y+1, r18	; 0x01
     e7c:	3a 83       	std	Y+2, r19	; 0x02
     e7e:	4b 83       	std	Y+3, r20	; 0x03
     e80:	5c 83       	std	Y+4, r21	; 0x04
     e82:	28 2f       	mov	r18, r24
     e84:	39 2f       	mov	r19, r25
     e86:	4a 2f       	mov	r20, r26
     e88:	5b 2f       	mov	r21, r27
     e8a:	69 81       	ldd	r22, Y+1	; 0x01
     e8c:	76 2f       	mov	r23, r22
     e8e:	86 2f       	mov	r24, r22
     e90:	96 2f       	mov	r25, r22
     e92:	0f e1       	ldi	r16, 0x1F	; 31
     e94:	1b d7       	rcall	.+3638   	; 0x1ccc <__ashldi3>
     e96:	82 2e       	mov	r8, r18
     e98:	39 83       	std	Y+1, r19	; 0x01
     e9a:	4d 83       	std	Y+5, r20	; 0x05
     e9c:	59 87       	std	Y+9, r21	; 0x09
     e9e:	b6 2f       	mov	r27, r22
     ea0:	a7 2f       	mov	r26, r23
     ea2:	f8 2f       	mov	r31, r24
     ea4:	e9 2f       	mov	r30, r25
     ea6:	30 91 80 04 	lds	r19, 0x0480	; 0x800480 <dig_P4+0x1>
     eaa:	20 91 7f 04 	lds	r18, 0x047F	; 0x80047f <dig_P4>
     eae:	93 2f       	mov	r25, r19
     eb0:	99 0f       	add	r25, r25
     eb2:	99 0b       	sbc	r25, r25
     eb4:	49 2f       	mov	r20, r25
     eb6:	59 2f       	mov	r21, r25
     eb8:	69 2f       	mov	r22, r25
     eba:	79 2f       	mov	r23, r25
     ebc:	89 2f       	mov	r24, r25
     ebe:	03 e2       	ldi	r16, 0x23	; 35
     ec0:	05 d7       	rcall	.+3594   	; 0x1ccc <__ashldi3>
     ec2:	07 2d       	mov	r16, r7
     ec4:	3a d7       	rcall	.+3700   	; 0x1d3a <__adddi3>
     ec6:	a2 2e       	mov	r10, r18
     ec8:	b3 2e       	mov	r11, r19
     eca:	c4 2e       	mov	r12, r20
     ecc:	d5 2e       	mov	r13, r21
     ece:	e6 2e       	mov	r14, r22
     ed0:	f7 2e       	mov	r15, r23
     ed2:	08 2f       	mov	r16, r24
     ed4:	19 2f       	mov	r17, r25
     ed6:	28 2d       	mov	r18, r8
     ed8:	39 81       	ldd	r19, Y+1	; 0x01
     eda:	4d 81       	ldd	r20, Y+5	; 0x05
     edc:	59 85       	ldd	r21, Y+9	; 0x09
     ede:	6b 2f       	mov	r22, r27
     ee0:	7a 2f       	mov	r23, r26
     ee2:	8f 2f       	mov	r24, r31
     ee4:	9e 2f       	mov	r25, r30
     ee6:	32 d7       	rcall	.+3684   	; 0x1d4c <__subdi3>
     ee8:	0f 2e       	mov	r0, r31
     eea:	f5 e3       	ldi	r31, 0x35	; 53
     eec:	af 2e       	mov	r10, r31
     eee:	f0 2d       	mov	r31, r0
     ef0:	0f 2e       	mov	r0, r31
     ef2:	fc e0       	ldi	r31, 0x0C	; 12
     ef4:	bf 2e       	mov	r11, r31
     ef6:	f0 2d       	mov	r31, r0
     ef8:	c1 2c       	mov	r12, r1
     efa:	d1 2c       	mov	r13, r1
     efc:	e1 2c       	mov	r14, r1
     efe:	f1 2c       	mov	r15, r1
     f00:	00 e0       	ldi	r16, 0x00	; 0
     f02:	10 e0       	ldi	r17, 0x00	; 0
     f04:	c2 d5       	rcall	.+2948   	; 0x1a8a <__muldi3>
     f06:	a3 2c       	mov	r10, r3
     f08:	b2 2c       	mov	r11, r2
     f0a:	c9 2c       	mov	r12, r9
     f0c:	de 88       	ldd	r13, Y+22	; 0x16
     f0e:	ed 88       	ldd	r14, Y+21	; 0x15
     f10:	f4 2c       	mov	r15, r4
     f12:	05 2d       	mov	r16, r5
     f14:	16 2d       	mov	r17, r6
     f16:	0c d6       	rcall	.+3096   	; 0x1b30 <__divdi3>
     f18:	2e 87       	std	Y+14, r18	; 0x0e
     f1a:	3d 87       	std	Y+13, r19	; 0x0d
     f1c:	49 83       	std	Y+1, r20	; 0x01
     f1e:	5d 83       	std	Y+5, r21	; 0x05
     f20:	69 87       	std	Y+9, r22	; 0x09
     f22:	7a 87       	std	Y+10, r23	; 0x0a
     f24:	8b 87       	std	Y+11, r24	; 0x0b
	var1 = (((long)dig_P9)*(p>>13)*(p>>13))>>25;
     f26:	9c 87       	std	Y+12, r25	; 0x0c
     f28:	0d e0       	ldi	r16, 0x0D	; 13
     f2a:	e9 d6       	rcall	.+3538   	; 0x1cfe <__ashrdi3>
     f2c:	92 2e       	mov	r9, r18
     f2e:	83 2e       	mov	r8, r19
     f30:	74 2e       	mov	r7, r20
     f32:	65 2e       	mov	r6, r21
     f34:	56 2e       	mov	r5, r22
     f36:	47 2e       	mov	r4, r23
     f38:	38 2e       	mov	r3, r24
     f3a:	29 2e       	mov	r2, r25
	var2 = (((long)dig_P8)*p)>>19;
	p = ((p+var1+var2)>>8)+(((long)dig_P7)<<4);
     f3c:	30 91 c0 04 	lds	r19, 0x04C0	; 0x8004c0 <dig_P9+0x1>
     f40:	20 91 bf 04 	lds	r18, 0x04BF	; 0x8004bf <dig_P9>
     f44:	93 2f       	mov	r25, r19
     f46:	99 0f       	add	r25, r25
     f48:	99 0b       	sbc	r25, r25
     f4a:	a9 2c       	mov	r10, r9
     f4c:	b8 2c       	mov	r11, r8
     f4e:	c7 2c       	mov	r12, r7
     f50:	d6 2c       	mov	r13, r6
     f52:	e5 2c       	mov	r14, r5
     f54:	f4 2c       	mov	r15, r4
     f56:	03 2d       	mov	r16, r3
     f58:	12 2d       	mov	r17, r2
     f5a:	49 2f       	mov	r20, r25
     f5c:	59 2f       	mov	r21, r25
     f5e:	69 2f       	mov	r22, r25
     f60:	79 2f       	mov	r23, r25
     f62:	89 2f       	mov	r24, r25
     f64:	92 d5       	rcall	.+2852   	; 0x1a8a <__muldi3>
     f66:	91 d5       	rcall	.+2850   	; 0x1a8a <__muldi3>
     f68:	09 e1       	ldi	r16, 0x19	; 25
     f6a:	c9 d6       	rcall	.+3474   	; 0x1cfe <__ashrdi3>
     f6c:	ae 84       	ldd	r10, Y+14	; 0x0e
     f6e:	bd 84       	ldd	r11, Y+13	; 0x0d
     f70:	c9 80       	ldd	r12, Y+1	; 0x01
     f72:	dd 80       	ldd	r13, Y+5	; 0x05
     f74:	e9 84       	ldd	r14, Y+9	; 0x09
     f76:	fa 84       	ldd	r15, Y+10	; 0x0a
     f78:	0b 85       	ldd	r16, Y+11	; 0x0b
     f7a:	1c 85       	ldd	r17, Y+12	; 0x0c
     f7c:	de d6       	rcall	.+3516   	; 0x1d3a <__adddi3>
     f7e:	22 2e       	mov	r2, r18
     f80:	33 2e       	mov	r3, r19
     f82:	44 2e       	mov	r4, r20
     f84:	55 2e       	mov	r5, r21
     f86:	66 2e       	mov	r6, r22
     f88:	77 2e       	mov	r7, r23
     f8a:	88 2e       	mov	r8, r24
     f8c:	99 2e       	mov	r9, r25
     f8e:	30 91 ba 04 	lds	r19, 0x04BA	; 0x8004ba <dig_P8+0x1>
     f92:	20 91 b9 04 	lds	r18, 0x04B9	; 0x8004b9 <dig_P8>
     f96:	93 2f       	mov	r25, r19
     f98:	99 0f       	add	r25, r25
     f9a:	99 0b       	sbc	r25, r25
     f9c:	49 2f       	mov	r20, r25
     f9e:	59 2f       	mov	r21, r25
     fa0:	69 2f       	mov	r22, r25
     fa2:	79 2f       	mov	r23, r25
     fa4:	89 2f       	mov	r24, r25
     fa6:	71 d5       	rcall	.+2786   	; 0x1a8a <__muldi3>
     fa8:	03 e1       	ldi	r16, 0x13	; 19
     faa:	a9 d6       	rcall	.+3410   	; 0x1cfe <__ashrdi3>
     fac:	a2 2e       	mov	r10, r18
     fae:	b3 2e       	mov	r11, r19
     fb0:	c4 2e       	mov	r12, r20
     fb2:	d5 2e       	mov	r13, r21
     fb4:	e6 2e       	mov	r14, r22
     fb6:	f7 2e       	mov	r15, r23
     fb8:	08 2f       	mov	r16, r24
     fba:	19 2f       	mov	r17, r25
     fbc:	22 2d       	mov	r18, r2
     fbe:	33 2d       	mov	r19, r3
     fc0:	44 2d       	mov	r20, r4
     fc2:	55 2d       	mov	r21, r5
     fc4:	66 2d       	mov	r22, r6
     fc6:	77 2d       	mov	r23, r7
     fc8:	88 2d       	mov	r24, r8
     fca:	99 2d       	mov	r25, r9
     fcc:	b6 d6       	rcall	.+3436   	; 0x1d3a <__adddi3>
     fce:	08 e0       	ldi	r16, 0x08	; 8
     fd0:	96 d6       	rcall	.+3372   	; 0x1cfe <__ashrdi3>
     fd2:	a2 2e       	mov	r10, r18
     fd4:	b3 2e       	mov	r11, r19
     fd6:	c4 2e       	mov	r12, r20
     fd8:	d5 2e       	mov	r13, r21
     fda:	e6 2e       	mov	r14, r22
     fdc:	f7 2e       	mov	r15, r23
     fde:	08 2f       	mov	r16, r24
     fe0:	19 2f       	mov	r17, r25
	return(long)p;
     fe2:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <dig_P7>
     fe6:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <dig_P7+0x1>
     fea:	09 2e       	mov	r0, r25
     fec:	00 0c       	add	r0, r0
     fee:	aa 0b       	sbc	r26, r26
     ff0:	bb 0b       	sbc	r27, r27
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	aa 1f       	adc	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	aa 1f       	adc	r26, r26
    1000:	bb 1f       	adc	r27, r27
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	aa 1f       	adc	r26, r26
    1008:	bb 1f       	adc	r27, r27
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	aa 1f       	adc	r26, r26
    1010:	bb 1f       	adc	r27, r27
    1012:	2c 01       	movw	r4, r24
    1014:	3d 01       	movw	r6, r26
    1016:	77 0c       	add	r7, r7
    1018:	44 08       	sbc	r4, r4
    101a:	54 2c       	mov	r5, r4
    101c:	32 01       	movw	r6, r4
    101e:	28 2f       	mov	r18, r24
    1020:	39 2f       	mov	r19, r25
    1022:	4a 2f       	mov	r20, r26
    1024:	5b 2f       	mov	r21, r27
    1026:	64 2d       	mov	r22, r4
    1028:	74 2d       	mov	r23, r4
    102a:	84 2d       	mov	r24, r4
    102c:	94 2d       	mov	r25, r4
    102e:	85 d6       	rcall	.+3338   	; 0x1d3a <__adddi3>
    1030:	62 2f       	mov	r22, r18
    1032:	73 2f       	mov	r23, r19
    1034:	84 2f       	mov	r24, r20
    1036:	95 2f       	mov	r25, r21
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <BME280_compensate_P_int64+0x3c4>
	var2 = var2 + (((long long)dig_P4)<<35);
	var1 = ((var1*var1*(long)dig_P3)>>8)+((var1*(long)dig_P2)<<12);
	var1 = (((((long long)1)<<47)+var1))*((long long)dig_P1)>>33;
	if (var1 == 0)
	{
		return 0;
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
	p = (((p<<31)-var2)*3125)/var1;
	var1 = (((long)dig_P9)*(p>>13)*(p>>13))>>25;
	var2 = (((long)dig_P8)*p)>>19;
	p = ((p+var1+var2)>>8)+(((long)dig_P7)<<4);
	return(long)p;
}
    1042:	66 96       	adiw	r28, 0x16	; 22
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	df 90       	pop	r13
    105c:	cf 90       	pop	r12
    105e:	bf 90       	pop	r11
    1060:	af 90       	pop	r10
    1062:	9f 90       	pop	r9
    1064:	8f 90       	pop	r8
    1066:	7f 90       	pop	r7
    1068:	6f 90       	pop	r6
    106a:	5f 90       	pop	r5
    106c:	4f 90       	pop	r4
    106e:	3f 90       	pop	r3
    1070:	2f 90       	pop	r2
    1072:	08 95       	ret

00001074 <bme280_compensate_H_int32>:

// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of ?47445? represents 47445/1024 = 46.333 %RH
long bme280_compensate_H_int32(long adc_H)
{
    1074:	2f 92       	push	r2
    1076:	3f 92       	push	r3
    1078:	4f 92       	push	r4
    107a:	5f 92       	push	r5
    107c:	6f 92       	push	r6
    107e:	7f 92       	push	r7
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	67 97       	sbiw	r28, 0x17	; 23
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	2b 01       	movw	r4, r22
    10aa:	3c 01       	movw	r6, r24
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
    10ac:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <t_fine>
    10b0:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <t_fine+0x1>
    10b4:	a0 91 c9 04 	lds	r26, 0x04C9	; 0x8004c9 <t_fine+0x2>
    10b8:	b0 91 ca 04 	lds	r27, 0x04CA	; 0x8004ca <t_fine+0x3>
    10bc:	6c 01       	movw	r12, r24
    10be:	7d 01       	movw	r14, r26
    10c0:	ff 0c       	add	r15, r15
    10c2:	cc 08       	sbc	r12, r12
    10c4:	dc 2c       	mov	r13, r12
    10c6:	76 01       	movw	r14, r12
    10c8:	28 2f       	mov	r18, r24
    10ca:	39 2f       	mov	r19, r25
    10cc:	4a 2f       	mov	r20, r26
    10ce:	5b 2f       	mov	r21, r27
    10d0:	6c 2d       	mov	r22, r12
    10d2:	7c 2d       	mov	r23, r12
    10d4:	8c 2d       	mov	r24, r12
    10d6:	9c 2d       	mov	r25, r12
    10d8:	3c 52       	subi	r19, 0x2C	; 44
    10da:	41 40       	sbci	r20, 0x01	; 1
    10dc:	51 09       	sbc	r21, r1
    10de:	61 09       	sbc	r22, r1
    10e0:	71 09       	sbc	r23, r1
    10e2:	81 09       	sbc	r24, r1
    10e4:	91 09       	sbc	r25, r1
    10e6:	2f 8b       	std	Y+23, r18	; 0x17
    10e8:	3e 8b       	std	Y+22, r19	; 0x16
    10ea:	49 83       	std	Y+1, r20	; 0x01
    10ec:	59 87       	std	Y+9, r21	; 0x09
    10ee:	6a 87       	std	Y+10, r22	; 0x0a
    10f0:	7b 87       	std	Y+11, r23	; 0x0b
    10f2:	8c 87       	std	Y+12, r24	; 0x0c
    10f4:	9d 87       	std	Y+13, r25	; 0x0d
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
    10f6:	03 2e       	mov	r0, r19
    10f8:	3e e0       	ldi	r19, 0x0E	; 14
    10fa:	44 0c       	add	r4, r4
    10fc:	55 1c       	adc	r5, r5
    10fe:	66 1c       	adc	r6, r6
    1100:	77 1c       	adc	r7, r7
    1102:	3a 95       	dec	r19
    1104:	d1 f7       	brne	.-12     	; 0x10fa <bme280_compensate_H_int32+0x86>
    1106:	30 2d       	mov	r19, r0
    1108:	53 01       	movw	r10, r6
    110a:	42 01       	movw	r8, r4
    110c:	bb 0c       	add	r11, r11
    110e:	88 08       	sbc	r8, r8
    1110:	98 2c       	mov	r9, r8
    1112:	54 01       	movw	r10, r8
    1114:	30 91 48 04 	lds	r19, 0x0448	; 0x800448 <dig_H4+0x1>
    1118:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <dig_H4>
    111c:	93 2f       	mov	r25, r19
    111e:	99 0f       	add	r25, r25
    1120:	99 0b       	sbc	r25, r25
    1122:	49 2f       	mov	r20, r25
    1124:	59 2f       	mov	r21, r25
    1126:	69 2f       	mov	r22, r25
    1128:	79 2f       	mov	r23, r25
    112a:	89 2f       	mov	r24, r25
    112c:	04 e1       	ldi	r16, 0x14	; 20
    112e:	ce d5       	rcall	.+2972   	; 0x1ccc <__ashldi3>
    1130:	f2 2f       	mov	r31, r18
    1132:	e3 2f       	mov	r30, r19
    1134:	c4 2e       	mov	r12, r20
    1136:	d5 2e       	mov	r13, r21
    1138:	e6 2e       	mov	r14, r22
    113a:	f7 2e       	mov	r15, r23
    113c:	08 2f       	mov	r16, r24
    113e:	19 2f       	mov	r17, r25
    1140:	24 2d       	mov	r18, r4
    1142:	35 2d       	mov	r19, r5
    1144:	46 2d       	mov	r20, r6
    1146:	57 2d       	mov	r21, r7
    1148:	68 2d       	mov	r22, r8
    114a:	78 2d       	mov	r23, r8
    114c:	88 2d       	mov	r24, r8
    114e:	98 2d       	mov	r25, r8
    1150:	af 2e       	mov	r10, r31
    1152:	be 2e       	mov	r11, r30
    1154:	fb d5       	rcall	.+3062   	; 0x1d4c <__subdi3>
    1156:	22 2e       	mov	r2, r18
    1158:	33 2e       	mov	r3, r19
    115a:	44 2e       	mov	r4, r20
    115c:	55 2e       	mov	r5, r21
    115e:	66 2e       	mov	r6, r22
    1160:	77 2e       	mov	r7, r23
    1162:	88 2e       	mov	r8, r24
    1164:	99 2e       	mov	r9, r25
    1166:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <dig_H5+0x1>
    116a:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <dig_H5>
    116e:	93 2f       	mov	r25, r19
    1170:	99 0f       	add	r25, r25
    1172:	99 0b       	sbc	r25, r25
    1174:	af 88       	ldd	r10, Y+23	; 0x17
    1176:	be 88       	ldd	r11, Y+22	; 0x16
    1178:	c9 80       	ldd	r12, Y+1	; 0x01
    117a:	d9 84       	ldd	r13, Y+9	; 0x09
    117c:	ea 84       	ldd	r14, Y+10	; 0x0a
    117e:	fb 84       	ldd	r15, Y+11	; 0x0b
    1180:	0c 85       	ldd	r16, Y+12	; 0x0c
    1182:	1d 85       	ldd	r17, Y+13	; 0x0d
    1184:	49 2f       	mov	r20, r25
    1186:	59 2f       	mov	r21, r25
    1188:	69 2f       	mov	r22, r25
    118a:	79 2f       	mov	r23, r25
    118c:	89 2f       	mov	r24, r25
    118e:	7d d4       	rcall	.+2298   	; 0x1a8a <__muldi3>
    1190:	a2 2e       	mov	r10, r18
    1192:	b3 2e       	mov	r11, r19
    1194:	c4 2e       	mov	r12, r20
    1196:	d5 2e       	mov	r13, r21
    1198:	e6 2e       	mov	r14, r22
    119a:	f7 2e       	mov	r15, r23
    119c:	08 2f       	mov	r16, r24
    119e:	19 2f       	mov	r17, r25
    11a0:	22 2d       	mov	r18, r2
    11a2:	33 2d       	mov	r19, r3
    11a4:	44 2d       	mov	r20, r4
    11a6:	55 2d       	mov	r21, r5
    11a8:	66 2d       	mov	r22, r6
    11aa:	77 2d       	mov	r23, r7
    11ac:	88 2d       	mov	r24, r8
    11ae:	99 2d       	mov	r25, r9
    11b0:	cd d5       	rcall	.+2970   	; 0x1d4c <__subdi3>
    11b2:	30 5c       	subi	r19, 0xC0	; 192
    11b4:	4f 4f       	sbci	r20, 0xFF	; 255
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	6f 4f       	sbci	r22, 0xFF	; 255
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
    11bc:	8f 4f       	sbci	r24, 0xFF	; 255
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	0f e0       	ldi	r16, 0x0F	; 15
    11c2:	9d d5       	rcall	.+2874   	; 0x1cfe <__ashrdi3>
    11c4:	2e 87       	std	Y+14, r18	; 0x0e
    11c6:	3f 87       	std	Y+15, r19	; 0x0f
    11c8:	48 8b       	std	Y+16, r20	; 0x10
    11ca:	59 8b       	std	Y+17, r21	; 0x11
    11cc:	6a 8b       	std	Y+18, r22	; 0x12
    11ce:	7b 8b       	std	Y+19, r23	; 0x13
    11d0:	8c 8b       	std	Y+20, r24	; 0x14
    11d2:	9d 8b       	std	Y+21, r25	; 0x15
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
	((long long)dig_H2) + 8192) >> 14));
    11d4:	40 91 bd 04 	lds	r20, 0x04BD	; 0x8004bd <dig_H3>
    11d8:	50 91 be 04 	lds	r21, 0x04BE	; 0x8004be <dig_H3+0x1>
    11dc:	af 88       	ldd	r10, Y+23	; 0x17
    11de:	be 88       	ldd	r11, Y+22	; 0x16
    11e0:	c9 80       	ldd	r12, Y+1	; 0x01
    11e2:	d9 84       	ldd	r13, Y+9	; 0x09
    11e4:	ea 84       	ldd	r14, Y+10	; 0x0a
    11e6:	fb 84       	ldd	r15, Y+11	; 0x0b
    11e8:	0c 85       	ldd	r16, Y+12	; 0x0c
    11ea:	1d 85       	ldd	r17, Y+13	; 0x0d
    11ec:	24 2f       	mov	r18, r20
    11ee:	35 2f       	mov	r19, r21
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	46 d4       	rcall	.+2188   	; 0x1a8a <__muldi3>
    11fe:	0b e0       	ldi	r16, 0x0B	; 11
    1200:	7e d5       	rcall	.+2812   	; 0x1cfe <__ashrdi3>
    1202:	30 58       	subi	r19, 0x80	; 128
    1204:	4f 4f       	sbci	r20, 0xFF	; 255
    1206:	5f 4f       	sbci	r21, 0xFF	; 255
    1208:	6f 4f       	sbci	r22, 0xFF	; 255
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	8f 4f       	sbci	r24, 0xFF	; 255
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	22 2e       	mov	r2, r18
    1212:	33 2e       	mov	r3, r19
    1214:	44 2e       	mov	r4, r20
    1216:	55 2e       	mov	r5, r21
    1218:	66 2e       	mov	r6, r22
    121a:	77 2e       	mov	r7, r23
    121c:	88 2e       	mov	r8, r24
    121e:	99 2e       	mov	r9, r25
    1220:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <dig_H6+0x1>
    1224:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <dig_H6>
    1228:	93 2f       	mov	r25, r19
    122a:	99 0f       	add	r25, r25
    122c:	99 0b       	sbc	r25, r25
    122e:	0c 85       	ldd	r16, Y+12	; 0x0c
    1230:	49 2f       	mov	r20, r25
    1232:	59 2f       	mov	r21, r25
    1234:	69 2f       	mov	r22, r25
    1236:	79 2f       	mov	r23, r25
    1238:	89 2f       	mov	r24, r25
    123a:	27 d4       	rcall	.+2126   	; 0x1a8a <__muldi3>
    123c:	0a e0       	ldi	r16, 0x0A	; 10
    123e:	5f d5       	rcall	.+2750   	; 0x1cfe <__ashrdi3>
    1240:	a2 2e       	mov	r10, r18
    1242:	b3 2e       	mov	r11, r19
    1244:	c4 2e       	mov	r12, r20
    1246:	d5 2e       	mov	r13, r21
    1248:	e6 2e       	mov	r14, r22
    124a:	f7 2e       	mov	r15, r23
    124c:	08 2f       	mov	r16, r24
    124e:	19 2f       	mov	r17, r25
    1250:	22 2d       	mov	r18, r2
    1252:	33 2d       	mov	r19, r3
    1254:	44 2d       	mov	r20, r4
    1256:	55 2d       	mov	r21, r5
    1258:	66 2d       	mov	r22, r6
    125a:	77 2d       	mov	r23, r7
    125c:	88 2d       	mov	r24, r8
    125e:	99 2d       	mov	r25, r9
    1260:	14 d4       	rcall	.+2088   	; 0x1a8a <__muldi3>
    1262:	0a e0       	ldi	r16, 0x0A	; 10
    1264:	4c d5       	rcall	.+2712   	; 0x1cfe <__ashrdi3>
    1266:	40 5e       	subi	r20, 0xE0	; 224
    1268:	5f 4f       	sbci	r21, 0xFF	; 255
    126a:	6f 4f       	sbci	r22, 0xFF	; 255
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	8f 4f       	sbci	r24, 0xFF	; 255
    1270:	9f 4f       	sbci	r25, 0xFF	; 255
    1272:	b0 90 c6 04 	lds	r11, 0x04C6	; 0x8004c6 <dig_H2+0x1>
    1276:	a0 90 c5 04 	lds	r10, 0x04C5	; 0x8004c5 <dig_H2>
    127a:	1b 2d       	mov	r17, r11
    127c:	11 0f       	add	r17, r17
    127e:	11 0b       	sbc	r17, r17
    1280:	c1 2e       	mov	r12, r17
    1282:	d1 2e       	mov	r13, r17
    1284:	e1 2e       	mov	r14, r17
    1286:	f1 2e       	mov	r15, r17
    1288:	01 2f       	mov	r16, r17
    128a:	ff d3       	rcall	.+2046   	; 0x1a8a <__muldi3>
    128c:	30 5e       	subi	r19, 0xE0	; 224
    128e:	4f 4f       	sbci	r20, 0xFF	; 255
    1290:	5f 4f       	sbci	r21, 0xFF	; 255
    1292:	6f 4f       	sbci	r22, 0xFF	; 255
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8f 4f       	sbci	r24, 0xFF	; 255
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	0e e0       	ldi	r16, 0x0E	; 14
    129c:	30 d5       	rcall	.+2656   	; 0x1cfe <__ashrdi3>
// Output value of ?47445? represents 47445/1024 = 46.333 %RH
long bme280_compensate_H_int32(long adc_H)
{
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
    129e:	a2 2e       	mov	r10, r18
    12a0:	b3 2e       	mov	r11, r19
    12a2:	c4 2e       	mov	r12, r20
    12a4:	d5 2e       	mov	r13, r21
    12a6:	e6 2e       	mov	r14, r22
    12a8:	f7 2e       	mov	r15, r23
    12aa:	08 2f       	mov	r16, r24
    12ac:	19 2f       	mov	r17, r25
    12ae:	2e 85       	ldd	r18, Y+14	; 0x0e
    12b0:	3f 85       	ldd	r19, Y+15	; 0x0f
    12b2:	48 89       	ldd	r20, Y+16	; 0x10
    12b4:	59 89       	ldd	r21, Y+17	; 0x11
    12b6:	6a 89       	ldd	r22, Y+18	; 0x12
    12b8:	7b 89       	ldd	r23, Y+19	; 0x13
    12ba:	8c 89       	ldd	r24, Y+20	; 0x14
    12bc:	9d 89       	ldd	r25, Y+21	; 0x15
    12be:	e5 d3       	rcall	.+1994   	; 0x1a8a <__muldi3>
    12c0:	42 2e       	mov	r4, r18
    12c2:	53 2e       	mov	r5, r19
    12c4:	64 2e       	mov	r6, r20
    12c6:	75 2e       	mov	r7, r21
    12c8:	86 2e       	mov	r8, r22
    12ca:	97 2e       	mov	r9, r23
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
	((long long)dig_H2) + 8192) >> 14));
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((long long)dig_H1)) >> 4));
    12cc:	8a 87       	std	Y+10, r24	; 0x0a
    12ce:	99 87       	std	Y+9, r25	; 0x09
    12d0:	0f e0       	ldi	r16, 0x0F	; 15
    12d2:	15 d5       	rcall	.+2602   	; 0x1cfe <__ashrdi3>
    12d4:	a2 2e       	mov	r10, r18
    12d6:	b3 2e       	mov	r11, r19
    12d8:	c4 2e       	mov	r12, r20
    12da:	d5 2e       	mov	r13, r21
    12dc:	e6 2e       	mov	r14, r22
    12de:	f7 2e       	mov	r15, r23
    12e0:	08 2f       	mov	r16, r24
    12e2:	19 2f       	mov	r17, r25
    12e4:	d2 d3       	rcall	.+1956   	; 0x1a8a <__muldi3>
    12e6:	07 e0       	ldi	r16, 0x07	; 7
    12e8:	0a d5       	rcall	.+2580   	; 0x1cfe <__ashrdi3>
    12ea:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <dig_H1>
    12ee:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <dig_H1+0x1>
    12f2:	5f 01       	movw	r10, r30
    12f4:	c1 2c       	mov	r12, r1
    12f6:	d1 2c       	mov	r13, r1
    12f8:	e1 2c       	mov	r14, r1
    12fa:	f1 2c       	mov	r15, r1
    12fc:	87 01       	movw	r16, r14
    12fe:	e9 83       	std	Y+1, r30	; 0x01
    1300:	ba 82       	std	Y+2, r11	; 0x02
    1302:	cb 82       	std	Y+3, r12	; 0x03
    1304:	dc 82       	std	Y+4, r13	; 0x04
    1306:	ed 82       	std	Y+5, r14	; 0x05
    1308:	fe 82       	std	Y+6, r15	; 0x06
    130a:	0f 83       	std	Y+7, r16	; 0x07
    130c:	18 87       	std	Y+8, r17	; 0x08
    130e:	c1 2c       	mov	r12, r1
    1310:	d1 2c       	mov	r13, r1
    1312:	e1 2c       	mov	r14, r1
    1314:	f1 2c       	mov	r15, r1
    1316:	00 e0       	ldi	r16, 0x00	; 0
    1318:	10 e0       	ldi	r17, 0x00	; 0
    131a:	b7 d3       	rcall	.+1902   	; 0x1a8a <__muldi3>
    131c:	04 e0       	ldi	r16, 0x04	; 4
    131e:	ef d4       	rcall	.+2526   	; 0x1cfe <__ashrdi3>
    1320:	a2 2e       	mov	r10, r18
    1322:	b3 2e       	mov	r11, r19
    1324:	c4 2e       	mov	r12, r20
    1326:	d5 2e       	mov	r13, r21
    1328:	e6 2e       	mov	r14, r22
    132a:	f7 2e       	mov	r15, r23
    132c:	08 2f       	mov	r16, r24
    132e:	19 2f       	mov	r17, r25
    1330:	24 2d       	mov	r18, r4
    1332:	35 2d       	mov	r19, r5
    1334:	46 2d       	mov	r20, r6
    1336:	57 2d       	mov	r21, r7
    1338:	68 2d       	mov	r22, r8
    133a:	79 2d       	mov	r23, r9
    133c:	8a 85       	ldd	r24, Y+10	; 0x0a
    133e:	99 85       	ldd	r25, Y+9	; 0x09
    1340:	05 d5       	rcall	.+2570   	; 0x1d4c <__subdi3>
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
    1342:	f2 2e       	mov	r15, r18
    1344:	03 2f       	mov	r16, r19
    1346:	14 2f       	mov	r17, r20
    1348:	59 87       	std	Y+9, r21	; 0x09
    134a:	69 83       	std	Y+1, r22	; 0x01
    134c:	b7 2f       	mov	r27, r23
    134e:	f8 2f       	mov	r31, r24
    1350:	e9 2f       	mov	r30, r25
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	04 d5       	rcall	.+2568   	; 0x1d5e <__cmpdi2_s8>
    1356:	44 f4       	brge	.+16     	; 0x1368 <bme280_compensate_H_int32+0x2f4>
    1358:	f1 2c       	mov	r15, r1
    135a:	00 e0       	ldi	r16, 0x00	; 0
    135c:	10 e0       	ldi	r17, 0x00	; 0
    135e:	19 86       	std	Y+9, r1	; 0x09
    1360:	19 82       	std	Y+1, r1	; 0x01
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	e0 e0       	ldi	r30, 0x00	; 0
    1368:	8f 2c       	mov	r8, r15
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
	return (long)(v_x1_u32r>>12);
    136a:	90 2e       	mov	r9, r16
    136c:	a1 2e       	mov	r10, r17
    136e:	b9 84       	ldd	r11, Y+9	; 0x09
    1370:	c9 80       	ldd	r12, Y+1	; 0x01
    1372:	db 2e       	mov	r13, r27
    1374:	ef 2e       	mov	r14, r31
    1376:	ae 2f       	mov	r26, r30
    1378:	2f 2d       	mov	r18, r15
    137a:	30 2f       	mov	r19, r16
    137c:	41 2f       	mov	r20, r17
    137e:	5b 2d       	mov	r21, r11
    1380:	6c 2d       	mov	r22, r12
    1382:	7b 2f       	mov	r23, r27
    1384:	8f 2f       	mov	r24, r31
    1386:	9e 2f       	mov	r25, r30
    1388:	21 15       	cp	r18, r1
    138a:	31 05       	cpc	r19, r1
    138c:	41 05       	cpc	r20, r1
    138e:	59 41       	sbci	r21, 0x19	; 25
    1390:	61 05       	cpc	r22, r1
    1392:	71 05       	cpc	r23, r1
    1394:	81 05       	cpc	r24, r1
    1396:	91 05       	cpc	r25, r1
    1398:	61 f0       	breq	.+24     	; 0x13b2 <bme280_compensate_H_int32+0x33e>
    139a:	5c f0       	brlt	.+22     	; 0x13b2 <bme280_compensate_H_int32+0x33e>
    139c:	81 2c       	mov	r8, r1
    139e:	91 2c       	mov	r9, r1
    13a0:	a1 2c       	mov	r10, r1
    13a2:	0f 2e       	mov	r0, r31
    13a4:	f9 e1       	ldi	r31, 0x19	; 25
    13a6:	bf 2e       	mov	r11, r31
    13a8:	f0 2d       	mov	r31, r0
    13aa:	c1 2c       	mov	r12, r1
    13ac:	d1 2c       	mov	r13, r1
    13ae:	e1 2c       	mov	r14, r1
    13b0:	a0 e0       	ldi	r26, 0x00	; 0
    13b2:	28 2d       	mov	r18, r8
    13b4:	39 2d       	mov	r19, r9
    13b6:	4a 2d       	mov	r20, r10
    13b8:	5b 2d       	mov	r21, r11
    13ba:	6c 2d       	mov	r22, r12
    13bc:	7d 2d       	mov	r23, r13
    13be:	8e 2d       	mov	r24, r14
    13c0:	9a 2f       	mov	r25, r26
    13c2:	0c e0       	ldi	r16, 0x0C	; 12
    13c4:	9c d4       	rcall	.+2360   	; 0x1cfe <__ashrdi3>
    13c6:	62 2f       	mov	r22, r18
    13c8:	73 2f       	mov	r23, r19
    13ca:	84 2f       	mov	r24, r20
    13cc:	95 2f       	mov	r25, r21
    13ce:	67 96       	adiw	r28, 0x17	; 23
}
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	ff 90       	pop	r15
    13e4:	ef 90       	pop	r14
    13e6:	df 90       	pop	r13
    13e8:	cf 90       	pop	r12
    13ea:	bf 90       	pop	r11
    13ec:	af 90       	pop	r10
    13ee:	9f 90       	pop	r9
    13f0:	8f 90       	pop	r8
    13f2:	7f 90       	pop	r7
    13f4:	6f 90       	pop	r6
    13f6:	5f 90       	pop	r5
    13f8:	4f 90       	pop	r4
    13fa:	3f 90       	pop	r3
    13fc:	2f 90       	pop	r2
    13fe:	08 95       	ret

00001400 <main>:
    1400:	0e 94 5f 01 	call	0x2be	; 0x2be <canary_io_pin_initialization>
 	//
	// Set the I/O pins
	canary_io_pin_initialization();
	//
	// Set a simple counter for the loop below.  Debug only.
	seconds=0;
    1404:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <seconds+0x1>
    1408:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <seconds>
	ItsTime=0;
    140c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <ItsTime>
	//
	// set up our output for handling printf and string operations,,,
	stdout = &mystdout;
    1410:	8b e2       	ldi	r24, 0x2B	; 43
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <__iob+0x3>
    1418:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <__iob+0x2>
	//
	// Initialize the timer counter 1 for 1Hz interrupt
	// This interrupt is only enabled if we don't have the GPS sensor connected.
	initialize_timer_counter_1();
    141c:	2f d1       	rcall	.+606    	; 0x167c <initialize_timer_counter_1>
	//
	// Initialize our main communication to the ground (UART0)
	USART0_init(MYUBRR0);
    141e:	81 e8       	ldi	r24, 0x81	; 129
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	29 d2       	rcall	.+1106   	; 0x1876 <USART0_init>
	//
	// Initialize the connection to the GPS sensor (UART1)
	USART1_init(MYUBRR1);
    1424:	81 e8       	ldi	r24, 0x81	; 129
    1426:	90 e0       	ldi	r25, 0x00	; 0
	//
	// Initialize the TWI peripheral
	TWI_Master_Initialise();
    1428:	9e d2       	rcall	.+1340   	; 0x1966 <USART1_init>
    142a:	48 d1       	rcall	.+656    	; 0x16bc <TWI_Master_Initialise>
	//
	// Initialize the Analog to digital hardware - and test the I/F.
	ADC_init();
    142c:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_init>
	//
	// initialize the gas sensors
	gas_sensors_init();
    1430:	0e 94 ac 01 	call	0x358	; 0x358 <gas_sensors_init>
	//
	// Test our bad interrupt light...
	SetBit(PORTB, PORTB2);
    1434:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1436:	2f e7       	ldi	r18, 0x7F	; 127
    1438:	84 e8       	ldi	r24, 0x84	; 132
    143a:	9e e1       	ldi	r25, 0x1E	; 30
    143c:	21 50       	subi	r18, 0x01	; 1
    143e:	80 40       	sbci	r24, 0x00	; 0
    1440:	90 40       	sbci	r25, 0x00	; 0
    1442:	e1 f7       	brne	.-8      	; 0x143c <main+0x3c>
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <main+0x46>
    1446:	00 00       	nop
	_delay_ms(500);
	ClearBit(PORTB, PORTB2);
    1448:	2a 98       	cbi	0x05, 2	; 5
    144a:	2f e7       	ldi	r18, 0x7F	; 127
    144c:	84 e8       	ldi	r24, 0x84	; 132
    144e:	9e e1       	ldi	r25, 0x1E	; 30
    1450:	21 50       	subi	r18, 0x01	; 1
    1452:	80 40       	sbci	r24, 0x00	; 0
    1454:	90 40       	sbci	r25, 0x00	; 0
    1456:	e1 f7       	brne	.-8      	; 0x1450 <main+0x50>
    1458:	00 c0       	rjmp	.+0      	; 0x145a <main+0x5a>
	// 
	// Start all interrupts
	sei();
	//
	// Initialize and check the BME interface...
	bme280basic_init();
    145a:	00 00       	nop
    145c:	78 94       	sei
	// Wait here for the start/standby button to be selected.. (PORTB pin 3).
	// Now call the routines to "kick off" the sensor measurements
	//
	// ===================================================
	// The next few lines are for debugging the (working at one time) UART0 routines...remove these lines once it is working again.
	USART0_putstring(String);
    145e:	3f da       	rcall	.-2946   	; 0x8de <bme280basic_init>
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	45 d2       	rcall	.+1162   	; 0x18f0 <USART0_putstring>
		// to 1 whenever we get a $GPGGA message from that sensor.
		///////////////////////////////////////////////////////////
		if (ItsTime == 1){ //wait for our 1Hz flag (from GPS or Interrupt)
			ItsTime = 0; 
			seconds++;
			printf("\nSeconds = %u", seconds);
    1466:	0f 2e       	mov	r0, r31
    1468:	fa e3       	ldi	r31, 0x3A	; 58
    146a:	af 2e       	mov	r10, r31
    146c:	f1 e0       	ldi	r31, 0x01	; 1
    146e:	bf 2e       	mov	r11, r31
    1470:	f0 2d       	mov	r31, r0
			// - do a blocking read of the sensor
			// - Send the data over the serial port
			// - go to the next sensor 
			//**********************************
			// The GPS message triggers the whole collection cycle, so we can send it now...
			printf("\n%s",messageWant);
    1472:	0f 2e       	mov	r0, r31
    1474:	fb ec       	ldi	r31, 0xCB	; 203
    1476:	cf 2e       	mov	r12, r31
    1478:	f5 e0       	ldi	r31, 0x05	; 5
    147a:	df 2e       	mov	r13, r31
    147c:	f0 2d       	mov	r31, r0
    147e:	0f 2e       	mov	r0, r31
    1480:	f8 e4       	ldi	r31, 0x48	; 72
    1482:	ef 2e       	mov	r14, r31
    1484:	f1 e0       	ldi	r31, 0x01	; 1
    1486:	ff 2e       	mov	r15, r31
    1488:	f0 2d       	mov	r31, r0
			// each time through this loop.  Comment out the code you
			// don't want to use when debugging the code you are adding... 
			//============================
			 //Now test reading the LIDAR interface
 			distance = LIDAR_distance();
 			printf("LIDAR distance = %u", distance);
    148a:	0c e4       	ldi	r16, 0x4C	; 76
    148c:	11 e0       	ldi	r17, 0x01	; 1
//  			printf("\nCarbon Monoxide = %u", raw_gas_vector[0]);
//  			printf("\nHydrogen = %u", raw_gas_vector[1]);
//  			printf("\nAmmonia = %u", raw_gas_vector[2]);
//  			printf("\nMethane = %u", raw_gas_vector[3]);
//  			printf("\nOzone = %u\n", raw_gas_vector[4]);
 			printf("\nCO = %u", raw_gas_vector[0]);
    148e:	ce e1       	ldi	r28, 0x1E	; 30
    1490:	d3 e0       	ldi	r29, 0x03	; 3
    1492:	0f 2e       	mov	r0, r31
    1494:	f0 e6       	ldi	r31, 0x60	; 96
    1496:	8f 2e       	mov	r8, r31
    1498:	f1 e0       	ldi	r31, 0x01	; 1
    149a:	9f 2e       	mov	r9, r31
    149c:	f0 2d       	mov	r31, r0
 			printf("\nH = %u", raw_gas_vector[1]);
    149e:	0f 2e       	mov	r0, r31
    14a0:	f9 e6       	ldi	r31, 0x69	; 105
    14a2:	2f 2e       	mov	r2, r31
    14a4:	f1 e0       	ldi	r31, 0x01	; 1
    14a6:	3f 2e       	mov	r3, r31
    14a8:	f0 2d       	mov	r31, r0
		// reached steady state...do nothing for the moment - wait for interrupts.
		// The variable ItsTime gets set to 1 every second using the 1Hz interrupt
		// When GPS is connected and enabled, then ItsTime gets set 
		// to 1 whenever we get a $GPGGA message from that sensor.
		///////////////////////////////////////////////////////////
		if (ItsTime == 1){ //wait for our 1Hz flag (from GPS or Interrupt)
    14aa:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <ItsTime>
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <main+0xaa>
			ItsTime = 0; 
    14b2:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <ItsTime>
			seconds++;
    14b6:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <seconds>
    14ba:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <seconds+0x1>
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <seconds+0x1>
    14c4:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <seconds>
			printf("\nSeconds = %u", seconds);
    14c8:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <seconds>
    14cc:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <seconds+0x1>
    14d0:	9f 93       	push	r25
    14d2:	8f 93       	push	r24
    14d4:	bf 92       	push	r11
    14d6:	af 92       	push	r10
			// - do a blocking read of the sensor
			// - Send the data over the serial port
			// - go to the next sensor 
			//**********************************
			// The GPS message triggers the whole collection cycle, so we can send it now...
			printf("\n%s",messageWant);
    14d8:	5d d4       	rcall	.+2234   	; 0x1d94 <printf>
    14da:	df 92       	push	r13
    14dc:	cf 92       	push	r12
    14de:	ff 92       	push	r15
    14e0:	ef 92       	push	r14
    14e2:	58 d4       	rcall	.+2224   	; 0x1d94 <printf>
			// Now we want to read each sensor - and send out the data,
			// each time through this loop.  Comment out the code you
			// don't want to use when debugging the code you are adding... 
			//============================
			 //Now test reading the LIDAR interface
 			distance = LIDAR_distance();
    14e4:	51 d8       	rcall	.-3934   	; 0x588 <LIDAR_distance>
    14e6:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <distance>
    14ea:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <distance+0x1>
 			printf("LIDAR distance = %u", distance);
    14ee:	9f 93       	push	r25
    14f0:	8f 93       	push	r24
    14f2:	1f 93       	push	r17
    14f4:	0f 93       	push	r16
    14f6:	4e d4       	rcall	.+2204   	; 0x1d94 <printf>
// 				}
// 			}
// 			printf("Z");
			//============================
			// Now test the gas sensor interface...
			start_gas_sensor_read();
    14f8:	0e 94 2b 02 	call	0x456	; 0x456 <start_gas_sensor_read>
//  			printf("\nCarbon Monoxide = %u", raw_gas_vector[0]);
//  			printf("\nHydrogen = %u", raw_gas_vector[1]);
//  			printf("\nAmmonia = %u", raw_gas_vector[2]);
//  			printf("\nMethane = %u", raw_gas_vector[3]);
//  			printf("\nOzone = %u\n", raw_gas_vector[4]);
 			printf("\nCO = %u", raw_gas_vector[0]);
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	8f 93       	push	r24
    1500:	88 81       	ld	r24, Y
    1502:	8f 93       	push	r24
    1504:	9f 92       	push	r9
    1506:	8f 92       	push	r8
    1508:	45 d4       	rcall	.+2186   	; 0x1d94 <printf>
 			printf("\nH = %u", raw_gas_vector[1]);
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	8f 93       	push	r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	8f 93       	push	r24
    1512:	3f 92       	push	r3
    1514:	2f 92       	push	r2
    1516:	3e d4       	rcall	.+2172   	; 0x1d94 <printf>
 			printf("\nNA = %u", raw_gas_vector[2]);
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	8f 93       	push	r24
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	8f 93       	push	r24
    1520:	81 e7       	ldi	r24, 0x71	; 113
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	9f 93       	push	r25
    1526:	8f 93       	push	r24
    1528:	35 d4       	rcall	.+2154   	; 0x1d94 <printf>
 			printf("\nCH4 = %u", raw_gas_vector[3]);
    152a:	8f 81       	ldd	r24, Y+7	; 0x07
    152c:	8f 93       	push	r24
    152e:	8e 81       	ldd	r24, Y+6	; 0x06
    1530:	8f 93       	push	r24
    1532:	8a e7       	ldi	r24, 0x7A	; 122
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	9f 93       	push	r25
    1538:	8f 93       	push	r24
    153a:	2c d4       	rcall	.+2136   	; 0x1d94 <printf>
 			printf("\nO3 = %u", raw_gas_vector[4]);
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	8f 93       	push	r24
    1540:	88 85       	ldd	r24, Y+8	; 0x08
    1542:	8f 93       	push	r24
    1544:	84 e8       	ldi	r24, 0x84	; 132
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	9f 93       	push	r25
    154a:	8f 93       	push	r24
    154c:	23 d4       	rcall	.+2118   	; 0x1d94 <printf>
			//
			//============================
			// Now read the BME interface...
 			bme280basic_bulk_data_read();
    154e:	8d b7       	in	r24, 0x3d	; 61
    1550:	9e b7       	in	r25, 0x3e	; 62
    1552:	80 96       	adiw	r24, 0x20	; 32
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	9e bf       	out	0x3e, r25	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	8d bf       	out	0x3d, r24	; 61
    155e:	1b da       	rcall	.-3018   	; 0x996 <bme280basic_bulk_data_read>
 			tempCelsius = BME280_compensate_T_int32(rawTemp);
    1560:	60 91 79 04 	lds	r22, 0x0479	; 0x800479 <rawTemp>
    1564:	70 91 7a 04 	lds	r23, 0x047A	; 0x80047a <rawTemp+0x1>
    1568:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <rawTemp+0x2>
    156c:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <rawTemp+0x3>
    1570:	fb da       	rcall	.-2570   	; 0xb68 <BME280_compensate_T_int32>
    1572:	60 93 73 04 	sts	0x0473, r22	; 0x800473 <tempCelsius>
    1576:	70 93 74 04 	sts	0x0474, r23	; 0x800474 <tempCelsius+0x1>
    157a:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <tempCelsius+0x2>
    157e:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <tempCelsius+0x3>
// 			sprintf(temperatureBuf, "%lu", tempCelsius);
  			printf("\nCelsius = %lu", tempCelsius);
    1582:	9f 93       	push	r25
    1584:	8f 93       	push	r24
    1586:	7f 93       	push	r23
    1588:	6f 93       	push	r22
    158a:	8d e8       	ldi	r24, 0x8D	; 141
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	9f 93       	push	r25
    1590:	8f 93       	push	r24
    1592:	00 d4       	rcall	.+2048   	; 0x1d94 <printf>
 			pressure = BME280_compensate_P_int64(rawPress);
    1594:	60 91 91 04 	lds	r22, 0x0491	; 0x800491 <rawPress>
    1598:	70 91 92 04 	lds	r23, 0x0492	; 0x800492 <rawPress+0x1>
    159c:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <rawPress+0x2>
    15a0:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <rawPress+0x3>
    15a4:	6c db       	rcall	.-2344   	; 0xc7e <BME280_compensate_P_int64>
    15a6:	60 93 82 04 	sts	0x0482, r22	; 0x800482 <pressure>
    15aa:	70 93 83 04 	sts	0x0483, r23	; 0x800483 <pressure+0x1>
    15ae:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <pressure+0x2>
    15b2:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <pressure+0x3>
 			printf("\nPressure in Pa = %lu", pressure>>8);
    15b6:	bb 27       	eor	r27, r27
    15b8:	97 fd       	sbrc	r25, 7
    15ba:	ba 95       	dec	r27
    15bc:	a9 2f       	mov	r26, r25
    15be:	98 2f       	mov	r25, r24
    15c0:	87 2f       	mov	r24, r23
    15c2:	bf 93       	push	r27
    15c4:	af 93       	push	r26
    15c6:	9f 93       	push	r25
    15c8:	8f 93       	push	r24
    15ca:	8c e9       	ldi	r24, 0x9C	; 156
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	9f 93       	push	r25
    15d0:	8f 93       	push	r24
    15d2:	e0 d3       	rcall	.+1984   	; 0x1d94 <printf>
 			humidity = bme280_compensate_H_int32(rawHum);
    15d4:	60 91 95 04 	lds	r22, 0x0495	; 0x800495 <rawHum>
    15d8:	70 91 96 04 	lds	r23, 0x0496	; 0x800496 <rawHum+0x1>
    15dc:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <rawHum+0x2>
    15e0:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <rawHum+0x3>
    15e4:	47 dd       	rcall	.-1394   	; 0x1074 <bme280_compensate_H_int32>
    15e6:	2b 01       	movw	r4, r22
    15e8:	3c 01       	movw	r6, r24
    15ea:	60 93 8a 04 	sts	0x048A, r22	; 0x80048a <humidity>
    15ee:	70 93 8b 04 	sts	0x048B, r23	; 0x80048b <humidity+0x1>
    15f2:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <humidity+0x2>
    15f6:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <humidity+0x3>
 			printf("\nHumidity%% = %lu.%lu\n", humidity>>10, ((humidity*1000)>>10));
    15fa:	a8 ee       	ldi	r26, 0xE8	; 232
    15fc:	b3 e0       	ldi	r27, 0x03	; 3
    15fe:	9b 01       	movw	r18, r22
    1600:	ac 01       	movw	r20, r24
    1602:	33 d2       	rcall	.+1126   	; 0x1a6a <__muluhisi3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	07 2e       	mov	r0, r23
    160a:	7a e0       	ldi	r23, 0x0A	; 10
    160c:	b5 95       	asr	r27
    160e:	a7 95       	ror	r26
    1610:	97 95       	ror	r25
    1612:	87 95       	ror	r24
    1614:	7a 95       	dec	r23
    1616:	d1 f7       	brne	.-12     	; 0x160c <main+0x20c>
    1618:	70 2d       	mov	r23, r0
    161a:	bf 93       	push	r27
    161c:	af 93       	push	r26
    161e:	9f 93       	push	r25
    1620:	8f 93       	push	r24
    1622:	d3 01       	movw	r26, r6
    1624:	c2 01       	movw	r24, r4
    1626:	07 2e       	mov	r0, r23
    1628:	7a e0       	ldi	r23, 0x0A	; 10
    162a:	b5 95       	asr	r27
    162c:	a7 95       	ror	r26
    162e:	97 95       	ror	r25
    1630:	87 95       	ror	r24
    1632:	7a 95       	dec	r23
    1634:	d1 f7       	brne	.-12     	; 0x162a <main+0x22a>
    1636:	70 2d       	mov	r23, r0
    1638:	bf 93       	push	r27
    163a:	af 93       	push	r26
    163c:	9f 93       	push	r25
    163e:	8f 93       	push	r24
    1640:	82 eb       	ldi	r24, 0xB2	; 178
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	9f 93       	push	r25
    1646:	8f 93       	push	r24
    1648:	a5 d3       	rcall	.+1866   	; 0x1d94 <printf>
    164a:	e9 ec       	ldi	r30, 0xC9	; 201
// 			printf("\n BME message = http://canary.chordsrt.com/measurements/url_create?instrument_id=1&temp=%.5s.%.5s&pres=%lu&hum=%lu&key=4e6fba7420ec9e881f510bcddb%.3s:%.4s:%.3s", temp, temp+2, pressure, humidity, time, time+2, time+4); //need key
			//
			//============================
			//re-enable the GPS receiver & interrupt after processing all sensor data
			UCSR1B |= ((1<<RXCIE1)|(1<<RXEN1));
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 69       	ori	r24, 0x90	; 144
    1652:	80 83       	st	Z, r24
    1654:	8d b7       	in	r24, 0x3d	; 61
    1656:	9e b7       	in	r25, 0x3e	; 62
    1658:	46 96       	adiw	r24, 0x16	; 22
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	9e bf       	out	0x3e, r25	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	8d bf       	out	0x3d, r24	; 61
    1664:	22 cf       	rjmp	.-444    	; 0x14aa <main+0xaa>

00001666 <__vector_default>:
    1666:	1f 92       	push	r1
						Interrupt Service Routines
*********************************************************************************
********************************************************************************/

ISR(BADISR_vect)
{
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
	// Code should never reach this point.  This is a bad interrupt trap.
	SetBit(PORTB, PORTB2);
    1670:	2a 9a       	sbi	0x05, 2	; 5
    1672:	0f 90       	pop	r0
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	0f 90       	pop	r0
    1678:	1f 90       	pop	r1
    167a:	18 95       	reti

0000167c <initialize_timer_counter_1>:
	Not using any of the other compare features, so all other CR bits are 0
	Finally, we have to enable the interrupt vector on compare register A
	TCCR1A = 0; Control Register A is reset to 0x00 on startup. */
	//  
	// Set the WGM mode and prescaler select in control register B
	TCCR1B = ((1<<WGM12) | (1<<CS12) | (1<<CS10));
    167c:	8d e0       	ldi	r24, 0x0D	; 13
    167e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// TCCR1C = 0; Control Register C is reset to 0x00 on startup.
	// Now we need to enter out TOP value in OCR1A
	OCR1A = 19530;
    1682:	8a e4       	ldi	r24, 0x4A	; 74
    1684:	9c e4       	ldi	r25, 0x4C	; 76
    1686:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    168a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    168e:	08 95       	ret

00001690 <__vector_16>:
*********************************************************************************
********************************************************************************/


// 100Hz timer interrupt generated by OC0A and used by the FATFS code.
EMPTY_INTERRUPT(TIMER0_COMPA_vect);
    1690:	18 95       	reti

00001692 <__vector_13>:
// }



ISR(TIMER1_COMPA_vect)
{
    1692:	1f 92       	push	r1
    1694:	0f 92       	push	r0
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	0f 92       	push	r0
    169a:	11 24       	eor	r1, r1
    169c:	8f 93       	push	r24
    169e:	9f 93       	push	r25
	ToggleBit(PORTB, PORTB1); //for now, just toggle the green status LED
    16a0:	95 b1       	in	r25, 0x05	; 5
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	89 27       	eor	r24, r25
    16a6:	85 b9       	out	0x05, r24	; 5
	ItsTime = 1;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <ItsTime>
}
    16ae:	9f 91       	pop	r25
    16b0:	8f 91       	pop	r24
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	0f 90       	pop	r0
    16b8:	1f 90       	pop	r1
    16ba:	18 95       	reti

000016bc <TWI_Master_Initialise>:
void TWI_Start_Transceiver( void )
{
  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
  TWI_statusReg.all = 0;      
  TWI_state         = TWI_NO_STATE ;
  TWCR = (1<<TWEN)|                             // TWI Interface enabled.
    16bc:	81 e1       	ldi	r24, 0x11	; 17
    16be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    16c8:	84 e0       	ldi	r24, 0x04	; 4
    16ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    16ce:	08 95       	ret

000016d0 <TWI_Transceiver_Busy>:
    16d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    16d4:	81 78       	andi	r24, 0x81	; 129
    16d6:	08 95       	ret

000016d8 <TWI_Start_Transceiver_With_Data>:
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	ec 01       	movw	r28, r24
    16de:	ec eb       	ldi	r30, 0xBC	; 188
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	90 81       	ld	r25, Z
    16e4:	91 78       	andi	r25, 0x81	; 129
    16e6:	e9 f7       	brne	.-6      	; 0x16e2 <TWI_Start_Transceiver_With_Data+0xa>
    16e8:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <TWI_msgSize>
    16ec:	88 81       	ld	r24, Y
    16ee:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <TWI_buf>
    16f2:	80 fd       	sbrc	r24, 0
    16f4:	12 c0       	rjmp	.+36     	; 0x171a <TWI_Start_Transceiver_With_Data+0x42>
    16f6:	62 30       	cpi	r22, 0x02	; 2
    16f8:	80 f0       	brcs	.+32     	; 0x171a <TWI_Start_Transceiver_With_Data+0x42>
    16fa:	fe 01       	movw	r30, r28
    16fc:	31 96       	adiw	r30, 0x01	; 1
    16fe:	a2 ed       	ldi	r26, 0xD2	; 210
    1700:	b1 e0       	ldi	r27, 0x01	; 1
    1702:	62 50       	subi	r22, 0x02	; 2
    1704:	26 2f       	mov	r18, r22
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	2e 5f       	subi	r18, 0xFE	; 254
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	2c 0f       	add	r18, r28
    170e:	3d 1f       	adc	r19, r29
    1710:	91 91       	ld	r25, Z+
    1712:	9d 93       	st	X+, r25
    1714:	e2 17       	cp	r30, r18
    1716:	f3 07       	cpc	r31, r19
    1718:	d9 f7       	brne	.-10     	; 0x1710 <TWI_Start_Transceiver_With_Data+0x38>
    171a:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <TWI_statusReg>
    171e:	88 ef       	ldi	r24, 0xF8	; 248
    1720:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <TWI_state>
    1724:	85 ea       	ldi	r24, 0xA5	; 165
    1726:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret

00001730 <TWI_Get_Data_From_Transceiver>:
requested (including the address field) in the function call. The function will hold execution (loop)
until the TWI_ISR has completed with the previous operation, before reading out the data and returning.
If there was an error in the previous transmission the function will return the TWI error code.
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
    1730:	ac 01       	movw	r20, r24
/****************************************************************************
Call this function to test if the TWI_ISR is busy transmitting.
****************************************************************************/
unsigned char TWI_Transceiver_Busy( void )
{
  return ( TWCR & ((1<<TWIE)|(1<<TWINT)));                  // IF TWI Interrupt is enabled then the Transceiver is busy
    1732:	ec eb       	ldi	r30, 0xBC	; 188
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	90 81       	ld	r25, Z
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
  unsigned char i;

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
    1738:	91 78       	andi	r25, 0x81	; 129
    173a:	e9 f7       	brne	.-6      	; 0x1736 <TWI_Get_Data_From_Transceiver+0x6>

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
    173c:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TWI_statusReg>
    1740:	80 ff       	sbrs	r24, 0
    1742:	11 c0       	rjmp	.+34     	; 0x1766 <TWI_Get_Data_From_Transceiver+0x36>
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
    1744:	66 23       	and	r22, r22
    1746:	79 f0       	breq	.+30     	; 0x1766 <TWI_Get_Data_From_Transceiver+0x36>
    1748:	a1 ed       	ldi	r26, 0xD1	; 209
    174a:	b1 e0       	ldi	r27, 0x01	; 1
    174c:	fa 01       	movw	r30, r20
    174e:	61 50       	subi	r22, 0x01	; 1
    1750:	26 2f       	mov	r18, r22
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	2f 5f       	subi	r18, 0xFF	; 255
    1756:	3f 4f       	sbci	r19, 0xFF	; 255
    1758:	24 0f       	add	r18, r20
    175a:	35 1f       	adc	r19, r21
    {
      msg[ i ] = TWI_buf[ i ];
    175c:	9d 91       	ld	r25, X+
    175e:	91 93       	st	Z+, r25

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
    1760:	e2 17       	cp	r30, r18
    1762:	f3 07       	cpc	r31, r19
    1764:	d9 f7       	brne	.-10     	; 0x175c <TWI_Get_Data_From_Transceiver+0x2c>
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
    1766:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TWI_statusReg>
}
    176a:	81 70       	andi	r24, 0x01	; 1
    176c:	08 95       	ret

0000176e <__vector_26>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	0b b6       	in	r0, 0x3b	; 59
    177a:	0f 92       	push	r0
    177c:	2f 93       	push	r18
    177e:	3f 93       	push	r19
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
    1784:	af 93       	push	r26
    1786:	bf 93       	push	r27
    1788:	ef 93       	push	r30
    178a:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
    178c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1790:	8e 2f       	mov	r24, r30
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	fc 01       	movw	r30, r24
    1796:	38 97       	sbiw	r30, 0x08	; 8
    1798:	e1 35       	cpi	r30, 0x51	; 81
    179a:	f1 05       	cpc	r31, r1
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <__vector_26+0x32>
    179e:	55 c0       	rjmp	.+170    	; 0x184a <__vector_26+0xdc>
    17a0:	ea 5b       	subi	r30, 0xBA	; 186
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	59 c1       	rjmp	.+690    	; 0x1a58 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
    17a6:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <TWI_bufPtr.1674>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
    17aa:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TWI_bufPtr.1674>
    17ae:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <TWI_msgSize>
    17b2:	e8 17       	cp	r30, r24
    17b4:	70 f4       	brcc	.+28     	; 0x17d2 <__vector_26+0x64>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	8e 0f       	add	r24, r30
    17ba:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <TWI_bufPtr.1674>
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	ef 52       	subi	r30, 0x2F	; 47
    17c2:	fe 4f       	sbci	r31, 0xFE	; 254
    17c4:	80 81       	ld	r24, Z
    17c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    17ca:	85 e8       	ldi	r24, 0x85	; 133
    17cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17d0:	43 c0       	rjmp	.+134    	; 0x1858 <__vector_26+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
    17d2:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TWI_statusReg>
    17d6:	81 60       	ori	r24, 0x01	; 1
    17d8:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    17dc:	84 e9       	ldi	r24, 0x94	; 148
    17de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17e2:	3a c0       	rjmp	.+116    	; 0x1858 <__vector_26+0xea>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
    17e4:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TWI_bufPtr.1674>
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	8e 0f       	add	r24, r30
    17ec:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <TWI_bufPtr.1674>
    17f0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	ef 52       	subi	r30, 0x2F	; 47
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
    17fc:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <TWI_bufPtr.1674>
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <TWI_msgSize>
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	28 17       	cp	r18, r24
    180c:	39 07       	cpc	r19, r25
    180e:	24 f4       	brge	.+8      	; 0x1818 <__vector_26+0xaa>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    1810:	85 ec       	ldi	r24, 0xC5	; 197
    1812:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1816:	20 c0       	rjmp	.+64     	; 0x1858 <__vector_26+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    1818:	85 e8       	ldi	r24, 0x85	; 133
    181a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    181e:	1c c0       	rjmp	.+56     	; 0x1858 <__vector_26+0xea>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
    1820:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1824:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TWI_bufPtr.1674>
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	ef 52       	subi	r30, 0x2F	; 47
    182c:	fe 4f       	sbci	r31, 0xFE	; 254
    182e:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
    1830:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TWI_statusReg>
    1834:	81 60       	ori	r24, 0x01	; 1
    1836:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    183a:	84 e9       	ldi	r24, 0x94	; 148
    183c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
    1840:	0b c0       	rjmp	.+22     	; 0x1858 <__vector_26+0xea>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    1842:	85 ea       	ldi	r24, 0xA5	; 165
    1844:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <__vector_26+0xea>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
    184a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    184e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <TWI_state>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
    1852:	84 e0       	ldi	r24, 0x04	; 4
    1854:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
    1858:	ff 91       	pop	r31
    185a:	ef 91       	pop	r30
    185c:	bf 91       	pop	r27
    185e:	af 91       	pop	r26
    1860:	9f 91       	pop	r25
    1862:	8f 91       	pop	r24
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	0f 90       	pop	r0
    186a:	0b be       	out	0x3b, r0	; 59
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <USART0_init>:
	tmptail = (UART0_RxTail + 1) & UART0_RX_BUFFER_MASK;
	// Store new index 
	UART0_RxTail = tmptail;
	// Return data 
	return UART0_RxBuf[tmptail];
}
    1876:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    187a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    187e:	88 e0       	ldi	r24, 0x08	; 8
    1880:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1884:	86 e0       	ldi	r24, 0x06	; 6
    1886:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    188a:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <UART0_RxTail>
    188e:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <UART0_RxHead>
    1892:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <UART0_TxTail>
    1896:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <UART0_TxHead>
    189a:	08 95       	ret

0000189c <USART0_TransmitByte>:

void USART0_TransmitByte(unsigned char data)
{
	unsigned char tmphead;
	// Calculate buffer index
	tmphead = (UART0_TxHead + 1) & UART0_TX_BUFFER_MASK;
    189c:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <UART0_TxHead>
    18a0:	2f 5f       	subi	r18, 0xFF	; 255
	// Wait for free space in buffer
	while (tmphead == UART0_TxTail);
    18a2:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <UART0_TxTail>
    18a6:	29 17       	cp	r18, r25
    18a8:	e1 f3       	breq	.-8      	; 0x18a2 <USART0_TransmitByte+0x6>
	// Store data in buffer 
	UART0_TxBuf[tmphead] = data;
    18aa:	e2 2f       	mov	r30, r18
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	ed 51       	subi	r30, 0x1D	; 29
    18b0:	fe 4f       	sbci	r31, 0xFE	; 254
    18b2:	80 83       	st	Z, r24
	// Store new index 
	UART0_TxHead = tmphead;
    18b4:	20 93 e2 01 	sts	0x01E2, r18	; 0x8001e2 <UART0_TxHead>
	// Enable UDRE interrupt 
	UCSR0B |= (1<<UDRIE0);
    18b8:	e1 ec       	ldi	r30, 0xC1	; 193
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	80 62       	ori	r24, 0x20	; 32
    18c0:	80 83       	st	Z, r24
    18c2:	08 95       	ret

000018c4 <USART0_Transmit_IO>:
//This version is used to send formatted strings...
int USART0_Transmit_IO(char data, FILE *stream)
{
	unsigned char tmphead;
	// Calculate buffer index
	tmphead = (UART0_TxHead + 1) & UART0_TX_BUFFER_MASK;
    18c4:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <UART0_TxHead>
    18c8:	2f 5f       	subi	r18, 0xFF	; 255
	// Wait for free space in buffer
	while (tmphead == UART0_TxTail);
    18ca:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <UART0_TxTail>
    18ce:	29 17       	cp	r18, r25
    18d0:	e1 f3       	breq	.-8      	; 0x18ca <USART0_Transmit_IO+0x6>
	// Store data in buffer
	UART0_TxBuf[tmphead] = data;
    18d2:	e2 2f       	mov	r30, r18
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	ed 51       	subi	r30, 0x1D	; 29
    18d8:	fe 4f       	sbci	r31, 0xFE	; 254
    18da:	80 83       	st	Z, r24
	// Store new index
	UART0_TxHead = tmphead;
    18dc:	20 93 e2 01 	sts	0x01E2, r18	; 0x8001e2 <UART0_TxHead>
	// Enable UDRE interrupt
	UCSR0B |= (1<<UDRIE0);
    18e0:	e1 ec       	ldi	r30, 0xC1	; 193
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	80 62       	ori	r24, 0x20	; 32
    18e8:	80 83       	st	Z, r24
	return(0);
}
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	08 95       	ret

000018f0 <USART0_putstring>:

// This put string function stops when it reaches the end of a string, which is
// always a null character (0x00) in c.
void USART0_putstring(char* StringPtr) {
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00) {
    18f6:	88 81       	ld	r24, Y
    18f8:	88 23       	and	r24, r24
    18fa:	29 f0       	breq	.+10     	; 0x1906 <USART0_putstring+0x16>
    18fc:	21 96       	adiw	r28, 0x01	; 1
		USART0_TransmitByte(*StringPtr);
    18fe:	ce df       	rcall	.-100    	; 0x189c <USART0_TransmitByte>
}

// This put string function stops when it reaches the end of a string, which is
// always a null character (0x00) in c.
void USART0_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
    1900:	89 91       	ld	r24, Y+
    1902:	81 11       	cpse	r24, r1
    1904:	fc cf       	rjmp	.-8      	; 0x18fe <USART0_putstring+0xe>
		USART0_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	08 95       	ret

0000190c <__vector_21>:
	// Store received data in buffer 
	UART0_RxBuf[tmphead] = data;
}*/

ISR(USART0_UDRE_vect)
{
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	0f 92       	push	r0
    1914:	11 24       	eor	r1, r1
    1916:	0b b6       	in	r0, 0x3b	; 59
    1918:	0f 92       	push	r0
    191a:	8f 93       	push	r24
    191c:	9f 93       	push	r25
    191e:	ef 93       	push	r30
    1920:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted 
	if (UART0_TxHead != UART0_TxTail) {
    1922:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <UART0_TxHead>
    1926:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <UART0_TxTail>
    192a:	98 17       	cp	r25, r24
    192c:	61 f0       	breq	.+24     	; 0x1946 <__vector_21+0x3a>
		// Calculate buffer index
		tmptail = ( UART0_TxTail + 1 ) & UART0_TX_BUFFER_MASK;
    192e:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <UART0_TxTail>
    1932:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index 
		UART0_TxTail = tmptail;
    1934:	e0 93 e1 01 	sts	0x01E1, r30	; 0x8001e1 <UART0_TxTail>
		// Start transmission 
		UDR0 = UART0_TxBuf[tmptail];
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	ed 51       	subi	r30, 0x1D	; 29
    193c:	fe 4f       	sbci	r31, 0xFE	; 254
    193e:	80 81       	ld	r24, Z
    1940:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <__vector_21+0x44>
		} else {
		// Disable UDRE interrupt 
		UCSR0B &= ~(1<<UDRIE0);
    1946:	e1 ec       	ldi	r30, 0xC1	; 193
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8f 7d       	andi	r24, 0xDF	; 223
    194e:	80 83       	st	Z, r24
		//flag here
	}
    1950:	ff 91       	pop	r31
    1952:	ef 91       	pop	r30
    1954:	9f 91       	pop	r25
    1956:	8f 91       	pop	r24
    1958:	0f 90       	pop	r0
    195a:	0b be       	out	0x3b, r0	; 59
    195c:	0f 90       	pop	r0
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	0f 90       	pop	r0
    1962:	1f 90       	pop	r1
    1964:	18 95       	reti

00001966 <USART1_init>:
void USART1_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
		USART1_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
    1966:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    196a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    196e:	80 e9       	ldi	r24, 0x90	; 144
    1970:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1974:	86 e0       	ldi	r24, 0x06	; 6
    1976:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    197a:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <UART1_RxTail>
    197e:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <UART1_RxHead>
    1982:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <UART1_TxTail>
    1986:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <UART1_TxHead>
    198a:	08 95       	ret

0000198c <__vector_28>:
*********************************************************************************
********************************************************************************/


ISR(USART1_RX_vect)
{
    198c:	1f 92       	push	r1
    198e:	0f 92       	push	r0
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	0f 92       	push	r0
    1994:	11 24       	eor	r1, r1
    1996:	0b b6       	in	r0, 0x3b	; 59
    1998:	0f 92       	push	r0
    199a:	2f 93       	push	r18
    199c:	3f 93       	push	r19
    199e:	8f 93       	push	r24
    19a0:	9f 93       	push	r25
    19a2:	af 93       	push	r26
    19a4:	bf 93       	push	r27
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	ef 93       	push	r30
    19ac:	ff 93       	push	r31
	unsigned char data;
	unsigned char tmphead;
	unsigned char i;
	// Read the received data 
	data = UDR1;
    19ae:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	// Calculate buffer index 
	tmphead = (UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
    19b2:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <UART1_RxHead>
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
	// Store new index 
	UART1_RxHead = tmphead;
    19b8:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <UART1_RxHead>

	if (tmphead == UART1_RxTail) {
    19bc:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <UART1_RxTail>
		// ERROR! Receive buffer overflow 
	}
	// Store received data in buffer 
	UART1_RxBuf[tmphead] = data;
    19c0:	e8 2f       	mov	r30, r24
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	e5 53       	subi	r30, 0x35	; 53
    19c6:	fb 4f       	sbci	r31, 0xFB	; 251
    19c8:	90 83       	st	Z, r25
	
	if (data == 10)
    19ca:	9a 30       	cpi	r25, 0x0A	; 10
    19cc:	29 f5       	brne	.+74     	; 0x1a18 <__vector_28+0x8c>
	{
		//USART0_TransmitByte('n');
		if (UART1_RxBuf[5] == 'G')
    19ce:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <UART1_RxBuf+0x5>
    19d2:	97 34       	cpi	r25, 0x47	; 71
    19d4:	e9 f4       	brne	.+58     	; 0x1a10 <__vector_28+0x84>
    19d6:	e0 e0       	ldi	r30, 0x00	; 0
		{
			//USART0_TransmitByte(UART1_RxBuf[5]);
			for (i = 0; i<= tmphead; i++)
			{
				messageWant[i] = UART1_RxBuf[i+1]; //UART1_RxBuf[i];
    19d8:	2e 2f       	mov	r18, r30
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	d9 01       	movw	r26, r18
    19de:	a5 53       	subi	r26, 0x35	; 53
    19e0:	ba 4f       	sbci	r27, 0xFA	; 250
    19e2:	e9 01       	movw	r28, r18
    19e4:	c5 53       	subi	r28, 0x35	; 53
    19e6:	db 4f       	sbci	r29, 0xFB	; 251
    19e8:	99 81       	ldd	r25, Y+1	; 0x01
    19ea:	9c 93       	st	X, r25
	{
		//USART0_TransmitByte('n');
		if (UART1_RxBuf[5] == 'G')
		{
			//USART0_TransmitByte(UART1_RxBuf[5]);
			for (i = 0; i<= tmphead; i++)
    19ec:	ef 5f       	subi	r30, 0xFF	; 255
    19ee:	8e 17       	cp	r24, r30
    19f0:	98 f7       	brcc	.-26     	; 0x19d8 <__vector_28+0x4c>
			{
				messageWant[i] = UART1_RxBuf[i+1]; //UART1_RxBuf[i];

			}
			messageWant[i]=0x00; //messageWant[i+1]=0x00;
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	e5 53       	subi	r30, 0x35	; 53
    19f6:	fa 4f       	sbci	r31, 0xFA	; 250
    19f8:	10 82       	st	Z, r1
 			UCSR1B &= !((1<<RXCIE1)|(1<<RXEN1));  //Clear the receive interrupt on USART 1 until we're done reading all other sensors.
    19fa:	e9 ec       	ldi	r30, 0xC9	; 201
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	10 82       	st	Z, r1
 			ItsTime = 1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <ItsTime>
 			ToggleBit(PORTB, PORTB1);
    1a08:	95 b1       	in	r25, 0x05	; 5
    1a0a:	82 e0       	ldi	r24, 0x02	; 2
    1a0c:	89 27       	eor	r24, r25
    1a0e:	85 b9       	out	0x05, r24	; 5
		}
		UART1_RxTail = 0;
    1a10:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <UART1_RxTail>
		UART1_RxHead = 0;
    1a14:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <UART1_RxHead>
	}
}
    1a18:	ff 91       	pop	r31
    1a1a:	ef 91       	pop	r30
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	3f 91       	pop	r19
    1a2a:	2f 91       	pop	r18
    1a2c:	0f 90       	pop	r0
    1a2e:	0b be       	out	0x3b, r0	; 59
    1a30:	0f 90       	pop	r0
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	0f 90       	pop	r0
    1a36:	1f 90       	pop	r1
    1a38:	18 95       	reti

00001a3a <__mulsi3>:
    1a3a:	db 01       	movw	r26, r22
    1a3c:	8f 93       	push	r24
    1a3e:	9f 93       	push	r25
    1a40:	14 d0       	rcall	.+40     	; 0x1a6a <__muluhisi3>
    1a42:	bf 91       	pop	r27
    1a44:	af 91       	pop	r26
    1a46:	a2 9f       	mul	r26, r18
    1a48:	80 0d       	add	r24, r0
    1a4a:	91 1d       	adc	r25, r1
    1a4c:	a3 9f       	mul	r26, r19
    1a4e:	90 0d       	add	r25, r0
    1a50:	b2 9f       	mul	r27, r18
    1a52:	90 0d       	add	r25, r0
    1a54:	11 24       	eor	r1, r1
    1a56:	08 95       	ret

00001a58 <__tablejump2__>:
    1a58:	ee 0f       	add	r30, r30
    1a5a:	ff 1f       	adc	r31, r31
    1a5c:	00 24       	eor	r0, r0
    1a5e:	00 1c       	adc	r0, r0
    1a60:	0b be       	out	0x3b, r0	; 59
    1a62:	07 90       	elpm	r0, Z+
    1a64:	f6 91       	elpm	r31, Z
    1a66:	e0 2d       	mov	r30, r0
    1a68:	09 94       	ijmp

00001a6a <__muluhisi3>:
    1a6a:	85 d1       	rcall	.+778    	; 0x1d76 <__umulhisi3>
    1a6c:	a5 9f       	mul	r26, r21
    1a6e:	90 0d       	add	r25, r0
    1a70:	b4 9f       	mul	r27, r20
    1a72:	90 0d       	add	r25, r0
    1a74:	a4 9f       	mul	r26, r20
    1a76:	80 0d       	add	r24, r0
    1a78:	91 1d       	adc	r25, r1
    1a7a:	11 24       	eor	r1, r1
    1a7c:	08 95       	ret

00001a7e <__mulshisi3>:
    1a7e:	b7 ff       	sbrs	r27, 7
    1a80:	f4 cf       	rjmp	.-24     	; 0x1a6a <__muluhisi3>

00001a82 <__mulohisi3>:
    1a82:	f3 df       	rcall	.-26     	; 0x1a6a <__muluhisi3>
    1a84:	82 1b       	sub	r24, r18
    1a86:	93 0b       	sbc	r25, r19
    1a88:	08 95       	ret

00001a8a <__muldi3>:
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	1f 93       	push	r17
    1a90:	0f 93       	push	r16
    1a92:	9a 9d       	mul	r25, r10
    1a94:	f0 2d       	mov	r31, r0
    1a96:	21 9f       	mul	r18, r17
    1a98:	f0 0d       	add	r31, r0
    1a9a:	8b 9d       	mul	r24, r11
    1a9c:	f0 0d       	add	r31, r0
    1a9e:	8a 9d       	mul	r24, r10
    1aa0:	e0 2d       	mov	r30, r0
    1aa2:	f1 0d       	add	r31, r1
    1aa4:	03 9f       	mul	r16, r19
    1aa6:	f0 0d       	add	r31, r0
    1aa8:	02 9f       	mul	r16, r18
    1aaa:	e0 0d       	add	r30, r0
    1aac:	f1 1d       	adc	r31, r1
    1aae:	4e 9d       	mul	r20, r14
    1ab0:	e0 0d       	add	r30, r0
    1ab2:	f1 1d       	adc	r31, r1
    1ab4:	5e 9d       	mul	r21, r14
    1ab6:	f0 0d       	add	r31, r0
    1ab8:	4f 9d       	mul	r20, r15
    1aba:	f0 0d       	add	r31, r0
    1abc:	7f 93       	push	r23
    1abe:	6f 93       	push	r22
    1ac0:	bf 92       	push	r11
    1ac2:	af 92       	push	r10
    1ac4:	5f 93       	push	r21
    1ac6:	4f 93       	push	r20
    1ac8:	d5 01       	movw	r26, r10
    1aca:	55 d1       	rcall	.+682    	; 0x1d76 <__umulhisi3>
    1acc:	8b 01       	movw	r16, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	d7 01       	movw	r26, r14
    1ad2:	51 d1       	rcall	.+674    	; 0x1d76 <__umulhisi3>
    1ad4:	eb 01       	movw	r28, r22
    1ad6:	e8 0f       	add	r30, r24
    1ad8:	f9 1f       	adc	r31, r25
    1ada:	d6 01       	movw	r26, r12
    1adc:	1f d0       	rcall	.+62     	; 0x1b1c <__muldi3_6>
    1ade:	2f 91       	pop	r18
    1ae0:	3f 91       	pop	r19
    1ae2:	d6 01       	movw	r26, r12
    1ae4:	48 d1       	rcall	.+656    	; 0x1d76 <__umulhisi3>
    1ae6:	c6 0f       	add	r28, r22
    1ae8:	d7 1f       	adc	r29, r23
    1aea:	e8 1f       	adc	r30, r24
    1aec:	f9 1f       	adc	r31, r25
    1aee:	af 91       	pop	r26
    1af0:	bf 91       	pop	r27
    1af2:	14 d0       	rcall	.+40     	; 0x1b1c <__muldi3_6>
    1af4:	2f 91       	pop	r18
    1af6:	3f 91       	pop	r19
    1af8:	3e d1       	rcall	.+636    	; 0x1d76 <__umulhisi3>
    1afa:	c6 0f       	add	r28, r22
    1afc:	d7 1f       	adc	r29, r23
    1afe:	e8 1f       	adc	r30, r24
    1b00:	f9 1f       	adc	r31, r25
    1b02:	d6 01       	movw	r26, r12
    1b04:	38 d1       	rcall	.+624    	; 0x1d76 <__umulhisi3>
    1b06:	e6 0f       	add	r30, r22
    1b08:	f7 1f       	adc	r31, r23
    1b0a:	98 01       	movw	r18, r16
    1b0c:	be 01       	movw	r22, r28
    1b0e:	cf 01       	movw	r24, r30
    1b10:	11 24       	eor	r1, r1
    1b12:	0f 91       	pop	r16
    1b14:	1f 91       	pop	r17
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <__muldi3_6>:
    1b1c:	2c d1       	rcall	.+600    	; 0x1d76 <__umulhisi3>
    1b1e:	46 0f       	add	r20, r22
    1b20:	57 1f       	adc	r21, r23
    1b22:	c8 1f       	adc	r28, r24
    1b24:	d9 1f       	adc	r29, r25
    1b26:	08 f4       	brcc	.+2      	; 0x1b2a <__muldi3_6+0xe>
    1b28:	31 96       	adiw	r30, 0x01	; 1
    1b2a:	08 95       	ret

00001b2c <__moddi3>:
    1b2c:	68 94       	set
    1b2e:	01 c0       	rjmp	.+2      	; 0x1b32 <__divdi3_moddi3>

00001b30 <__divdi3>:
    1b30:	e8 94       	clt

00001b32 <__divdi3_moddi3>:
    1b32:	f9 2f       	mov	r31, r25
    1b34:	f1 2b       	or	r31, r17
    1b36:	0a f0       	brmi	.+2      	; 0x1b3a <__divdi3_moddi3+0x8>
    1b38:	27 c0       	rjmp	.+78     	; 0x1b88 <__udivdi3_umoddi3>
    1b3a:	a0 e0       	ldi	r26, 0x00	; 0
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e2 ea       	ldi	r30, 0xA2	; 162
    1b40:	fd e0       	ldi	r31, 0x0D	; 13
    1b42:	93 c0       	rjmp	.+294    	; 0x1c6a <__prologue_saves__+0xc>
    1b44:	09 2e       	mov	r0, r25
    1b46:	05 94       	asr	r0
    1b48:	1a f4       	brpl	.+6      	; 0x1b50 <__divdi3_moddi3+0x1e>
    1b4a:	79 d0       	rcall	.+242    	; 0x1c3e <__negdi2>
    1b4c:	11 23       	and	r17, r17
    1b4e:	92 f4       	brpl	.+36     	; 0x1b74 <__divdi3_moddi3+0x42>
    1b50:	f0 e8       	ldi	r31, 0x80	; 128
    1b52:	0f 26       	eor	r0, r31
    1b54:	ff ef       	ldi	r31, 0xFF	; 255
    1b56:	e0 94       	com	r14
    1b58:	f0 94       	com	r15
    1b5a:	00 95       	com	r16
    1b5c:	10 95       	com	r17
    1b5e:	b0 94       	com	r11
    1b60:	c0 94       	com	r12
    1b62:	d0 94       	com	r13
    1b64:	a1 94       	neg	r10
    1b66:	bf 0a       	sbc	r11, r31
    1b68:	cf 0a       	sbc	r12, r31
    1b6a:	df 0a       	sbc	r13, r31
    1b6c:	ef 0a       	sbc	r14, r31
    1b6e:	ff 0a       	sbc	r15, r31
    1b70:	0f 0b       	sbc	r16, r31
    1b72:	1f 0b       	sbc	r17, r31
    1b74:	13 d0       	rcall	.+38     	; 0x1b9c <__udivmod64>
    1b76:	07 fc       	sbrc	r0, 7
    1b78:	62 d0       	rcall	.+196    	; 0x1c3e <__negdi2>
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	ec e0       	ldi	r30, 0x0C	; 12
    1b80:	90 c0       	rjmp	.+288    	; 0x1ca2 <__epilogue_restores__+0xc>

00001b82 <__umoddi3>:
    1b82:	68 94       	set
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <__udivdi3_umoddi3>

00001b86 <__udivdi3>:
    1b86:	e8 94       	clt

00001b88 <__udivdi3_umoddi3>:
    1b88:	8f 92       	push	r8
    1b8a:	9f 92       	push	r9
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	05 d0       	rcall	.+10     	; 0x1b9c <__udivmod64>
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	9f 90       	pop	r9
    1b98:	8f 90       	pop	r8
    1b9a:	08 95       	ret

00001b9c <__udivmod64>:
    1b9c:	88 24       	eor	r8, r8
    1b9e:	99 24       	eor	r9, r9
    1ba0:	f4 01       	movw	r30, r8
    1ba2:	e4 01       	movw	r28, r8
    1ba4:	b0 e4       	ldi	r27, 0x40	; 64
    1ba6:	9f 93       	push	r25
    1ba8:	aa 27       	eor	r26, r26
    1baa:	9a 15       	cp	r25, r10
    1bac:	8b 04       	cpc	r8, r11
    1bae:	9c 04       	cpc	r9, r12
    1bb0:	ed 05       	cpc	r30, r13
    1bb2:	fe 05       	cpc	r31, r14
    1bb4:	cf 05       	cpc	r28, r15
    1bb6:	d0 07       	cpc	r29, r16
    1bb8:	a1 07       	cpc	r26, r17
    1bba:	98 f4       	brcc	.+38     	; 0x1be2 <__udivmod64+0x46>
    1bbc:	ad 2f       	mov	r26, r29
    1bbe:	dc 2f       	mov	r29, r28
    1bc0:	cf 2f       	mov	r28, r31
    1bc2:	fe 2f       	mov	r31, r30
    1bc4:	e9 2d       	mov	r30, r9
    1bc6:	98 2c       	mov	r9, r8
    1bc8:	89 2e       	mov	r8, r25
    1bca:	98 2f       	mov	r25, r24
    1bcc:	87 2f       	mov	r24, r23
    1bce:	76 2f       	mov	r23, r22
    1bd0:	65 2f       	mov	r22, r21
    1bd2:	54 2f       	mov	r21, r20
    1bd4:	43 2f       	mov	r20, r19
    1bd6:	32 2f       	mov	r19, r18
    1bd8:	22 27       	eor	r18, r18
    1bda:	b8 50       	subi	r27, 0x08	; 8
    1bdc:	31 f7       	brne	.-52     	; 0x1baa <__udivmod64+0xe>
    1bde:	bf 91       	pop	r27
    1be0:	27 c0       	rjmp	.+78     	; 0x1c30 <__udivmod64+0x94>
    1be2:	1b 2e       	mov	r1, r27
    1be4:	bf 91       	pop	r27
    1be6:	bb 27       	eor	r27, r27
    1be8:	22 0f       	add	r18, r18
    1bea:	33 1f       	adc	r19, r19
    1bec:	44 1f       	adc	r20, r20
    1bee:	55 1f       	adc	r21, r21
    1bf0:	66 1f       	adc	r22, r22
    1bf2:	77 1f       	adc	r23, r23
    1bf4:	88 1f       	adc	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	88 1c       	adc	r8, r8
    1bfa:	99 1c       	adc	r9, r9
    1bfc:	ee 1f       	adc	r30, r30
    1bfe:	ff 1f       	adc	r31, r31
    1c00:	cc 1f       	adc	r28, r28
    1c02:	dd 1f       	adc	r29, r29
    1c04:	aa 1f       	adc	r26, r26
    1c06:	bb 1f       	adc	r27, r27
    1c08:	8a 14       	cp	r8, r10
    1c0a:	9b 04       	cpc	r9, r11
    1c0c:	ec 05       	cpc	r30, r12
    1c0e:	fd 05       	cpc	r31, r13
    1c10:	ce 05       	cpc	r28, r14
    1c12:	df 05       	cpc	r29, r15
    1c14:	a0 07       	cpc	r26, r16
    1c16:	b1 07       	cpc	r27, r17
    1c18:	48 f0       	brcs	.+18     	; 0x1c2c <__udivmod64+0x90>
    1c1a:	8a 18       	sub	r8, r10
    1c1c:	9b 08       	sbc	r9, r11
    1c1e:	ec 09       	sbc	r30, r12
    1c20:	fd 09       	sbc	r31, r13
    1c22:	ce 09       	sbc	r28, r14
    1c24:	df 09       	sbc	r29, r15
    1c26:	a0 0b       	sbc	r26, r16
    1c28:	b1 0b       	sbc	r27, r17
    1c2a:	21 60       	ori	r18, 0x01	; 1
    1c2c:	1a 94       	dec	r1
    1c2e:	e1 f6       	brne	.-72     	; 0x1be8 <__udivmod64+0x4c>
    1c30:	2e f4       	brtc	.+10     	; 0x1c3c <__udivmod64+0xa0>
    1c32:	94 01       	movw	r18, r8
    1c34:	af 01       	movw	r20, r30
    1c36:	be 01       	movw	r22, r28
    1c38:	cd 01       	movw	r24, r26
    1c3a:	00 0c       	add	r0, r0
    1c3c:	08 95       	ret

00001c3e <__negdi2>:
    1c3e:	60 95       	com	r22
    1c40:	70 95       	com	r23
    1c42:	80 95       	com	r24
    1c44:	90 95       	com	r25
    1c46:	30 95       	com	r19
    1c48:	40 95       	com	r20
    1c4a:	50 95       	com	r21
    1c4c:	21 95       	neg	r18
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	4f 4f       	sbci	r20, 0xFF	; 255
    1c52:	5f 4f       	sbci	r21, 0xFF	; 255
    1c54:	6f 4f       	sbci	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	08 95       	ret

00001c5e <__prologue_saves__>:
    1c5e:	2f 92       	push	r2
    1c60:	3f 92       	push	r3
    1c62:	4f 92       	push	r4
    1c64:	5f 92       	push	r5
    1c66:	6f 92       	push	r6
    1c68:	7f 92       	push	r7
    1c6a:	8f 92       	push	r8
    1c6c:	9f 92       	push	r9
    1c6e:	af 92       	push	r10
    1c70:	bf 92       	push	r11
    1c72:	cf 92       	push	r12
    1c74:	df 92       	push	r13
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	ca 1b       	sub	r28, r26
    1c88:	db 0b       	sbc	r29, r27
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	09 94       	ijmp

00001c96 <__epilogue_restores__>:
    1c96:	2a 88       	ldd	r2, Y+18	; 0x12
    1c98:	39 88       	ldd	r3, Y+17	; 0x11
    1c9a:	48 88       	ldd	r4, Y+16	; 0x10
    1c9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ca0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ca2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ca4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ca6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ca8:	b9 84       	ldd	r11, Y+9	; 0x09
    1caa:	c8 84       	ldd	r12, Y+8	; 0x08
    1cac:	df 80       	ldd	r13, Y+7	; 0x07
    1cae:	ee 80       	ldd	r14, Y+6	; 0x06
    1cb0:	fd 80       	ldd	r15, Y+5	; 0x05
    1cb2:	0c 81       	ldd	r16, Y+4	; 0x04
    1cb4:	1b 81       	ldd	r17, Y+3	; 0x03
    1cb6:	aa 81       	ldd	r26, Y+2	; 0x02
    1cb8:	b9 81       	ldd	r27, Y+1	; 0x01
    1cba:	ce 0f       	add	r28, r30
    1cbc:	d1 1d       	adc	r29, r1
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	ed 01       	movw	r28, r26
    1cca:	08 95       	ret

00001ccc <__ashldi3>:
    1ccc:	0f 93       	push	r16
    1cce:	08 30       	cpi	r16, 0x08	; 8
    1cd0:	90 f0       	brcs	.+36     	; 0x1cf6 <__ashldi3+0x2a>
    1cd2:	98 2f       	mov	r25, r24
    1cd4:	87 2f       	mov	r24, r23
    1cd6:	76 2f       	mov	r23, r22
    1cd8:	65 2f       	mov	r22, r21
    1cda:	54 2f       	mov	r21, r20
    1cdc:	43 2f       	mov	r20, r19
    1cde:	32 2f       	mov	r19, r18
    1ce0:	22 27       	eor	r18, r18
    1ce2:	08 50       	subi	r16, 0x08	; 8
    1ce4:	f4 cf       	rjmp	.-24     	; 0x1cce <__ashldi3+0x2>
    1ce6:	22 0f       	add	r18, r18
    1ce8:	33 1f       	adc	r19, r19
    1cea:	44 1f       	adc	r20, r20
    1cec:	55 1f       	adc	r21, r21
    1cee:	66 1f       	adc	r22, r22
    1cf0:	77 1f       	adc	r23, r23
    1cf2:	88 1f       	adc	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 95       	dec	r16
    1cf8:	b2 f7       	brpl	.-20     	; 0x1ce6 <__ashldi3+0x1a>
    1cfa:	0f 91       	pop	r16
    1cfc:	08 95       	ret

00001cfe <__ashrdi3>:
    1cfe:	97 fb       	bst	r25, 7
    1d00:	10 f8       	bld	r1, 0

00001d02 <__lshrdi3>:
    1d02:	16 94       	lsr	r1
    1d04:	00 08       	sbc	r0, r0
    1d06:	0f 93       	push	r16
    1d08:	08 30       	cpi	r16, 0x08	; 8
    1d0a:	98 f0       	brcs	.+38     	; 0x1d32 <__lshrdi3+0x30>
    1d0c:	08 50       	subi	r16, 0x08	; 8
    1d0e:	23 2f       	mov	r18, r19
    1d10:	34 2f       	mov	r19, r20
    1d12:	45 2f       	mov	r20, r21
    1d14:	56 2f       	mov	r21, r22
    1d16:	67 2f       	mov	r22, r23
    1d18:	78 2f       	mov	r23, r24
    1d1a:	89 2f       	mov	r24, r25
    1d1c:	90 2d       	mov	r25, r0
    1d1e:	f4 cf       	rjmp	.-24     	; 0x1d08 <__lshrdi3+0x6>
    1d20:	05 94       	asr	r0
    1d22:	97 95       	ror	r25
    1d24:	87 95       	ror	r24
    1d26:	77 95       	ror	r23
    1d28:	67 95       	ror	r22
    1d2a:	57 95       	ror	r21
    1d2c:	47 95       	ror	r20
    1d2e:	37 95       	ror	r19
    1d30:	27 95       	ror	r18
    1d32:	0a 95       	dec	r16
    1d34:	aa f7       	brpl	.-22     	; 0x1d20 <__lshrdi3+0x1e>
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <__adddi3>:
    1d3a:	2a 0d       	add	r18, r10
    1d3c:	3b 1d       	adc	r19, r11
    1d3e:	4c 1d       	adc	r20, r12
    1d40:	5d 1d       	adc	r21, r13
    1d42:	6e 1d       	adc	r22, r14
    1d44:	7f 1d       	adc	r23, r15
    1d46:	80 1f       	adc	r24, r16
    1d48:	91 1f       	adc	r25, r17
    1d4a:	08 95       	ret

00001d4c <__subdi3>:
    1d4c:	2a 19       	sub	r18, r10
    1d4e:	3b 09       	sbc	r19, r11
    1d50:	4c 09       	sbc	r20, r12
    1d52:	5d 09       	sbc	r21, r13
    1d54:	6e 09       	sbc	r22, r14
    1d56:	7f 09       	sbc	r23, r15
    1d58:	80 0b       	sbc	r24, r16
    1d5a:	91 0b       	sbc	r25, r17
    1d5c:	08 95       	ret

00001d5e <__cmpdi2_s8>:
    1d5e:	00 24       	eor	r0, r0
    1d60:	a7 fd       	sbrc	r26, 7
    1d62:	00 94       	com	r0
    1d64:	2a 17       	cp	r18, r26
    1d66:	30 05       	cpc	r19, r0
    1d68:	40 05       	cpc	r20, r0
    1d6a:	50 05       	cpc	r21, r0
    1d6c:	60 05       	cpc	r22, r0
    1d6e:	70 05       	cpc	r23, r0
    1d70:	80 05       	cpc	r24, r0
    1d72:	90 05       	cpc	r25, r0
    1d74:	08 95       	ret

00001d76 <__umulhisi3>:
    1d76:	a2 9f       	mul	r26, r18
    1d78:	b0 01       	movw	r22, r0
    1d7a:	b3 9f       	mul	r27, r19
    1d7c:	c0 01       	movw	r24, r0
    1d7e:	a3 9f       	mul	r26, r19
    1d80:	70 0d       	add	r23, r0
    1d82:	81 1d       	adc	r24, r1
    1d84:	11 24       	eor	r1, r1
    1d86:	91 1d       	adc	r25, r1
    1d88:	b2 9f       	mul	r27, r18
    1d8a:	70 0d       	add	r23, r0
    1d8c:	81 1d       	adc	r24, r1
    1d8e:	11 24       	eor	r1, r1
    1d90:	91 1d       	adc	r25, r1
    1d92:	08 95       	ret

00001d94 <printf>:
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	ae 01       	movw	r20, r28
    1d9e:	4b 5f       	subi	r20, 0xFB	; 251
    1da0:	5f 4f       	sbci	r21, 0xFF	; 255
    1da2:	fa 01       	movw	r30, r20
    1da4:	61 91       	ld	r22, Z+
    1da6:	71 91       	ld	r23, Z+
    1da8:	af 01       	movw	r20, r30
    1daa:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <__iob+0x2>
    1dae:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <__iob+0x3>
    1db2:	03 d0       	rcall	.+6      	; 0x1dba <vfprintf>
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	08 95       	ret

00001dba <vfprintf>:
    1dba:	2f 92       	push	r2
    1dbc:	3f 92       	push	r3
    1dbe:	4f 92       	push	r4
    1dc0:	5f 92       	push	r5
    1dc2:	6f 92       	push	r6
    1dc4:	7f 92       	push	r7
    1dc6:	8f 92       	push	r8
    1dc8:	9f 92       	push	r9
    1dca:	af 92       	push	r10
    1dcc:	bf 92       	push	r11
    1dce:	cf 92       	push	r12
    1dd0:	df 92       	push	r13
    1dd2:	ef 92       	push	r14
    1dd4:	ff 92       	push	r15
    1dd6:	0f 93       	push	r16
    1dd8:	1f 93       	push	r17
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	2b 97       	sbiw	r28, 0x0b	; 11
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	6c 01       	movw	r12, r24
    1df0:	7b 01       	movw	r14, r22
    1df2:	8a 01       	movw	r16, r20
    1df4:	fc 01       	movw	r30, r24
    1df6:	17 82       	std	Z+7, r1	; 0x07
    1df8:	16 82       	std	Z+6, r1	; 0x06
    1dfa:	83 81       	ldd	r24, Z+3	; 0x03
    1dfc:	81 ff       	sbrs	r24, 1
    1dfe:	bf c1       	rjmp	.+894    	; 0x217e <vfprintf+0x3c4>
    1e00:	ce 01       	movw	r24, r28
    1e02:	01 96       	adiw	r24, 0x01	; 1
    1e04:	3c 01       	movw	r6, r24
    1e06:	f6 01       	movw	r30, r12
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	f7 01       	movw	r30, r14
    1e0c:	93 fd       	sbrc	r25, 3
    1e0e:	85 91       	lpm	r24, Z+
    1e10:	93 ff       	sbrs	r25, 3
    1e12:	81 91       	ld	r24, Z+
    1e14:	7f 01       	movw	r14, r30
    1e16:	88 23       	and	r24, r24
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <vfprintf+0x62>
    1e1a:	ad c1       	rjmp	.+858    	; 0x2176 <vfprintf+0x3bc>
    1e1c:	85 32       	cpi	r24, 0x25	; 37
    1e1e:	39 f4       	brne	.+14     	; 0x1e2e <vfprintf+0x74>
    1e20:	93 fd       	sbrc	r25, 3
    1e22:	85 91       	lpm	r24, Z+
    1e24:	93 ff       	sbrs	r25, 3
    1e26:	81 91       	ld	r24, Z+
    1e28:	7f 01       	movw	r14, r30
    1e2a:	85 32       	cpi	r24, 0x25	; 37
    1e2c:	21 f4       	brne	.+8      	; 0x1e36 <vfprintf+0x7c>
    1e2e:	b6 01       	movw	r22, r12
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	d6 d1       	rcall	.+940    	; 0x21e0 <fputc>
    1e34:	e8 cf       	rjmp	.-48     	; 0x1e06 <vfprintf+0x4c>
    1e36:	91 2c       	mov	r9, r1
    1e38:	21 2c       	mov	r2, r1
    1e3a:	31 2c       	mov	r3, r1
    1e3c:	ff e1       	ldi	r31, 0x1F	; 31
    1e3e:	f3 15       	cp	r31, r3
    1e40:	d8 f0       	brcs	.+54     	; 0x1e78 <vfprintf+0xbe>
    1e42:	8b 32       	cpi	r24, 0x2B	; 43
    1e44:	79 f0       	breq	.+30     	; 0x1e64 <vfprintf+0xaa>
    1e46:	38 f4       	brcc	.+14     	; 0x1e56 <vfprintf+0x9c>
    1e48:	80 32       	cpi	r24, 0x20	; 32
    1e4a:	79 f0       	breq	.+30     	; 0x1e6a <vfprintf+0xb0>
    1e4c:	83 32       	cpi	r24, 0x23	; 35
    1e4e:	a1 f4       	brne	.+40     	; 0x1e78 <vfprintf+0xbe>
    1e50:	23 2d       	mov	r18, r3
    1e52:	20 61       	ori	r18, 0x10	; 16
    1e54:	1d c0       	rjmp	.+58     	; 0x1e90 <vfprintf+0xd6>
    1e56:	8d 32       	cpi	r24, 0x2D	; 45
    1e58:	61 f0       	breq	.+24     	; 0x1e72 <vfprintf+0xb8>
    1e5a:	80 33       	cpi	r24, 0x30	; 48
    1e5c:	69 f4       	brne	.+26     	; 0x1e78 <vfprintf+0xbe>
    1e5e:	23 2d       	mov	r18, r3
    1e60:	21 60       	ori	r18, 0x01	; 1
    1e62:	16 c0       	rjmp	.+44     	; 0x1e90 <vfprintf+0xd6>
    1e64:	83 2d       	mov	r24, r3
    1e66:	82 60       	ori	r24, 0x02	; 2
    1e68:	38 2e       	mov	r3, r24
    1e6a:	e3 2d       	mov	r30, r3
    1e6c:	e4 60       	ori	r30, 0x04	; 4
    1e6e:	3e 2e       	mov	r3, r30
    1e70:	2a c0       	rjmp	.+84     	; 0x1ec6 <vfprintf+0x10c>
    1e72:	f3 2d       	mov	r31, r3
    1e74:	f8 60       	ori	r31, 0x08	; 8
    1e76:	1d c0       	rjmp	.+58     	; 0x1eb2 <vfprintf+0xf8>
    1e78:	37 fc       	sbrc	r3, 7
    1e7a:	2d c0       	rjmp	.+90     	; 0x1ed6 <vfprintf+0x11c>
    1e7c:	20 ed       	ldi	r18, 0xD0	; 208
    1e7e:	28 0f       	add	r18, r24
    1e80:	2a 30       	cpi	r18, 0x0A	; 10
    1e82:	40 f0       	brcs	.+16     	; 0x1e94 <vfprintf+0xda>
    1e84:	8e 32       	cpi	r24, 0x2E	; 46
    1e86:	b9 f4       	brne	.+46     	; 0x1eb6 <vfprintf+0xfc>
    1e88:	36 fc       	sbrc	r3, 6
    1e8a:	75 c1       	rjmp	.+746    	; 0x2176 <vfprintf+0x3bc>
    1e8c:	23 2d       	mov	r18, r3
    1e8e:	20 64       	ori	r18, 0x40	; 64
    1e90:	32 2e       	mov	r3, r18
    1e92:	19 c0       	rjmp	.+50     	; 0x1ec6 <vfprintf+0x10c>
    1e94:	36 fe       	sbrs	r3, 6
    1e96:	06 c0       	rjmp	.+12     	; 0x1ea4 <vfprintf+0xea>
    1e98:	8a e0       	ldi	r24, 0x0A	; 10
    1e9a:	98 9e       	mul	r9, r24
    1e9c:	20 0d       	add	r18, r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	92 2e       	mov	r9, r18
    1ea2:	11 c0       	rjmp	.+34     	; 0x1ec6 <vfprintf+0x10c>
    1ea4:	ea e0       	ldi	r30, 0x0A	; 10
    1ea6:	2e 9e       	mul	r2, r30
    1ea8:	20 0d       	add	r18, r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	22 2e       	mov	r2, r18
    1eae:	f3 2d       	mov	r31, r3
    1eb0:	f0 62       	ori	r31, 0x20	; 32
    1eb2:	3f 2e       	mov	r3, r31
    1eb4:	08 c0       	rjmp	.+16     	; 0x1ec6 <vfprintf+0x10c>
    1eb6:	8c 36       	cpi	r24, 0x6C	; 108
    1eb8:	21 f4       	brne	.+8      	; 0x1ec2 <vfprintf+0x108>
    1eba:	83 2d       	mov	r24, r3
    1ebc:	80 68       	ori	r24, 0x80	; 128
    1ebe:	38 2e       	mov	r3, r24
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0x10c>
    1ec2:	88 36       	cpi	r24, 0x68	; 104
    1ec4:	41 f4       	brne	.+16     	; 0x1ed6 <vfprintf+0x11c>
    1ec6:	f7 01       	movw	r30, r14
    1ec8:	93 fd       	sbrc	r25, 3
    1eca:	85 91       	lpm	r24, Z+
    1ecc:	93 ff       	sbrs	r25, 3
    1ece:	81 91       	ld	r24, Z+
    1ed0:	7f 01       	movw	r14, r30
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	b3 cf       	rjmp	.-154    	; 0x1e3c <vfprintf+0x82>
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	9f 7d       	andi	r25, 0xDF	; 223
    1eda:	95 54       	subi	r25, 0x45	; 69
    1edc:	93 30       	cpi	r25, 0x03	; 3
    1ede:	28 f4       	brcc	.+10     	; 0x1eea <vfprintf+0x130>
    1ee0:	0c 5f       	subi	r16, 0xFC	; 252
    1ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee4:	9f e3       	ldi	r25, 0x3F	; 63
    1ee6:	99 83       	std	Y+1, r25	; 0x01
    1ee8:	0d c0       	rjmp	.+26     	; 0x1f04 <vfprintf+0x14a>
    1eea:	83 36       	cpi	r24, 0x63	; 99
    1eec:	31 f0       	breq	.+12     	; 0x1efa <vfprintf+0x140>
    1eee:	83 37       	cpi	r24, 0x73	; 115
    1ef0:	71 f0       	breq	.+28     	; 0x1f0e <vfprintf+0x154>
    1ef2:	83 35       	cpi	r24, 0x53	; 83
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <vfprintf+0x13e>
    1ef6:	55 c0       	rjmp	.+170    	; 0x1fa2 <vfprintf+0x1e8>
    1ef8:	20 c0       	rjmp	.+64     	; 0x1f3a <vfprintf+0x180>
    1efa:	f8 01       	movw	r30, r16
    1efc:	80 81       	ld	r24, Z
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	0e 5f       	subi	r16, 0xFE	; 254
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	88 24       	eor	r8, r8
    1f06:	83 94       	inc	r8
    1f08:	91 2c       	mov	r9, r1
    1f0a:	53 01       	movw	r10, r6
    1f0c:	12 c0       	rjmp	.+36     	; 0x1f32 <vfprintf+0x178>
    1f0e:	28 01       	movw	r4, r16
    1f10:	f2 e0       	ldi	r31, 0x02	; 2
    1f12:	4f 0e       	add	r4, r31
    1f14:	51 1c       	adc	r5, r1
    1f16:	f8 01       	movw	r30, r16
    1f18:	a0 80       	ld	r10, Z
    1f1a:	b1 80       	ldd	r11, Z+1	; 0x01
    1f1c:	36 fe       	sbrs	r3, 6
    1f1e:	03 c0       	rjmp	.+6      	; 0x1f26 <vfprintf+0x16c>
    1f20:	69 2d       	mov	r22, r9
    1f22:	70 e0       	ldi	r23, 0x00	; 0
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <vfprintf+0x170>
    1f26:	6f ef       	ldi	r22, 0xFF	; 255
    1f28:	7f ef       	ldi	r23, 0xFF	; 255
    1f2a:	c5 01       	movw	r24, r10
    1f2c:	4e d1       	rcall	.+668    	; 0x21ca <strnlen>
    1f2e:	4c 01       	movw	r8, r24
    1f30:	82 01       	movw	r16, r4
    1f32:	f3 2d       	mov	r31, r3
    1f34:	ff 77       	andi	r31, 0x7F	; 127
    1f36:	3f 2e       	mov	r3, r31
    1f38:	15 c0       	rjmp	.+42     	; 0x1f64 <vfprintf+0x1aa>
    1f3a:	28 01       	movw	r4, r16
    1f3c:	22 e0       	ldi	r18, 0x02	; 2
    1f3e:	42 0e       	add	r4, r18
    1f40:	51 1c       	adc	r5, r1
    1f42:	f8 01       	movw	r30, r16
    1f44:	a0 80       	ld	r10, Z
    1f46:	b1 80       	ldd	r11, Z+1	; 0x01
    1f48:	36 fe       	sbrs	r3, 6
    1f4a:	03 c0       	rjmp	.+6      	; 0x1f52 <vfprintf+0x198>
    1f4c:	69 2d       	mov	r22, r9
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <vfprintf+0x19c>
    1f52:	6f ef       	ldi	r22, 0xFF	; 255
    1f54:	7f ef       	ldi	r23, 0xFF	; 255
    1f56:	c5 01       	movw	r24, r10
    1f58:	2d d1       	rcall	.+602    	; 0x21b4 <strnlen_P>
    1f5a:	4c 01       	movw	r8, r24
    1f5c:	f3 2d       	mov	r31, r3
    1f5e:	f0 68       	ori	r31, 0x80	; 128
    1f60:	3f 2e       	mov	r3, r31
    1f62:	82 01       	movw	r16, r4
    1f64:	33 fc       	sbrc	r3, 3
    1f66:	19 c0       	rjmp	.+50     	; 0x1f9a <vfprintf+0x1e0>
    1f68:	82 2d       	mov	r24, r2
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	88 16       	cp	r8, r24
    1f6e:	99 06       	cpc	r9, r25
    1f70:	a0 f4       	brcc	.+40     	; 0x1f9a <vfprintf+0x1e0>
    1f72:	b6 01       	movw	r22, r12
    1f74:	80 e2       	ldi	r24, 0x20	; 32
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	33 d1       	rcall	.+614    	; 0x21e0 <fputc>
    1f7a:	2a 94       	dec	r2
    1f7c:	f5 cf       	rjmp	.-22     	; 0x1f68 <vfprintf+0x1ae>
    1f7e:	f5 01       	movw	r30, r10
    1f80:	37 fc       	sbrc	r3, 7
    1f82:	85 91       	lpm	r24, Z+
    1f84:	37 fe       	sbrs	r3, 7
    1f86:	81 91       	ld	r24, Z+
    1f88:	5f 01       	movw	r10, r30
    1f8a:	b6 01       	movw	r22, r12
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	28 d1       	rcall	.+592    	; 0x21e0 <fputc>
    1f90:	21 10       	cpse	r2, r1
    1f92:	2a 94       	dec	r2
    1f94:	21 e0       	ldi	r18, 0x01	; 1
    1f96:	82 1a       	sub	r8, r18
    1f98:	91 08       	sbc	r9, r1
    1f9a:	81 14       	cp	r8, r1
    1f9c:	91 04       	cpc	r9, r1
    1f9e:	79 f7       	brne	.-34     	; 0x1f7e <vfprintf+0x1c4>
    1fa0:	e1 c0       	rjmp	.+450    	; 0x2164 <vfprintf+0x3aa>
    1fa2:	84 36       	cpi	r24, 0x64	; 100
    1fa4:	11 f0       	breq	.+4      	; 0x1faa <vfprintf+0x1f0>
    1fa6:	89 36       	cpi	r24, 0x69	; 105
    1fa8:	39 f5       	brne	.+78     	; 0x1ff8 <vfprintf+0x23e>
    1faa:	f8 01       	movw	r30, r16
    1fac:	37 fe       	sbrs	r3, 7
    1fae:	07 c0       	rjmp	.+14     	; 0x1fbe <vfprintf+0x204>
    1fb0:	60 81       	ld	r22, Z
    1fb2:	71 81       	ldd	r23, Z+1	; 0x01
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	93 81       	ldd	r25, Z+3	; 0x03
    1fb8:	0c 5f       	subi	r16, 0xFC	; 252
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	08 c0       	rjmp	.+16     	; 0x1fce <vfprintf+0x214>
    1fbe:	60 81       	ld	r22, Z
    1fc0:	71 81       	ldd	r23, Z+1	; 0x01
    1fc2:	07 2e       	mov	r0, r23
    1fc4:	00 0c       	add	r0, r0
    1fc6:	88 0b       	sbc	r24, r24
    1fc8:	99 0b       	sbc	r25, r25
    1fca:	0e 5f       	subi	r16, 0xFE	; 254
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	f3 2d       	mov	r31, r3
    1fd0:	ff 76       	andi	r31, 0x6F	; 111
    1fd2:	3f 2e       	mov	r3, r31
    1fd4:	97 ff       	sbrs	r25, 7
    1fd6:	09 c0       	rjmp	.+18     	; 0x1fea <vfprintf+0x230>
    1fd8:	90 95       	com	r25
    1fda:	80 95       	com	r24
    1fdc:	70 95       	com	r23
    1fde:	61 95       	neg	r22
    1fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe6:	f0 68       	ori	r31, 0x80	; 128
    1fe8:	3f 2e       	mov	r3, r31
    1fea:	2a e0       	ldi	r18, 0x0A	; 10
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	a3 01       	movw	r20, r6
    1ff0:	33 d1       	rcall	.+614    	; 0x2258 <__ultoa_invert>
    1ff2:	88 2e       	mov	r8, r24
    1ff4:	86 18       	sub	r8, r6
    1ff6:	44 c0       	rjmp	.+136    	; 0x2080 <vfprintf+0x2c6>
    1ff8:	85 37       	cpi	r24, 0x75	; 117
    1ffa:	31 f4       	brne	.+12     	; 0x2008 <vfprintf+0x24e>
    1ffc:	23 2d       	mov	r18, r3
    1ffe:	2f 7e       	andi	r18, 0xEF	; 239
    2000:	b2 2e       	mov	r11, r18
    2002:	2a e0       	ldi	r18, 0x0A	; 10
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	25 c0       	rjmp	.+74     	; 0x2052 <vfprintf+0x298>
    2008:	93 2d       	mov	r25, r3
    200a:	99 7f       	andi	r25, 0xF9	; 249
    200c:	b9 2e       	mov	r11, r25
    200e:	8f 36       	cpi	r24, 0x6F	; 111
    2010:	c1 f0       	breq	.+48     	; 0x2042 <vfprintf+0x288>
    2012:	18 f4       	brcc	.+6      	; 0x201a <vfprintf+0x260>
    2014:	88 35       	cpi	r24, 0x58	; 88
    2016:	79 f0       	breq	.+30     	; 0x2036 <vfprintf+0x27c>
    2018:	ae c0       	rjmp	.+348    	; 0x2176 <vfprintf+0x3bc>
    201a:	80 37       	cpi	r24, 0x70	; 112
    201c:	19 f0       	breq	.+6      	; 0x2024 <vfprintf+0x26a>
    201e:	88 37       	cpi	r24, 0x78	; 120
    2020:	21 f0       	breq	.+8      	; 0x202a <vfprintf+0x270>
    2022:	a9 c0       	rjmp	.+338    	; 0x2176 <vfprintf+0x3bc>
    2024:	e9 2f       	mov	r30, r25
    2026:	e0 61       	ori	r30, 0x10	; 16
    2028:	be 2e       	mov	r11, r30
    202a:	b4 fe       	sbrs	r11, 4
    202c:	0d c0       	rjmp	.+26     	; 0x2048 <vfprintf+0x28e>
    202e:	fb 2d       	mov	r31, r11
    2030:	f4 60       	ori	r31, 0x04	; 4
    2032:	bf 2e       	mov	r11, r31
    2034:	09 c0       	rjmp	.+18     	; 0x2048 <vfprintf+0x28e>
    2036:	34 fe       	sbrs	r3, 4
    2038:	0a c0       	rjmp	.+20     	; 0x204e <vfprintf+0x294>
    203a:	29 2f       	mov	r18, r25
    203c:	26 60       	ori	r18, 0x06	; 6
    203e:	b2 2e       	mov	r11, r18
    2040:	06 c0       	rjmp	.+12     	; 0x204e <vfprintf+0x294>
    2042:	28 e0       	ldi	r18, 0x08	; 8
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	05 c0       	rjmp	.+10     	; 0x2052 <vfprintf+0x298>
    2048:	20 e1       	ldi	r18, 0x10	; 16
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <vfprintf+0x298>
    204e:	20 e1       	ldi	r18, 0x10	; 16
    2050:	32 e0       	ldi	r19, 0x02	; 2
    2052:	f8 01       	movw	r30, r16
    2054:	b7 fe       	sbrs	r11, 7
    2056:	07 c0       	rjmp	.+14     	; 0x2066 <vfprintf+0x2ac>
    2058:	60 81       	ld	r22, Z
    205a:	71 81       	ldd	r23, Z+1	; 0x01
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	0c 5f       	subi	r16, 0xFC	; 252
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	06 c0       	rjmp	.+12     	; 0x2072 <vfprintf+0x2b8>
    2066:	60 81       	ld	r22, Z
    2068:	71 81       	ldd	r23, Z+1	; 0x01
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	0e 5f       	subi	r16, 0xFE	; 254
    2070:	1f 4f       	sbci	r17, 0xFF	; 255
    2072:	a3 01       	movw	r20, r6
    2074:	f1 d0       	rcall	.+482    	; 0x2258 <__ultoa_invert>
    2076:	88 2e       	mov	r8, r24
    2078:	86 18       	sub	r8, r6
    207a:	fb 2d       	mov	r31, r11
    207c:	ff 77       	andi	r31, 0x7F	; 127
    207e:	3f 2e       	mov	r3, r31
    2080:	36 fe       	sbrs	r3, 6
    2082:	0d c0       	rjmp	.+26     	; 0x209e <vfprintf+0x2e4>
    2084:	23 2d       	mov	r18, r3
    2086:	2e 7f       	andi	r18, 0xFE	; 254
    2088:	a2 2e       	mov	r10, r18
    208a:	89 14       	cp	r8, r9
    208c:	58 f4       	brcc	.+22     	; 0x20a4 <vfprintf+0x2ea>
    208e:	34 fe       	sbrs	r3, 4
    2090:	0b c0       	rjmp	.+22     	; 0x20a8 <vfprintf+0x2ee>
    2092:	32 fc       	sbrc	r3, 2
    2094:	09 c0       	rjmp	.+18     	; 0x20a8 <vfprintf+0x2ee>
    2096:	83 2d       	mov	r24, r3
    2098:	8e 7e       	andi	r24, 0xEE	; 238
    209a:	a8 2e       	mov	r10, r24
    209c:	05 c0       	rjmp	.+10     	; 0x20a8 <vfprintf+0x2ee>
    209e:	b8 2c       	mov	r11, r8
    20a0:	a3 2c       	mov	r10, r3
    20a2:	03 c0       	rjmp	.+6      	; 0x20aa <vfprintf+0x2f0>
    20a4:	b8 2c       	mov	r11, r8
    20a6:	01 c0       	rjmp	.+2      	; 0x20aa <vfprintf+0x2f0>
    20a8:	b9 2c       	mov	r11, r9
    20aa:	a4 fe       	sbrs	r10, 4
    20ac:	0f c0       	rjmp	.+30     	; 0x20cc <vfprintf+0x312>
    20ae:	fe 01       	movw	r30, r28
    20b0:	e8 0d       	add	r30, r8
    20b2:	f1 1d       	adc	r31, r1
    20b4:	80 81       	ld	r24, Z
    20b6:	80 33       	cpi	r24, 0x30	; 48
    20b8:	21 f4       	brne	.+8      	; 0x20c2 <vfprintf+0x308>
    20ba:	9a 2d       	mov	r25, r10
    20bc:	99 7e       	andi	r25, 0xE9	; 233
    20be:	a9 2e       	mov	r10, r25
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <vfprintf+0x31a>
    20c2:	a2 fe       	sbrs	r10, 2
    20c4:	06 c0       	rjmp	.+12     	; 0x20d2 <vfprintf+0x318>
    20c6:	b3 94       	inc	r11
    20c8:	b3 94       	inc	r11
    20ca:	04 c0       	rjmp	.+8      	; 0x20d4 <vfprintf+0x31a>
    20cc:	8a 2d       	mov	r24, r10
    20ce:	86 78       	andi	r24, 0x86	; 134
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <vfprintf+0x31a>
    20d2:	b3 94       	inc	r11
    20d4:	a3 fc       	sbrc	r10, 3
    20d6:	10 c0       	rjmp	.+32     	; 0x20f8 <vfprintf+0x33e>
    20d8:	a0 fe       	sbrs	r10, 0
    20da:	06 c0       	rjmp	.+12     	; 0x20e8 <vfprintf+0x32e>
    20dc:	b2 14       	cp	r11, r2
    20de:	80 f4       	brcc	.+32     	; 0x2100 <vfprintf+0x346>
    20e0:	28 0c       	add	r2, r8
    20e2:	92 2c       	mov	r9, r2
    20e4:	9b 18       	sub	r9, r11
    20e6:	0d c0       	rjmp	.+26     	; 0x2102 <vfprintf+0x348>
    20e8:	b2 14       	cp	r11, r2
    20ea:	58 f4       	brcc	.+22     	; 0x2102 <vfprintf+0x348>
    20ec:	b6 01       	movw	r22, r12
    20ee:	80 e2       	ldi	r24, 0x20	; 32
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	76 d0       	rcall	.+236    	; 0x21e0 <fputc>
    20f4:	b3 94       	inc	r11
    20f6:	f8 cf       	rjmp	.-16     	; 0x20e8 <vfprintf+0x32e>
    20f8:	b2 14       	cp	r11, r2
    20fa:	18 f4       	brcc	.+6      	; 0x2102 <vfprintf+0x348>
    20fc:	2b 18       	sub	r2, r11
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <vfprintf+0x34a>
    2100:	98 2c       	mov	r9, r8
    2102:	21 2c       	mov	r2, r1
    2104:	a4 fe       	sbrs	r10, 4
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <vfprintf+0x36c>
    2108:	b6 01       	movw	r22, r12
    210a:	80 e3       	ldi	r24, 0x30	; 48
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	68 d0       	rcall	.+208    	; 0x21e0 <fputc>
    2110:	a2 fe       	sbrs	r10, 2
    2112:	16 c0       	rjmp	.+44     	; 0x2140 <vfprintf+0x386>
    2114:	a1 fc       	sbrc	r10, 1
    2116:	03 c0       	rjmp	.+6      	; 0x211e <vfprintf+0x364>
    2118:	88 e7       	ldi	r24, 0x78	; 120
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <vfprintf+0x368>
    211e:	88 e5       	ldi	r24, 0x58	; 88
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	b6 01       	movw	r22, r12
    2124:	0c c0       	rjmp	.+24     	; 0x213e <vfprintf+0x384>
    2126:	8a 2d       	mov	r24, r10
    2128:	86 78       	andi	r24, 0x86	; 134
    212a:	51 f0       	breq	.+20     	; 0x2140 <vfprintf+0x386>
    212c:	a1 fe       	sbrs	r10, 1
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <vfprintf+0x37a>
    2130:	8b e2       	ldi	r24, 0x2B	; 43
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <vfprintf+0x37c>
    2134:	80 e2       	ldi	r24, 0x20	; 32
    2136:	a7 fc       	sbrc	r10, 7
    2138:	8d e2       	ldi	r24, 0x2D	; 45
    213a:	b6 01       	movw	r22, r12
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	50 d0       	rcall	.+160    	; 0x21e0 <fputc>
    2140:	89 14       	cp	r8, r9
    2142:	30 f4       	brcc	.+12     	; 0x2150 <vfprintf+0x396>
    2144:	b6 01       	movw	r22, r12
    2146:	80 e3       	ldi	r24, 0x30	; 48
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	4a d0       	rcall	.+148    	; 0x21e0 <fputc>
    214c:	9a 94       	dec	r9
    214e:	f8 cf       	rjmp	.-16     	; 0x2140 <vfprintf+0x386>
    2150:	8a 94       	dec	r8
    2152:	f3 01       	movw	r30, r6
    2154:	e8 0d       	add	r30, r8
    2156:	f1 1d       	adc	r31, r1
    2158:	80 81       	ld	r24, Z
    215a:	b6 01       	movw	r22, r12
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	40 d0       	rcall	.+128    	; 0x21e0 <fputc>
    2160:	81 10       	cpse	r8, r1
    2162:	f6 cf       	rjmp	.-20     	; 0x2150 <vfprintf+0x396>
    2164:	22 20       	and	r2, r2
    2166:	09 f4       	brne	.+2      	; 0x216a <vfprintf+0x3b0>
    2168:	4e ce       	rjmp	.-868    	; 0x1e06 <vfprintf+0x4c>
    216a:	b6 01       	movw	r22, r12
    216c:	80 e2       	ldi	r24, 0x20	; 32
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	37 d0       	rcall	.+110    	; 0x21e0 <fputc>
    2172:	2a 94       	dec	r2
    2174:	f7 cf       	rjmp	.-18     	; 0x2164 <vfprintf+0x3aa>
    2176:	f6 01       	movw	r30, r12
    2178:	86 81       	ldd	r24, Z+6	; 0x06
    217a:	97 81       	ldd	r25, Z+7	; 0x07
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <vfprintf+0x3c8>
    217e:	8f ef       	ldi	r24, 0xFF	; 255
    2180:	9f ef       	ldi	r25, 0xFF	; 255
    2182:	2b 96       	adiw	r28, 0x0b	; 11
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	1f 91       	pop	r17
    2194:	0f 91       	pop	r16
    2196:	ff 90       	pop	r15
    2198:	ef 90       	pop	r14
    219a:	df 90       	pop	r13
    219c:	cf 90       	pop	r12
    219e:	bf 90       	pop	r11
    21a0:	af 90       	pop	r10
    21a2:	9f 90       	pop	r9
    21a4:	8f 90       	pop	r8
    21a6:	7f 90       	pop	r7
    21a8:	6f 90       	pop	r6
    21aa:	5f 90       	pop	r5
    21ac:	4f 90       	pop	r4
    21ae:	3f 90       	pop	r3
    21b0:	2f 90       	pop	r2
    21b2:	08 95       	ret

000021b4 <strnlen_P>:
    21b4:	fc 01       	movw	r30, r24
    21b6:	05 90       	lpm	r0, Z+
    21b8:	61 50       	subi	r22, 0x01	; 1
    21ba:	70 40       	sbci	r23, 0x00	; 0
    21bc:	01 10       	cpse	r0, r1
    21be:	d8 f7       	brcc	.-10     	; 0x21b6 <strnlen_P+0x2>
    21c0:	80 95       	com	r24
    21c2:	90 95       	com	r25
    21c4:	8e 0f       	add	r24, r30
    21c6:	9f 1f       	adc	r25, r31
    21c8:	08 95       	ret

000021ca <strnlen>:
    21ca:	fc 01       	movw	r30, r24
    21cc:	61 50       	subi	r22, 0x01	; 1
    21ce:	70 40       	sbci	r23, 0x00	; 0
    21d0:	01 90       	ld	r0, Z+
    21d2:	01 10       	cpse	r0, r1
    21d4:	d8 f7       	brcc	.-10     	; 0x21cc <strnlen+0x2>
    21d6:	80 95       	com	r24
    21d8:	90 95       	com	r25
    21da:	8e 0f       	add	r24, r30
    21dc:	9f 1f       	adc	r25, r31
    21de:	08 95       	ret

000021e0 <fputc>:
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	fb 01       	movw	r30, r22
    21ea:	23 81       	ldd	r18, Z+3	; 0x03
    21ec:	21 fd       	sbrc	r18, 1
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <fputc+0x16>
    21f0:	8f ef       	ldi	r24, 0xFF	; 255
    21f2:	9f ef       	ldi	r25, 0xFF	; 255
    21f4:	2c c0       	rjmp	.+88     	; 0x224e <fputc+0x6e>
    21f6:	22 ff       	sbrs	r18, 2
    21f8:	16 c0       	rjmp	.+44     	; 0x2226 <fputc+0x46>
    21fa:	46 81       	ldd	r20, Z+6	; 0x06
    21fc:	57 81       	ldd	r21, Z+7	; 0x07
    21fe:	24 81       	ldd	r18, Z+4	; 0x04
    2200:	35 81       	ldd	r19, Z+5	; 0x05
    2202:	42 17       	cp	r20, r18
    2204:	53 07       	cpc	r21, r19
    2206:	44 f4       	brge	.+16     	; 0x2218 <fputc+0x38>
    2208:	a0 81       	ld	r26, Z
    220a:	b1 81       	ldd	r27, Z+1	; 0x01
    220c:	9d 01       	movw	r18, r26
    220e:	2f 5f       	subi	r18, 0xFF	; 255
    2210:	3f 4f       	sbci	r19, 0xFF	; 255
    2212:	31 83       	std	Z+1, r19	; 0x01
    2214:	20 83       	st	Z, r18
    2216:	8c 93       	st	X, r24
    2218:	26 81       	ldd	r18, Z+6	; 0x06
    221a:	37 81       	ldd	r19, Z+7	; 0x07
    221c:	2f 5f       	subi	r18, 0xFF	; 255
    221e:	3f 4f       	sbci	r19, 0xFF	; 255
    2220:	37 83       	std	Z+7, r19	; 0x07
    2222:	26 83       	std	Z+6, r18	; 0x06
    2224:	14 c0       	rjmp	.+40     	; 0x224e <fputc+0x6e>
    2226:	8b 01       	movw	r16, r22
    2228:	ec 01       	movw	r28, r24
    222a:	fb 01       	movw	r30, r22
    222c:	00 84       	ldd	r0, Z+8	; 0x08
    222e:	f1 85       	ldd	r31, Z+9	; 0x09
    2230:	e0 2d       	mov	r30, r0
    2232:	09 95       	icall
    2234:	89 2b       	or	r24, r25
    2236:	e1 f6       	brne	.-72     	; 0x21f0 <fputc+0x10>
    2238:	d8 01       	movw	r26, r16
    223a:	16 96       	adiw	r26, 0x06	; 6
    223c:	8d 91       	ld	r24, X+
    223e:	9c 91       	ld	r25, X
    2240:	17 97       	sbiw	r26, 0x07	; 7
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	17 96       	adiw	r26, 0x07	; 7
    2246:	9c 93       	st	X, r25
    2248:	8e 93       	st	-X, r24
    224a:	16 97       	sbiw	r26, 0x06	; 6
    224c:	ce 01       	movw	r24, r28
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	08 95       	ret

00002258 <__ultoa_invert>:
    2258:	fa 01       	movw	r30, r20
    225a:	aa 27       	eor	r26, r26
    225c:	28 30       	cpi	r18, 0x08	; 8
    225e:	51 f1       	breq	.+84     	; 0x22b4 <__ultoa_invert+0x5c>
    2260:	20 31       	cpi	r18, 0x10	; 16
    2262:	81 f1       	breq	.+96     	; 0x22c4 <__ultoa_invert+0x6c>
    2264:	e8 94       	clt
    2266:	6f 93       	push	r22
    2268:	6e 7f       	andi	r22, 0xFE	; 254
    226a:	6e 5f       	subi	r22, 0xFE	; 254
    226c:	7f 4f       	sbci	r23, 0xFF	; 255
    226e:	8f 4f       	sbci	r24, 0xFF	; 255
    2270:	9f 4f       	sbci	r25, 0xFF	; 255
    2272:	af 4f       	sbci	r26, 0xFF	; 255
    2274:	b1 e0       	ldi	r27, 0x01	; 1
    2276:	3e d0       	rcall	.+124    	; 0x22f4 <__ultoa_invert+0x9c>
    2278:	b4 e0       	ldi	r27, 0x04	; 4
    227a:	3c d0       	rcall	.+120    	; 0x22f4 <__ultoa_invert+0x9c>
    227c:	67 0f       	add	r22, r23
    227e:	78 1f       	adc	r23, r24
    2280:	89 1f       	adc	r24, r25
    2282:	9a 1f       	adc	r25, r26
    2284:	a1 1d       	adc	r26, r1
    2286:	68 0f       	add	r22, r24
    2288:	79 1f       	adc	r23, r25
    228a:	8a 1f       	adc	r24, r26
    228c:	91 1d       	adc	r25, r1
    228e:	a1 1d       	adc	r26, r1
    2290:	6a 0f       	add	r22, r26
    2292:	71 1d       	adc	r23, r1
    2294:	81 1d       	adc	r24, r1
    2296:	91 1d       	adc	r25, r1
    2298:	a1 1d       	adc	r26, r1
    229a:	20 d0       	rcall	.+64     	; 0x22dc <__ultoa_invert+0x84>
    229c:	09 f4       	brne	.+2      	; 0x22a0 <__ultoa_invert+0x48>
    229e:	68 94       	set
    22a0:	3f 91       	pop	r19
    22a2:	2a e0       	ldi	r18, 0x0A	; 10
    22a4:	26 9f       	mul	r18, r22
    22a6:	11 24       	eor	r1, r1
    22a8:	30 19       	sub	r19, r0
    22aa:	30 5d       	subi	r19, 0xD0	; 208
    22ac:	31 93       	st	Z+, r19
    22ae:	de f6       	brtc	.-74     	; 0x2266 <__ultoa_invert+0xe>
    22b0:	cf 01       	movw	r24, r30
    22b2:	08 95       	ret
    22b4:	46 2f       	mov	r20, r22
    22b6:	47 70       	andi	r20, 0x07	; 7
    22b8:	40 5d       	subi	r20, 0xD0	; 208
    22ba:	41 93       	st	Z+, r20
    22bc:	b3 e0       	ldi	r27, 0x03	; 3
    22be:	0f d0       	rcall	.+30     	; 0x22de <__ultoa_invert+0x86>
    22c0:	c9 f7       	brne	.-14     	; 0x22b4 <__ultoa_invert+0x5c>
    22c2:	f6 cf       	rjmp	.-20     	; 0x22b0 <__ultoa_invert+0x58>
    22c4:	46 2f       	mov	r20, r22
    22c6:	4f 70       	andi	r20, 0x0F	; 15
    22c8:	40 5d       	subi	r20, 0xD0	; 208
    22ca:	4a 33       	cpi	r20, 0x3A	; 58
    22cc:	18 f0       	brcs	.+6      	; 0x22d4 <__ultoa_invert+0x7c>
    22ce:	49 5d       	subi	r20, 0xD9	; 217
    22d0:	31 fd       	sbrc	r19, 1
    22d2:	40 52       	subi	r20, 0x20	; 32
    22d4:	41 93       	st	Z+, r20
    22d6:	02 d0       	rcall	.+4      	; 0x22dc <__ultoa_invert+0x84>
    22d8:	a9 f7       	brne	.-22     	; 0x22c4 <__ultoa_invert+0x6c>
    22da:	ea cf       	rjmp	.-44     	; 0x22b0 <__ultoa_invert+0x58>
    22dc:	b4 e0       	ldi	r27, 0x04	; 4
    22de:	a6 95       	lsr	r26
    22e0:	97 95       	ror	r25
    22e2:	87 95       	ror	r24
    22e4:	77 95       	ror	r23
    22e6:	67 95       	ror	r22
    22e8:	ba 95       	dec	r27
    22ea:	c9 f7       	brne	.-14     	; 0x22de <__ultoa_invert+0x86>
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	61 05       	cpc	r22, r1
    22f0:	71 05       	cpc	r23, r1
    22f2:	08 95       	ret
    22f4:	9b 01       	movw	r18, r22
    22f6:	ac 01       	movw	r20, r24
    22f8:	0a 2e       	mov	r0, r26
    22fa:	06 94       	lsr	r0
    22fc:	57 95       	ror	r21
    22fe:	47 95       	ror	r20
    2300:	37 95       	ror	r19
    2302:	27 95       	ror	r18
    2304:	ba 95       	dec	r27
    2306:	c9 f7       	brne	.-14     	; 0x22fa <__ultoa_invert+0xa2>
    2308:	62 0f       	add	r22, r18
    230a:	73 1f       	adc	r23, r19
    230c:	84 1f       	adc	r24, r20
    230e:	95 1f       	adc	r25, r21
    2310:	a0 1d       	adc	r26, r0
    2312:	08 95       	ret

00002314 <eeprom_read_word>:
    2314:	a8 e1       	ldi	r26, 0x18	; 24
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	42 e0       	ldi	r20, 0x02	; 2
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <eeprom_read_blraw>

0000231e <eeprom_read_block>:
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22

00002322 <eeprom_read_blraw>:
    2322:	fc 01       	movw	r30, r24
    2324:	f9 99       	sbic	0x1f, 1	; 31
    2326:	fe cf       	rjmp	.-4      	; 0x2324 <eeprom_read_blraw+0x2>
    2328:	06 c0       	rjmp	.+12     	; 0x2336 <eeprom_read_blraw+0x14>
    232a:	f2 bd       	out	0x22, r31	; 34
    232c:	e1 bd       	out	0x21, r30	; 33
    232e:	f8 9a       	sbi	0x1f, 0	; 31
    2330:	31 96       	adiw	r30, 0x01	; 1
    2332:	00 b4       	in	r0, 0x20	; 32
    2334:	0d 92       	st	X+, r0
    2336:	41 50       	subi	r20, 0x01	; 1
    2338:	50 40       	sbci	r21, 0x00	; 0
    233a:	b8 f7       	brcc	.-18     	; 0x232a <eeprom_read_blraw+0x8>
    233c:	08 95       	ret

0000233e <_exit>:
    233e:	f8 94       	cli

00002340 <__stop_program>:
    2340:	ff cf       	rjmp	.-2      	; 0x2340 <__stop_program>


Canary Software Package.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  00000d58  00000dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000260  00800198  00800198  00000e84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000f20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fdf  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001082  00000000  00000000  00003097  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001064  00000000  00000000  00004119  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00005180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008bd  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a4d  00000000  00000000  00005db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00006802  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
   2:	00 00       	nop
   4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
   6:	00 00       	nop
   8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
   a:	00 00       	nop
   c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
   e:	00 00       	nop
  10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
  12:	00 00       	nop
  14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
  16:	00 00       	nop
  18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
  22:	00 00       	nop
  24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
  26:	00 00       	nop
  28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9d c0       	rjmp	.+314    	; 0x168 <__bad_interrupt>
  2e:	00 00       	nop
  30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
  32:	00 00       	nop
  34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
  36:	00 00       	nop
  38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8b c2       	rjmp	.+1302   	; 0x558 <__vector_16>
  42:	00 00       	nop
  44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
  46:	00 00       	nop
  48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c3       	rjmp	.+1702   	; 0x6f8 <__vector_20>
  52:	00 00       	nop
  54:	74 c3       	rjmp	.+1768   	; 0x73e <__vector_21>
  56:	00 00       	nop
  58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
  5e:	00 00       	nop
  60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
  62:	00 00       	nop
  64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
  66:	00 00       	nop
  68:	78 c2       	rjmp	.+1264   	; 0x55a <__vector_26>
  6a:	00 00       	nop
  6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
  72:	00 00       	nop
  74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
  76:	00 00       	nop
  78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
  7e:	00 00       	nop
  80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
  82:	00 00       	nop
  84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
  86:	00 00       	nop
  88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c9 02       	muls	r28, r25
  8e:	1b 03       	fmul	r17, r19
  90:	1b 03       	fmul	r17, r19
  92:	1b 03       	fmul	r17, r19
  94:	1b 03       	fmul	r17, r19
  96:	1b 03       	fmul	r17, r19
  98:	1b 03       	fmul	r17, r19
  9a:	1b 03       	fmul	r17, r19
  9c:	c9 02       	muls	r28, r25
  9e:	1b 03       	fmul	r17, r19
  a0:	1b 03       	fmul	r17, r19
  a2:	1b 03       	fmul	r17, r19
  a4:	1b 03       	fmul	r17, r19
  a6:	1b 03       	fmul	r17, r19
  a8:	1b 03       	fmul	r17, r19
  aa:	1b 03       	fmul	r17, r19
  ac:	cb 02       	muls	r28, r27
  ae:	1b 03       	fmul	r17, r19
  b0:	1b 03       	fmul	r17, r19
  b2:	1b 03       	fmul	r17, r19
  b4:	1b 03       	fmul	r17, r19
  b6:	1b 03       	fmul	r17, r19
  b8:	1b 03       	fmul	r17, r19
  ba:	1b 03       	fmul	r17, r19
  bc:	1b 03       	fmul	r17, r19
  be:	1b 03       	fmul	r17, r19
  c0:	1b 03       	fmul	r17, r19
  c2:	1b 03       	fmul	r17, r19
  c4:	1b 03       	fmul	r17, r19
  c6:	1b 03       	fmul	r17, r19
  c8:	1b 03       	fmul	r17, r19
  ca:	1b 03       	fmul	r17, r19
  cc:	cb 02       	muls	r28, r27
  ce:	1b 03       	fmul	r17, r19
  d0:	1b 03       	fmul	r17, r19
  d2:	1b 03       	fmul	r17, r19
  d4:	1b 03       	fmul	r17, r19
  d6:	1b 03       	fmul	r17, r19
  d8:	1b 03       	fmul	r17, r19
  da:	1b 03       	fmul	r17, r19
  dc:	1b 03       	fmul	r17, r19
  de:	1b 03       	fmul	r17, r19
  e0:	1b 03       	fmul	r17, r19
  e2:	1b 03       	fmul	r17, r19
  e4:	1b 03       	fmul	r17, r19
  e6:	1b 03       	fmul	r17, r19
  e8:	1b 03       	fmul	r17, r19
  ea:	1b 03       	fmul	r17, r19
  ec:	17 03       	mulsu	r17, r23
  ee:	1b 03       	fmul	r17, r19
  f0:	1b 03       	fmul	r17, r19
  f2:	1b 03       	fmul	r17, r19
  f4:	1b 03       	fmul	r17, r19
  f6:	1b 03       	fmul	r17, r19
  f8:	1b 03       	fmul	r17, r19
  fa:	1b 03       	fmul	r17, r19
  fc:	f4 02       	muls	r31, r20
  fe:	1b 03       	fmul	r17, r19
 100:	1b 03       	fmul	r17, r19
 102:	1b 03       	fmul	r17, r19
 104:	1b 03       	fmul	r17, r19
 106:	1b 03       	fmul	r17, r19
 108:	1b 03       	fmul	r17, r19
 10a:	1b 03       	fmul	r17, r19
 10c:	1b 03       	fmul	r17, r19
 10e:	1b 03       	fmul	r17, r19
 110:	1b 03       	fmul	r17, r19
 112:	1b 03       	fmul	r17, r19
 114:	1b 03       	fmul	r17, r19
 116:	1b 03       	fmul	r17, r19
 118:	1b 03       	fmul	r17, r19
 11a:	1b 03       	fmul	r17, r19
 11c:	e8 02       	muls	r30, r24
 11e:	1b 03       	fmul	r17, r19
 120:	1b 03       	fmul	r17, r19
 122:	1b 03       	fmul	r17, r19
 124:	1b 03       	fmul	r17, r19
 126:	1b 03       	fmul	r17, r19
 128:	1b 03       	fmul	r17, r19
 12a:	1b 03       	fmul	r17, r19
 12c:	06 03       	mulsu	r16, r22

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e4       	ldi	r29, 0x40	; 64
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	e8 e5       	ldi	r30, 0x58	; 88
 142:	fd e0       	ldi	r31, 0x0D	; 13
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	0b bf       	out	0x3b, r16	; 59
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
 14a:	07 90       	elpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	a8 39       	cpi	r26, 0x98	; 152
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
 154:	23 e0       	ldi	r18, 0x03	; 3
 156:	a8 e9       	ldi	r26, 0x98	; 152
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	a8 3f       	cpi	r26, 0xF8	; 248
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	dc d1       	rcall	.+952    	; 0x51e <main>
 166:	f6 c5       	rjmp	.+3052   	; 0xd54 <_exit>

00000168 <__bad_interrupt>:
 168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <ADC_SetMux>:
********************************************************************************/
void ADC_SetMux(uint8_t source) // *** new routine
{
	/* A short routine to clear the ADC input select mux bits then set
	those same bits to the source defined in the input.  */
	ADMUX &= 0b11100000; // Clear the select bits then
 16a:	ec e7       	ldi	r30, 0x7C	; 124
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	90 81       	ld	r25, Z
 170:	90 7e       	andi	r25, 0xE0	; 224
 172:	90 83       	st	Z, r25
	ADMUX |= source; // Set the ADC input source
 174:	90 81       	ld	r25, Z
 176:	89 2b       	or	r24, r25
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <ADC_init>:
}

void ADC_init(void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
	/* This routine is design to set up the ADC hardware on the ATMega324PA for our use. */
	static volatile int16_t ADC_result;
	
	// Select the external AVCC pin as the ADC reference voltage by setting the REFS[1:0] pin in the ADC MUX register to 0b01
	SetBit(ADMUX, REFS0);
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 64       	ori	r24, 0x40	; 64
 188:	80 83       	st	Z, r24
	
	// Set clock prescaler to 128 to provide a 156kHz ADC clock.  ADPS[2:0] = 0b111
	SetBit(ADCSRA, ADPS0);
 18a:	ca e7       	ldi	r28, 0x7A	; 122
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	88 81       	ld	r24, Y
 190:	81 60       	ori	r24, 0x01	; 1
 192:	88 83       	st	Y, r24
	SetBit(ADCSRA, ADPS1);
 194:	88 81       	ld	r24, Y
 196:	82 60       	ori	r24, 0x02	; 2
 198:	88 83       	st	Y, r24
	SetBit(ADCSRA, ADPS2);
 19a:	88 81       	ld	r24, Y
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	88 83       	st	Y, r24
	
	// Clears power reduction register to ensure we get power to the ADC hardware
	ClearBit(PRR0, PRADC);
 1a0:	a4 e6       	ldi	r26, 0x64	; 100
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	8c 91       	ld	r24, X
 1a6:	8e 7f       	andi	r24, 0xFE	; 254
 1a8:	8c 93       	st	X, r24
	
	// Clears the Left Adjust Result bit. This means that output will be right adjusted to get the max resolution
	ClearBit(ADMUX, ADLAR);
 1aa:	80 81       	ld	r24, Z
 1ac:	8f 7d       	andi	r24, 0xDF	; 223
 1ae:	80 83       	st	Z, r24
	
	// Sets Digital Input Disable Register. Writing a one to bits in the DIDR0 to disable the digital input circuitry
	DIDR0 = 0b00111111;
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
 1b6:	88 81       	ld	r24, Y
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	88 83       	st	Y, r24
	
	// Enable the ADC interrupt
	SetBit(ADCSRA, ADIE);  // May have to turn this off for debug
 1bc:	88 81       	ld	r24, Y
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	88 83       	st	Y, r24
	
	// Set Register ADCSRB to free running mode, single input mode (ADTS[2:0] = 0x00);
	ADCSRB = 0x00;
 1c2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	//  Select test source = ground (GND;  ADMUX.MUX = 0b11111). Result should be 0V.
	ADC_SetMux(0b00011111); 
 1c6:	8f e1       	ldi	r24, 0x1F	; 31
 1c8:	d0 df       	rcall	.-96     	; 0x16a <ADC_SetMux>
	
	// Discard the first conversion and use the second one
	// Sets ADC Start Conversion bit
	SetBit(ADCSRA, ADSC);
 1ca:	88 81       	ld	r24, Y
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	88 83       	st	Y, r24
	while (BitIsClear(ADCSRA, ADIF))
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	84 ff       	sbrs	r24, 4
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <ADC_init+0x58>
	{
		// Wait for conversion to be complete
	}
	
	//   Restart conversion. We'll use this result.
	SetBit(ADCSRA, ADSC);
 1da:	ea e7       	ldi	r30, 0x7A	; 122
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	80 83       	st	Z, r24
	while (BitIsClear(ADCSRA, ADIF))
 1e4:	80 81       	ld	r24, Z
 1e6:	84 ff       	sbrs	r24, 4
 1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <ADC_init+0x68>
	{
		// Wait for conversion to be complete
	}
	
	//  Read result and report error if not real close to zero
	ADC_result = ADCL;
 1ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <__data_end+0x1>
 1f4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
	ADC_result = ADC_result + (ADCH<<8);
 1f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1fc:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <__data_end>
 200:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <__data_end+0x1>
 204:	89 2f       	mov	r24, r25
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	98 2f       	mov	r25, r24
 20a:	88 27       	eor	r24, r24
 20c:	82 0f       	add	r24, r18
 20e:	93 1f       	adc	r25, r19
 210:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <__data_end+0x1>
 214:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
	if (abs(ADC_result) >4 ) //   We want to be within a few LSBs of zero.
 218:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 21c:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <__data_end+0x1>
 220:	99 23       	and	r25, r25
 222:	1c f4       	brge	.+6      	; 0x22a <ADC_init+0xae>
 224:	91 95       	neg	r25
 226:	81 95       	neg	r24
 228:	91 09       	sbc	r25, r1
 22a:	05 97       	sbiw	r24, 0x05	; 5
 22c:	2c f0       	brlt	.+10     	; 0x238 <ADC_init+0xbc>
	{
		SetBit(gas_sensor_initialization_errors, ADC_gnd_test_error);
 22e:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <gas_sensor_initialization_errors>
 232:	81 60       	ori	r24, 0x01	; 1
 234:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <gas_sensor_initialization_errors>
	}
	
	// Select test source = bandgap (BG;  ADMUX.MUX = 0b11110). Result should be 1.1V
	ADC_SetMux(0b00011110); 
 238:	8e e1       	ldi	r24, 0x1E	; 30
 23a:	97 df       	rcall	.-210    	; 0x16a <ADC_SetMux>
	SetBit(ADCSRA, ADSC); // Start conversion process
 23c:	ea e7       	ldi	r30, 0x7A	; 122
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 64       	ori	r24, 0x40	; 64
 244:	80 83       	st	Z, r24
	while (BitIsClear(ADCSRA, ADIF))
 246:	80 81       	ld	r24, Z
 248:	84 ff       	sbrs	r24, 4
 24a:	fd cf       	rjmp	.-6      	; 0x246 <ADC_init+0xca>
	{
		// Wait for conversion to be complete
	}
	
	// Read result and report error if not 1.1
	ADC_result = ADCL;
 24c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <__data_end+0x1>
 256:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
	ADC_result = ADC_result + (ADCH<<8);
 25a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 25e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <__data_end>
 262:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <__data_end+0x1>
 266:	89 2f       	mov	r24, r25
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	98 2f       	mov	r25, r24
 26c:	88 27       	eor	r24, r24
 26e:	82 0f       	add	r24, r18
 270:	93 1f       	adc	r25, r19
 272:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <__data_end+0x1>
 276:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
	ADC_result -= 225;  // 225 is the expected value: 1.1V*1023/5v=225
 27a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 27e:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <__data_end+0x1>
 282:	81 5e       	subi	r24, 0xE1	; 225
 284:	91 09       	sbc	r25, r1
 286:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <__data_end+0x1>
 28a:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
	if (abs(ADC_result) >= 5)  // We want to be within 4 of target voltage reading.
 28e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 292:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <__data_end+0x1>
 296:	99 23       	and	r25, r25
 298:	1c f4       	brge	.+6      	; 0x2a0 <ADC_init+0x124>
 29a:	91 95       	neg	r25
 29c:	81 95       	neg	r24
 29e:	91 09       	sbc	r25, r1
 2a0:	05 97       	sbiw	r24, 0x05	; 5
 2a2:	2c f0       	brlt	.+10     	; 0x2ae <ADC_init+0x132>
	{
		SetBit(gas_sensor_initialization_errors, ADC_BG_test_error);
 2a4:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <gas_sensor_initialization_errors>
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <gas_sensor_initialization_errors>
	}
	
	// Clear the analog to digital enable bit until we need it again
	ClearBit(ADCSRA, ADEN);
 2ae:	ea e7       	ldi	r30, 0x7A	; 122
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	8f 77       	andi	r24, 0x7F	; 127
 2b6:	80 83       	st	Z, r24
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <get_gas_sensor_limits>:
		
	}
	ClearBit(ADCSRA, ADEN);  //Disable the ADC until we go operational
	// Report status via the LED that the gas sensors are ready (or not)
	//display_status(gas_sensors, gas_sensor_initialization_errors);
}
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	33 e0       	ldi	r19, 0x03	; 3
 2c6:	fc 01       	movw	r30, r24
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	e0 54       	subi	r30, 0x40	; 64
 2d2:	fc 4f       	sbci	r31, 0xFC	; 252
 2d4:	11 82       	std	Z+1, r1	; 0x01
 2d6:	10 82       	st	Z, r1
 2d8:	33 83       	std	Z+3, r19	; 0x03
 2da:	22 83       	std	Z+2, r18	; 0x02
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	85 30       	cpi	r24, 0x05	; 5
 2e0:	91 05       	cpc	r25, r1
 2e2:	89 f7       	brne	.-30     	; 0x2c6 <get_gas_sensor_limits+0x8>
 2e4:	08 95       	ret

000002e6 <get_gas_sensor_limits_from_EEPROM>:
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	0f 2e       	mov	r0, r31
 2f4:	fb ea       	ldi	r31, 0xAB	; 171
 2f6:	ef 2e       	mov	r14, r31
 2f8:	f3 e0       	ldi	r31, 0x03	; 3
 2fa:	ff 2e       	mov	r15, r31
 2fc:	f0 2d       	mov	r31, r0
 2fe:	00 e0       	ldi	r16, 0x00	; 0
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	c7 01       	movw	r24, r14
 304:	12 d5       	rcall	.+2596   	; 0xd2a <eeprom_read_word>
 306:	e8 01       	movw	r28, r16
 308:	cc 0f       	add	r28, r28
 30a:	dd 1f       	adc	r29, r29
 30c:	cc 0f       	add	r28, r28
 30e:	dd 1f       	adc	r29, r29
 310:	c0 54       	subi	r28, 0x40	; 64
 312:	dc 4f       	sbci	r29, 0xFC	; 252
 314:	99 83       	std	Y+1, r25	; 0x01
 316:	88 83       	st	Y, r24
 318:	c7 01       	movw	r24, r14
 31a:	02 96       	adiw	r24, 0x02	; 2
 31c:	06 d5       	rcall	.+2572   	; 0xd2a <eeprom_read_word>
 31e:	9b 83       	std	Y+3, r25	; 0x03
 320:	8a 83       	std	Y+2, r24	; 0x02
 322:	0f 5f       	subi	r16, 0xFF	; 255
 324:	1f 4f       	sbci	r17, 0xFF	; 255
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	e8 0e       	add	r14, r24
 32a:	f1 1c       	adc	r15, r1
 32c:	05 30       	cpi	r16, 0x05	; 5
 32e:	11 05       	cpc	r17, r1
 330:	41 f7       	brne	.-48     	; 0x302 <get_gas_sensor_limits_from_EEPROM+0x1c>
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	08 95       	ret

00000340 <start_gas_sensor_read>:

void start_gas_sensor_read(void)
{
 340:	4f 92       	push	r4
 342:	5f 92       	push	r5
 344:	6f 92       	push	r6
 346:	7f 92       	push	r7
 348:	8f 92       	push	r8
 34a:	9f 92       	push	r9
 34c:	af 92       	push	r10
 34e:	bf 92       	push	r11
 350:	cf 92       	push	r12
 352:	df 92       	push	r13
 354:	ef 92       	push	r14
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	00 d0       	rcall	.+0      	; 0x362 <start_gas_sensor_read+0x22>
 362:	1f 92       	push	r1
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t total;
	int16_t gas_average;
	
	// Get the upper and lower boundaries on the gas sensors...
	// The first cal is just to test the EEPROM code
	get_gas_sensor_limits_from_EEPROM();
 368:	be df       	rcall	.-132    	; 0x2e6 <get_gas_sensor_limits_from_EEPROM>
	// This second cal is temporary and simply initializes the array to usable values...
	get_gas_sensor_limits();
 36a:	a9 df       	rcall	.-174    	; 0x2be <get_gas_sensor_limits>
 36c:	ea e7       	ldi	r30, 0x7A	; 122
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 68       	ori	r24, 0x80	; 128
 374:	80 83       	st	Z, r24
 376:	19 82       	std	Y+1, r1	; 0x01
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	85 30       	cpi	r24, 0x05	; 5
 37c:	08 f0       	brcs	.+2      	; 0x380 <start_gas_sensor_read+0x40>
 37e:	bb c0       	rjmp	.+374    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 380:	0a e7       	ldi	r16, 0x7A	; 122
		total = 0;
		
		for(int i = 0; i < max_gas_sample_count; i ++)
		{
			// Start conversion
			SetBit(ADCSRA, ADSC);
 382:	10 e0       	ldi	r17, 0x00	; 0
 384:	0f 2e       	mov	r0, r31
			while (BitIsClear(ADCSRA, ADIF))
			{
				// Wait for conversion to be complete
			}
			// Read result
			ADC_result = ADC;
 386:	f8 e7       	ldi	r31, 0x78	; 120
 388:	ef 2e       	mov	r14, r31
 38a:	f1 2c       	mov	r15, r1
 38c:	f0 2d       	mov	r31, r0
 38e:	cc 24       	eor	r12, r12
			
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
 390:	c3 94       	inc	r12
 392:	d1 2c       	mov	r13, r1
 394:	55 24       	eor	r5, r5
			}
			// Read result
			ADC_result = ADC;
			
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
 396:	53 94       	inc	r5
 398:	41 2c       	mov	r4, r1
 39a:	0f 2e       	mov	r0, r31
		{
			printf("Methane = %u\n", gas_average);
		}
		else
		{
			printf("Ozone = %u\n", gas_average);
 39c:	fb e8       	ldi	r31, 0x8B	; 139
 39e:	af 2e       	mov	r10, r31
 3a0:	f1 e0       	ldi	r31, 0x01	; 1
 3a2:	bf 2e       	mov	r11, r31
 3a4:	f0 2d       	mov	r31, r0
 3a6:	0f 2e       	mov	r0, r31
		{
			printf("Ammonia = %u\n", gas_average);
		}
		else if(sensor_id == 3)
		{
			printf("Methane = %u\n", gas_average);
 3a8:	fd e7       	ldi	r31, 0x7D	; 125
 3aa:	8f 2e       	mov	r8, r31
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	9f 2e       	mov	r9, r31
 3b0:	f0 2d       	mov	r31, r0
 3b2:	0f 2e       	mov	r0, r31
		{
			printf("Hydrogen = %u\n", gas_average);
		}
		else if(sensor_id == 2)
		{
			printf("Ammonia = %u\n", gas_average);
 3b4:	ff e6       	ldi	r31, 0x6F	; 111
 3b6:	6f 2e       	mov	r6, r31
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	7f 2e       	mov	r7, r31
 3bc:	f0 2d       	mov	r31, r0
	SetBit(ADCSRA, ADEN);
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
	{
		ADC_SetMux(sensor_id);
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	d4 de       	rcall	.-600    	; 0x16a <ADC_SetMux>
 3c2:	1b 82       	std	Y+3, r1	; 0x03
		
		total = 0;
 3c4:	1a 82       	std	Y+2, r1	; 0x02
 3c6:	24 e0       	ldi	r18, 0x04	; 4
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	f8 01       	movw	r30, r16
		
		for(int i = 0; i < max_gas_sample_count; i ++)
		{
			// Start conversion
			SetBit(ADCSRA, ADSC);
 3cc:	80 81       	ld	r24, Z
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	80 83       	st	Z, r24
 3d2:	f8 01       	movw	r30, r16
			while (BitIsClear(ADCSRA, ADIF))
 3d4:	80 81       	ld	r24, Z
 3d6:	84 ff       	sbrs	r24, 4
 3d8:	fc cf       	rjmp	.-8      	; 0x3d2 <start_gas_sensor_read+0x92>
 3da:	f7 01       	movw	r30, r14
			{
				// Wait for conversion to be complete
			}
			// Read result
			ADC_result = ADC;
 3dc:	80 81       	ld	r24, Z
 3de:	91 81       	ldd	r25, Z+1	; 0x01
 3e0:	e9 81       	ldd	r30, Y+1	; 0x01
			
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	ee 0f       	add	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	e0 54       	subi	r30, 0x40	; 64
 3ee:	fc 4f       	sbci	r31, 0xFC	; 252
 3f0:	40 81       	ld	r20, Z
 3f2:	51 81       	ldd	r21, Z+1	; 0x01
 3f4:	e9 81       	ldd	r30, Y+1	; 0x01
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	e0 54       	subi	r30, 0x40	; 64
 402:	fc 4f       	sbci	r31, 0xFC	; 252
 404:	62 81       	ldd	r22, Z+2	; 0x02
 406:	73 81       	ldd	r23, Z+3	; 0x03
 408:	e5 2d       	mov	r30, r5
 40a:	84 17       	cp	r24, r20
 40c:	95 07       	cpc	r25, r21
 40e:	08 f0       	brcs	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	e4 2d       	mov	r30, r4
 412:	e1 11       	cpse	r30, r1
 414:	07 c0       	rjmp	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 416:	45 2d       	mov	r20, r5
 418:	68 17       	cp	r22, r24
 41a:	79 07       	cpc	r23, r25
 41c:	08 f0       	brcs	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	44 2d       	mov	r20, r4
 420:	44 23       	and	r20, r20
 422:	71 f0       	breq	.+28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 424:	59 81       	ldd	r21, Y+1	; 0x01
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
 426:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <gas_sensor_initialization_errors>
 42a:	5d 5f       	subi	r21, 0xFD	; 253
 42c:	f6 01       	movw	r30, r12
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	5a 95       	dec	r21
 436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	af 01       	movw	r20, r30
 43a:	46 2b       	or	r20, r22
 43c:	40 93 e0 03 	sts	0x03E0, r20	; 0x8003e0 <gas_sensor_initialization_errors>
 440:	4a 81       	ldd	r20, Y+2	; 0x02
			}
			
			
			total += ADC_result;
 442:	5b 81       	ldd	r21, Y+3	; 0x03
 444:	84 0f       	add	r24, r20
 446:	95 1f       	adc	r25, r21
 448:	9b 83       	std	Y+3, r25	; 0x03
 44a:	8a 83       	std	Y+2, r24	; 0x02
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	31 09       	sbc	r19, r1
 450:	09 f0       	breq	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	{
		ADC_SetMux(sensor_id);
		
		total = 0;
		
		for(int i = 0; i < max_gas_sample_count; i ++)
 452:	bb cf       	rjmp	.-138    	; 0x3ca <start_gas_sensor_read+0x8a>
 454:	8a 81       	ldd	r24, Y+2	; 0x02
			
			
			total += ADC_result;
		}
		
		gas_average = total / max_gas_sample_count;
 456:	9b 81       	ldd	r25, Y+3	; 0x03
 458:	99 23       	and	r25, r25
 45a:	0c f4       	brge	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	03 96       	adiw	r24, 0x03	; 3
 45e:	95 95       	asr	r25
 460:	87 95       	ror	r24
 462:	95 95       	asr	r25
 464:	87 95       	ror	r24
 466:	29 81       	ldd	r18, Y+1	; 0x01
		
		if (sensor_id == 0)
 468:	21 11       	cpse	r18, r1
 46a:	0c c0       	rjmp	.+24     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 46c:	9f 93       	push	r25
		{
			printf("\nCarbon Monoxide = %u\n", gas_average);
 46e:	8f 93       	push	r24
 470:	89 e4       	ldi	r24, 0x49	; 73
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	9f 93       	push	r25
 476:	8f 93       	push	r24
 478:	98 d1       	rcall	.+816    	; 0x7aa <printf>
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	32 c0       	rjmp	.+100    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 484:	29 81       	ldd	r18, Y+1	; 0x01
		}
		else if(sensor_id == 1)
 486:	21 30       	cpi	r18, 0x01	; 1
 488:	61 f4       	brne	.+24     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 48a:	9f 93       	push	r25
		{
			printf("Hydrogen = %u\n", gas_average);
 48c:	8f 93       	push	r24
 48e:	80 e6       	ldi	r24, 0x60	; 96
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	9f 93       	push	r25
 494:	8f 93       	push	r24
 496:	89 d1       	rcall	.+786    	; 0x7aa <printf>
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	23 c0       	rjmp	.+70     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4a2:	29 81       	ldd	r18, Y+1	; 0x01
		}
		else if(sensor_id == 2)
 4a4:	22 30       	cpi	r18, 0x02	; 2
 4a6:	51 f4       	brne	.+20     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		{
			printf("Ammonia = %u\n", gas_average);
 4a8:	9f 93       	push	r25
 4aa:	8f 93       	push	r24
 4ac:	7f 92       	push	r7
 4ae:	6f 92       	push	r6
 4b0:	7c d1       	rcall	.+760    	; 0x7aa <printf>
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	16 c0       	rjmp	.+44     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4bc:	29 81       	ldd	r18, Y+1	; 0x01
		}
		else if(sensor_id == 3)
 4be:	23 30       	cpi	r18, 0x03	; 3
 4c0:	51 f4       	brne	.+20     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		{
			printf("Methane = %u\n", gas_average);
 4c2:	9f 93       	push	r25
 4c4:	8f 93       	push	r24
 4c6:	9f 92       	push	r9
 4c8:	8f 92       	push	r8
 4ca:	6f d1       	rcall	.+734    	; 0x7aa <printf>
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		}
		else
		{
			printf("Ozone = %u\n", gas_average);
 4d6:	9f 93       	push	r25
 4d8:	8f 93       	push	r24
 4da:	bf 92       	push	r11
 4dc:	af 92       	push	r10
 4de:	65 d1       	rcall	.+714    	; 0x7aa <printf>
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
 4ea:	8f 5f       	subi	r24, 0xFF	; 255
 4ec:	89 83       	std	Y+1, r24	; 0x01
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	85 30       	cpi	r24, 0x05	; 5
 4f2:	08 f4       	brcc	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f4:	64 cf       	rjmp	.-312    	; 0x3be <start_gas_sensor_read+0x7e>
 4f6:	0f 90       	pop	r0
	
	gas_sample_count = 0;
	
	SetBit(ADCSRA, ADSC); // start conversion.  Will be completed by the interrupt service routine.
	//printf("\ni = %u", gas_average);*/
}
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	ff 90       	pop	r15
 506:	ef 90       	pop	r14
 508:	df 90       	pop	r13
 50a:	cf 90       	pop	r12
 50c:	bf 90       	pop	r11
 50e:	af 90       	pop	r10
 510:	9f 90       	pop	r9
 512:	8f 90       	pop	r8
 514:	7f 90       	pop	r7
 516:	6f 90       	pop	r6
 518:	5f 90       	pop	r5
 51a:	4f 90       	pop	r4
 51c:	08 95       	ret

0000051e <main>:
 51e:	0f d0       	rcall	.+30     	; 0x53e <initialize_timer_counter_1>
	
	// *************************************************************************
	//        Initialization code & device configuration
	// *************************************************************************
 	initialize_timer_counter_1();
	USART0_init(MYUBRR0);
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	9e d0       	rcall	.+316    	; 0x662 <USART0_init>
	stdout = &mystdout;
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <__iob+0x3>
 52e:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <__iob+0x2>
	sei();
 	ADC_init();
	start_gas_sensor_read();
 532:	78 94       	sei
 534:	23 de       	rcall	.-954    	; 0x17c <ADC_init>
    while (1) 
    {
		//UART0
		// Echo the received character:  with a terminal window open on your PC,
		// you should see everything you type echoed back to the terminal window
		USART0_TransmitByte(USART0_ReceiveByte());
 536:	04 df       	rcall	.-504    	; 0x340 <start_gas_sensor_read>
 538:	a7 d0       	rcall	.+334    	; 0x688 <USART0_ReceiveByte>
 53a:	b6 d0       	rcall	.+364    	; 0x6a8 <USART0_TransmitByte>
 53c:	fd cf       	rjmp	.-6      	; 0x538 <main+0x1a>

0000053e <initialize_timer_counter_1>:
 53e:	8d e0       	ldi	r24, 0x0D	; 13
	Not using any of the other compare features, so all other CR bits are 0
	Finally, we have to enable the interrupt vector on compare register A
	TCCR1A = 0; Control Register A is reset to 0x00 on startup. */
	//  
	// Set the WGM mode and prescaler select in control register B
	TCCR1B = ((1<<WGM12) | (1<<CS12) | (1<<CS10));
 540:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// TCCR1C = 0; Control Register C is reset to 0x00 on startup.
	// Now we need to enter out TOP value in OCR1A
	OCR1A = 19530;
 544:	8a e4       	ldi	r24, 0x4A	; 74
 546:	9c e4       	ldi	r25, 0x4C	; 76
 548:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 54c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// Now enable the interrupt on the compare register A
	TIMSK1 = (1<<OCIE1A);
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 556:	08 95       	ret

00000558 <__vector_16>:
*********************************************************************************
********************************************************************************/


// 100Hz timer interrupt generated by OC0A and used by the FATFS code.
EMPTY_INTERRUPT(TIMER0_COMPA_vect);
 558:	18 95       	reti

0000055a <__vector_26>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	0b b6       	in	r0, 0x3b	; 59
 566:	0f 92       	push	r0
 568:	2f 93       	push	r18
 56a:	3f 93       	push	r19
 56c:	8f 93       	push	r24
 56e:	9f 93       	push	r25
 570:	af 93       	push	r26
 572:	bf 93       	push	r27
 574:	ef 93       	push	r30
 576:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 578:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 57c:	8e 2f       	mov	r24, r30
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	38 97       	sbiw	r30, 0x08	; 8
 584:	e1 35       	cpi	r30, 0x51	; 81
 586:	f1 05       	cpc	r31, r1
 588:	08 f0       	brcs	.+2      	; 0x58c <__vector_26+0x32>
 58a:	55 c0       	rjmp	.+170    	; 0x636 <__vector_26+0xdc>
 58c:	ea 5b       	subi	r30, 0xBA	; 186
 58e:	ff 4f       	sbci	r31, 0xFF	; 255
 590:	03 c1       	rjmp	.+518    	; 0x798 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 592:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <TWI_bufPtr.1674>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 596:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <TWI_bufPtr.1674>
 59a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <TWI_msgSize>
 59e:	e8 17       	cp	r30, r24
 5a0:	70 f4       	brcc	.+28     	; 0x5be <__vector_26+0x64>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	8e 0f       	add	r24, r30
 5a6:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <TWI_bufPtr.1674>
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	e3 56       	subi	r30, 0x63	; 99
 5ae:	fe 4f       	sbci	r31, 0xFE	; 254
 5b0:	80 81       	ld	r24, Z
 5b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 5b6:	85 e8       	ldi	r24, 0x85	; 133
 5b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5bc:	43 c0       	rjmp	.+134    	; 0x644 <__vector_26+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 5be:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <TWI_statusReg>
 5c2:	81 60       	ori	r24, 0x01	; 1
 5c4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 5c8:	84 e9       	ldi	r24, 0x94	; 148
 5ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5ce:	3a c0       	rjmp	.+116    	; 0x644 <__vector_26+0xea>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 5d0:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <TWI_bufPtr.1674>
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	8e 0f       	add	r24, r30
 5d8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <TWI_bufPtr.1674>
 5dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	e3 56       	subi	r30, 0x63	; 99
 5e4:	fe 4f       	sbci	r31, 0xFE	; 254
 5e6:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 5e8:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <TWI_bufPtr.1674>
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <TWI_msgSize>
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	28 17       	cp	r18, r24
 5f8:	39 07       	cpc	r19, r25
 5fa:	24 f4       	brge	.+8      	; 0x604 <__vector_26+0xaa>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 5fc:	85 ec       	ldi	r24, 0xC5	; 197
 5fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 602:	20 c0       	rjmp	.+64     	; 0x644 <__vector_26+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 604:	85 e8       	ldi	r24, 0x85	; 133
 606:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 60a:	1c c0       	rjmp	.+56     	; 0x644 <__vector_26+0xea>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 60c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 610:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <TWI_bufPtr.1674>
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	e3 56       	subi	r30, 0x63	; 99
 618:	fe 4f       	sbci	r31, 0xFE	; 254
 61a:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 61c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <TWI_statusReg>
 620:	81 60       	ori	r24, 0x01	; 1
 622:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 626:	84 e9       	ldi	r24, 0x94	; 148
 628:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 62c:	0b c0       	rjmp	.+22     	; 0x644 <__vector_26+0xea>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 62e:	85 ea       	ldi	r24, 0xA5	; 165
 630:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 634:	07 c0       	rjmp	.+14     	; 0x644 <__vector_26+0xea>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 636:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 63a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TWI_state>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 63e:	84 e0       	ldi	r24, 0x04	; 4
 640:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 644:	ff 91       	pop	r31
 646:	ef 91       	pop	r30
 648:	bf 91       	pop	r27
 64a:	af 91       	pop	r26
 64c:	9f 91       	pop	r25
 64e:	8f 91       	pop	r24
 650:	3f 91       	pop	r19
 652:	2f 91       	pop	r18
 654:	0f 90       	pop	r0
 656:	0b be       	out	0x3b, r0	; 59
 658:	0f 90       	pop	r0
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	0f 90       	pop	r0
 65e:	1f 90       	pop	r1
 660:	18 95       	reti

00000662 <USART0_init>:
void USART0_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
		USART0_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
 662:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 666:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 66a:	88 e9       	ldi	r24, 0x98	; 152
 66c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 670:	8e e0       	ldi	r24, 0x0E	; 14
 672:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 676:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <UART0_RxTail>
 67a:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <UART0_RxHead>
 67e:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <UART0_TxTail>
 682:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <UART0_TxHead>
 686:	08 95       	ret

00000688 <USART0_ReceiveByte>:
 688:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <UART0_RxHead>
 68c:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <UART0_RxTail>
 690:	98 17       	cp	r25, r24
 692:	d1 f3       	breq	.-12     	; 0x688 <USART0_ReceiveByte>
 694:	e0 91 a9 02 	lds	r30, 0x02A9	; 0x8002a9 <UART0_RxTail>
 698:	ef 5f       	subi	r30, 0xFF	; 255
 69a:	e0 93 a9 02 	sts	0x02A9, r30	; 0x8002a9 <UART0_RxTail>
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	e5 55       	subi	r30, 0x55	; 85
 6a2:	fd 4f       	sbci	r31, 0xFD	; 253
 6a4:	80 81       	ld	r24, Z
 6a6:	08 95       	ret

000006a8 <USART0_TransmitByte>:
 6a8:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <UART0_TxHead>
 6ac:	2f 5f       	subi	r18, 0xFF	; 255
 6ae:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <UART0_TxTail>
 6b2:	29 17       	cp	r18, r25
 6b4:	e1 f3       	breq	.-8      	; 0x6ae <USART0_TransmitByte+0x6>
 6b6:	e2 2f       	mov	r30, r18
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	e7 55       	subi	r30, 0x57	; 87
 6bc:	fe 4f       	sbci	r31, 0xFE	; 254
 6be:	80 83       	st	Z, r24
 6c0:	20 93 a8 01 	sts	0x01A8, r18	; 0x8001a8 <UART0_TxHead>
 6c4:	e1 ec       	ldi	r30, 0xC1	; 193
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	80 62       	ori	r24, 0x20	; 32
 6cc:	80 83       	st	Z, r24
 6ce:	08 95       	ret

000006d0 <USART0_Transmit_IO>:
 6d0:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <UART0_TxHead>
 6d4:	2f 5f       	subi	r18, 0xFF	; 255
 6d6:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <UART0_TxTail>
 6da:	29 17       	cp	r18, r25
 6dc:	e1 f3       	breq	.-8      	; 0x6d6 <USART0_Transmit_IO+0x6>
 6de:	e2 2f       	mov	r30, r18
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	e7 55       	subi	r30, 0x57	; 87
 6e4:	fe 4f       	sbci	r31, 0xFE	; 254
 6e6:	80 83       	st	Z, r24
 6e8:	20 93 a8 01 	sts	0x01A8, r18	; 0x8001a8 <UART0_TxHead>
 6ec:	e1 ec       	ldi	r30, 0xC1	; 193
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	80 62       	ori	r24, 0x20	; 32
 6f4:	80 83       	st	Z, r24
 6f6:	08 95       	ret

000006f8 <__vector_20>:
*********************************************************************************
********************************************************************************/


ISR(USART0_RX_vect)
{
 6f8:	1f 92       	push	r1
 6fa:	0f 92       	push	r0
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	0f 92       	push	r0
 700:	11 24       	eor	r1, r1
 702:	0b b6       	in	r0, 0x3b	; 59
 704:	0f 92       	push	r0
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	ef 93       	push	r30
 70c:	ff 93       	push	r31
	unsigned char data;
	unsigned char tmphead;
	
	// Read the received data 
	data = UDR0;
 70e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	// Calculate buffer index 
	tmphead = (UART0_RxHead + 1) & UART0_RX_BUFFER_MASK;
 712:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <UART0_RxHead>
 716:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index 
	UART0_RxHead = tmphead;
 718:	e0 93 aa 02 	sts	0x02AA, r30	; 0x8002aa <UART0_RxHead>

	if (tmphead == UART0_RxTail) {
 71c:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <UART0_RxTail>
		// ERROR! Receive buffer overflow 
	}
	// Store received data in buffer 
	UART0_RxBuf[tmphead] = data;
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	e5 55       	subi	r30, 0x55	; 85
 724:	fd 4f       	sbci	r31, 0xFD	; 253
 726:	80 83       	st	Z, r24
}
 728:	ff 91       	pop	r31
 72a:	ef 91       	pop	r30
 72c:	9f 91       	pop	r25
 72e:	8f 91       	pop	r24
 730:	0f 90       	pop	r0
 732:	0b be       	out	0x3b, r0	; 59
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <__vector_21>:

ISR(USART0_UDRE_vect)
{
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	0b b6       	in	r0, 0x3b	; 59
 74a:	0f 92       	push	r0
 74c:	8f 93       	push	r24
 74e:	9f 93       	push	r25
 750:	ef 93       	push	r30
 752:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted 
	if (UART0_TxHead != UART0_TxTail) {
 754:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <UART0_TxHead>
 758:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <UART0_TxTail>
 75c:	98 17       	cp	r25, r24
 75e:	61 f0       	breq	.+24     	; 0x778 <__vector_21+0x3a>
		// Calculate buffer index
		tmptail = ( UART0_TxTail + 1 ) & UART0_TX_BUFFER_MASK;
 760:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <UART0_TxTail>
 764:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index 
		UART0_TxTail = tmptail;
 766:	e0 93 a7 01 	sts	0x01A7, r30	; 0x8001a7 <UART0_TxTail>
		// Start transmission 
		UDR0 = UART0_TxBuf[tmptail];
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	e7 55       	subi	r30, 0x57	; 87
 76e:	fe 4f       	sbci	r31, 0xFE	; 254
 770:	80 81       	ld	r24, Z
 772:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 776:	05 c0       	rjmp	.+10     	; 0x782 <__vector_21+0x44>
		} else {
		// Disable UDRE interrupt 
		UCSR0B &= ~(1<<UDRIE0);
 778:	e1 ec       	ldi	r30, 0xC1	; 193
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	8f 7d       	andi	r24, 0xDF	; 223
 780:	80 83       	st	Z, r24
	}
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	9f 91       	pop	r25
 788:	8f 91       	pop	r24
 78a:	0f 90       	pop	r0
 78c:	0b be       	out	0x3b, r0	; 59
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <__tablejump2__>:
 798:	ee 0f       	add	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	00 24       	eor	r0, r0
 79e:	00 1c       	adc	r0, r0
 7a0:	0b be       	out	0x3b, r0	; 59
 7a2:	07 90       	elpm	r0, Z+
 7a4:	f6 91       	elpm	r31, Z
 7a6:	e0 2d       	mov	r30, r0
 7a8:	09 94       	ijmp

000007aa <printf>:
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
 7b2:	ae 01       	movw	r20, r28
 7b4:	4b 5f       	subi	r20, 0xFB	; 251
 7b6:	5f 4f       	sbci	r21, 0xFF	; 255
 7b8:	fa 01       	movw	r30, r20
 7ba:	61 91       	ld	r22, Z+
 7bc:	71 91       	ld	r23, Z+
 7be:	af 01       	movw	r20, r30
 7c0:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <__iob+0x2>
 7c4:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <__iob+0x3>
 7c8:	03 d0       	rcall	.+6      	; 0x7d0 <vfprintf>
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	08 95       	ret

000007d0 <vfprintf>:
 7d0:	2f 92       	push	r2
 7d2:	3f 92       	push	r3
 7d4:	4f 92       	push	r4
 7d6:	5f 92       	push	r5
 7d8:	6f 92       	push	r6
 7da:	7f 92       	push	r7
 7dc:	8f 92       	push	r8
 7de:	9f 92       	push	r9
 7e0:	af 92       	push	r10
 7e2:	bf 92       	push	r11
 7e4:	cf 92       	push	r12
 7e6:	df 92       	push	r13
 7e8:	ef 92       	push	r14
 7ea:	ff 92       	push	r15
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	cd b7       	in	r28, 0x3d	; 61
 7f6:	de b7       	in	r29, 0x3e	; 62
 7f8:	2b 97       	sbiw	r28, 0x0b	; 11
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	f8 94       	cli
 7fe:	de bf       	out	0x3e, r29	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	cd bf       	out	0x3d, r28	; 61
 804:	6c 01       	movw	r12, r24
 806:	7b 01       	movw	r14, r22
 808:	8a 01       	movw	r16, r20
 80a:	fc 01       	movw	r30, r24
 80c:	17 82       	std	Z+7, r1	; 0x07
 80e:	16 82       	std	Z+6, r1	; 0x06
 810:	83 81       	ldd	r24, Z+3	; 0x03
 812:	81 ff       	sbrs	r24, 1
 814:	bf c1       	rjmp	.+894    	; 0xb94 <vfprintf+0x3c4>
 816:	ce 01       	movw	r24, r28
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	3c 01       	movw	r6, r24
 81c:	f6 01       	movw	r30, r12
 81e:	93 81       	ldd	r25, Z+3	; 0x03
 820:	f7 01       	movw	r30, r14
 822:	93 fd       	sbrc	r25, 3
 824:	85 91       	lpm	r24, Z+
 826:	93 ff       	sbrs	r25, 3
 828:	81 91       	ld	r24, Z+
 82a:	7f 01       	movw	r14, r30
 82c:	88 23       	and	r24, r24
 82e:	09 f4       	brne	.+2      	; 0x832 <vfprintf+0x62>
 830:	ad c1       	rjmp	.+858    	; 0xb8c <vfprintf+0x3bc>
 832:	85 32       	cpi	r24, 0x25	; 37
 834:	39 f4       	brne	.+14     	; 0x844 <vfprintf+0x74>
 836:	93 fd       	sbrc	r25, 3
 838:	85 91       	lpm	r24, Z+
 83a:	93 ff       	sbrs	r25, 3
 83c:	81 91       	ld	r24, Z+
 83e:	7f 01       	movw	r14, r30
 840:	85 32       	cpi	r24, 0x25	; 37
 842:	21 f4       	brne	.+8      	; 0x84c <vfprintf+0x7c>
 844:	b6 01       	movw	r22, r12
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	d6 d1       	rcall	.+940    	; 0xbf6 <fputc>
 84a:	e8 cf       	rjmp	.-48     	; 0x81c <vfprintf+0x4c>
 84c:	91 2c       	mov	r9, r1
 84e:	21 2c       	mov	r2, r1
 850:	31 2c       	mov	r3, r1
 852:	ff e1       	ldi	r31, 0x1F	; 31
 854:	f3 15       	cp	r31, r3
 856:	d8 f0       	brcs	.+54     	; 0x88e <vfprintf+0xbe>
 858:	8b 32       	cpi	r24, 0x2B	; 43
 85a:	79 f0       	breq	.+30     	; 0x87a <vfprintf+0xaa>
 85c:	38 f4       	brcc	.+14     	; 0x86c <vfprintf+0x9c>
 85e:	80 32       	cpi	r24, 0x20	; 32
 860:	79 f0       	breq	.+30     	; 0x880 <vfprintf+0xb0>
 862:	83 32       	cpi	r24, 0x23	; 35
 864:	a1 f4       	brne	.+40     	; 0x88e <vfprintf+0xbe>
 866:	23 2d       	mov	r18, r3
 868:	20 61       	ori	r18, 0x10	; 16
 86a:	1d c0       	rjmp	.+58     	; 0x8a6 <vfprintf+0xd6>
 86c:	8d 32       	cpi	r24, 0x2D	; 45
 86e:	61 f0       	breq	.+24     	; 0x888 <vfprintf+0xb8>
 870:	80 33       	cpi	r24, 0x30	; 48
 872:	69 f4       	brne	.+26     	; 0x88e <vfprintf+0xbe>
 874:	23 2d       	mov	r18, r3
 876:	21 60       	ori	r18, 0x01	; 1
 878:	16 c0       	rjmp	.+44     	; 0x8a6 <vfprintf+0xd6>
 87a:	83 2d       	mov	r24, r3
 87c:	82 60       	ori	r24, 0x02	; 2
 87e:	38 2e       	mov	r3, r24
 880:	e3 2d       	mov	r30, r3
 882:	e4 60       	ori	r30, 0x04	; 4
 884:	3e 2e       	mov	r3, r30
 886:	2a c0       	rjmp	.+84     	; 0x8dc <vfprintf+0x10c>
 888:	f3 2d       	mov	r31, r3
 88a:	f8 60       	ori	r31, 0x08	; 8
 88c:	1d c0       	rjmp	.+58     	; 0x8c8 <vfprintf+0xf8>
 88e:	37 fc       	sbrc	r3, 7
 890:	2d c0       	rjmp	.+90     	; 0x8ec <vfprintf+0x11c>
 892:	20 ed       	ldi	r18, 0xD0	; 208
 894:	28 0f       	add	r18, r24
 896:	2a 30       	cpi	r18, 0x0A	; 10
 898:	40 f0       	brcs	.+16     	; 0x8aa <vfprintf+0xda>
 89a:	8e 32       	cpi	r24, 0x2E	; 46
 89c:	b9 f4       	brne	.+46     	; 0x8cc <vfprintf+0xfc>
 89e:	36 fc       	sbrc	r3, 6
 8a0:	75 c1       	rjmp	.+746    	; 0xb8c <vfprintf+0x3bc>
 8a2:	23 2d       	mov	r18, r3
 8a4:	20 64       	ori	r18, 0x40	; 64
 8a6:	32 2e       	mov	r3, r18
 8a8:	19 c0       	rjmp	.+50     	; 0x8dc <vfprintf+0x10c>
 8aa:	36 fe       	sbrs	r3, 6
 8ac:	06 c0       	rjmp	.+12     	; 0x8ba <vfprintf+0xea>
 8ae:	8a e0       	ldi	r24, 0x0A	; 10
 8b0:	98 9e       	mul	r9, r24
 8b2:	20 0d       	add	r18, r0
 8b4:	11 24       	eor	r1, r1
 8b6:	92 2e       	mov	r9, r18
 8b8:	11 c0       	rjmp	.+34     	; 0x8dc <vfprintf+0x10c>
 8ba:	ea e0       	ldi	r30, 0x0A	; 10
 8bc:	2e 9e       	mul	r2, r30
 8be:	20 0d       	add	r18, r0
 8c0:	11 24       	eor	r1, r1
 8c2:	22 2e       	mov	r2, r18
 8c4:	f3 2d       	mov	r31, r3
 8c6:	f0 62       	ori	r31, 0x20	; 32
 8c8:	3f 2e       	mov	r3, r31
 8ca:	08 c0       	rjmp	.+16     	; 0x8dc <vfprintf+0x10c>
 8cc:	8c 36       	cpi	r24, 0x6C	; 108
 8ce:	21 f4       	brne	.+8      	; 0x8d8 <vfprintf+0x108>
 8d0:	83 2d       	mov	r24, r3
 8d2:	80 68       	ori	r24, 0x80	; 128
 8d4:	38 2e       	mov	r3, r24
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0x10c>
 8d8:	88 36       	cpi	r24, 0x68	; 104
 8da:	41 f4       	brne	.+16     	; 0x8ec <vfprintf+0x11c>
 8dc:	f7 01       	movw	r30, r14
 8de:	93 fd       	sbrc	r25, 3
 8e0:	85 91       	lpm	r24, Z+
 8e2:	93 ff       	sbrs	r25, 3
 8e4:	81 91       	ld	r24, Z+
 8e6:	7f 01       	movw	r14, r30
 8e8:	81 11       	cpse	r24, r1
 8ea:	b3 cf       	rjmp	.-154    	; 0x852 <vfprintf+0x82>
 8ec:	98 2f       	mov	r25, r24
 8ee:	9f 7d       	andi	r25, 0xDF	; 223
 8f0:	95 54       	subi	r25, 0x45	; 69
 8f2:	93 30       	cpi	r25, 0x03	; 3
 8f4:	28 f4       	brcc	.+10     	; 0x900 <vfprintf+0x130>
 8f6:	0c 5f       	subi	r16, 0xFC	; 252
 8f8:	1f 4f       	sbci	r17, 0xFF	; 255
 8fa:	9f e3       	ldi	r25, 0x3F	; 63
 8fc:	99 83       	std	Y+1, r25	; 0x01
 8fe:	0d c0       	rjmp	.+26     	; 0x91a <vfprintf+0x14a>
 900:	83 36       	cpi	r24, 0x63	; 99
 902:	31 f0       	breq	.+12     	; 0x910 <vfprintf+0x140>
 904:	83 37       	cpi	r24, 0x73	; 115
 906:	71 f0       	breq	.+28     	; 0x924 <vfprintf+0x154>
 908:	83 35       	cpi	r24, 0x53	; 83
 90a:	09 f0       	breq	.+2      	; 0x90e <vfprintf+0x13e>
 90c:	55 c0       	rjmp	.+170    	; 0x9b8 <vfprintf+0x1e8>
 90e:	20 c0       	rjmp	.+64     	; 0x950 <vfprintf+0x180>
 910:	f8 01       	movw	r30, r16
 912:	80 81       	ld	r24, Z
 914:	89 83       	std	Y+1, r24	; 0x01
 916:	0e 5f       	subi	r16, 0xFE	; 254
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	88 24       	eor	r8, r8
 91c:	83 94       	inc	r8
 91e:	91 2c       	mov	r9, r1
 920:	53 01       	movw	r10, r6
 922:	12 c0       	rjmp	.+36     	; 0x948 <vfprintf+0x178>
 924:	28 01       	movw	r4, r16
 926:	f2 e0       	ldi	r31, 0x02	; 2
 928:	4f 0e       	add	r4, r31
 92a:	51 1c       	adc	r5, r1
 92c:	f8 01       	movw	r30, r16
 92e:	a0 80       	ld	r10, Z
 930:	b1 80       	ldd	r11, Z+1	; 0x01
 932:	36 fe       	sbrs	r3, 6
 934:	03 c0       	rjmp	.+6      	; 0x93c <vfprintf+0x16c>
 936:	69 2d       	mov	r22, r9
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	02 c0       	rjmp	.+4      	; 0x940 <vfprintf+0x170>
 93c:	6f ef       	ldi	r22, 0xFF	; 255
 93e:	7f ef       	ldi	r23, 0xFF	; 255
 940:	c5 01       	movw	r24, r10
 942:	4e d1       	rcall	.+668    	; 0xbe0 <strnlen>
 944:	4c 01       	movw	r8, r24
 946:	82 01       	movw	r16, r4
 948:	f3 2d       	mov	r31, r3
 94a:	ff 77       	andi	r31, 0x7F	; 127
 94c:	3f 2e       	mov	r3, r31
 94e:	15 c0       	rjmp	.+42     	; 0x97a <vfprintf+0x1aa>
 950:	28 01       	movw	r4, r16
 952:	22 e0       	ldi	r18, 0x02	; 2
 954:	42 0e       	add	r4, r18
 956:	51 1c       	adc	r5, r1
 958:	f8 01       	movw	r30, r16
 95a:	a0 80       	ld	r10, Z
 95c:	b1 80       	ldd	r11, Z+1	; 0x01
 95e:	36 fe       	sbrs	r3, 6
 960:	03 c0       	rjmp	.+6      	; 0x968 <vfprintf+0x198>
 962:	69 2d       	mov	r22, r9
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	02 c0       	rjmp	.+4      	; 0x96c <vfprintf+0x19c>
 968:	6f ef       	ldi	r22, 0xFF	; 255
 96a:	7f ef       	ldi	r23, 0xFF	; 255
 96c:	c5 01       	movw	r24, r10
 96e:	2d d1       	rcall	.+602    	; 0xbca <strnlen_P>
 970:	4c 01       	movw	r8, r24
 972:	f3 2d       	mov	r31, r3
 974:	f0 68       	ori	r31, 0x80	; 128
 976:	3f 2e       	mov	r3, r31
 978:	82 01       	movw	r16, r4
 97a:	33 fc       	sbrc	r3, 3
 97c:	19 c0       	rjmp	.+50     	; 0x9b0 <vfprintf+0x1e0>
 97e:	82 2d       	mov	r24, r2
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	88 16       	cp	r8, r24
 984:	99 06       	cpc	r9, r25
 986:	a0 f4       	brcc	.+40     	; 0x9b0 <vfprintf+0x1e0>
 988:	b6 01       	movw	r22, r12
 98a:	80 e2       	ldi	r24, 0x20	; 32
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	33 d1       	rcall	.+614    	; 0xbf6 <fputc>
 990:	2a 94       	dec	r2
 992:	f5 cf       	rjmp	.-22     	; 0x97e <vfprintf+0x1ae>
 994:	f5 01       	movw	r30, r10
 996:	37 fc       	sbrc	r3, 7
 998:	85 91       	lpm	r24, Z+
 99a:	37 fe       	sbrs	r3, 7
 99c:	81 91       	ld	r24, Z+
 99e:	5f 01       	movw	r10, r30
 9a0:	b6 01       	movw	r22, r12
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	28 d1       	rcall	.+592    	; 0xbf6 <fputc>
 9a6:	21 10       	cpse	r2, r1
 9a8:	2a 94       	dec	r2
 9aa:	21 e0       	ldi	r18, 0x01	; 1
 9ac:	82 1a       	sub	r8, r18
 9ae:	91 08       	sbc	r9, r1
 9b0:	81 14       	cp	r8, r1
 9b2:	91 04       	cpc	r9, r1
 9b4:	79 f7       	brne	.-34     	; 0x994 <vfprintf+0x1c4>
 9b6:	e1 c0       	rjmp	.+450    	; 0xb7a <vfprintf+0x3aa>
 9b8:	84 36       	cpi	r24, 0x64	; 100
 9ba:	11 f0       	breq	.+4      	; 0x9c0 <vfprintf+0x1f0>
 9bc:	89 36       	cpi	r24, 0x69	; 105
 9be:	39 f5       	brne	.+78     	; 0xa0e <vfprintf+0x23e>
 9c0:	f8 01       	movw	r30, r16
 9c2:	37 fe       	sbrs	r3, 7
 9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <vfprintf+0x204>
 9c6:	60 81       	ld	r22, Z
 9c8:	71 81       	ldd	r23, Z+1	; 0x01
 9ca:	82 81       	ldd	r24, Z+2	; 0x02
 9cc:	93 81       	ldd	r25, Z+3	; 0x03
 9ce:	0c 5f       	subi	r16, 0xFC	; 252
 9d0:	1f 4f       	sbci	r17, 0xFF	; 255
 9d2:	08 c0       	rjmp	.+16     	; 0x9e4 <vfprintf+0x214>
 9d4:	60 81       	ld	r22, Z
 9d6:	71 81       	ldd	r23, Z+1	; 0x01
 9d8:	07 2e       	mov	r0, r23
 9da:	00 0c       	add	r0, r0
 9dc:	88 0b       	sbc	r24, r24
 9de:	99 0b       	sbc	r25, r25
 9e0:	0e 5f       	subi	r16, 0xFE	; 254
 9e2:	1f 4f       	sbci	r17, 0xFF	; 255
 9e4:	f3 2d       	mov	r31, r3
 9e6:	ff 76       	andi	r31, 0x6F	; 111
 9e8:	3f 2e       	mov	r3, r31
 9ea:	97 ff       	sbrs	r25, 7
 9ec:	09 c0       	rjmp	.+18     	; 0xa00 <vfprintf+0x230>
 9ee:	90 95       	com	r25
 9f0:	80 95       	com	r24
 9f2:	70 95       	com	r23
 9f4:	61 95       	neg	r22
 9f6:	7f 4f       	sbci	r23, 0xFF	; 255
 9f8:	8f 4f       	sbci	r24, 0xFF	; 255
 9fa:	9f 4f       	sbci	r25, 0xFF	; 255
 9fc:	f0 68       	ori	r31, 0x80	; 128
 9fe:	3f 2e       	mov	r3, r31
 a00:	2a e0       	ldi	r18, 0x0A	; 10
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	a3 01       	movw	r20, r6
 a06:	33 d1       	rcall	.+614    	; 0xc6e <__ultoa_invert>
 a08:	88 2e       	mov	r8, r24
 a0a:	86 18       	sub	r8, r6
 a0c:	44 c0       	rjmp	.+136    	; 0xa96 <vfprintf+0x2c6>
 a0e:	85 37       	cpi	r24, 0x75	; 117
 a10:	31 f4       	brne	.+12     	; 0xa1e <vfprintf+0x24e>
 a12:	23 2d       	mov	r18, r3
 a14:	2f 7e       	andi	r18, 0xEF	; 239
 a16:	b2 2e       	mov	r11, r18
 a18:	2a e0       	ldi	r18, 0x0A	; 10
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	25 c0       	rjmp	.+74     	; 0xa68 <vfprintf+0x298>
 a1e:	93 2d       	mov	r25, r3
 a20:	99 7f       	andi	r25, 0xF9	; 249
 a22:	b9 2e       	mov	r11, r25
 a24:	8f 36       	cpi	r24, 0x6F	; 111
 a26:	c1 f0       	breq	.+48     	; 0xa58 <vfprintf+0x288>
 a28:	18 f4       	brcc	.+6      	; 0xa30 <vfprintf+0x260>
 a2a:	88 35       	cpi	r24, 0x58	; 88
 a2c:	79 f0       	breq	.+30     	; 0xa4c <vfprintf+0x27c>
 a2e:	ae c0       	rjmp	.+348    	; 0xb8c <vfprintf+0x3bc>
 a30:	80 37       	cpi	r24, 0x70	; 112
 a32:	19 f0       	breq	.+6      	; 0xa3a <vfprintf+0x26a>
 a34:	88 37       	cpi	r24, 0x78	; 120
 a36:	21 f0       	breq	.+8      	; 0xa40 <vfprintf+0x270>
 a38:	a9 c0       	rjmp	.+338    	; 0xb8c <vfprintf+0x3bc>
 a3a:	e9 2f       	mov	r30, r25
 a3c:	e0 61       	ori	r30, 0x10	; 16
 a3e:	be 2e       	mov	r11, r30
 a40:	b4 fe       	sbrs	r11, 4
 a42:	0d c0       	rjmp	.+26     	; 0xa5e <vfprintf+0x28e>
 a44:	fb 2d       	mov	r31, r11
 a46:	f4 60       	ori	r31, 0x04	; 4
 a48:	bf 2e       	mov	r11, r31
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <vfprintf+0x28e>
 a4c:	34 fe       	sbrs	r3, 4
 a4e:	0a c0       	rjmp	.+20     	; 0xa64 <vfprintf+0x294>
 a50:	29 2f       	mov	r18, r25
 a52:	26 60       	ori	r18, 0x06	; 6
 a54:	b2 2e       	mov	r11, r18
 a56:	06 c0       	rjmp	.+12     	; 0xa64 <vfprintf+0x294>
 a58:	28 e0       	ldi	r18, 0x08	; 8
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	05 c0       	rjmp	.+10     	; 0xa68 <vfprintf+0x298>
 a5e:	20 e1       	ldi	r18, 0x10	; 16
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <vfprintf+0x298>
 a64:	20 e1       	ldi	r18, 0x10	; 16
 a66:	32 e0       	ldi	r19, 0x02	; 2
 a68:	f8 01       	movw	r30, r16
 a6a:	b7 fe       	sbrs	r11, 7
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <vfprintf+0x2ac>
 a6e:	60 81       	ld	r22, Z
 a70:	71 81       	ldd	r23, Z+1	; 0x01
 a72:	82 81       	ldd	r24, Z+2	; 0x02
 a74:	93 81       	ldd	r25, Z+3	; 0x03
 a76:	0c 5f       	subi	r16, 0xFC	; 252
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <vfprintf+0x2b8>
 a7c:	60 81       	ld	r22, Z
 a7e:	71 81       	ldd	r23, Z+1	; 0x01
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 5f       	subi	r16, 0xFE	; 254
 a86:	1f 4f       	sbci	r17, 0xFF	; 255
 a88:	a3 01       	movw	r20, r6
 a8a:	f1 d0       	rcall	.+482    	; 0xc6e <__ultoa_invert>
 a8c:	88 2e       	mov	r8, r24
 a8e:	86 18       	sub	r8, r6
 a90:	fb 2d       	mov	r31, r11
 a92:	ff 77       	andi	r31, 0x7F	; 127
 a94:	3f 2e       	mov	r3, r31
 a96:	36 fe       	sbrs	r3, 6
 a98:	0d c0       	rjmp	.+26     	; 0xab4 <vfprintf+0x2e4>
 a9a:	23 2d       	mov	r18, r3
 a9c:	2e 7f       	andi	r18, 0xFE	; 254
 a9e:	a2 2e       	mov	r10, r18
 aa0:	89 14       	cp	r8, r9
 aa2:	58 f4       	brcc	.+22     	; 0xaba <vfprintf+0x2ea>
 aa4:	34 fe       	sbrs	r3, 4
 aa6:	0b c0       	rjmp	.+22     	; 0xabe <vfprintf+0x2ee>
 aa8:	32 fc       	sbrc	r3, 2
 aaa:	09 c0       	rjmp	.+18     	; 0xabe <vfprintf+0x2ee>
 aac:	83 2d       	mov	r24, r3
 aae:	8e 7e       	andi	r24, 0xEE	; 238
 ab0:	a8 2e       	mov	r10, r24
 ab2:	05 c0       	rjmp	.+10     	; 0xabe <vfprintf+0x2ee>
 ab4:	b8 2c       	mov	r11, r8
 ab6:	a3 2c       	mov	r10, r3
 ab8:	03 c0       	rjmp	.+6      	; 0xac0 <vfprintf+0x2f0>
 aba:	b8 2c       	mov	r11, r8
 abc:	01 c0       	rjmp	.+2      	; 0xac0 <vfprintf+0x2f0>
 abe:	b9 2c       	mov	r11, r9
 ac0:	a4 fe       	sbrs	r10, 4
 ac2:	0f c0       	rjmp	.+30     	; 0xae2 <vfprintf+0x312>
 ac4:	fe 01       	movw	r30, r28
 ac6:	e8 0d       	add	r30, r8
 ac8:	f1 1d       	adc	r31, r1
 aca:	80 81       	ld	r24, Z
 acc:	80 33       	cpi	r24, 0x30	; 48
 ace:	21 f4       	brne	.+8      	; 0xad8 <vfprintf+0x308>
 ad0:	9a 2d       	mov	r25, r10
 ad2:	99 7e       	andi	r25, 0xE9	; 233
 ad4:	a9 2e       	mov	r10, r25
 ad6:	09 c0       	rjmp	.+18     	; 0xaea <vfprintf+0x31a>
 ad8:	a2 fe       	sbrs	r10, 2
 ada:	06 c0       	rjmp	.+12     	; 0xae8 <vfprintf+0x318>
 adc:	b3 94       	inc	r11
 ade:	b3 94       	inc	r11
 ae0:	04 c0       	rjmp	.+8      	; 0xaea <vfprintf+0x31a>
 ae2:	8a 2d       	mov	r24, r10
 ae4:	86 78       	andi	r24, 0x86	; 134
 ae6:	09 f0       	breq	.+2      	; 0xaea <vfprintf+0x31a>
 ae8:	b3 94       	inc	r11
 aea:	a3 fc       	sbrc	r10, 3
 aec:	10 c0       	rjmp	.+32     	; 0xb0e <vfprintf+0x33e>
 aee:	a0 fe       	sbrs	r10, 0
 af0:	06 c0       	rjmp	.+12     	; 0xafe <vfprintf+0x32e>
 af2:	b2 14       	cp	r11, r2
 af4:	80 f4       	brcc	.+32     	; 0xb16 <vfprintf+0x346>
 af6:	28 0c       	add	r2, r8
 af8:	92 2c       	mov	r9, r2
 afa:	9b 18       	sub	r9, r11
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <vfprintf+0x348>
 afe:	b2 14       	cp	r11, r2
 b00:	58 f4       	brcc	.+22     	; 0xb18 <vfprintf+0x348>
 b02:	b6 01       	movw	r22, r12
 b04:	80 e2       	ldi	r24, 0x20	; 32
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	76 d0       	rcall	.+236    	; 0xbf6 <fputc>
 b0a:	b3 94       	inc	r11
 b0c:	f8 cf       	rjmp	.-16     	; 0xafe <vfprintf+0x32e>
 b0e:	b2 14       	cp	r11, r2
 b10:	18 f4       	brcc	.+6      	; 0xb18 <vfprintf+0x348>
 b12:	2b 18       	sub	r2, r11
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <vfprintf+0x34a>
 b16:	98 2c       	mov	r9, r8
 b18:	21 2c       	mov	r2, r1
 b1a:	a4 fe       	sbrs	r10, 4
 b1c:	0f c0       	rjmp	.+30     	; 0xb3c <vfprintf+0x36c>
 b1e:	b6 01       	movw	r22, r12
 b20:	80 e3       	ldi	r24, 0x30	; 48
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	68 d0       	rcall	.+208    	; 0xbf6 <fputc>
 b26:	a2 fe       	sbrs	r10, 2
 b28:	16 c0       	rjmp	.+44     	; 0xb56 <vfprintf+0x386>
 b2a:	a1 fc       	sbrc	r10, 1
 b2c:	03 c0       	rjmp	.+6      	; 0xb34 <vfprintf+0x364>
 b2e:	88 e7       	ldi	r24, 0x78	; 120
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <vfprintf+0x368>
 b34:	88 e5       	ldi	r24, 0x58	; 88
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	b6 01       	movw	r22, r12
 b3a:	0c c0       	rjmp	.+24     	; 0xb54 <vfprintf+0x384>
 b3c:	8a 2d       	mov	r24, r10
 b3e:	86 78       	andi	r24, 0x86	; 134
 b40:	51 f0       	breq	.+20     	; 0xb56 <vfprintf+0x386>
 b42:	a1 fe       	sbrs	r10, 1
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <vfprintf+0x37a>
 b46:	8b e2       	ldi	r24, 0x2B	; 43
 b48:	01 c0       	rjmp	.+2      	; 0xb4c <vfprintf+0x37c>
 b4a:	80 e2       	ldi	r24, 0x20	; 32
 b4c:	a7 fc       	sbrc	r10, 7
 b4e:	8d e2       	ldi	r24, 0x2D	; 45
 b50:	b6 01       	movw	r22, r12
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	50 d0       	rcall	.+160    	; 0xbf6 <fputc>
 b56:	89 14       	cp	r8, r9
 b58:	30 f4       	brcc	.+12     	; 0xb66 <vfprintf+0x396>
 b5a:	b6 01       	movw	r22, r12
 b5c:	80 e3       	ldi	r24, 0x30	; 48
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	4a d0       	rcall	.+148    	; 0xbf6 <fputc>
 b62:	9a 94       	dec	r9
 b64:	f8 cf       	rjmp	.-16     	; 0xb56 <vfprintf+0x386>
 b66:	8a 94       	dec	r8
 b68:	f3 01       	movw	r30, r6
 b6a:	e8 0d       	add	r30, r8
 b6c:	f1 1d       	adc	r31, r1
 b6e:	80 81       	ld	r24, Z
 b70:	b6 01       	movw	r22, r12
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	40 d0       	rcall	.+128    	; 0xbf6 <fputc>
 b76:	81 10       	cpse	r8, r1
 b78:	f6 cf       	rjmp	.-20     	; 0xb66 <vfprintf+0x396>
 b7a:	22 20       	and	r2, r2
 b7c:	09 f4       	brne	.+2      	; 0xb80 <vfprintf+0x3b0>
 b7e:	4e ce       	rjmp	.-868    	; 0x81c <vfprintf+0x4c>
 b80:	b6 01       	movw	r22, r12
 b82:	80 e2       	ldi	r24, 0x20	; 32
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	37 d0       	rcall	.+110    	; 0xbf6 <fputc>
 b88:	2a 94       	dec	r2
 b8a:	f7 cf       	rjmp	.-18     	; 0xb7a <vfprintf+0x3aa>
 b8c:	f6 01       	movw	r30, r12
 b8e:	86 81       	ldd	r24, Z+6	; 0x06
 b90:	97 81       	ldd	r25, Z+7	; 0x07
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <vfprintf+0x3c8>
 b94:	8f ef       	ldi	r24, 0xFF	; 255
 b96:	9f ef       	ldi	r25, 0xFF	; 255
 b98:	2b 96       	adiw	r28, 0x0b	; 11
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	df 91       	pop	r29
 ba6:	cf 91       	pop	r28
 ba8:	1f 91       	pop	r17
 baa:	0f 91       	pop	r16
 bac:	ff 90       	pop	r15
 bae:	ef 90       	pop	r14
 bb0:	df 90       	pop	r13
 bb2:	cf 90       	pop	r12
 bb4:	bf 90       	pop	r11
 bb6:	af 90       	pop	r10
 bb8:	9f 90       	pop	r9
 bba:	8f 90       	pop	r8
 bbc:	7f 90       	pop	r7
 bbe:	6f 90       	pop	r6
 bc0:	5f 90       	pop	r5
 bc2:	4f 90       	pop	r4
 bc4:	3f 90       	pop	r3
 bc6:	2f 90       	pop	r2
 bc8:	08 95       	ret

00000bca <strnlen_P>:
 bca:	fc 01       	movw	r30, r24
 bcc:	05 90       	lpm	r0, Z+
 bce:	61 50       	subi	r22, 0x01	; 1
 bd0:	70 40       	sbci	r23, 0x00	; 0
 bd2:	01 10       	cpse	r0, r1
 bd4:	d8 f7       	brcc	.-10     	; 0xbcc <strnlen_P+0x2>
 bd6:	80 95       	com	r24
 bd8:	90 95       	com	r25
 bda:	8e 0f       	add	r24, r30
 bdc:	9f 1f       	adc	r25, r31
 bde:	08 95       	ret

00000be0 <strnlen>:
 be0:	fc 01       	movw	r30, r24
 be2:	61 50       	subi	r22, 0x01	; 1
 be4:	70 40       	sbci	r23, 0x00	; 0
 be6:	01 90       	ld	r0, Z+
 be8:	01 10       	cpse	r0, r1
 bea:	d8 f7       	brcc	.-10     	; 0xbe2 <strnlen+0x2>
 bec:	80 95       	com	r24
 bee:	90 95       	com	r25
 bf0:	8e 0f       	add	r24, r30
 bf2:	9f 1f       	adc	r25, r31
 bf4:	08 95       	ret

00000bf6 <fputc>:
 bf6:	0f 93       	push	r16
 bf8:	1f 93       	push	r17
 bfa:	cf 93       	push	r28
 bfc:	df 93       	push	r29
 bfe:	fb 01       	movw	r30, r22
 c00:	23 81       	ldd	r18, Z+3	; 0x03
 c02:	21 fd       	sbrc	r18, 1
 c04:	03 c0       	rjmp	.+6      	; 0xc0c <fputc+0x16>
 c06:	8f ef       	ldi	r24, 0xFF	; 255
 c08:	9f ef       	ldi	r25, 0xFF	; 255
 c0a:	2c c0       	rjmp	.+88     	; 0xc64 <fputc+0x6e>
 c0c:	22 ff       	sbrs	r18, 2
 c0e:	16 c0       	rjmp	.+44     	; 0xc3c <fputc+0x46>
 c10:	46 81       	ldd	r20, Z+6	; 0x06
 c12:	57 81       	ldd	r21, Z+7	; 0x07
 c14:	24 81       	ldd	r18, Z+4	; 0x04
 c16:	35 81       	ldd	r19, Z+5	; 0x05
 c18:	42 17       	cp	r20, r18
 c1a:	53 07       	cpc	r21, r19
 c1c:	44 f4       	brge	.+16     	; 0xc2e <fputc+0x38>
 c1e:	a0 81       	ld	r26, Z
 c20:	b1 81       	ldd	r27, Z+1	; 0x01
 c22:	9d 01       	movw	r18, r26
 c24:	2f 5f       	subi	r18, 0xFF	; 255
 c26:	3f 4f       	sbci	r19, 0xFF	; 255
 c28:	31 83       	std	Z+1, r19	; 0x01
 c2a:	20 83       	st	Z, r18
 c2c:	8c 93       	st	X, r24
 c2e:	26 81       	ldd	r18, Z+6	; 0x06
 c30:	37 81       	ldd	r19, Z+7	; 0x07
 c32:	2f 5f       	subi	r18, 0xFF	; 255
 c34:	3f 4f       	sbci	r19, 0xFF	; 255
 c36:	37 83       	std	Z+7, r19	; 0x07
 c38:	26 83       	std	Z+6, r18	; 0x06
 c3a:	14 c0       	rjmp	.+40     	; 0xc64 <fputc+0x6e>
 c3c:	8b 01       	movw	r16, r22
 c3e:	ec 01       	movw	r28, r24
 c40:	fb 01       	movw	r30, r22
 c42:	00 84       	ldd	r0, Z+8	; 0x08
 c44:	f1 85       	ldd	r31, Z+9	; 0x09
 c46:	e0 2d       	mov	r30, r0
 c48:	09 95       	icall
 c4a:	89 2b       	or	r24, r25
 c4c:	e1 f6       	brne	.-72     	; 0xc06 <fputc+0x10>
 c4e:	d8 01       	movw	r26, r16
 c50:	16 96       	adiw	r26, 0x06	; 6
 c52:	8d 91       	ld	r24, X+
 c54:	9c 91       	ld	r25, X
 c56:	17 97       	sbiw	r26, 0x07	; 7
 c58:	01 96       	adiw	r24, 0x01	; 1
 c5a:	17 96       	adiw	r26, 0x07	; 7
 c5c:	9c 93       	st	X, r25
 c5e:	8e 93       	st	-X, r24
 c60:	16 97       	sbiw	r26, 0x06	; 6
 c62:	ce 01       	movw	r24, r28
 c64:	df 91       	pop	r29
 c66:	cf 91       	pop	r28
 c68:	1f 91       	pop	r17
 c6a:	0f 91       	pop	r16
 c6c:	08 95       	ret

00000c6e <__ultoa_invert>:
 c6e:	fa 01       	movw	r30, r20
 c70:	aa 27       	eor	r26, r26
 c72:	28 30       	cpi	r18, 0x08	; 8
 c74:	51 f1       	breq	.+84     	; 0xcca <__ultoa_invert+0x5c>
 c76:	20 31       	cpi	r18, 0x10	; 16
 c78:	81 f1       	breq	.+96     	; 0xcda <__ultoa_invert+0x6c>
 c7a:	e8 94       	clt
 c7c:	6f 93       	push	r22
 c7e:	6e 7f       	andi	r22, 0xFE	; 254
 c80:	6e 5f       	subi	r22, 0xFE	; 254
 c82:	7f 4f       	sbci	r23, 0xFF	; 255
 c84:	8f 4f       	sbci	r24, 0xFF	; 255
 c86:	9f 4f       	sbci	r25, 0xFF	; 255
 c88:	af 4f       	sbci	r26, 0xFF	; 255
 c8a:	b1 e0       	ldi	r27, 0x01	; 1
 c8c:	3e d0       	rcall	.+124    	; 0xd0a <__ultoa_invert+0x9c>
 c8e:	b4 e0       	ldi	r27, 0x04	; 4
 c90:	3c d0       	rcall	.+120    	; 0xd0a <__ultoa_invert+0x9c>
 c92:	67 0f       	add	r22, r23
 c94:	78 1f       	adc	r23, r24
 c96:	89 1f       	adc	r24, r25
 c98:	9a 1f       	adc	r25, r26
 c9a:	a1 1d       	adc	r26, r1
 c9c:	68 0f       	add	r22, r24
 c9e:	79 1f       	adc	r23, r25
 ca0:	8a 1f       	adc	r24, r26
 ca2:	91 1d       	adc	r25, r1
 ca4:	a1 1d       	adc	r26, r1
 ca6:	6a 0f       	add	r22, r26
 ca8:	71 1d       	adc	r23, r1
 caa:	81 1d       	adc	r24, r1
 cac:	91 1d       	adc	r25, r1
 cae:	a1 1d       	adc	r26, r1
 cb0:	20 d0       	rcall	.+64     	; 0xcf2 <__ultoa_invert+0x84>
 cb2:	09 f4       	brne	.+2      	; 0xcb6 <__ultoa_invert+0x48>
 cb4:	68 94       	set
 cb6:	3f 91       	pop	r19
 cb8:	2a e0       	ldi	r18, 0x0A	; 10
 cba:	26 9f       	mul	r18, r22
 cbc:	11 24       	eor	r1, r1
 cbe:	30 19       	sub	r19, r0
 cc0:	30 5d       	subi	r19, 0xD0	; 208
 cc2:	31 93       	st	Z+, r19
 cc4:	de f6       	brtc	.-74     	; 0xc7c <__ultoa_invert+0xe>
 cc6:	cf 01       	movw	r24, r30
 cc8:	08 95       	ret
 cca:	46 2f       	mov	r20, r22
 ccc:	47 70       	andi	r20, 0x07	; 7
 cce:	40 5d       	subi	r20, 0xD0	; 208
 cd0:	41 93       	st	Z+, r20
 cd2:	b3 e0       	ldi	r27, 0x03	; 3
 cd4:	0f d0       	rcall	.+30     	; 0xcf4 <__ultoa_invert+0x86>
 cd6:	c9 f7       	brne	.-14     	; 0xcca <__ultoa_invert+0x5c>
 cd8:	f6 cf       	rjmp	.-20     	; 0xcc6 <__ultoa_invert+0x58>
 cda:	46 2f       	mov	r20, r22
 cdc:	4f 70       	andi	r20, 0x0F	; 15
 cde:	40 5d       	subi	r20, 0xD0	; 208
 ce0:	4a 33       	cpi	r20, 0x3A	; 58
 ce2:	18 f0       	brcs	.+6      	; 0xcea <__ultoa_invert+0x7c>
 ce4:	49 5d       	subi	r20, 0xD9	; 217
 ce6:	31 fd       	sbrc	r19, 1
 ce8:	40 52       	subi	r20, 0x20	; 32
 cea:	41 93       	st	Z+, r20
 cec:	02 d0       	rcall	.+4      	; 0xcf2 <__ultoa_invert+0x84>
 cee:	a9 f7       	brne	.-22     	; 0xcda <__ultoa_invert+0x6c>
 cf0:	ea cf       	rjmp	.-44     	; 0xcc6 <__ultoa_invert+0x58>
 cf2:	b4 e0       	ldi	r27, 0x04	; 4
 cf4:	a6 95       	lsr	r26
 cf6:	97 95       	ror	r25
 cf8:	87 95       	ror	r24
 cfa:	77 95       	ror	r23
 cfc:	67 95       	ror	r22
 cfe:	ba 95       	dec	r27
 d00:	c9 f7       	brne	.-14     	; 0xcf4 <__ultoa_invert+0x86>
 d02:	00 97       	sbiw	r24, 0x00	; 0
 d04:	61 05       	cpc	r22, r1
 d06:	71 05       	cpc	r23, r1
 d08:	08 95       	ret
 d0a:	9b 01       	movw	r18, r22
 d0c:	ac 01       	movw	r20, r24
 d0e:	0a 2e       	mov	r0, r26
 d10:	06 94       	lsr	r0
 d12:	57 95       	ror	r21
 d14:	47 95       	ror	r20
 d16:	37 95       	ror	r19
 d18:	27 95       	ror	r18
 d1a:	ba 95       	dec	r27
 d1c:	c9 f7       	brne	.-14     	; 0xd10 <__ultoa_invert+0xa2>
 d1e:	62 0f       	add	r22, r18
 d20:	73 1f       	adc	r23, r19
 d22:	84 1f       	adc	r24, r20
 d24:	95 1f       	adc	r25, r21
 d26:	a0 1d       	adc	r26, r0
 d28:	08 95       	ret

00000d2a <eeprom_read_word>:
 d2a:	a8 e1       	ldi	r26, 0x18	; 24
 d2c:	b0 e0       	ldi	r27, 0x00	; 0
 d2e:	42 e0       	ldi	r20, 0x02	; 2
 d30:	50 e0       	ldi	r21, 0x00	; 0
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <eeprom_read_blraw>

00000d34 <eeprom_read_block>:
 d34:	dc 01       	movw	r26, r24
 d36:	cb 01       	movw	r24, r22

00000d38 <eeprom_read_blraw>:
 d38:	fc 01       	movw	r30, r24
 d3a:	f9 99       	sbic	0x1f, 1	; 31
 d3c:	fe cf       	rjmp	.-4      	; 0xd3a <eeprom_read_blraw+0x2>
 d3e:	06 c0       	rjmp	.+12     	; 0xd4c <eeprom_read_blraw+0x14>
 d40:	f2 bd       	out	0x22, r31	; 34
 d42:	e1 bd       	out	0x21, r30	; 33
 d44:	f8 9a       	sbi	0x1f, 0	; 31
 d46:	31 96       	adiw	r30, 0x01	; 1
 d48:	00 b4       	in	r0, 0x20	; 32
 d4a:	0d 92       	st	X+, r0
 d4c:	41 50       	subi	r20, 0x01	; 1
 d4e:	50 40       	sbci	r21, 0x00	; 0
 d50:	b8 f7       	brcc	.-18     	; 0xd40 <eeprom_read_blraw+0x8>
 d52:	08 95       	ret

00000d54 <_exit>:
 d54:	f8 94       	cli

00000d56 <__stop_program>:
 d56:	ff cf       	rjmp	.-2      	; 0xd56 <__stop_program>


Canary Software Package.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000afc  00000b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000afc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047c  00800144  00800144  00000bd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020ca  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001106  00000000  00000000  00002eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f4a  00000000  00000000  00003fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00004f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092f  00000000  00000000  0000529c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099e  00000000  00000000  00005bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00006569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8e c0       	rjmp	.+284    	; 0x11e <__ctors_end>
   2:	00 00       	nop
   4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
   6:	00 00       	nop
   8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
   a:	00 00       	nop
   c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
   e:	00 00       	nop
  10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
  12:	00 00       	nop
  14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
  16:	00 00       	nop
  18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
  1e:	00 00       	nop
  20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
  22:	00 00       	nop
  24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
  26:	00 00       	nop
  28:	95 c0       	rjmp	.+298    	; 0x154 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	93 c0       	rjmp	.+294    	; 0x154 <__bad_interrupt>
  2e:	00 00       	nop
  30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__vector_13>
  36:	00 00       	nop
  38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e7 c0       	rjmp	.+462    	; 0x210 <__vector_16>
  42:	00 00       	nop
  44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
  46:	00 00       	nop
  48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
  4e:	00 00       	nop
  50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
  52:	00 00       	nop
  54:	c8 c1       	rjmp	.+912    	; 0x3e6 <__vector_21>
  56:	00 00       	nop
  58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
  5e:	00 00       	nop
  60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
  62:	00 00       	nop
  64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
  66:	00 00       	nop
  68:	f3 c0       	rjmp	.+486    	; 0x250 <__vector_26>
  6a:	00 00       	nop
  6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
  6e:	00 00       	nop
  70:	f6 c1       	rjmp	.+1004   	; 0x45e <__vector_28>
  72:	00 00       	nop
  74:	46 c2       	rjmp	.+1164   	; 0x502 <__vector_29>
  76:	00 00       	nop
  78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	42 01       	movw	r8, r4
  7e:	94 01       	movw	r18, r8
  80:	94 01       	movw	r18, r8
  82:	94 01       	movw	r18, r8
  84:	94 01       	movw	r18, r8
  86:	94 01       	movw	r18, r8
  88:	94 01       	movw	r18, r8
  8a:	94 01       	movw	r18, r8
  8c:	42 01       	movw	r8, r4
  8e:	94 01       	movw	r18, r8
  90:	94 01       	movw	r18, r8
  92:	94 01       	movw	r18, r8
  94:	94 01       	movw	r18, r8
  96:	94 01       	movw	r18, r8
  98:	94 01       	movw	r18, r8
  9a:	94 01       	movw	r18, r8
  9c:	44 01       	movw	r8, r8
  9e:	94 01       	movw	r18, r8
  a0:	94 01       	movw	r18, r8
  a2:	94 01       	movw	r18, r8
  a4:	94 01       	movw	r18, r8
  a6:	94 01       	movw	r18, r8
  a8:	94 01       	movw	r18, r8
  aa:	94 01       	movw	r18, r8
  ac:	94 01       	movw	r18, r8
  ae:	94 01       	movw	r18, r8
  b0:	94 01       	movw	r18, r8
  b2:	94 01       	movw	r18, r8
  b4:	94 01       	movw	r18, r8
  b6:	94 01       	movw	r18, r8
  b8:	94 01       	movw	r18, r8
  ba:	94 01       	movw	r18, r8
  bc:	44 01       	movw	r8, r8
  be:	94 01       	movw	r18, r8
  c0:	94 01       	movw	r18, r8
  c2:	94 01       	movw	r18, r8
  c4:	94 01       	movw	r18, r8
  c6:	94 01       	movw	r18, r8
  c8:	94 01       	movw	r18, r8
  ca:	94 01       	movw	r18, r8
  cc:	94 01       	movw	r18, r8
  ce:	94 01       	movw	r18, r8
  d0:	94 01       	movw	r18, r8
  d2:	94 01       	movw	r18, r8
  d4:	94 01       	movw	r18, r8
  d6:	94 01       	movw	r18, r8
  d8:	94 01       	movw	r18, r8
  da:	94 01       	movw	r18, r8
  dc:	90 01       	movw	r18, r0
  de:	94 01       	movw	r18, r8
  e0:	94 01       	movw	r18, r8
  e2:	94 01       	movw	r18, r8
  e4:	94 01       	movw	r18, r8
  e6:	94 01       	movw	r18, r8
  e8:	94 01       	movw	r18, r8
  ea:	94 01       	movw	r18, r8
  ec:	6d 01       	movw	r12, r26
  ee:	94 01       	movw	r18, r8
  f0:	94 01       	movw	r18, r8
  f2:	94 01       	movw	r18, r8
  f4:	94 01       	movw	r18, r8
  f6:	94 01       	movw	r18, r8
  f8:	94 01       	movw	r18, r8
  fa:	94 01       	movw	r18, r8
  fc:	94 01       	movw	r18, r8
  fe:	94 01       	movw	r18, r8
 100:	94 01       	movw	r18, r8
 102:	94 01       	movw	r18, r8
 104:	94 01       	movw	r18, r8
 106:	94 01       	movw	r18, r8
 108:	94 01       	movw	r18, r8
 10a:	94 01       	movw	r18, r8
 10c:	61 01       	movw	r12, r2
 10e:	94 01       	movw	r18, r8
 110:	94 01       	movw	r18, r8
 112:	94 01       	movw	r18, r8
 114:	94 01       	movw	r18, r8
 116:	94 01       	movw	r18, r8
 118:	94 01       	movw	r18, r8
 11a:	94 01       	movw	r18, r8
 11c:	7f 01       	movw	r14, r30

0000011e <__ctors_end>:
 11e:	11 24       	eor	r1, r1
 120:	1f be       	out	0x3f, r1	; 63
 122:	cf ef       	ldi	r28, 0xFF	; 255
 124:	d8 e0       	ldi	r29, 0x08	; 8
 126:	de bf       	out	0x3e, r29	; 62
 128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_copy_data>:
 12a:	11 e0       	ldi	r17, 0x01	; 1
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b1 e0       	ldi	r27, 0x01	; 1
 130:	ec ef       	ldi	r30, 0xFC	; 252
 132:	fa e0       	ldi	r31, 0x0A	; 10
 134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x10>
 136:	05 90       	lpm	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	a4 34       	cpi	r26, 0x44	; 68
 13c:	b1 07       	cpc	r27, r17
 13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0xc>

00000140 <__do_clear_bss>:
 140:	25 e0       	ldi	r18, 0x05	; 5
 142:	a4 e4       	ldi	r26, 0x44	; 68
 144:	b1 e0       	ldi	r27, 0x01	; 1
 146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
 148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
 14a:	a0 3c       	cpi	r26, 0xC0	; 192
 14c:	b2 07       	cpc	r27, r18
 14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
 150:	0c d0       	rcall	.+24     	; 0x16a <main>
 152:	d2 c4       	rjmp	.+2468   	; 0xaf8 <_exit>

00000154 <__bad_interrupt>:
 154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <canary_io_pin_initialization>:
	}
}

void canary_io_pin_initialization(void) {
	// For Canary, Port B pins 0, 1, and 2 are the red, green, and blue LED feedback pins
	DDRB  = 0x07;
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	84 b9       	out	0x04, r24	; 4
	//
	// Set all LEDs off
	PORTB &= !0x07;
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	15 b8       	out	0x05, r1	; 5
	// The Canary start button is on Port B pin 3.  Set the pull-up resistor for pin 3:
	SetBit(PORTB, PORTB3);
 15e:	2b 9a       	sbi	0x05, 3	; 5
	//
	// Set the Data Direction Register and pullups for the TWI system
	SetBit(DDRC, PORTC0); // Set clock as output
 160:	38 9a       	sbi	0x07, 0	; 7
	SetBit(DDRC, PORTC1); // Data Line as output
 162:	39 9a       	sbi	0x07, 1	; 7
	SetBit(PORTC, PORTC0); //Set pull-up resistor for clock
 164:	40 9a       	sbi	0x08, 0	; 8
	SetBit(PORTC, PORTC1); //Set pull-up resistor for data
 166:	41 9a       	sbi	0x08, 1	; 8
 168:	08 95       	ret

0000016a <main>:
	// *************************************************************************
	//        Initialization code & device configuration
	// *************************************************************************
 	//
	// Set the I/O pins
	canary_io_pin_initialization();
 16a:	f5 df       	rcall	.-22     	; 0x156 <canary_io_pin_initialization>
	//
	// Set a simple counter for the loop below.  Debug only.
	seconds=0;
 16c:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <seconds+0x1>
 170:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <seconds>
	ItsTime=0;
 174:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <ItsTime>
	//
	// set up our output for handling printf and string operations,,,
	stdout = &mystdout0;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	90 93 bd 05 	sts	0x05BD, r25	; 0x8005bd <__iob+0x3>
 180:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <__iob+0x2>
	//
	// Initialize the timer counter 1 for 1Hz interrupt
	initialize_timer_counter_1();
 184:	38 d0       	rcall	.+112    	; 0x1f6 <initialize_timer_counter_1>
	//
	// Initialize timer counter 0 for 100Hz interrupt (used for SD card debug only)
	// initialize_timer_counter_0();  // ONLY ENABLE if using SD card
	//
	// Initialize our main communication to the ground (UART0)
	USART0_init(MYUBRR0);
 186:	81 e8       	ldi	r24, 0x81	; 129
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	e2 d0       	rcall	.+452    	; 0x350 <USART0_init>
	USART1_init(MYUBRR1);
 18c:	81 e8       	ldi	r24, 0x81	; 129
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	53 d1       	rcall	.+678    	; 0x438 <USART1_init>
	//
	// Initialize the TWI peripheral
	TWI_Master_Initialise();
 192:	54 d0       	rcall	.+168    	; 0x23c <TWI_Master_Initialise>
 194:	78 94       	sei
	// ====================================================
	////////////////////////////////////////////////////////////////////////////
 	// *************************************************************************
 	// main loop
 	// *************************************************************************
    printf("Starting main loop.");
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	9f 93       	push	r25
 19c:	8f 93       	push	r24
 19e:	e0 d1       	rcall	.+960    	; 0x560 <printf>
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	03 e2       	ldi	r16, 0x23	; 35
		// The variable ItsTime gets set to 1 every second...
		
		if (ItsTime == 1){ //wait for our 1Hz flag
			ItsTime = 0; 
			seconds++;
			printf("\nSeconds = %u \n", seconds);
 1a6:	11 e0       	ldi	r17, 0x01	; 1
 1a8:	c3 e3       	ldi	r28, 0x33	; 51
			// - do a blocking read of the sensor
			// - Send the data over the serial port
			// - go to the next sensor 
			// ....
			//GPS Message
			printf("Where were are:");
 1aa:	d1 e0       	ldi	r29, 0x01	; 1
 1ac:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <ItsTime>
		// USART0_TransmitByte(USART0_ReceiveByte());
		//////////////////////////////////////////////////////////
		// reached steady state...do nothing for the moment - wait for interrupts.
		// The variable ItsTime gets set to 1 every second...
		
		if (ItsTime == 1){ //wait for our 1Hz flag
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x42>
 1b4:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <ItsTime>
			ItsTime = 0; 
 1b8:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <seconds>
			seconds++;
 1bc:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <seconds+0x1>
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <seconds+0x1>
 1c6:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <seconds>
 1ca:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <seconds>
			printf("\nSeconds = %u \n", seconds);
 1ce:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <seconds+0x1>
 1d2:	9f 93       	push	r25
 1d4:	8f 93       	push	r24
 1d6:	1f 93       	push	r17
 1d8:	0f 93       	push	r16
 1da:	c2 d1       	rcall	.+900    	; 0x560 <printf>
			// - do a blocking read of the sensor
			// - Send the data over the serial port
			// - go to the next sensor 
			// ....
			//GPS Message
			printf("Where were are:");
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	bf d1       	rcall	.+894    	; 0x560 <printf>
 1e2:	8a eb       	ldi	r24, 0xBA	; 186
			USART0_putstring(&messageWant[0]);
 1e4:	94 e0       	ldi	r25, 0x04	; 4
 1e6:	f1 d0       	rcall	.+482    	; 0x3ca <USART0_putstring>
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	db cf       	rjmp	.-74     	; 0x1ac <main+0x42>

000001f6 <initialize_timer_counter_1>:
 1f6:	8d e0       	ldi	r24, 0x0D	; 13
 1f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//  
	// Set the WGM mode and prescaler select in control register B
	TCCR1B = ((1<<WGM12) | (1<<CS12) | (1<<CS10));
	// TCCR1C = 0; Control Register C is reset to 0x00 on startup.
	// Now we need to enter out TOP value in OCR1A
	OCR1A = 19530;
 1fc:	8a e4       	ldi	r24, 0x4A	; 74
 1fe:	9c e4       	ldi	r25, 0x4C	; 76
 200:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 204:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// Now enable the interrupt on the compare register A
	TIMSK1 = (1<<OCIE1A);
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 20e:	08 95       	ret

00000210 <__vector_16>:
*********************************************************************************
********************************************************************************/


// 100Hz timer interrupt generated by OC0A and used by the FATFS code.
EMPTY_INTERRUPT(TIMER0_COMPA_vect);
 210:	18 95       	reti

00000212 <__vector_13>:
}
*/


ISR(TIMER1_COMPA_vect)
{
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
	ToggleBit(PORTB, PORTB1); //for now, just toggle the green status LED
 220:	95 b1       	in	r25, 0x05	; 5
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	89 27       	eor	r24, r25
 226:	85 b9       	out	0x05, r24	; 5
	ItsTime = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <ItsTime>
}
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
 23c:	81 e1       	ldi	r24, 0x11	; 17
 23e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 24e:	08 95       	ret

00000250 <__vector_26>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 26a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 26e:	8e 2f       	mov	r24, r30
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	38 97       	sbiw	r30, 0x08	; 8
 276:	e1 35       	cpi	r30, 0x51	; 81
 278:	f1 05       	cpc	r31, r1
 27a:	08 f0       	brcs	.+2      	; 0x27e <__vector_26+0x2e>
 27c:	55 c0       	rjmp	.+170    	; 0x328 <__vector_26+0xd8>
 27e:	e2 5c       	subi	r30, 0xC2	; 194
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	68 c1       	rjmp	.+720    	; 0x554 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 284:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 288:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end>
 28c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <TWI_msgSize>
 290:	e8 17       	cp	r30, r24
 292:	70 f4       	brcc	.+28     	; 0x2b0 <__vector_26+0x60>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	8e 0f       	add	r24, r30
 298:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	e9 5b       	subi	r30, 0xB9	; 185
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	80 81       	ld	r24, Z
 2a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2a8:	85 e8       	ldi	r24, 0x85	; 133
 2aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2ae:	43 c0       	rjmp	.+134    	; 0x336 <__vector_26+0xe6>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 2b0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <TWI_statusReg>
 2b4:	81 60       	ori	r24, 0x01	; 1
 2b6:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2ba:	84 e9       	ldi	r24, 0x94	; 148
 2bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2c0:	3a c0       	rjmp	.+116    	; 0x336 <__vector_26+0xe6>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 2c2:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	8e 0f       	add	r24, r30
 2ca:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 2ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	e9 5b       	subi	r30, 0xB9	; 185
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 2da:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__data_end>
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <TWI_msgSize>
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	28 17       	cp	r18, r24
 2ea:	39 07       	cpc	r19, r25
 2ec:	24 f4       	brge	.+8      	; 0x2f6 <__vector_26+0xa6>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2ee:	85 ec       	ldi	r24, 0xC5	; 197
 2f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2f4:	20 c0       	rjmp	.+64     	; 0x336 <__vector_26+0xe6>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2f6:	85 e8       	ldi	r24, 0x85	; 133
 2f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2fc:	1c c0       	rjmp	.+56     	; 0x336 <__vector_26+0xe6>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 2fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 302:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end>
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	e9 5b       	subi	r30, 0xB9	; 185
 30a:	fe 4f       	sbci	r31, 0xFE	; 254
 30c:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 30e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <TWI_statusReg>
 312:	81 60       	ori	r24, 0x01	; 1
 314:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 318:	84 e9       	ldi	r24, 0x94	; 148
 31a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 31e:	0b c0       	rjmp	.+22     	; 0x336 <__vector_26+0xe6>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 320:	85 ea       	ldi	r24, 0xA5	; 165
 322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 326:	07 c0       	rjmp	.+14     	; 0x336 <__vector_26+0xe6>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 328:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 32c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TWI_state>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	3f 91       	pop	r19
 344:	2f 91       	pop	r18
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <USART0_init>:
	tmptail = (UART0_RxTail + 1) & UART0_RX_BUFFER_MASK;
	// Store new index 
	UART0_RxTail = tmptail;
	// Return data 
	return UART0_RxBuf[tmptail];
}
 350:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 354:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 358:	88 e9       	ldi	r24, 0x98	; 152
 35a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 35e:	8e e0       	ldi	r24, 0x0E	; 14
 360:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 364:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <UART0_RxTail>
 368:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <UART0_RxHead>
 36c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <UART0_TxTail>
 370:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <UART0_TxHead>
 374:	08 95       	ret

00000376 <USART0_TransmitByte>:

void USART0_TransmitByte(unsigned char data)
{
	unsigned char tmphead;
	// Calculate buffer index
	tmphead = (UART0_TxHead + 1) & UART0_TX_BUFFER_MASK;
 376:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <UART0_TxHead>
 37a:	2f 5f       	subi	r18, 0xFF	; 255
	// Wait for free space in buffer
	while (tmphead == UART0_TxTail);
 37c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <UART0_TxTail>
 380:	29 17       	cp	r18, r25
 382:	e1 f3       	breq	.-8      	; 0x37c <USART0_TransmitByte+0x6>
	// Store data in buffer 
	UART0_TxBuf[tmphead] = data;
 384:	e2 2f       	mov	r30, r18
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	e7 5a       	subi	r30, 0xA7	; 167
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	80 83       	st	Z, r24
	// Store new index 
	UART0_TxHead = tmphead;
 38e:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <UART0_TxHead>
	// Enable UDRE interrupt 
	UCSR0B |= (1<<UDRIE0);
 392:	e1 ec       	ldi	r30, 0xC1	; 193
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	80 62       	ori	r24, 0x20	; 32
 39a:	80 83       	st	Z, r24
 39c:	08 95       	ret

0000039e <USART0_Transmit_IO>:
//This version is used to send formatted strings...
int USART0_Transmit_IO(char data, FILE *stream)
{
	unsigned char tmphead;
	// Calculate buffer index
	tmphead = (UART0_TxHead + 1) & UART0_TX_BUFFER_MASK;
 39e:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <UART0_TxHead>
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
	// Wait for free space in buffer
	while (tmphead == UART0_TxTail);
 3a4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <UART0_TxTail>
 3a8:	29 17       	cp	r18, r25
 3aa:	e1 f3       	breq	.-8      	; 0x3a4 <USART0_Transmit_IO+0x6>
	// Store data in buffer
	UART0_TxBuf[tmphead] = data;
 3ac:	e2 2f       	mov	r30, r18
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	e7 5a       	subi	r30, 0xA7	; 167
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	80 83       	st	Z, r24
	// Store new index
	UART0_TxHead = tmphead;
 3b6:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <UART0_TxHead>
	// Enable UDRE interrupt
	UCSR0B |= (1<<UDRIE0);
 3ba:	e1 ec       	ldi	r30, 0xC1	; 193
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	80 83       	st	Z, r24
	return(0);
}
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	08 95       	ret

000003ca <USART0_putstring>:

// This put string function stops when it reaches the end of a string, which is
// always a null character (0x00) in c.
void USART0_putstring(char* StringPtr) {
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00) {
 3d0:	88 81       	ld	r24, Y
 3d2:	88 23       	and	r24, r24
 3d4:	29 f0       	breq	.+10     	; 0x3e0 <USART0_putstring+0x16>
 3d6:	21 96       	adiw	r28, 0x01	; 1
		USART0_TransmitByte(*StringPtr);
 3d8:	ce df       	rcall	.-100    	; 0x376 <USART0_TransmitByte>
}

// This put string function stops when it reaches the end of a string, which is
// always a null character (0x00) in c.
void USART0_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
 3da:	89 91       	ld	r24, Y+
 3dc:	81 11       	cpse	r24, r1
 3de:	fc cf       	rjmp	.-8      	; 0x3d8 <USART0_putstring+0xe>
		USART0_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <__vector_21>:
	// Store received data in buffer 
	UART0_RxBuf[tmphead] = data;
}*/

ISR(USART0_UDRE_vect)
{
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted 
	if (UART0_TxHead != UART0_TxTail) {
 3f8:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <UART0_TxHead>
 3fc:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <UART0_TxTail>
 400:	98 17       	cp	r25, r24
 402:	61 f0       	breq	.+24     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		// Calculate buffer index
		tmptail = ( UART0_TxTail + 1 ) & UART0_TX_BUFFER_MASK;
 404:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <UART0_TxTail>
 408:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index 
		UART0_TxTail = tmptail;
 40a:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <UART0_TxTail>
		// Start transmission 
		UDR0 = UART0_TxBuf[tmptail];
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	e7 5a       	subi	r30, 0xA7	; 167
 412:	fe 4f       	sbci	r31, 0xFE	; 254
 414:	80 81       	ld	r24, Z
 416:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 41a:	05 c0       	rjmp	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		} else {
		// Disable UDRE interrupt 
		UCSR0B &= ~(1<<UDRIE0);
 41c:	e1 ec       	ldi	r30, 0xC1	; 193
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	8f 7d       	andi	r24, 0xDF	; 223
 424:	80 83       	st	Z, r24
	}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <USART1_init>:
void USART1_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
		USART1_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
 438:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 43c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 440:	88 e9       	ldi	r24, 0x98	; 152
 442:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 44c:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <UART1_RxTail>
 450:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <UART1_RxHead>
 454:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <UART1_TxTail>
 458:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <UART1_TxHead>
 45c:	08 95       	ret

0000045e <__vector_28>:
*********************************************************************************
********************************************************************************/


ISR(USART1_RX_vect)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	cf 93       	push	r28
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
	unsigned char data;
	unsigned char tmphead;
	uint8_t i;
	
	// Read the received data 
	data = UDR1;
 482:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	// Calculate buffer index 
	tmphead = (UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
 486:	c0 91 5e 03 	lds	r28, 0x035E	; 0x80035e <UART1_RxHead>
 48a:	cf 5f       	subi	r28, 0xFF	; 255
	// Store new index 
	UART1_RxHead = tmphead;
 48c:	c0 93 5e 03 	sts	0x035E, r28	; 0x80035e <UART1_RxHead>

	if (tmphead == UART1_RxTail) {
 490:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <UART1_RxTail>
		// ERROR! Receive buffer overflow 
	}
	// Store received data in buffer 
	UART1_RxBuf[tmphead] = data;
 494:	ec 2f       	mov	r30, r28
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	e6 54       	subi	r30, 0x46	; 70
 49a:	fc 4f       	sbci	r31, 0xFC	; 252
 49c:	80 83       	st	Z, r24

	if (data == 10) //See if it is the end of a GPS message...
 49e:	8a 30       	cpi	r24, 0x0A	; 10
 4a0:	f1 f4       	brne	.+60     	; 0x4de <__vector_28+0x80>
	{
		USART0_TransmitByte('n'); // debug statement.  Watch the UART window
 4a2:	8e e6       	ldi	r24, 0x6E	; 110
 4a4:	68 df       	rcall	.-304    	; 0x376 <USART0_TransmitByte>
		if (UART1_RxBuf[5] == 'L')  // If so, see if this is the message we want to capture
 4a6:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <UART1_RxBuf+0x5>
 4aa:	8c 34       	cpi	r24, 0x4C	; 76
		{
			USART0_TransmitByte(UART1_RxBuf[5]); // debug statement.  Watch the UART window
 4ac:	a1 f4       	brne	.+40     	; 0x4d6 <__vector_28+0x78>
 4ae:	63 df       	rcall	.-314    	; 0x376 <USART0_TransmitByte>
			for (i = 0; i<= tmphead; i++) // Copy the full GLL message.
 4b0:	e0 e0       	ldi	r30, 0x00	; 0
			{
				messageWant[i] = UART1_RxBuf[i];
 4b2:	8e 2f       	mov	r24, r30
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	9c 01       	movw	r18, r24
 4b8:	26 54       	subi	r18, 0x46	; 70
 4ba:	3b 4f       	sbci	r19, 0xFB	; 251
 4bc:	86 54       	subi	r24, 0x46	; 70
 4be:	9c 4f       	sbci	r25, 0xFC	; 252
 4c0:	dc 01       	movw	r26, r24
 4c2:	8c 91       	ld	r24, X
 4c4:	d9 01       	movw	r26, r18
 4c6:	8c 93       	st	X, r24
	{
		USART0_TransmitByte('n'); // debug statement.  Watch the UART window
		if (UART1_RxBuf[5] == 'L')  // If so, see if this is the message we want to capture
		{
			USART0_TransmitByte(UART1_RxBuf[5]); // debug statement.  Watch the UART window
			for (i = 0; i<= tmphead; i++) // Copy the full GLL message.
 4c8:	ef 5f       	subi	r30, 0xFF	; 255
 4ca:	ce 17       	cp	r28, r30
 4cc:	90 f7       	brcc	.-28     	; 0x4b2 <__vector_28+0x54>
			{
				messageWant[i] = UART1_RxBuf[i];
			}
			messageWant[i+1]=0x00; //Add a null character at the end so we can treat this like a string variable
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	e6 54       	subi	r30, 0x46	; 70
 4d2:	fb 4f       	sbci	r31, 0xFB	; 251
 4d4:	11 82       	std	Z+1, r1	; 0x01
		}
		// Zero the receive buffer so it is ready for the next message format.
		UART1_RxTail = 0;
 4d6:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <UART1_RxTail>
		UART1_RxHead = 0;
 4da:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <UART1_RxHead>
	}
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	cf 91       	pop	r28
 4e4:	bf 91       	pop	r27
 4e6:	af 91       	pop	r26
 4e8:	9f 91       	pop	r25
 4ea:	8f 91       	pop	r24
 4ec:	7f 91       	pop	r23
 4ee:	6f 91       	pop	r22
 4f0:	5f 91       	pop	r21
 4f2:	4f 91       	pop	r20
 4f4:	3f 91       	pop	r19
 4f6:	2f 91       	pop	r18
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <__vector_29>:

ISR(USART1_UDRE_vect)
{
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
 510:	ef 93       	push	r30
 512:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted 
	if (UART1_TxHead != UART1_TxTail) {
 514:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <UART1_TxHead>
 518:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <UART1_TxTail>
 51c:	98 17       	cp	r25, r24
 51e:	61 f0       	breq	.+24     	; 0x538 <__vector_29+0x36>
		// Calculate buffer index
		tmptail = ( UART1_TxTail + 1 ) & UART1_TX_BUFFER_MASK;
 520:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <UART1_TxTail>
 524:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index 
		UART1_TxTail = tmptail;
 526:	e0 93 5b 02 	sts	0x025B, r30	; 0x80025b <UART1_TxTail>
		// Start transmission 
		UDR1 = UART1_TxBuf[tmptail];
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	e3 5a       	subi	r30, 0xA3	; 163
 52e:	fd 4f       	sbci	r31, 0xFD	; 253
 530:	80 81       	ld	r24, Z
 532:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 536:	05 c0       	rjmp	.+10     	; 0x542 <__vector_29+0x40>
		} else {
		// Disable UDRE interrupt 
		UCSR1B &= ~(1<<UDRIE1);
 538:	e9 ec       	ldi	r30, 0xC9	; 201
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	8f 7d       	andi	r24, 0xDF	; 223
 540:	80 83       	st	Z, r24
	}
 542:	ff 91       	pop	r31
 544:	ef 91       	pop	r30
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <__tablejump2__>:
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	05 90       	lpm	r0, Z+
 55a:	f4 91       	lpm	r31, Z
 55c:	e0 2d       	mov	r30, r0
 55e:	09 94       	ijmp

00000560 <printf>:
 560:	a0 e0       	ldi	r26, 0x00	; 0
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	e5 eb       	ldi	r30, 0xB5	; 181
 566:	f2 e0       	ldi	r31, 0x02	; 2
 568:	a0 c2       	rjmp	.+1344   	; 0xaaa <__prologue_saves__+0x20>
 56a:	ae 01       	movw	r20, r28
 56c:	4b 5f       	subi	r20, 0xFB	; 251
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	fa 01       	movw	r30, r20
 572:	61 91       	ld	r22, Z+
 574:	71 91       	ld	r23, Z+
 576:	af 01       	movw	r20, r30
 578:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <__iob+0x2>
 57c:	90 91 bd 05 	lds	r25, 0x05BD	; 0x8005bd <__iob+0x3>
 580:	02 d0       	rcall	.+4      	; 0x586 <vfprintf>
 582:	e2 e0       	ldi	r30, 0x02	; 2
 584:	ae c2       	rjmp	.+1372   	; 0xae2 <__epilogue_restores__+0x20>

00000586 <vfprintf>:
 586:	ab e0       	ldi	r26, 0x0B	; 11
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	e8 ec       	ldi	r30, 0xC8	; 200
 58c:	f2 e0       	ldi	r31, 0x02	; 2
 58e:	7d c2       	rjmp	.+1274   	; 0xa8a <__prologue_saves__>
 590:	6c 01       	movw	r12, r24
 592:	7b 01       	movw	r14, r22
 594:	8a 01       	movw	r16, r20
 596:	fc 01       	movw	r30, r24
 598:	17 82       	std	Z+7, r1	; 0x07
 59a:	16 82       	std	Z+6, r1	; 0x06
 59c:	83 81       	ldd	r24, Z+3	; 0x03
 59e:	81 ff       	sbrs	r24, 1
 5a0:	bf c1       	rjmp	.+894    	; 0x920 <__stack+0x21>
 5a2:	ce 01       	movw	r24, r28
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	3c 01       	movw	r6, r24
 5a8:	f6 01       	movw	r30, r12
 5aa:	93 81       	ldd	r25, Z+3	; 0x03
 5ac:	f7 01       	movw	r30, r14
 5ae:	93 fd       	sbrc	r25, 3
 5b0:	85 91       	lpm	r24, Z+
 5b2:	93 ff       	sbrs	r25, 3
 5b4:	81 91       	ld	r24, Z+
 5b6:	7f 01       	movw	r14, r30
 5b8:	88 23       	and	r24, r24
 5ba:	09 f4       	brne	.+2      	; 0x5be <vfprintf+0x38>
 5bc:	ad c1       	rjmp	.+858    	; 0x918 <__stack+0x19>
 5be:	85 32       	cpi	r24, 0x25	; 37
 5c0:	39 f4       	brne	.+14     	; 0x5d0 <vfprintf+0x4a>
 5c2:	93 fd       	sbrc	r25, 3
 5c4:	85 91       	lpm	r24, Z+
 5c6:	93 ff       	sbrs	r25, 3
 5c8:	81 91       	ld	r24, Z+
 5ca:	7f 01       	movw	r14, r30
 5cc:	85 32       	cpi	r24, 0x25	; 37
 5ce:	21 f4       	brne	.+8      	; 0x5d8 <vfprintf+0x52>
 5d0:	b6 01       	movw	r22, r12
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	c0 d1       	rcall	.+896    	; 0x956 <fputc>
 5d6:	e8 cf       	rjmp	.-48     	; 0x5a8 <vfprintf+0x22>
 5d8:	91 2c       	mov	r9, r1
 5da:	21 2c       	mov	r2, r1
 5dc:	31 2c       	mov	r3, r1
 5de:	ff e1       	ldi	r31, 0x1F	; 31
 5e0:	f3 15       	cp	r31, r3
 5e2:	d8 f0       	brcs	.+54     	; 0x61a <vfprintf+0x94>
 5e4:	8b 32       	cpi	r24, 0x2B	; 43
 5e6:	79 f0       	breq	.+30     	; 0x606 <vfprintf+0x80>
 5e8:	38 f4       	brcc	.+14     	; 0x5f8 <vfprintf+0x72>
 5ea:	80 32       	cpi	r24, 0x20	; 32
 5ec:	79 f0       	breq	.+30     	; 0x60c <vfprintf+0x86>
 5ee:	83 32       	cpi	r24, 0x23	; 35
 5f0:	a1 f4       	brne	.+40     	; 0x61a <vfprintf+0x94>
 5f2:	23 2d       	mov	r18, r3
 5f4:	20 61       	ori	r18, 0x10	; 16
 5f6:	1d c0       	rjmp	.+58     	; 0x632 <vfprintf+0xac>
 5f8:	8d 32       	cpi	r24, 0x2D	; 45
 5fa:	61 f0       	breq	.+24     	; 0x614 <vfprintf+0x8e>
 5fc:	80 33       	cpi	r24, 0x30	; 48
 5fe:	69 f4       	brne	.+26     	; 0x61a <vfprintf+0x94>
 600:	23 2d       	mov	r18, r3
 602:	21 60       	ori	r18, 0x01	; 1
 604:	16 c0       	rjmp	.+44     	; 0x632 <vfprintf+0xac>
 606:	83 2d       	mov	r24, r3
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	38 2e       	mov	r3, r24
 60c:	e3 2d       	mov	r30, r3
 60e:	e4 60       	ori	r30, 0x04	; 4
 610:	3e 2e       	mov	r3, r30
 612:	2a c0       	rjmp	.+84     	; 0x668 <vfprintf+0xe2>
 614:	f3 2d       	mov	r31, r3
 616:	f8 60       	ori	r31, 0x08	; 8
 618:	1d c0       	rjmp	.+58     	; 0x654 <vfprintf+0xce>
 61a:	37 fc       	sbrc	r3, 7
 61c:	2d c0       	rjmp	.+90     	; 0x678 <vfprintf+0xf2>
 61e:	20 ed       	ldi	r18, 0xD0	; 208
 620:	28 0f       	add	r18, r24
 622:	2a 30       	cpi	r18, 0x0A	; 10
 624:	40 f0       	brcs	.+16     	; 0x636 <vfprintf+0xb0>
 626:	8e 32       	cpi	r24, 0x2E	; 46
 628:	b9 f4       	brne	.+46     	; 0x658 <vfprintf+0xd2>
 62a:	36 fc       	sbrc	r3, 6
 62c:	75 c1       	rjmp	.+746    	; 0x918 <__stack+0x19>
 62e:	23 2d       	mov	r18, r3
 630:	20 64       	ori	r18, 0x40	; 64
 632:	32 2e       	mov	r3, r18
 634:	19 c0       	rjmp	.+50     	; 0x668 <vfprintf+0xe2>
 636:	36 fe       	sbrs	r3, 6
 638:	06 c0       	rjmp	.+12     	; 0x646 <vfprintf+0xc0>
 63a:	8a e0       	ldi	r24, 0x0A	; 10
 63c:	98 9e       	mul	r9, r24
 63e:	20 0d       	add	r18, r0
 640:	11 24       	eor	r1, r1
 642:	92 2e       	mov	r9, r18
 644:	11 c0       	rjmp	.+34     	; 0x668 <vfprintf+0xe2>
 646:	ea e0       	ldi	r30, 0x0A	; 10
 648:	2e 9e       	mul	r2, r30
 64a:	20 0d       	add	r18, r0
 64c:	11 24       	eor	r1, r1
 64e:	22 2e       	mov	r2, r18
 650:	f3 2d       	mov	r31, r3
 652:	f0 62       	ori	r31, 0x20	; 32
 654:	3f 2e       	mov	r3, r31
 656:	08 c0       	rjmp	.+16     	; 0x668 <vfprintf+0xe2>
 658:	8c 36       	cpi	r24, 0x6C	; 108
 65a:	21 f4       	brne	.+8      	; 0x664 <vfprintf+0xde>
 65c:	83 2d       	mov	r24, r3
 65e:	80 68       	ori	r24, 0x80	; 128
 660:	38 2e       	mov	r3, r24
 662:	02 c0       	rjmp	.+4      	; 0x668 <vfprintf+0xe2>
 664:	88 36       	cpi	r24, 0x68	; 104
 666:	41 f4       	brne	.+16     	; 0x678 <vfprintf+0xf2>
 668:	f7 01       	movw	r30, r14
 66a:	93 fd       	sbrc	r25, 3
 66c:	85 91       	lpm	r24, Z+
 66e:	93 ff       	sbrs	r25, 3
 670:	81 91       	ld	r24, Z+
 672:	7f 01       	movw	r14, r30
 674:	81 11       	cpse	r24, r1
 676:	b3 cf       	rjmp	.-154    	; 0x5de <vfprintf+0x58>
 678:	98 2f       	mov	r25, r24
 67a:	9f 7d       	andi	r25, 0xDF	; 223
 67c:	95 54       	subi	r25, 0x45	; 69
 67e:	93 30       	cpi	r25, 0x03	; 3
 680:	28 f4       	brcc	.+10     	; 0x68c <vfprintf+0x106>
 682:	0c 5f       	subi	r16, 0xFC	; 252
 684:	1f 4f       	sbci	r17, 0xFF	; 255
 686:	9f e3       	ldi	r25, 0x3F	; 63
 688:	99 83       	std	Y+1, r25	; 0x01
 68a:	0d c0       	rjmp	.+26     	; 0x6a6 <vfprintf+0x120>
 68c:	83 36       	cpi	r24, 0x63	; 99
 68e:	31 f0       	breq	.+12     	; 0x69c <vfprintf+0x116>
 690:	83 37       	cpi	r24, 0x73	; 115
 692:	71 f0       	breq	.+28     	; 0x6b0 <vfprintf+0x12a>
 694:	83 35       	cpi	r24, 0x53	; 83
 696:	09 f0       	breq	.+2      	; 0x69a <vfprintf+0x114>
 698:	55 c0       	rjmp	.+170    	; 0x744 <vfprintf+0x1be>
 69a:	20 c0       	rjmp	.+64     	; 0x6dc <vfprintf+0x156>
 69c:	f8 01       	movw	r30, r16
 69e:	80 81       	ld	r24, Z
 6a0:	89 83       	std	Y+1, r24	; 0x01
 6a2:	0e 5f       	subi	r16, 0xFE	; 254
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	88 24       	eor	r8, r8
 6a8:	83 94       	inc	r8
 6aa:	91 2c       	mov	r9, r1
 6ac:	53 01       	movw	r10, r6
 6ae:	12 c0       	rjmp	.+36     	; 0x6d4 <vfprintf+0x14e>
 6b0:	28 01       	movw	r4, r16
 6b2:	f2 e0       	ldi	r31, 0x02	; 2
 6b4:	4f 0e       	add	r4, r31
 6b6:	51 1c       	adc	r5, r1
 6b8:	f8 01       	movw	r30, r16
 6ba:	a0 80       	ld	r10, Z
 6bc:	b1 80       	ldd	r11, Z+1	; 0x01
 6be:	36 fe       	sbrs	r3, 6
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <vfprintf+0x142>
 6c2:	69 2d       	mov	r22, r9
 6c4:	70 e0       	ldi	r23, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <vfprintf+0x146>
 6c8:	6f ef       	ldi	r22, 0xFF	; 255
 6ca:	7f ef       	ldi	r23, 0xFF	; 255
 6cc:	c5 01       	movw	r24, r10
 6ce:	38 d1       	rcall	.+624    	; 0x940 <strnlen>
 6d0:	4c 01       	movw	r8, r24
 6d2:	82 01       	movw	r16, r4
 6d4:	f3 2d       	mov	r31, r3
 6d6:	ff 77       	andi	r31, 0x7F	; 127
 6d8:	3f 2e       	mov	r3, r31
 6da:	15 c0       	rjmp	.+42     	; 0x706 <vfprintf+0x180>
 6dc:	28 01       	movw	r4, r16
 6de:	22 e0       	ldi	r18, 0x02	; 2
 6e0:	42 0e       	add	r4, r18
 6e2:	51 1c       	adc	r5, r1
 6e4:	f8 01       	movw	r30, r16
 6e6:	a0 80       	ld	r10, Z
 6e8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ea:	36 fe       	sbrs	r3, 6
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <vfprintf+0x16e>
 6ee:	69 2d       	mov	r22, r9
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <vfprintf+0x172>
 6f4:	6f ef       	ldi	r22, 0xFF	; 255
 6f6:	7f ef       	ldi	r23, 0xFF	; 255
 6f8:	c5 01       	movw	r24, r10
 6fa:	17 d1       	rcall	.+558    	; 0x92a <strnlen_P>
 6fc:	4c 01       	movw	r8, r24
 6fe:	f3 2d       	mov	r31, r3
 700:	f0 68       	ori	r31, 0x80	; 128
 702:	3f 2e       	mov	r3, r31
 704:	82 01       	movw	r16, r4
 706:	33 fc       	sbrc	r3, 3
 708:	19 c0       	rjmp	.+50     	; 0x73c <vfprintf+0x1b6>
 70a:	82 2d       	mov	r24, r2
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	88 16       	cp	r8, r24
 710:	99 06       	cpc	r9, r25
 712:	a0 f4       	brcc	.+40     	; 0x73c <vfprintf+0x1b6>
 714:	b6 01       	movw	r22, r12
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	1d d1       	rcall	.+570    	; 0x956 <fputc>
 71c:	2a 94       	dec	r2
 71e:	f5 cf       	rjmp	.-22     	; 0x70a <vfprintf+0x184>
 720:	f5 01       	movw	r30, r10
 722:	37 fc       	sbrc	r3, 7
 724:	85 91       	lpm	r24, Z+
 726:	37 fe       	sbrs	r3, 7
 728:	81 91       	ld	r24, Z+
 72a:	5f 01       	movw	r10, r30
 72c:	b6 01       	movw	r22, r12
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	12 d1       	rcall	.+548    	; 0x956 <fputc>
 732:	21 10       	cpse	r2, r1
 734:	2a 94       	dec	r2
 736:	21 e0       	ldi	r18, 0x01	; 1
 738:	82 1a       	sub	r8, r18
 73a:	91 08       	sbc	r9, r1
 73c:	81 14       	cp	r8, r1
 73e:	91 04       	cpc	r9, r1
 740:	79 f7       	brne	.-34     	; 0x720 <vfprintf+0x19a>
 742:	e1 c0       	rjmp	.+450    	; 0x906 <__stack+0x7>
 744:	84 36       	cpi	r24, 0x64	; 100
 746:	11 f0       	breq	.+4      	; 0x74c <vfprintf+0x1c6>
 748:	89 36       	cpi	r24, 0x69	; 105
 74a:	39 f5       	brne	.+78     	; 0x79a <vfprintf+0x214>
 74c:	f8 01       	movw	r30, r16
 74e:	37 fe       	sbrs	r3, 7
 750:	07 c0       	rjmp	.+14     	; 0x760 <vfprintf+0x1da>
 752:	60 81       	ld	r22, Z
 754:	71 81       	ldd	r23, Z+1	; 0x01
 756:	82 81       	ldd	r24, Z+2	; 0x02
 758:	93 81       	ldd	r25, Z+3	; 0x03
 75a:	0c 5f       	subi	r16, 0xFC	; 252
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	08 c0       	rjmp	.+16     	; 0x770 <vfprintf+0x1ea>
 760:	60 81       	ld	r22, Z
 762:	71 81       	ldd	r23, Z+1	; 0x01
 764:	07 2e       	mov	r0, r23
 766:	00 0c       	add	r0, r0
 768:	88 0b       	sbc	r24, r24
 76a:	99 0b       	sbc	r25, r25
 76c:	0e 5f       	subi	r16, 0xFE	; 254
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	f3 2d       	mov	r31, r3
 772:	ff 76       	andi	r31, 0x6F	; 111
 774:	3f 2e       	mov	r3, r31
 776:	97 ff       	sbrs	r25, 7
 778:	09 c0       	rjmp	.+18     	; 0x78c <vfprintf+0x206>
 77a:	90 95       	com	r25
 77c:	80 95       	com	r24
 77e:	70 95       	com	r23
 780:	61 95       	neg	r22
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	f0 68       	ori	r31, 0x80	; 128
 78a:	3f 2e       	mov	r3, r31
 78c:	2a e0       	ldi	r18, 0x0A	; 10
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	a3 01       	movw	r20, r6
 792:	1d d1       	rcall	.+570    	; 0x9ce <__ultoa_invert>
 794:	88 2e       	mov	r8, r24
 796:	86 18       	sub	r8, r6
 798:	44 c0       	rjmp	.+136    	; 0x822 <vfprintf+0x29c>
 79a:	85 37       	cpi	r24, 0x75	; 117
 79c:	31 f4       	brne	.+12     	; 0x7aa <vfprintf+0x224>
 79e:	23 2d       	mov	r18, r3
 7a0:	2f 7e       	andi	r18, 0xEF	; 239
 7a2:	b2 2e       	mov	r11, r18
 7a4:	2a e0       	ldi	r18, 0x0A	; 10
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	25 c0       	rjmp	.+74     	; 0x7f4 <vfprintf+0x26e>
 7aa:	93 2d       	mov	r25, r3
 7ac:	99 7f       	andi	r25, 0xF9	; 249
 7ae:	b9 2e       	mov	r11, r25
 7b0:	8f 36       	cpi	r24, 0x6F	; 111
 7b2:	c1 f0       	breq	.+48     	; 0x7e4 <vfprintf+0x25e>
 7b4:	18 f4       	brcc	.+6      	; 0x7bc <vfprintf+0x236>
 7b6:	88 35       	cpi	r24, 0x58	; 88
 7b8:	79 f0       	breq	.+30     	; 0x7d8 <vfprintf+0x252>
 7ba:	ae c0       	rjmp	.+348    	; 0x918 <__stack+0x19>
 7bc:	80 37       	cpi	r24, 0x70	; 112
 7be:	19 f0       	breq	.+6      	; 0x7c6 <vfprintf+0x240>
 7c0:	88 37       	cpi	r24, 0x78	; 120
 7c2:	21 f0       	breq	.+8      	; 0x7cc <vfprintf+0x246>
 7c4:	a9 c0       	rjmp	.+338    	; 0x918 <__stack+0x19>
 7c6:	e9 2f       	mov	r30, r25
 7c8:	e0 61       	ori	r30, 0x10	; 16
 7ca:	be 2e       	mov	r11, r30
 7cc:	b4 fe       	sbrs	r11, 4
 7ce:	0d c0       	rjmp	.+26     	; 0x7ea <vfprintf+0x264>
 7d0:	fb 2d       	mov	r31, r11
 7d2:	f4 60       	ori	r31, 0x04	; 4
 7d4:	bf 2e       	mov	r11, r31
 7d6:	09 c0       	rjmp	.+18     	; 0x7ea <vfprintf+0x264>
 7d8:	34 fe       	sbrs	r3, 4
 7da:	0a c0       	rjmp	.+20     	; 0x7f0 <vfprintf+0x26a>
 7dc:	29 2f       	mov	r18, r25
 7de:	26 60       	ori	r18, 0x06	; 6
 7e0:	b2 2e       	mov	r11, r18
 7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <vfprintf+0x26a>
 7e4:	28 e0       	ldi	r18, 0x08	; 8
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <vfprintf+0x26e>
 7ea:	20 e1       	ldi	r18, 0x10	; 16
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x26e>
 7f0:	20 e1       	ldi	r18, 0x10	; 16
 7f2:	32 e0       	ldi	r19, 0x02	; 2
 7f4:	f8 01       	movw	r30, r16
 7f6:	b7 fe       	sbrs	r11, 7
 7f8:	07 c0       	rjmp	.+14     	; 0x808 <vfprintf+0x282>
 7fa:	60 81       	ld	r22, Z
 7fc:	71 81       	ldd	r23, Z+1	; 0x01
 7fe:	82 81       	ldd	r24, Z+2	; 0x02
 800:	93 81       	ldd	r25, Z+3	; 0x03
 802:	0c 5f       	subi	r16, 0xFC	; 252
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	06 c0       	rjmp	.+12     	; 0x814 <vfprintf+0x28e>
 808:	60 81       	ld	r22, Z
 80a:	71 81       	ldd	r23, Z+1	; 0x01
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 5f       	subi	r16, 0xFE	; 254
 812:	1f 4f       	sbci	r17, 0xFF	; 255
 814:	a3 01       	movw	r20, r6
 816:	db d0       	rcall	.+438    	; 0x9ce <__ultoa_invert>
 818:	88 2e       	mov	r8, r24
 81a:	86 18       	sub	r8, r6
 81c:	fb 2d       	mov	r31, r11
 81e:	ff 77       	andi	r31, 0x7F	; 127
 820:	3f 2e       	mov	r3, r31
 822:	36 fe       	sbrs	r3, 6
 824:	0d c0       	rjmp	.+26     	; 0x840 <vfprintf+0x2ba>
 826:	23 2d       	mov	r18, r3
 828:	2e 7f       	andi	r18, 0xFE	; 254
 82a:	a2 2e       	mov	r10, r18
 82c:	89 14       	cp	r8, r9
 82e:	58 f4       	brcc	.+22     	; 0x846 <vfprintf+0x2c0>
 830:	34 fe       	sbrs	r3, 4
 832:	0b c0       	rjmp	.+22     	; 0x84a <vfprintf+0x2c4>
 834:	32 fc       	sbrc	r3, 2
 836:	09 c0       	rjmp	.+18     	; 0x84a <vfprintf+0x2c4>
 838:	83 2d       	mov	r24, r3
 83a:	8e 7e       	andi	r24, 0xEE	; 238
 83c:	a8 2e       	mov	r10, r24
 83e:	05 c0       	rjmp	.+10     	; 0x84a <vfprintf+0x2c4>
 840:	b8 2c       	mov	r11, r8
 842:	a3 2c       	mov	r10, r3
 844:	03 c0       	rjmp	.+6      	; 0x84c <vfprintf+0x2c6>
 846:	b8 2c       	mov	r11, r8
 848:	01 c0       	rjmp	.+2      	; 0x84c <vfprintf+0x2c6>
 84a:	b9 2c       	mov	r11, r9
 84c:	a4 fe       	sbrs	r10, 4
 84e:	0f c0       	rjmp	.+30     	; 0x86e <vfprintf+0x2e8>
 850:	fe 01       	movw	r30, r28
 852:	e8 0d       	add	r30, r8
 854:	f1 1d       	adc	r31, r1
 856:	80 81       	ld	r24, Z
 858:	80 33       	cpi	r24, 0x30	; 48
 85a:	21 f4       	brne	.+8      	; 0x864 <vfprintf+0x2de>
 85c:	9a 2d       	mov	r25, r10
 85e:	99 7e       	andi	r25, 0xE9	; 233
 860:	a9 2e       	mov	r10, r25
 862:	09 c0       	rjmp	.+18     	; 0x876 <vfprintf+0x2f0>
 864:	a2 fe       	sbrs	r10, 2
 866:	06 c0       	rjmp	.+12     	; 0x874 <vfprintf+0x2ee>
 868:	b3 94       	inc	r11
 86a:	b3 94       	inc	r11
 86c:	04 c0       	rjmp	.+8      	; 0x876 <vfprintf+0x2f0>
 86e:	8a 2d       	mov	r24, r10
 870:	86 78       	andi	r24, 0x86	; 134
 872:	09 f0       	breq	.+2      	; 0x876 <vfprintf+0x2f0>
 874:	b3 94       	inc	r11
 876:	a3 fc       	sbrc	r10, 3
 878:	10 c0       	rjmp	.+32     	; 0x89a <vfprintf+0x314>
 87a:	a0 fe       	sbrs	r10, 0
 87c:	06 c0       	rjmp	.+12     	; 0x88a <vfprintf+0x304>
 87e:	b2 14       	cp	r11, r2
 880:	80 f4       	brcc	.+32     	; 0x8a2 <vfprintf+0x31c>
 882:	28 0c       	add	r2, r8
 884:	92 2c       	mov	r9, r2
 886:	9b 18       	sub	r9, r11
 888:	0d c0       	rjmp	.+26     	; 0x8a4 <vfprintf+0x31e>
 88a:	b2 14       	cp	r11, r2
 88c:	58 f4       	brcc	.+22     	; 0x8a4 <vfprintf+0x31e>
 88e:	b6 01       	movw	r22, r12
 890:	80 e2       	ldi	r24, 0x20	; 32
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	60 d0       	rcall	.+192    	; 0x956 <fputc>
 896:	b3 94       	inc	r11
 898:	f8 cf       	rjmp	.-16     	; 0x88a <vfprintf+0x304>
 89a:	b2 14       	cp	r11, r2
 89c:	18 f4       	brcc	.+6      	; 0x8a4 <vfprintf+0x31e>
 89e:	2b 18       	sub	r2, r11
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <vfprintf+0x320>
 8a2:	98 2c       	mov	r9, r8
 8a4:	21 2c       	mov	r2, r1
 8a6:	a4 fe       	sbrs	r10, 4
 8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <vfprintf+0x342>
 8aa:	b6 01       	movw	r22, r12
 8ac:	80 e3       	ldi	r24, 0x30	; 48
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	52 d0       	rcall	.+164    	; 0x956 <fputc>
 8b2:	a2 fe       	sbrs	r10, 2
 8b4:	16 c0       	rjmp	.+44     	; 0x8e2 <vfprintf+0x35c>
 8b6:	a1 fc       	sbrc	r10, 1
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <vfprintf+0x33a>
 8ba:	88 e7       	ldi	r24, 0x78	; 120
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <vfprintf+0x33e>
 8c0:	88 e5       	ldi	r24, 0x58	; 88
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	b6 01       	movw	r22, r12
 8c6:	0c c0       	rjmp	.+24     	; 0x8e0 <vfprintf+0x35a>
 8c8:	8a 2d       	mov	r24, r10
 8ca:	86 78       	andi	r24, 0x86	; 134
 8cc:	51 f0       	breq	.+20     	; 0x8e2 <vfprintf+0x35c>
 8ce:	a1 fe       	sbrs	r10, 1
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <vfprintf+0x350>
 8d2:	8b e2       	ldi	r24, 0x2B	; 43
 8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <vfprintf+0x352>
 8d6:	80 e2       	ldi	r24, 0x20	; 32
 8d8:	a7 fc       	sbrc	r10, 7
 8da:	8d e2       	ldi	r24, 0x2D	; 45
 8dc:	b6 01       	movw	r22, r12
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	3a d0       	rcall	.+116    	; 0x956 <fputc>
 8e2:	89 14       	cp	r8, r9
 8e4:	30 f4       	brcc	.+12     	; 0x8f2 <vfprintf+0x36c>
 8e6:	b6 01       	movw	r22, r12
 8e8:	80 e3       	ldi	r24, 0x30	; 48
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	34 d0       	rcall	.+104    	; 0x956 <fputc>
 8ee:	9a 94       	dec	r9
 8f0:	f8 cf       	rjmp	.-16     	; 0x8e2 <vfprintf+0x35c>
 8f2:	8a 94       	dec	r8
 8f4:	f3 01       	movw	r30, r6
 8f6:	e8 0d       	add	r30, r8
 8f8:	f1 1d       	adc	r31, r1
 8fa:	80 81       	ld	r24, Z
 8fc:	b6 01       	movw	r22, r12
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	2a d0       	rcall	.+84     	; 0x956 <fputc>
 902:	81 10       	cpse	r8, r1
 904:	f6 cf       	rjmp	.-20     	; 0x8f2 <vfprintf+0x36c>
 906:	22 20       	and	r2, r2
 908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xd>
 90a:	4e ce       	rjmp	.-868    	; 0x5a8 <vfprintf+0x22>
 90c:	b6 01       	movw	r22, r12
 90e:	80 e2       	ldi	r24, 0x20	; 32
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	21 d0       	rcall	.+66     	; 0x956 <fputc>
 914:	2a 94       	dec	r2
 916:	f7 cf       	rjmp	.-18     	; 0x906 <__stack+0x7>
 918:	f6 01       	movw	r30, r12
 91a:	86 81       	ldd	r24, Z+6	; 0x06
 91c:	97 81       	ldd	r25, Z+7	; 0x07
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	9f ef       	ldi	r25, 0xFF	; 255
 924:	2b 96       	adiw	r28, 0x0b	; 11
 926:	e2 e1       	ldi	r30, 0x12	; 18
 928:	cc c0       	rjmp	.+408    	; 0xac2 <__epilogue_restores__>

0000092a <strnlen_P>:
 92a:	fc 01       	movw	r30, r24
 92c:	05 90       	lpm	r0, Z+
 92e:	61 50       	subi	r22, 0x01	; 1
 930:	70 40       	sbci	r23, 0x00	; 0
 932:	01 10       	cpse	r0, r1
 934:	d8 f7       	brcc	.-10     	; 0x92c <strnlen_P+0x2>
 936:	80 95       	com	r24
 938:	90 95       	com	r25
 93a:	8e 0f       	add	r24, r30
 93c:	9f 1f       	adc	r25, r31
 93e:	08 95       	ret

00000940 <strnlen>:
 940:	fc 01       	movw	r30, r24
 942:	61 50       	subi	r22, 0x01	; 1
 944:	70 40       	sbci	r23, 0x00	; 0
 946:	01 90       	ld	r0, Z+
 948:	01 10       	cpse	r0, r1
 94a:	d8 f7       	brcc	.-10     	; 0x942 <strnlen+0x2>
 94c:	80 95       	com	r24
 94e:	90 95       	com	r25
 950:	8e 0f       	add	r24, r30
 952:	9f 1f       	adc	r25, r31
 954:	08 95       	ret

00000956 <fputc>:
 956:	0f 93       	push	r16
 958:	1f 93       	push	r17
 95a:	cf 93       	push	r28
 95c:	df 93       	push	r29
 95e:	fb 01       	movw	r30, r22
 960:	23 81       	ldd	r18, Z+3	; 0x03
 962:	21 fd       	sbrc	r18, 1
 964:	03 c0       	rjmp	.+6      	; 0x96c <fputc+0x16>
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	9f ef       	ldi	r25, 0xFF	; 255
 96a:	2c c0       	rjmp	.+88     	; 0x9c4 <fputc+0x6e>
 96c:	22 ff       	sbrs	r18, 2
 96e:	16 c0       	rjmp	.+44     	; 0x99c <fputc+0x46>
 970:	46 81       	ldd	r20, Z+6	; 0x06
 972:	57 81       	ldd	r21, Z+7	; 0x07
 974:	24 81       	ldd	r18, Z+4	; 0x04
 976:	35 81       	ldd	r19, Z+5	; 0x05
 978:	42 17       	cp	r20, r18
 97a:	53 07       	cpc	r21, r19
 97c:	44 f4       	brge	.+16     	; 0x98e <fputc+0x38>
 97e:	a0 81       	ld	r26, Z
 980:	b1 81       	ldd	r27, Z+1	; 0x01
 982:	9d 01       	movw	r18, r26
 984:	2f 5f       	subi	r18, 0xFF	; 255
 986:	3f 4f       	sbci	r19, 0xFF	; 255
 988:	31 83       	std	Z+1, r19	; 0x01
 98a:	20 83       	st	Z, r18
 98c:	8c 93       	st	X, r24
 98e:	26 81       	ldd	r18, Z+6	; 0x06
 990:	37 81       	ldd	r19, Z+7	; 0x07
 992:	2f 5f       	subi	r18, 0xFF	; 255
 994:	3f 4f       	sbci	r19, 0xFF	; 255
 996:	37 83       	std	Z+7, r19	; 0x07
 998:	26 83       	std	Z+6, r18	; 0x06
 99a:	14 c0       	rjmp	.+40     	; 0x9c4 <fputc+0x6e>
 99c:	8b 01       	movw	r16, r22
 99e:	ec 01       	movw	r28, r24
 9a0:	fb 01       	movw	r30, r22
 9a2:	00 84       	ldd	r0, Z+8	; 0x08
 9a4:	f1 85       	ldd	r31, Z+9	; 0x09
 9a6:	e0 2d       	mov	r30, r0
 9a8:	09 95       	icall
 9aa:	89 2b       	or	r24, r25
 9ac:	e1 f6       	brne	.-72     	; 0x966 <fputc+0x10>
 9ae:	d8 01       	movw	r26, r16
 9b0:	16 96       	adiw	r26, 0x06	; 6
 9b2:	8d 91       	ld	r24, X+
 9b4:	9c 91       	ld	r25, X
 9b6:	17 97       	sbiw	r26, 0x07	; 7
 9b8:	01 96       	adiw	r24, 0x01	; 1
 9ba:	17 96       	adiw	r26, 0x07	; 7
 9bc:	9c 93       	st	X, r25
 9be:	8e 93       	st	-X, r24
 9c0:	16 97       	sbiw	r26, 0x06	; 6
 9c2:	ce 01       	movw	r24, r28
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	08 95       	ret

000009ce <__ultoa_invert>:
 9ce:	fa 01       	movw	r30, r20
 9d0:	aa 27       	eor	r26, r26
 9d2:	28 30       	cpi	r18, 0x08	; 8
 9d4:	51 f1       	breq	.+84     	; 0xa2a <__ultoa_invert+0x5c>
 9d6:	20 31       	cpi	r18, 0x10	; 16
 9d8:	81 f1       	breq	.+96     	; 0xa3a <__ultoa_invert+0x6c>
 9da:	e8 94       	clt
 9dc:	6f 93       	push	r22
 9de:	6e 7f       	andi	r22, 0xFE	; 254
 9e0:	6e 5f       	subi	r22, 0xFE	; 254
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255
 9e4:	8f 4f       	sbci	r24, 0xFF	; 255
 9e6:	9f 4f       	sbci	r25, 0xFF	; 255
 9e8:	af 4f       	sbci	r26, 0xFF	; 255
 9ea:	b1 e0       	ldi	r27, 0x01	; 1
 9ec:	3e d0       	rcall	.+124    	; 0xa6a <__ultoa_invert+0x9c>
 9ee:	b4 e0       	ldi	r27, 0x04	; 4
 9f0:	3c d0       	rcall	.+120    	; 0xa6a <__ultoa_invert+0x9c>
 9f2:	67 0f       	add	r22, r23
 9f4:	78 1f       	adc	r23, r24
 9f6:	89 1f       	adc	r24, r25
 9f8:	9a 1f       	adc	r25, r26
 9fa:	a1 1d       	adc	r26, r1
 9fc:	68 0f       	add	r22, r24
 9fe:	79 1f       	adc	r23, r25
 a00:	8a 1f       	adc	r24, r26
 a02:	91 1d       	adc	r25, r1
 a04:	a1 1d       	adc	r26, r1
 a06:	6a 0f       	add	r22, r26
 a08:	71 1d       	adc	r23, r1
 a0a:	81 1d       	adc	r24, r1
 a0c:	91 1d       	adc	r25, r1
 a0e:	a1 1d       	adc	r26, r1
 a10:	20 d0       	rcall	.+64     	; 0xa52 <__ultoa_invert+0x84>
 a12:	09 f4       	brne	.+2      	; 0xa16 <__ultoa_invert+0x48>
 a14:	68 94       	set
 a16:	3f 91       	pop	r19
 a18:	2a e0       	ldi	r18, 0x0A	; 10
 a1a:	26 9f       	mul	r18, r22
 a1c:	11 24       	eor	r1, r1
 a1e:	30 19       	sub	r19, r0
 a20:	30 5d       	subi	r19, 0xD0	; 208
 a22:	31 93       	st	Z+, r19
 a24:	de f6       	brtc	.-74     	; 0x9dc <__ultoa_invert+0xe>
 a26:	cf 01       	movw	r24, r30
 a28:	08 95       	ret
 a2a:	46 2f       	mov	r20, r22
 a2c:	47 70       	andi	r20, 0x07	; 7
 a2e:	40 5d       	subi	r20, 0xD0	; 208
 a30:	41 93       	st	Z+, r20
 a32:	b3 e0       	ldi	r27, 0x03	; 3
 a34:	0f d0       	rcall	.+30     	; 0xa54 <__ultoa_invert+0x86>
 a36:	c9 f7       	brne	.-14     	; 0xa2a <__ultoa_invert+0x5c>
 a38:	f6 cf       	rjmp	.-20     	; 0xa26 <__ultoa_invert+0x58>
 a3a:	46 2f       	mov	r20, r22
 a3c:	4f 70       	andi	r20, 0x0F	; 15
 a3e:	40 5d       	subi	r20, 0xD0	; 208
 a40:	4a 33       	cpi	r20, 0x3A	; 58
 a42:	18 f0       	brcs	.+6      	; 0xa4a <__ultoa_invert+0x7c>
 a44:	49 5d       	subi	r20, 0xD9	; 217
 a46:	31 fd       	sbrc	r19, 1
 a48:	40 52       	subi	r20, 0x20	; 32
 a4a:	41 93       	st	Z+, r20
 a4c:	02 d0       	rcall	.+4      	; 0xa52 <__ultoa_invert+0x84>
 a4e:	a9 f7       	brne	.-22     	; 0xa3a <__ultoa_invert+0x6c>
 a50:	ea cf       	rjmp	.-44     	; 0xa26 <__ultoa_invert+0x58>
 a52:	b4 e0       	ldi	r27, 0x04	; 4
 a54:	a6 95       	lsr	r26
 a56:	97 95       	ror	r25
 a58:	87 95       	ror	r24
 a5a:	77 95       	ror	r23
 a5c:	67 95       	ror	r22
 a5e:	ba 95       	dec	r27
 a60:	c9 f7       	brne	.-14     	; 0xa54 <__ultoa_invert+0x86>
 a62:	00 97       	sbiw	r24, 0x00	; 0
 a64:	61 05       	cpc	r22, r1
 a66:	71 05       	cpc	r23, r1
 a68:	08 95       	ret
 a6a:	9b 01       	movw	r18, r22
 a6c:	ac 01       	movw	r20, r24
 a6e:	0a 2e       	mov	r0, r26
 a70:	06 94       	lsr	r0
 a72:	57 95       	ror	r21
 a74:	47 95       	ror	r20
 a76:	37 95       	ror	r19
 a78:	27 95       	ror	r18
 a7a:	ba 95       	dec	r27
 a7c:	c9 f7       	brne	.-14     	; 0xa70 <__ultoa_invert+0xa2>
 a7e:	62 0f       	add	r22, r18
 a80:	73 1f       	adc	r23, r19
 a82:	84 1f       	adc	r24, r20
 a84:	95 1f       	adc	r25, r21
 a86:	a0 1d       	adc	r26, r0
 a88:	08 95       	ret

00000a8a <__prologue_saves__>:
 a8a:	2f 92       	push	r2
 a8c:	3f 92       	push	r3
 a8e:	4f 92       	push	r4
 a90:	5f 92       	push	r5
 a92:	6f 92       	push	r6
 a94:	7f 92       	push	r7
 a96:	8f 92       	push	r8
 a98:	9f 92       	push	r9
 a9a:	af 92       	push	r10
 a9c:	bf 92       	push	r11
 a9e:	cf 92       	push	r12
 aa0:	df 92       	push	r13
 aa2:	ef 92       	push	r14
 aa4:	ff 92       	push	r15
 aa6:	0f 93       	push	r16
 aa8:	1f 93       	push	r17
 aaa:	cf 93       	push	r28
 aac:	df 93       	push	r29
 aae:	cd b7       	in	r28, 0x3d	; 61
 ab0:	de b7       	in	r29, 0x3e	; 62
 ab2:	ca 1b       	sub	r28, r26
 ab4:	db 0b       	sbc	r29, r27
 ab6:	0f b6       	in	r0, 0x3f	; 63
 ab8:	f8 94       	cli
 aba:	de bf       	out	0x3e, r29	; 62
 abc:	0f be       	out	0x3f, r0	; 63
 abe:	cd bf       	out	0x3d, r28	; 61
 ac0:	09 94       	ijmp

00000ac2 <__epilogue_restores__>:
 ac2:	2a 88       	ldd	r2, Y+18	; 0x12
 ac4:	39 88       	ldd	r3, Y+17	; 0x11
 ac6:	48 88       	ldd	r4, Y+16	; 0x10
 ac8:	5f 84       	ldd	r5, Y+15	; 0x0f
 aca:	6e 84       	ldd	r6, Y+14	; 0x0e
 acc:	7d 84       	ldd	r7, Y+13	; 0x0d
 ace:	8c 84       	ldd	r8, Y+12	; 0x0c
 ad0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ad2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ad4:	b9 84       	ldd	r11, Y+9	; 0x09
 ad6:	c8 84       	ldd	r12, Y+8	; 0x08
 ad8:	df 80       	ldd	r13, Y+7	; 0x07
 ada:	ee 80       	ldd	r14, Y+6	; 0x06
 adc:	fd 80       	ldd	r15, Y+5	; 0x05
 ade:	0c 81       	ldd	r16, Y+4	; 0x04
 ae0:	1b 81       	ldd	r17, Y+3	; 0x03
 ae2:	aa 81       	ldd	r26, Y+2	; 0x02
 ae4:	b9 81       	ldd	r27, Y+1	; 0x01
 ae6:	ce 0f       	add	r28, r30
 ae8:	d1 1d       	adc	r29, r1
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	f8 94       	cli
 aee:	de bf       	out	0x3e, r29	; 62
 af0:	0f be       	out	0x3f, r0	; 63
 af2:	cd bf       	out	0x3d, r28	; 61
 af4:	ed 01       	movw	r28, r26
 af6:	08 95       	ret

00000af8 <_exit>:
 af8:	f8 94       	cli

00000afa <__stop_program>:
 afa:	ff cf       	rjmp	.-2      	; 0xafa <__stop_program>

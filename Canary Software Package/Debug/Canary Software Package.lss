
Canary Software Package.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00001114  000011a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b1  0080015c  0080015c  00001204  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004065  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d1  00000000  00000000  00005565  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000191b  00000000  00000000  00006936  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  00008254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f30  00000000  00000000  00008950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029bf  00000000  00000000  00009880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000c23f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
      26:	00 00       	nop
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9d c0       	rjmp	.+314    	; 0x168 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	ea c3       	rjmp	.+2004   	; 0x80a <__vector_13>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e3 c3       	rjmp	.+1990   	; 0x808 <__vector_16>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c5       	rjmp	.+2606   	; 0xa84 <__vector_21>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
      66:	00 00       	nop
      68:	3e c4       	rjmp	.+2172   	; 0x8e6 <__vector_26>
      6a:	00 00       	nop
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	36 c5       	rjmp	.+2668   	; 0xade <__vector_28>
      72:	00 00       	nop
      74:	57 c5       	rjmp	.+2734   	; 0xb24 <__vector_29>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8f 04       	cpc	r8, r15
      8e:	e1 04       	cpc	r14, r1
      90:	e1 04       	cpc	r14, r1
      92:	e1 04       	cpc	r14, r1
      94:	e1 04       	cpc	r14, r1
      96:	e1 04       	cpc	r14, r1
      98:	e1 04       	cpc	r14, r1
      9a:	e1 04       	cpc	r14, r1
      9c:	8f 04       	cpc	r8, r15
      9e:	e1 04       	cpc	r14, r1
      a0:	e1 04       	cpc	r14, r1
      a2:	e1 04       	cpc	r14, r1
      a4:	e1 04       	cpc	r14, r1
      a6:	e1 04       	cpc	r14, r1
      a8:	e1 04       	cpc	r14, r1
      aa:	e1 04       	cpc	r14, r1
      ac:	91 04       	cpc	r9, r1
      ae:	e1 04       	cpc	r14, r1
      b0:	e1 04       	cpc	r14, r1
      b2:	e1 04       	cpc	r14, r1
      b4:	e1 04       	cpc	r14, r1
      b6:	e1 04       	cpc	r14, r1
      b8:	e1 04       	cpc	r14, r1
      ba:	e1 04       	cpc	r14, r1
      bc:	e1 04       	cpc	r14, r1
      be:	e1 04       	cpc	r14, r1
      c0:	e1 04       	cpc	r14, r1
      c2:	e1 04       	cpc	r14, r1
      c4:	e1 04       	cpc	r14, r1
      c6:	e1 04       	cpc	r14, r1
      c8:	e1 04       	cpc	r14, r1
      ca:	e1 04       	cpc	r14, r1
      cc:	91 04       	cpc	r9, r1
      ce:	e1 04       	cpc	r14, r1
      d0:	e1 04       	cpc	r14, r1
      d2:	e1 04       	cpc	r14, r1
      d4:	e1 04       	cpc	r14, r1
      d6:	e1 04       	cpc	r14, r1
      d8:	e1 04       	cpc	r14, r1
      da:	e1 04       	cpc	r14, r1
      dc:	e1 04       	cpc	r14, r1
      de:	e1 04       	cpc	r14, r1
      e0:	e1 04       	cpc	r14, r1
      e2:	e1 04       	cpc	r14, r1
      e4:	e1 04       	cpc	r14, r1
      e6:	e1 04       	cpc	r14, r1
      e8:	e1 04       	cpc	r14, r1
      ea:	e1 04       	cpc	r14, r1
      ec:	dd 04       	cpc	r13, r13
      ee:	e1 04       	cpc	r14, r1
      f0:	e1 04       	cpc	r14, r1
      f2:	e1 04       	cpc	r14, r1
      f4:	e1 04       	cpc	r14, r1
      f6:	e1 04       	cpc	r14, r1
      f8:	e1 04       	cpc	r14, r1
      fa:	e1 04       	cpc	r14, r1
      fc:	ba 04       	cpc	r11, r10
      fe:	e1 04       	cpc	r14, r1
     100:	e1 04       	cpc	r14, r1
     102:	e1 04       	cpc	r14, r1
     104:	e1 04       	cpc	r14, r1
     106:	e1 04       	cpc	r14, r1
     108:	e1 04       	cpc	r14, r1
     10a:	e1 04       	cpc	r14, r1
     10c:	e1 04       	cpc	r14, r1
     10e:	e1 04       	cpc	r14, r1
     110:	e1 04       	cpc	r14, r1
     112:	e1 04       	cpc	r14, r1
     114:	e1 04       	cpc	r14, r1
     116:	e1 04       	cpc	r14, r1
     118:	e1 04       	cpc	r14, r1
     11a:	e1 04       	cpc	r14, r1
     11c:	ae 04       	cpc	r10, r14
     11e:	e1 04       	cpc	r14, r1
     120:	e1 04       	cpc	r14, r1
     122:	e1 04       	cpc	r14, r1
     124:	e1 04       	cpc	r14, r1
     126:	e1 04       	cpc	r14, r1
     128:	e1 04       	cpc	r14, r1
     12a:	e1 04       	cpc	r14, r1
     12c:	cc 04       	cpc	r12, r12

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e4       	ldi	r29, 0x40	; 64
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e4 e1       	ldi	r30, 0x14	; 20
     142:	f1 e1       	ldi	r31, 0x11	; 17
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	ac 35       	cpi	r26, 0x5C	; 92
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	26 e0       	ldi	r18, 0x06	; 6
     156:	ac e5       	ldi	r26, 0x5C	; 92
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	ad 30       	cpi	r26, 0x0D	; 13
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	fb d2       	rcall	.+1526   	; 0x75c <main>
     166:	d4 c7       	rjmp	.+4008   	; 0x1110 <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <null_ptr_check>:
	} else {
		rslt = BME280_E_NULL_PTR;
	}

	return rslt;
}
     16a:	fc 01       	movw	r30, r24
     16c:	89 2b       	or	r24, r25
     16e:	81 f0       	breq	.+32     	; 0x190 <null_ptr_check+0x26>
     170:	83 81       	ldd	r24, Z+3	; 0x03
     172:	94 81       	ldd	r25, Z+4	; 0x04
     174:	89 2b       	or	r24, r25
     176:	71 f0       	breq	.+28     	; 0x194 <null_ptr_check+0x2a>
     178:	85 81       	ldd	r24, Z+5	; 0x05
     17a:	96 81       	ldd	r25, Z+6	; 0x06
     17c:	89 2b       	or	r24, r25
     17e:	61 f0       	breq	.+24     	; 0x198 <null_ptr_check+0x2e>
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	27 81       	ldd	r18, Z+7	; 0x07
     184:	30 85       	ldd	r19, Z+8	; 0x08
     186:	23 2b       	or	r18, r19
     188:	09 f0       	breq	.+2      	; 0x18c <null_ptr_check+0x22>
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	81 95       	neg	r24
     18e:	08 95       	ret
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	08 95       	ret
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	08 95       	ret
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	08 95       	ret

0000019c <bme280_get_regs>:
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	1f 93       	push	r17
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	18 2f       	mov	r17, r24
     1ac:	7b 01       	movw	r14, r22
     1ae:	6a 01       	movw	r12, r20
     1b0:	e9 01       	movw	r28, r18
     1b2:	c9 01       	movw	r24, r18
     1b4:	da df       	rcall	.-76     	; 0x16a <null_ptr_check>
     1b6:	81 11       	cpse	r24, r1
     1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <bme280_get_regs+0x38>
     1ba:	8a 81       	ldd	r24, Y+2	; 0x02
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	09 f0       	breq	.+2      	; 0x1c2 <bme280_get_regs+0x26>
     1c0:	10 68       	ori	r17, 0x80	; 128
     1c2:	eb 81       	ldd	r30, Y+3	; 0x03
     1c4:	fc 81       	ldd	r31, Y+4	; 0x04
     1c6:	96 01       	movw	r18, r12
     1c8:	a7 01       	movw	r20, r14
     1ca:	61 2f       	mov	r22, r17
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	09 95       	icall
     1d0:	81 11       	cpse	r24, r1
     1d2:	8c ef       	ldi	r24, 0xFC	; 252
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	df 90       	pop	r13
     1e0:	cf 90       	pop	r12
     1e2:	08 95       	ret

000001e4 <bme280_set_regs>:
     1e4:	bf 92       	push	r11
     1e6:	cf 92       	push	r12
     1e8:	df 92       	push	r13
     1ea:	ef 92       	push	r14
     1ec:	ff 92       	push	r15
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	64 97       	sbiw	r28, 0x14	; 20
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
     206:	6c 01       	movw	r12, r24
     208:	8b 01       	movw	r16, r22
     20a:	79 01       	movw	r14, r18
     20c:	b4 2e       	mov	r11, r20
     20e:	8a e0       	ldi	r24, 0x0A	; 10
     210:	84 17       	cp	r24, r20
     212:	20 f4       	brcc	.+8      	; 0x21c <bme280_set_regs+0x38>
     214:	0f 2e       	mov	r0, r31
     216:	fa e0       	ldi	r31, 0x0A	; 10
     218:	bf 2e       	mov	r11, r31
     21a:	f0 2d       	mov	r31, r0
     21c:	c7 01       	movw	r24, r14
     21e:	a5 df       	rcall	.-182    	; 0x16a <null_ptr_check>
     220:	81 11       	cpse	r24, r1
     222:	51 c0       	rjmp	.+162    	; 0x2c6 <bme280_set_regs+0xe2>
     224:	c1 14       	cp	r12, r1
     226:	d1 04       	cpc	r13, r1
     228:	09 f4       	brne	.+2      	; 0x22c <bme280_set_regs+0x48>
     22a:	4f c0       	rjmp	.+158    	; 0x2ca <bme280_set_regs+0xe6>
     22c:	01 15       	cp	r16, r1
     22e:	11 05       	cpc	r17, r1
     230:	09 f4       	brne	.+2      	; 0x234 <bme280_set_regs+0x50>
     232:	4d c0       	rjmp	.+154    	; 0x2ce <bme280_set_regs+0xea>
     234:	bb 20       	and	r11, r11
     236:	09 f4       	brne	.+2      	; 0x23a <bme280_set_regs+0x56>
     238:	4c c0       	rjmp	.+152    	; 0x2d2 <bme280_set_regs+0xee>
     23a:	d8 01       	movw	r26, r16
     23c:	8c 91       	ld	r24, X
     23e:	89 83       	std	Y+1, r24	; 0x01
     240:	f7 01       	movw	r30, r14
     242:	82 81       	ldd	r24, Z+2	; 0x02
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	09 f4       	brne	.+2      	; 0x24a <bme280_set_regs+0x66>
     248:	46 c0       	rjmp	.+140    	; 0x2d6 <bme280_set_regs+0xf2>
     24a:	f6 01       	movw	r30, r12
     24c:	2f ef       	ldi	r18, 0xFF	; 255
     24e:	2b 0d       	add	r18, r11
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	2f 5f       	subi	r18, 0xFF	; 255
     254:	3f 4f       	sbci	r19, 0xFF	; 255
     256:	2c 0d       	add	r18, r12
     258:	3d 1d       	adc	r19, r13
     25a:	80 81       	ld	r24, Z
     25c:	8f 77       	andi	r24, 0x7F	; 127
     25e:	81 93       	st	Z+, r24
     260:	e2 17       	cp	r30, r18
     262:	f3 07       	cpc	r31, r19
     264:	d1 f7       	brne	.-12     	; 0x25a <bme280_set_regs+0x76>
     266:	f1 e0       	ldi	r31, 0x01	; 1
     268:	fb 15       	cp	r31, r11
     26a:	c8 f4       	brcc	.+50     	; 0x29e <bme280_set_regs+0xba>
     26c:	96 01       	movw	r18, r12
     26e:	2f 5f       	subi	r18, 0xFF	; 255
     270:	3f 4f       	sbci	r19, 0xFF	; 255
     272:	fe 01       	movw	r30, r28
     274:	31 96       	adiw	r30, 0x01	; 1
     276:	0f 5f       	subi	r16, 0xFF	; 255
     278:	1f 4f       	sbci	r17, 0xFF	; 255
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	d9 01       	movw	r26, r18
     27e:	9d 91       	ld	r25, X+
     280:	9d 01       	movw	r18, r26
     282:	91 83       	std	Z+1, r25	; 0x01
     284:	d8 01       	movw	r26, r16
     286:	9d 91       	ld	r25, X+
     288:	8d 01       	movw	r16, r26
     28a:	92 83       	std	Z+2, r25	; 0x02
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	32 96       	adiw	r30, 0x02	; 2
     290:	8b 15       	cp	r24, r11
     292:	a0 f3       	brcs	.-24     	; 0x27c <bme280_set_regs+0x98>
     294:	2b 2d       	mov	r18, r11
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	22 0f       	add	r18, r18
     29a:	33 1f       	adc	r19, r19
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <bme280_set_regs+0xbe>
     29e:	2b 2d       	mov	r18, r11
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	d7 01       	movw	r26, r14
     2a4:	15 96       	adiw	r26, 0x05	; 5
     2a6:	ed 91       	ld	r30, X+
     2a8:	fc 91       	ld	r31, X
     2aa:	16 97       	sbiw	r26, 0x06	; 6
     2ac:	ae 01       	movw	r20, r28
     2ae:	4f 5f       	subi	r20, 0xFF	; 255
     2b0:	5f 4f       	sbci	r21, 0xFF	; 255
     2b2:	d6 01       	movw	r26, r12
     2b4:	6c 91       	ld	r22, X
     2b6:	d7 01       	movw	r26, r14
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	8c 91       	ld	r24, X
     2bc:	09 95       	icall
     2be:	88 23       	and	r24, r24
     2c0:	71 f0       	breq	.+28     	; 0x2de <bme280_set_regs+0xfa>
     2c2:	8c ef       	ldi	r24, 0xFC	; 252
     2c4:	0c c0       	rjmp	.+24     	; 0x2de <bme280_set_regs+0xfa>
     2c6:	8f ef       	ldi	r24, 0xFF	; 255
     2c8:	0a c0       	rjmp	.+20     	; 0x2de <bme280_set_regs+0xfa>
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	08 c0       	rjmp	.+16     	; 0x2de <bme280_set_regs+0xfa>
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	06 c0       	rjmp	.+12     	; 0x2de <bme280_set_regs+0xfa>
     2d2:	8d ef       	ldi	r24, 0xFD	; 253
     2d4:	04 c0       	rjmp	.+8      	; 0x2de <bme280_set_regs+0xfa>
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	bb 15       	cp	r27, r11
     2da:	40 f2       	brcs	.-112    	; 0x26c <bme280_set_regs+0x88>
     2dc:	e0 cf       	rjmp	.-64     	; 0x29e <bme280_set_regs+0xba>
     2de:	64 96       	adiw	r28, 0x14	; 20
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	08 95       	ret

000002fe <bme280_soft_reset>:
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	00 d0       	rcall	.+0      	; 0x30a <bme280_soft_reset+0xc>
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	7c 01       	movw	r14, r24
     310:	80 ee       	ldi	r24, 0xE0	; 224
     312:	89 83       	std	Y+1, r24	; 0x01
     314:	86 eb       	ldi	r24, 0xB6	; 182
     316:	8a 83       	std	Y+2, r24	; 0x02
     318:	c7 01       	movw	r24, r14
     31a:	27 df       	rcall	.-434    	; 0x16a <null_ptr_check>
     31c:	18 2f       	mov	r17, r24
     31e:	81 11       	cpse	r24, r1
     320:	13 c0       	rjmp	.+38     	; 0x348 <bme280_soft_reset+0x4a>
     322:	97 01       	movw	r18, r14
     324:	41 e0       	ldi	r20, 0x01	; 1
     326:	be 01       	movw	r22, r28
     328:	6e 5f       	subi	r22, 0xFE	; 254
     32a:	7f 4f       	sbci	r23, 0xFF	; 255
     32c:	ce 01       	movw	r24, r28
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	59 df       	rcall	.-334    	; 0x1e4 <bme280_set_regs>
     332:	18 2f       	mov	r17, r24
     334:	d7 01       	movw	r26, r14
     336:	17 96       	adiw	r26, 0x07	; 7
     338:	ed 91       	ld	r30, X+
     33a:	fc 91       	ld	r31, X
     33c:	18 97       	sbiw	r26, 0x08	; 8
     33e:	62 e0       	ldi	r22, 0x02	; 2
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	09 95       	icall
     348:	81 2f       	mov	r24, r17
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	08 95       	ret

0000035a <bme280_init>:
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	6b 97       	sbiw	r28, 0x1b	; 27
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
     374:	7c 01       	movw	r14, r24
     376:	19 82       	std	Y+1, r1	; 0x01
     378:	f8 de       	rcall	.-528    	; 0x16a <null_ptr_check>
     37a:	81 11       	cpse	r24, r1
     37c:	e3 c0       	rjmp	.+454    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     37e:	15 e0       	ldi	r17, 0x05	; 5
     380:	97 01       	movw	r18, r14
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	be 01       	movw	r22, r28
     388:	6f 5f       	subi	r22, 0xFF	; 255
     38a:	7f 4f       	sbci	r23, 0xFF	; 255
     38c:	80 ed       	ldi	r24, 0xD0	; 208
     38e:	06 df       	rcall	.-500    	; 0x19c <bme280_get_regs>
     390:	81 11       	cpse	r24, r1
     392:	c6 c0       	rjmp	.+396    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	80 36       	cpi	r24, 0x60	; 96
     398:	09 f0       	breq	.+2      	; 0x39c <bme280_init+0x42>
     39a:	c2 c0       	rjmp	.+388    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     39c:	d7 01       	movw	r26, r14
     39e:	8c 93       	st	X, r24
     3a0:	c7 01       	movw	r24, r14
     3a2:	ad df       	rcall	.-166    	; 0x2fe <bme280_soft_reset>
     3a4:	81 11       	cpse	r24, r1
     3a6:	cb c0       	rjmp	.+406    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     3a8:	be 01       	movw	r22, r28
     3aa:	6e 5f       	subi	r22, 0xFE	; 254
     3ac:	7f 4f       	sbci	r23, 0xFF	; 255
     3ae:	8a e1       	ldi	r24, 0x1A	; 26
     3b0:	fb 01       	movw	r30, r22
     3b2:	11 92       	st	Z+, r1
     3b4:	8a 95       	dec	r24
     3b6:	e9 f7       	brne	.-6      	; 0x3b2 <bme280_init+0x58>
     3b8:	97 01       	movw	r18, r14
     3ba:	4a e1       	ldi	r20, 0x1A	; 26
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	88 e8       	ldi	r24, 0x88	; 136
     3c0:	ed de       	rcall	.-550    	; 0x19c <bme280_get_regs>
     3c2:	81 11       	cpse	r24, r1
     3c4:	bc c0       	rjmp	.+376    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     3c6:	8b 81       	ldd	r24, Y+3	; 0x03
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	98 2f       	mov	r25, r24
     3cc:	88 27       	eor	r24, r24
     3ce:	2a 81       	ldd	r18, Y+2	; 0x02
     3d0:	82 2b       	or	r24, r18
     3d2:	d7 01       	movw	r26, r14
     3d4:	1a 96       	adiw	r26, 0x0a	; 10
     3d6:	9c 93       	st	X, r25
     3d8:	8e 93       	st	-X, r24
     3da:	19 97       	sbiw	r26, 0x09	; 9
     3dc:	8d 81       	ldd	r24, Y+5	; 0x05
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	98 2f       	mov	r25, r24
     3e2:	88 27       	eor	r24, r24
     3e4:	2c 81       	ldd	r18, Y+4	; 0x04
     3e6:	82 2b       	or	r24, r18
     3e8:	1c 96       	adiw	r26, 0x0c	; 12
     3ea:	9c 93       	st	X, r25
     3ec:	8e 93       	st	-X, r24
     3ee:	1b 97       	sbiw	r26, 0x0b	; 11
     3f0:	8f 81       	ldd	r24, Y+7	; 0x07
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	98 2f       	mov	r25, r24
     3f6:	88 27       	eor	r24, r24
     3f8:	2e 81       	ldd	r18, Y+6	; 0x06
     3fa:	82 2b       	or	r24, r18
     3fc:	1e 96       	adiw	r26, 0x0e	; 14
     3fe:	9c 93       	st	X, r25
     400:	8e 93       	st	-X, r24
     402:	1d 97       	sbiw	r26, 0x0d	; 13
     404:	89 85       	ldd	r24, Y+9	; 0x09
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	98 2f       	mov	r25, r24
     40a:	88 27       	eor	r24, r24
     40c:	28 85       	ldd	r18, Y+8	; 0x08
     40e:	82 2b       	or	r24, r18
     410:	50 96       	adiw	r26, 0x10	; 16
     412:	9c 93       	st	X, r25
     414:	8e 93       	st	-X, r24
     416:	1f 97       	sbiw	r26, 0x0f	; 15
     418:	8b 85       	ldd	r24, Y+11	; 0x0b
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	98 2f       	mov	r25, r24
     41e:	88 27       	eor	r24, r24
     420:	2a 85       	ldd	r18, Y+10	; 0x0a
     422:	82 2b       	or	r24, r18
     424:	52 96       	adiw	r26, 0x12	; 18
     426:	9c 93       	st	X, r25
     428:	8e 93       	st	-X, r24
     42a:	51 97       	sbiw	r26, 0x11	; 17
     42c:	8d 85       	ldd	r24, Y+13	; 0x0d
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	98 2f       	mov	r25, r24
     432:	88 27       	eor	r24, r24
     434:	2c 85       	ldd	r18, Y+12	; 0x0c
     436:	82 2b       	or	r24, r18
     438:	54 96       	adiw	r26, 0x14	; 20
     43a:	9c 93       	st	X, r25
     43c:	8e 93       	st	-X, r24
     43e:	53 97       	sbiw	r26, 0x13	; 19
     440:	8f 85       	ldd	r24, Y+15	; 0x0f
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	98 2f       	mov	r25, r24
     446:	88 27       	eor	r24, r24
     448:	2e 85       	ldd	r18, Y+14	; 0x0e
     44a:	82 2b       	or	r24, r18
     44c:	56 96       	adiw	r26, 0x16	; 22
     44e:	9c 93       	st	X, r25
     450:	8e 93       	st	-X, r24
     452:	55 97       	sbiw	r26, 0x15	; 21
     454:	89 89       	ldd	r24, Y+17	; 0x11
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	98 2f       	mov	r25, r24
     45a:	88 27       	eor	r24, r24
     45c:	28 89       	ldd	r18, Y+16	; 0x10
     45e:	82 2b       	or	r24, r18
     460:	58 96       	adiw	r26, 0x18	; 24
     462:	9c 93       	st	X, r25
     464:	8e 93       	st	-X, r24
     466:	57 97       	sbiw	r26, 0x17	; 23
     468:	8b 89       	ldd	r24, Y+19	; 0x13
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	98 2f       	mov	r25, r24
     46e:	88 27       	eor	r24, r24
     470:	2a 89       	ldd	r18, Y+18	; 0x12
     472:	82 2b       	or	r24, r18
     474:	5a 96       	adiw	r26, 0x1a	; 26
     476:	9c 93       	st	X, r25
     478:	8e 93       	st	-X, r24
     47a:	59 97       	sbiw	r26, 0x19	; 25
     47c:	8d 89       	ldd	r24, Y+21	; 0x15
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	98 2f       	mov	r25, r24
     482:	88 27       	eor	r24, r24
     484:	2c 89       	ldd	r18, Y+20	; 0x14
     486:	82 2b       	or	r24, r18
     488:	5c 96       	adiw	r26, 0x1c	; 28
     48a:	9c 93       	st	X, r25
     48c:	8e 93       	st	-X, r24
     48e:	5b 97       	sbiw	r26, 0x1b	; 27
     490:	8f 89       	ldd	r24, Y+23	; 0x17
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	98 2f       	mov	r25, r24
     496:	88 27       	eor	r24, r24
     498:	2e 89       	ldd	r18, Y+22	; 0x16
     49a:	82 2b       	or	r24, r18
     49c:	5e 96       	adiw	r26, 0x1e	; 30
     49e:	9c 93       	st	X, r25
     4a0:	8e 93       	st	-X, r24
     4a2:	5d 97       	sbiw	r26, 0x1d	; 29
     4a4:	89 8d       	ldd	r24, Y+25	; 0x19
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	98 2f       	mov	r25, r24
     4aa:	88 27       	eor	r24, r24
     4ac:	28 8d       	ldd	r18, Y+24	; 0x18
     4ae:	82 2b       	or	r24, r18
     4b0:	90 96       	adiw	r26, 0x20	; 32
     4b2:	9c 93       	st	X, r25
     4b4:	8e 93       	st	-X, r24
     4b6:	5f 97       	sbiw	r26, 0x1f	; 31
     4b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4ba:	91 96       	adiw	r26, 0x21	; 33
     4bc:	8c 93       	st	X, r24
     4be:	97 01       	movw	r18, r14
     4c0:	47 e0       	ldi	r20, 0x07	; 7
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	be 01       	movw	r22, r28
     4c6:	6e 5f       	subi	r22, 0xFE	; 254
     4c8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ca:	81 ee       	ldi	r24, 0xE1	; 225
     4cc:	67 de       	rcall	.-818    	; 0x19c <bme280_get_regs>
     4ce:	81 11       	cpse	r24, r1
     4d0:	36 c0       	rjmp	.+108    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     4d2:	2b 81       	ldd	r18, Y+3	; 0x03
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	32 2f       	mov	r19, r18
     4d8:	22 27       	eor	r18, r18
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	29 2b       	or	r18, r25
     4de:	f7 01       	movw	r30, r14
     4e0:	33 a3       	std	Z+35, r19	; 0x23
     4e2:	22 a3       	std	Z+34, r18	; 0x22
     4e4:	9c 81       	ldd	r25, Y+4	; 0x04
     4e6:	94 a3       	std	Z+36, r25	; 0x24
     4e8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ea:	2d 81       	ldd	r18, Y+5	; 0x05
     4ec:	f0 e1       	ldi	r31, 0x10	; 16
     4ee:	2f 02       	muls	r18, r31
     4f0:	90 01       	movw	r18, r0
     4f2:	11 24       	eor	r1, r1
     4f4:	49 2f       	mov	r20, r25
     4f6:	4f 70       	andi	r20, 0x0F	; 15
     4f8:	24 2b       	or	r18, r20
     4fa:	d7 01       	movw	r26, r14
     4fc:	96 96       	adiw	r26, 0x26	; 38
     4fe:	3c 93       	st	X, r19
     500:	2e 93       	st	-X, r18
     502:	95 97       	sbiw	r26, 0x25	; 37
     504:	2f 81       	ldd	r18, Y+7	; 0x07
     506:	b0 e1       	ldi	r27, 0x10	; 16
     508:	2b 02       	muls	r18, r27
     50a:	90 01       	movw	r18, r0
     50c:	11 24       	eor	r1, r1
     50e:	92 95       	swap	r25
     510:	9f 70       	andi	r25, 0x0F	; 15
     512:	29 2b       	or	r18, r25
     514:	f7 01       	movw	r30, r14
     516:	30 a7       	std	Z+40, r19	; 0x28
     518:	27 a3       	std	Z+39, r18	; 0x27
     51a:	98 85       	ldd	r25, Y+8	; 0x08
     51c:	91 a7       	std	Z+41, r25	; 0x29
     51e:	0f c0       	rjmp	.+30     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     520:	d7 01       	movw	r26, r14
     522:	17 96       	adiw	r26, 0x07	; 7
     524:	ed 91       	ld	r30, X+
     526:	fc 91       	ld	r31, X
     528:	18 97       	sbiw	r26, 0x08	; 8
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	09 95       	icall
     534:	11 50       	subi	r17, 0x01	; 1
     536:	09 f0       	breq	.+2      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     538:	23 cf       	rjmp	.-442    	; 0x380 <bme280_init+0x26>
     53a:	8e ef       	ldi	r24, 0xFE	; 254
     53c:	03 c0       	rjmp	.+6      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     53e:	11 11       	cpse	r17, r1
     540:	01 c0       	rjmp	.+2      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     542:	8e ef       	ldi	r24, 0xFE	; 254
     544:	6b 96       	adiw	r28, 0x1b	; 27
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	08 95       	ret

0000055c <user_delay_ms>:

	return rslt;
}

void user_delay_ms(uint32_t period)
{
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	8b 01       	movw	r16, r22
     562:	9c 01       	movw	r18, r24
	uint16_t i;
	for (i=0; i<period; i++) {
     564:	67 2b       	or	r22, r23
     566:	68 2b       	or	r22, r24
     568:	69 2b       	or	r22, r25
     56a:	89 f0       	breq	.+34     	; 0x58e <user_delay_ms+0x32>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     570:	ef e3       	ldi	r30, 0x3F	; 63
     572:	ff e1       	ldi	r31, 0x1F	; 31
     574:	31 97       	sbiw	r30, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <user_delay_ms+0x18>
     578:	00 c0       	rjmp	.+0      	; 0x57a <user_delay_ms+0x1e>
     57a:	00 00       	nop
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	ac 01       	movw	r20, r24
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	40 17       	cp	r20, r16
     586:	51 07       	cpc	r21, r17
     588:	62 07       	cpc	r22, r18
     58a:	73 07       	cpc	r23, r19
     58c:	88 f3       	brcs	.-30     	; 0x570 <user_delay_ms+0x14>
		_delay_ms(1);
	}
}
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	08 95       	ret

00000594 <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
     594:	d9 01       	movw	r26, r18
	int8_t rslt = 0;
	int8_t i;

	// Write device address
	BMEmessageBuf[0] = dev_id << 1; // BME280 device ID is 0x76 if SDO is connected to ground and 0x77 if SDO is connected to VDDIO
     596:	ef ec       	ldi	r30, 0xCF	; 207
     598:	f4 e0       	ldi	r31, 0x04	; 4
     59a:	88 0f       	add	r24, r24
     59c:	80 83       	st	Z, r24
	
	// Write register address
	BMEmessageBuf[1] = reg_addr;
     59e:	61 83       	std	Z+1, r22	; 0x01
	
	// Write reg_data
	if (len>0) {
     5a0:	10 97       	sbiw	r26, 0x00	; 0
     5a2:	b1 f0       	breq	.+44     	; 0x5d0 <user_i2c_write+0x3c>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
		for(i = 0; i < len; i++)
		{
			BMEmessageBuf[i + 2] = reg_data[i];
     5aa:	fa 01       	movw	r30, r20
     5ac:	e8 0f       	add	r30, r24
     5ae:	f9 1f       	adc	r31, r25
     5b0:	80 81       	ld	r24, Z
     5b2:	e3 2f       	mov	r30, r19
     5b4:	03 2e       	mov	r0, r19
     5b6:	00 0c       	add	r0, r0
     5b8:	ff 0b       	sbc	r31, r31
     5ba:	e1 53       	subi	r30, 0x31	; 49
     5bc:	fb 4f       	sbci	r31, 0xFB	; 251
     5be:	82 83       	std	Z+2, r24	; 0x02
     5c0:	3f 5f       	subi	r19, 0xFF	; 255
	// Write register address
	BMEmessageBuf[1] = reg_addr;
	
	// Write reg_data
	if (len>0) {
		for(i = 0; i < len; i++)
     5c2:	83 2f       	mov	r24, r19
     5c4:	03 2e       	mov	r0, r19
     5c6:	00 0c       	add	r0, r0
     5c8:	99 0b       	sbc	r25, r25
     5ca:	8a 17       	cp	r24, r26
     5cc:	9b 07       	cpc	r25, r27
     5ce:	68 f3       	brcs	.-38     	; 0x5aa <user_i2c_write+0x16>
			BMEmessageBuf[i + 2] = reg_data[i];
		}	
	}
	
	// Write to the TWI interface
	TWI_Start_Transceiver_With_Data(&BMEmessageBuf[0], len + 2);
     5d0:	62 e0       	ldi	r22, 0x02	; 2
     5d2:	6a 0f       	add	r22, r26
     5d4:	8f ec       	ldi	r24, 0xCF	; 207
     5d6:	94 e0       	ldi	r25, 0x04	; 4
     5d8:	3b d1       	rcall	.+630    	; 0x850 <TWI_Start_Transceiver_With_Data>
	
	// Let the transfer complete
	while(TWI_Transceiver_Busy())
     5da:	36 d1       	rcall	.+620    	; 0x848 <TWI_Transceiver_Busy>
     5dc:	81 11       	cpse	r24, r1
     5de:	fd cf       	rjmp	.-6      	; 0x5da <user_i2c_write+0x46>
     5e0:	08 95       	ret

000005e2 <user_i2c_read>:
	}
	
	// If something bad has happened, rslt = 1
	
	return rslt;
}
     5e2:	1f 93       	push	r17

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	18 2f       	mov	r17, r24
     5ea:	e9 01       	movw	r28, r18

	int8_t rslt = 0;
	int8_t i = 0;
	
	// Write device address (for writing)
	BMEmessageBuf[0] = dev_id << 1; // Device ID is 0x76 if SDO is connected to ground and 0x77 if SDO is connected to VDDIO
     5ec:	ef ec       	ldi	r30, 0xCF	; 207
     5ee:	f4 e0       	ldi	r31, 0x04	; 4
     5f0:	88 0f       	add	r24, r24
     5f2:	80 83       	st	Z, r24
	//
	// Write the register address from which we want to start reading 
	BMEmessageBuf[1] = reg_addr;
     5f4:	61 83       	std	Z+1, r22	; 0x01
	// Send the ID and register data out onto the TWI bus...
	TWI_Start_Transceiver_With_Data(&messageBuf[0], 2); // Send register address
     5f6:	62 e0       	ldi	r22, 0x02	; 2
     5f8:	8e eb       	ldi	r24, 0xBE	; 190
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	29 d1       	rcall	.+594    	; 0x850 <TWI_Start_Transceiver_With_Data>
	// And wait for the transaction to complete...
	while(TWI_Transceiver_Busy())
     5fe:	24 d1       	rcall	.+584    	; 0x848 <TWI_Transceiver_Busy>
     600:	81 11       	cpse	r24, r1
     602:	fd cf       	rjmp	.-6      	; 0x5fe <user_i2c_read+0x1c>
     604:	11 0f       	add	r17, r17
	{
	}
	// Now go tell the device to send the data (set the read bit)... 
	BMEmessageBuf[0] = (dev_id << 1) | 1; // Now we want to do the read
     606:	11 60       	ori	r17, 0x01	; 1
     608:	10 93 cf 04 	sts	0x04CF, r17	; 0x8004cf <BMEmessageBuf>
     60c:	61 e0       	ldi	r22, 0x01	; 1
	TWI_Start_Transceiver_With_Data(&messageBuf[0], 1); 
     60e:	8e eb       	ldi	r24, 0xBE	; 190
     610:	94 e0       	ldi	r25, 0x04	; 4
     612:	1e d1       	rcall	.+572    	; 0x850 <TWI_Start_Transceiver_With_Data>
	// And wait for the transaction to complete...
	while(TWI_Transceiver_Busy())
     614:	19 d1       	rcall	.+562    	; 0x848 <TWI_Transceiver_Busy>
     616:	81 11       	cpse	r24, r1
     618:	fd cf       	rjmp	.-6      	; 0x614 <user_i2c_read+0x32>
     61a:	6c 2f       	mov	r22, r28
	{
	}
	// Data is received, now go get it from the AVR TWI data structure...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(&BMEmessageBuf[0], len+1); 
     61c:	6f 5f       	subi	r22, 0xFF	; 255
     61e:	8f ec       	ldi	r24, 0xCF	; 207
     620:	94 e0       	ldi	r25, 0x04	; 4
     622:	42 d1       	rcall	.+644    	; 0x8a8 <TWI_Get_Data_From_Transceiver>
     624:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <TWI_XFER_STATUS>
     628:	20 97       	sbiw	r28, 0x00	; 0
	// The data is now in our own BMEmessageBuf.  IF WE NEED TO, copy it to another variable 
	// before it gets overwritten by another exchange...
	for (i = 0; i < len; i++)
     62a:	b1 f0       	breq	.+44     	; 0x658 <user_i2c_read+0x76>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	82 2f       	mov	r24, r18
	{
		 BME_data[i] = BMEmessageBuf[i + 1];
     630:	02 2e       	mov	r0, r18
     632:	00 0c       	add	r0, r0
     634:	99 0b       	sbc	r25, r25
     636:	fc 01       	movw	r30, r24
     638:	e1 5b       	subi	r30, 0xB1	; 177
     63a:	fa 4f       	sbci	r31, 0xFA	; 250
     63c:	dc 01       	movw	r26, r24
     63e:	a1 53       	subi	r26, 0x31	; 49
     640:	bb 4f       	sbci	r27, 0xFB	; 251
     642:	11 96       	adiw	r26, 0x01	; 1
     644:	8c 91       	ld	r24, X
     646:	80 83       	st	Z, r24
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	82 2f       	mov	r24, r18
	}
	// Data is received, now go get it from the AVR TWI data structure...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(&BMEmessageBuf[0], len+1); 
	// The data is now in our own BMEmessageBuf.  IF WE NEED TO, copy it to another variable 
	// before it gets overwritten by another exchange...
	for (i = 0; i < len; i++)
     64c:	02 2e       	mov	r0, r18
     64e:	00 0c       	add	r0, r0
     650:	99 0b       	sbc	r25, r25
     652:	8c 17       	cp	r24, r28
     654:	9d 07       	cpc	r25, r29
     656:	58 f3       	brcs	.-42     	; 0x62e <user_i2c_read+0x4c>
     658:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	// If something bad has happened, rslt = 1
	
	return rslt;
}
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	08 95       	ret

00000662 <canary_io_pin_initialization>:
     662:	87 e0       	ldi	r24, 0x07	; 7
	}
}

void canary_io_pin_initialization(void) {
	// For Canary, Port B pins 0, 1, and 2 are the red, green, and blue LED feedback pins
	DDRB  = 0x07;
     664:	84 b9       	out	0x04, r24	; 4
	//
	// Set all LEDs off
	PORTB &= !0x07;
     666:	85 b1       	in	r24, 0x05	; 5
     668:	15 b8       	out	0x05, r1	; 5
	// The Canary start button is on Port B pin 3.  Set the pull-up resistor for pin 3:
	SetBit(PORTB, PORTB3);
     66a:	2b 9a       	sbi	0x05, 3	; 5
	//
	// Set the Data Direction Register and pullups for the TWI system
	SetBit(DDRC, PORTC0); // Set clock as output
     66c:	38 9a       	sbi	0x07, 0	; 7
	SetBit(DDRC, PORTC1); // Data Line as output
     66e:	39 9a       	sbi	0x07, 1	; 7
	SetBit(PORTC, PORTC0); //Set pull-up resistor for clock
     670:	40 9a       	sbi	0x08, 0	; 8
	SetBit(PORTC, PORTC1); //Set pull-up resistor for data
     672:	41 9a       	sbi	0x08, 1	; 8
     674:	08 95       	ret

00000676 <LIDAR_distance>:

/********************************************************************************
						Functions
********************************************************************************/

uint16_t LIDAR_distance(void) {
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
	uint16_t Ldistance;
	// From the LIDAR datasheet page 4, simplest way to use the LIDAR:
	// Step 1: Write bias correction use (0x04) to register 0
	messageBuf[0] = LIDAR_WRITE; // LIDAR slave address +W.
     67c:	ee eb       	ldi	r30, 0xBE	; 190
     67e:	f4 e0       	ldi	r31, 0x04	; 4
     680:	84 ec       	ldi	r24, 0xC4	; 196
     682:	80 83       	st	Z, r24
	messageBuf[1] = 0x00; // Select register 0x00
     684:	11 82       	std	Z+1, r1	; 0x01
	messageBuf[2] = LIDAR_USE_BIAS_CORRECTION; // What we're gonna write
     686:	84 e0       	ldi	r24, 0x04	; 4
     688:	82 83       	std	Z+2, r24	; 0x02
	TWI_Start_Transceiver_With_Data( messageBuf, 3);
     68a:	63 e0       	ldi	r22, 0x03	; 3
     68c:	cf 01       	movw	r24, r30
     68e:	e0 d0       	rcall	.+448    	; 0x850 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     690:	db d0       	rcall	.+438    	; 0x848 <TWI_Transceiver_Busy>
     692:	81 11       	cpse	r24, r1
     694:	fd cf       	rjmp	.-6      	; 0x690 <LIDAR_distance+0x1a>
     696:	ee eb       	ldi	r30, 0xBE	; 190
	//
	// Step 2: read register 0x01 and watch the low bit.  
	// From page 6, we have to write the address we want to read first...
	messageBuf[0] = LIDAR_WRITE; // LIDAR slave address +W.
     698:	f4 e0       	ldi	r31, 0x04	; 4
     69a:	84 ec       	ldi	r24, 0xC4	; 196
     69c:	80 83       	st	Z, r24
     69e:	81 e0       	ldi	r24, 0x01	; 1
	messageBuf[1] = 0x01; // Select register 0x01
     6a0:	81 83       	std	Z+1, r24	; 0x01
     6a2:	62 e0       	ldi	r22, 0x02	; 2
	TWI_Start_Transceiver_With_Data( messageBuf, 2);
     6a4:	cf 01       	movw	r24, r30
     6a6:	d4 d0       	rcall	.+424    	; 0x850 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );	
     6a8:	cf d0       	rcall	.+414    	; 0x848 <TWI_Transceiver_Busy>
     6aa:	81 11       	cpse	r24, r1
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <LIDAR_distance+0x32>
     6ae:	ce eb       	ldi	r28, 0xBE	; 190
	// Now verify we're talking to the right device...set up a read of the chip ID:
	messageBuf[1] = 0x01; // Set up to wait for 0x01 LSB to go low...
	while (messageBuf[1] & 0x01)
	{
		messageBuf[0] = LIDAR_READ; // LIDAR slave address +R.
     6b0:	d4 e0       	ldi	r29, 0x04	; 4
     6b2:	15 ec       	ldi	r17, 0xC5	; 197
     6b4:	18 83       	st	Y, r17
		messageBuf[1] = 0x00; // Clear the field where reg 0x01 will be written
		TWI_Start_Transceiver_With_Data( messageBuf, 2);
     6b6:	19 82       	std	Y+1, r1	; 0x01
     6b8:	62 e0       	ldi	r22, 0x02	; 2
     6ba:	ce 01       	movw	r24, r28
     6bc:	c9 d0       	rcall	.+402    	; 0x850 <TWI_Start_Transceiver_With_Data>
		while ( TWI_Transceiver_Busy() );	
     6be:	c4 d0       	rcall	.+392    	; 0x848 <TWI_Transceiver_Busy>
     6c0:	81 11       	cpse	r24, r1
     6c2:	fd cf       	rjmp	.-6      	; 0x6be <LIDAR_distance+0x48>
		// Now get the data we just read...note that it starts in messageBuf[1], not [0]
		TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(messageBuf, 2);
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	ce 01       	movw	r24, r28
     6c8:	ef d0       	rcall	.+478    	; 0x8a8 <TWI_Get_Data_From_Transceiver>
     6ca:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <TWI_XFER_STATUS>
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
		testing = messageBuf[1]; //This is here for debug purposes
     6d0:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <testing>
     6d4:	80 fd       	sbrc	r24, 0
	TWI_Start_Transceiver_With_Data( messageBuf, 2);
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );	
	// Now verify we're talking to the right device...set up a read of the chip ID:
	messageBuf[1] = 0x01; // Set up to wait for 0x01 LSB to go low...
	while (messageBuf[1] & 0x01)
     6d6:	ee cf       	rjmp	.-36     	; 0x6b4 <LIDAR_distance+0x3e>
     6d8:	ee eb       	ldi	r30, 0xBE	; 190
	}
	// return;
	// LSB must now be low, so...
	// Step 3: Read two bytes from 0x8f (distance reg high byte, low byte)
	// First, WRITE the read-from address...
	messageBuf[0] = LIDAR_WRITE; // LIDAR slave address +W.
     6da:	f4 e0       	ldi	r31, 0x04	; 4
     6dc:	84 ec       	ldi	r24, 0xC4	; 196
	messageBuf[1] = LIDAR_AUTO_INCREMENT_ON_READ | LIDAR_DISTANCE_HIGH_BYTE;
     6de:	80 83       	st	Z, r24
     6e0:	8f e8       	ldi	r24, 0x8F	; 143
	TWI_Start_Transceiver_With_Data( messageBuf, 2);
     6e2:	81 83       	std	Z+1, r24	; 0x01
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	cf 01       	movw	r24, r30
     6e8:	b3 d0       	rcall	.+358    	; 0x850 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while (TWI_Transceiver_Busy());
     6ea:	ae d0       	rcall	.+348    	; 0x848 <TWI_Transceiver_Busy>
     6ec:	81 11       	cpse	r24, r1
     6ee:	fd cf       	rjmp	.-6      	; 0x6ea <LIDAR_distance+0x74>
	// Now READ from that address
	messageBuf[0] = LIDAR_READ; // LIDAR slave address +R.
     6f0:	ee eb       	ldi	r30, 0xBE	; 190
     6f2:	f4 e0       	ldi	r31, 0x04	; 4
     6f4:	85 ec       	ldi	r24, 0xC5	; 197
	messageBuf[1] = 0x00; //clear the receive area to see if it gets written
     6f6:	80 83       	st	Z, r24
	messageBuf[2] = 0x00; //clear the receive area to see if it gets written	
     6f8:	11 82       	std	Z+1, r1	; 0x01
	TWI_Start_Transceiver_With_Data( messageBuf, 3);
     6fa:	12 82       	std	Z+2, r1	; 0x02
     6fc:	63 e0       	ldi	r22, 0x03	; 3
     6fe:	cf 01       	movw	r24, r30
	while ( TWI_Transceiver_Busy() );	
     700:	a7 d0       	rcall	.+334    	; 0x850 <TWI_Start_Transceiver_With_Data>
     702:	a2 d0       	rcall	.+324    	; 0x848 <TWI_Transceiver_Busy>
     704:	81 11       	cpse	r24, r1
     706:	fd cf       	rjmp	.-6      	; 0x702 <LIDAR_distance+0x8c>
	// Now transfer the data into our buffer
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(messageBuf, 3);
     708:	63 e0       	ldi	r22, 0x03	; 3
     70a:	8e eb       	ldi	r24, 0xBE	; 190
     70c:	94 e0       	ldi	r25, 0x04	; 4
     70e:	cc d0       	rcall	.+408    	; 0x8a8 <TWI_Get_Data_From_Transceiver>
     710:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <TWI_XFER_STATUS>
     714:	ee eb       	ldi	r30, 0xBE	; 190
	Ldistance = (messageBuf[1]<<8) + messageBuf[2];
     716:	f4 e0       	ldi	r31, 0x04	; 4
     718:	81 81       	ldd	r24, Z+1	; 0x01
	// That's all, folks...
	return(Ldistance);
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	98 2f       	mov	r25, r24
     71e:	88 27       	eor	r24, r24
     720:	22 81       	ldd	r18, Z+2	; 0x02
     722:	82 0f       	add	r24, r18
}
     724:	91 1d       	adc	r25, r1
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	08 95       	ret

0000072e <bme280_structure_and_device_init>:
/********************************************************************************
						Functions
********************************************************************************/

void bme280_structure_and_device_init(void) {
	dev.dev_id = BME280_I2C_ADDR_PRIM;
     72e:	e0 ed       	ldi	r30, 0xD0	; 208
     730:	f5 e0       	ldi	r31, 0x05	; 5
     732:	86 e7       	ldi	r24, 0x76	; 118
     734:	81 83       	std	Z+1, r24	; 0x01
	dev.intf = BME280_I2C_INTF;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	82 83       	std	Z+2, r24	; 0x02
	dev.read = user_i2c_read;
     73a:	81 ef       	ldi	r24, 0xF1	; 241
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	94 83       	std	Z+4, r25	; 0x04
     740:	83 83       	std	Z+3, r24	; 0x03
	dev.write = user_i2c_write;
     742:	8a ec       	ldi	r24, 0xCA	; 202
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	96 83       	std	Z+6, r25	; 0x06
     748:	85 83       	std	Z+5, r24	; 0x05
	dev.delay_ms = user_delay_ms;
     74a:	8e ea       	ldi	r24, 0xAE	; 174
     74c:	92 e0       	ldi	r25, 0x02	; 2
     74e:	90 87       	std	Z+8, r25	; 0x08
     750:	87 83       	std	Z+7, r24	; 0x07
	// Call the HW initialization routine
	rslt = bme280_init(&dev);
     752:	cf 01       	movw	r24, r30
     754:	02 de       	rcall	.-1020   	; 0x35a <bme280_init>
     756:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
     75a:	08 95       	ret

0000075c <main>:
	// *************************************************************************
	//        Initialization code & device configuration
	// *************************************************************************
 	//
	// Set the I/O pins
	canary_io_pin_initialization();
     75c:	82 df       	rcall	.-252    	; 0x662 <canary_io_pin_initialization>
	//
	// Set a simple counter for the loop below.  Debug only.
	seconds=0;
     75e:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <seconds+0x1>
     762:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <seconds>
	ItsTime=0;
     766:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <ItsTime>
	//
	// set up our output for handling printf and string operations,,,
	stdout = &mystdout;
     76a:	8a e2       	ldi	r24, 0x2A	; 42
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <__iob+0x3>
     772:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <__iob+0x2>
	//
	// Initialize the timer counter 1 for 1Hz interrupt
	initialize_timer_counter_1();
     776:	3b d0       	rcall	.+118    	; 0x7ee <initialize_timer_counter_1>
	//
	// Initialize timer counter 0 for 100Hz interrupt (used for SD card debug only)
	// initialize_timer_counter_0();  // ONLY ENABLE if using SD card
	//
	// Initialize our main communication to the ground (UART0)
	USART0_init(MYUBRR0);
     778:	8f e9       	ldi	r24, 0x9F	; 159
     77a:	91 e0       	ldi	r25, 0x01	; 1
	//
	// Initialize the TWI peripheral
	TWI_Master_Initialise();
     77c:	38 d1       	rcall	.+624    	; 0x9ee <USART0_init>
	//gas_sensors_init();
	// 
	// Start all interrupts
	sei();
	//
	USART0_putstring(String);
     77e:	5a d0       	rcall	.+180    	; 0x834 <TWI_Master_Initialise>
     780:	78 94       	sei
     782:	80 e0       	ldi	r24, 0x00	; 0
	// Create an instance of bme280_dev to initialize the BME280
	// Initialize the pressure / temperature /  humidity sensor
	bme280_structure_and_device_init();
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	70 d1       	rcall	.+736    	; 0xa68 <USART0_putstring>
	// Wait here for the start/standby button to be selected.. (PORTB pin 3).
	// Now call the routines to "kick off" the sensor measurements
	
	// ===================================================
	// The next few lines are for debugging the (working at one time) UART0 routines...remove these lines once it is working again.
	USART0_putstring(String);
     788:	d2 df       	rcall	.-92     	; 0x72e <bme280_structure_and_device_init>
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	6c d1       	rcall	.+728    	; 0xa68 <USART0_putstring>
		// reached steady state...do nothing for the moment - wait for interrupts.
		// The variable ItsTime gets set to 1 every second...
		if (ItsTime == 1){ //wait for our 1Hz flag
			ItsTime = 0; 
			seconds++;
			printf("\nSeconds = %u", seconds);
     790:	09 e3       	ldi	r16, 0x39	; 57
     792:	11 e0       	ldi	r17, 0x01	; 1
*/			//============================
			//
			//============================
			// Now test reading the LIDAR interface
			distance = LIDAR_distance();
			printf("\nLIDAR distance = %u", distance);
     794:	c7 e4       	ldi	r28, 0x47	; 71
     796:	d1 e0       	ldi	r29, 0x01	; 1
		// USART0_TransmitByte(USART0_ReceiveByte());
		//////////////////////////////////////////////////////////////
		//
		// reached steady state...do nothing for the moment - wait for interrupts.
		// The variable ItsTime gets set to 1 every second...
		if (ItsTime == 1){ //wait for our 1Hz flag
     798:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <ItsTime>
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	e1 f7       	brne	.-8      	; 0x798 <main+0x3c>
			ItsTime = 0; 
     7a0:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <ItsTime>
			seconds++;
     7a4:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <seconds>
     7a8:	90 91 06 06 	lds	r25, 0x0606	; 0x800606 <seconds+0x1>
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <seconds+0x1>
     7b2:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <seconds>
			printf("\nSeconds = %u", seconds);
     7b6:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <seconds>
     7ba:	90 91 06 06 	lds	r25, 0x0606	; 0x800606 <seconds+0x1>
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	1f 93       	push	r17
     7c4:	0f 93       	push	r16
			printf("\n=================");
*/			//============================
			//
			//============================
			// Now test reading the LIDAR interface
			distance = LIDAR_distance();
     7c6:	e4 d1       	rcall	.+968    	; 0xb90 <printf>
     7c8:	56 df       	rcall	.-340    	; 0x676 <LIDAR_distance>
     7ca:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <distance>
     7ce:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <distance+0x1>
			printf("\nLIDAR distance = %u", distance);
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	df 93       	push	r29
     7d8:	cf 93       	push	r28
     7da:	da d1       	rcall	.+948    	; 0xb90 <printf>
     7dc:	8d b7       	in	r24, 0x3d	; 61
     7de:	9e b7       	in	r25, 0x3e	; 62
     7e0:	08 96       	adiw	r24, 0x08	; 8
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	9e bf       	out	0x3e, r25	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	8d bf       	out	0x3d, r24	; 61
     7ec:	d5 cf       	rjmp	.-86     	; 0x798 <main+0x3c>

000007ee <initialize_timer_counter_1>:
	Not using any of the other compare features, so all other CR bits are 0
	Finally, we have to enable the interrupt vector on compare register A
	TCCR1A = 0; Control Register A is reset to 0x00 on startup. */
	//  
	// Set the WGM mode and prescaler select in control register B
	TCCR1B = ((1<<WGM12) | (1<<CS12) | (1<<CS10));
     7ee:	8d e0       	ldi	r24, 0x0D	; 13
     7f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// TCCR1C = 0; Control Register C is reset to 0x00 on startup.
	// Now we need to enter out TOP value in OCR1A
	OCR1A = 19530;
     7f4:	8a e4       	ldi	r24, 0x4A	; 74
     7f6:	9c e4       	ldi	r25, 0x4C	; 76
     7f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// Now enable the interrupt on the compare register A
	TIMSK1 = (1<<OCIE1A);
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     806:	08 95       	ret

00000808 <__vector_16>:
*********************************************************************************
********************************************************************************/


// 100Hz timer interrupt generated by OC0A and used by the FATFS code.
EMPTY_INTERRUPT(TIMER0_COMPA_vect);
     808:	18 95       	reti

0000080a <__vector_13>:
}
*/


ISR(TIMER1_COMPA_vect)
{
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	0f 92       	push	r0
     812:	11 24       	eor	r1, r1
     814:	8f 93       	push	r24
     816:	9f 93       	push	r25
	ToggleBit(PORTB, PORTB1); //for now, just toggle the green status LED
     818:	95 b1       	in	r25, 0x05	; 5
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 27       	eor	r24, r25
     81e:	85 b9       	out	0x05, r24	; 5
	ItsTime = 1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <ItsTime>
}
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <TWI_Master_Initialise>:
void TWI_Start_Transceiver( void )
{
  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
  TWI_statusReg.all = 0;      
  TWI_state         = TWI_NO_STATE ;
  TWCR = (1<<TWEN)|                             // TWI Interface enabled.
     834:	81 e1       	ldi	r24, 0x11	; 17
     836:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     840:	84 e0       	ldi	r24, 0x04	; 4
     842:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     846:	08 95       	ret

00000848 <TWI_Transceiver_Busy>:
     848:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     84c:	81 78       	andi	r24, 0x81	; 129
     84e:	08 95       	ret

00000850 <TWI_Start_Transceiver_With_Data>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	ec 01       	movw	r28, r24
     856:	ec eb       	ldi	r30, 0xBC	; 188
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	90 81       	ld	r25, Z
     85c:	91 78       	andi	r25, 0x81	; 129
     85e:	e9 f7       	brne	.-6      	; 0x85a <TWI_Start_Transceiver_With_Data+0xa>
     860:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <TWI_msgSize>
     864:	88 81       	ld	r24, Y
     866:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <TWI_buf>
     86a:	80 fd       	sbrc	r24, 0
     86c:	12 c0       	rjmp	.+36     	; 0x892 <TWI_Start_Transceiver_With_Data+0x42>
     86e:	62 30       	cpi	r22, 0x02	; 2
     870:	80 f0       	brcs	.+32     	; 0x892 <TWI_Start_Transceiver_With_Data+0x42>
     872:	fe 01       	movw	r30, r28
     874:	31 96       	adiw	r30, 0x01	; 1
     876:	a1 e6       	ldi	r26, 0x61	; 97
     878:	b1 e0       	ldi	r27, 0x01	; 1
     87a:	62 50       	subi	r22, 0x02	; 2
     87c:	26 2f       	mov	r18, r22
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	2e 5f       	subi	r18, 0xFE	; 254
     882:	3f 4f       	sbci	r19, 0xFF	; 255
     884:	2c 0f       	add	r18, r28
     886:	3d 1f       	adc	r19, r29
     888:	91 91       	ld	r25, Z+
     88a:	9d 93       	st	X+, r25
     88c:	e2 17       	cp	r30, r18
     88e:	f3 07       	cpc	r31, r19
     890:	d9 f7       	brne	.-10     	; 0x888 <TWI_Start_Transceiver_With_Data+0x38>
     892:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <TWI_statusReg>
     896:	88 ef       	ldi	r24, 0xF8	; 248
     898:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <TWI_state>
     89c:	85 ea       	ldi	r24, 0xA5	; 165
     89e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <TWI_Get_Data_From_Transceiver>:
requested (including the address field) in the function call. The function will hold execution (loop)
until the TWI_ISR has completed with the previous operation, before reading out the data and returning.
If there was an error in the previous transmission the function will return the TWI error code.
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
     8a8:	ac 01       	movw	r20, r24
/****************************************************************************
Call this function to test if the TWI_ISR is busy transmitting.
****************************************************************************/
unsigned char TWI_Transceiver_Busy( void )
{
  return ( TWCR & ((1<<TWIE)|(1<<TWINT)));                  // IF TWI Interrupt is enabled then the Transceiver is busy
     8aa:	ec eb       	ldi	r30, 0xBC	; 188
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	90 81       	ld	r25, Z
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
  unsigned char i;

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
     8b0:	91 78       	andi	r25, 0x81	; 129
     8b2:	e9 f7       	brne	.-6      	; 0x8ae <TWI_Get_Data_From_Transceiver+0x6>

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
     8b4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <TWI_statusReg>
     8b8:	80 ff       	sbrs	r24, 0
     8ba:	11 c0       	rjmp	.+34     	; 0x8de <TWI_Get_Data_From_Transceiver+0x36>
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
     8bc:	66 23       	and	r22, r22
     8be:	79 f0       	breq	.+30     	; 0x8de <TWI_Get_Data_From_Transceiver+0x36>
     8c0:	a0 e6       	ldi	r26, 0x60	; 96
     8c2:	b1 e0       	ldi	r27, 0x01	; 1
     8c4:	fa 01       	movw	r30, r20
     8c6:	61 50       	subi	r22, 0x01	; 1
     8c8:	26 2f       	mov	r18, r22
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	2f 5f       	subi	r18, 0xFF	; 255
     8ce:	3f 4f       	sbci	r19, 0xFF	; 255
     8d0:	24 0f       	add	r18, r20
     8d2:	35 1f       	adc	r19, r21
    {
      msg[ i ] = TWI_buf[ i ];
     8d4:	9d 91       	ld	r25, X+
     8d6:	91 93       	st	Z+, r25

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
     8d8:	e2 17       	cp	r30, r18
     8da:	f3 07       	cpc	r31, r19
     8dc:	d9 f7       	brne	.-10     	; 0x8d4 <TWI_Get_Data_From_Transceiver+0x2c>
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
     8de:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <TWI_statusReg>
}
     8e2:	81 70       	andi	r24, 0x01	; 1
     8e4:	08 95       	ret

000008e6 <__vector_26>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     8e6:	1f 92       	push	r1
     8e8:	0f 92       	push	r0
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	0f 92       	push	r0
     8ee:	11 24       	eor	r1, r1
     8f0:	0b b6       	in	r0, 0x3b	; 59
     8f2:	0f 92       	push	r0
     8f4:	2f 93       	push	r18
     8f6:	3f 93       	push	r19
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
     904:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     908:	8e 2f       	mov	r24, r30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	fc 01       	movw	r30, r24
     90e:	38 97       	sbiw	r30, 0x08	; 8
     910:	e1 35       	cpi	r30, 0x51	; 81
     912:	f1 05       	cpc	r31, r1
     914:	08 f0       	brcs	.+2      	; 0x918 <__vector_26+0x32>
     916:	55 c0       	rjmp	.+170    	; 0x9c2 <__vector_26+0xdc>
     918:	ea 5b       	subi	r30, 0xBA	; 186
     91a:	ff 4f       	sbci	r31, 0xFF	; 255
     91c:	30 c1       	rjmp	.+608    	; 0xb7e <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     91e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <TWI_bufPtr.1674>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
     922:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <TWI_bufPtr.1674>
     926:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <TWI_msgSize>
     92a:	e8 17       	cp	r30, r24
     92c:	70 f4       	brcc	.+28     	; 0x94a <__vector_26+0x64>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	8e 0f       	add	r24, r30
     932:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <TWI_bufPtr.1674>
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	e0 5a       	subi	r30, 0xA0	; 160
     93a:	fe 4f       	sbci	r31, 0xFE	; 254
     93c:	80 81       	ld	r24, Z
     93e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     942:	85 e8       	ldi	r24, 0x85	; 133
     944:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     948:	43 c0       	rjmp	.+134    	; 0x9d0 <__vector_26+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     94a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <TWI_statusReg>
     94e:	81 60       	ori	r24, 0x01	; 1
     950:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     954:	84 e9       	ldi	r24, 0x94	; 148
     956:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     95a:	3a c0       	rjmp	.+116    	; 0x9d0 <__vector_26+0xea>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
     95c:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <TWI_bufPtr.1674>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	8e 0f       	add	r24, r30
     964:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <TWI_bufPtr.1674>
     968:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	e0 5a       	subi	r30, 0xA0	; 160
     970:	fe 4f       	sbci	r31, 0xFE	; 254
     972:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     974:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <TWI_bufPtr.1674>
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <TWI_msgSize>
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	28 17       	cp	r18, r24
     984:	39 07       	cpc	r19, r25
     986:	24 f4       	brge	.+8      	; 0x990 <__vector_26+0xaa>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     988:	85 ec       	ldi	r24, 0xC5	; 197
     98a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     98e:	20 c0       	rjmp	.+64     	; 0x9d0 <__vector_26+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     990:	85 e8       	ldi	r24, 0x85	; 133
     992:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     996:	1c c0       	rjmp	.+56     	; 0x9d0 <__vector_26+0xea>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
     998:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     99c:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <TWI_bufPtr.1674>
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	e0 5a       	subi	r30, 0xA0	; 160
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     9a8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <TWI_statusReg>
     9ac:	81 60       	ori	r24, 0x01	; 1
     9ae:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     9b2:	84 e9       	ldi	r24, 0x94	; 148
     9b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
     9b8:	0b c0       	rjmp	.+22     	; 0x9d0 <__vector_26+0xea>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     9ba:	85 ea       	ldi	r24, 0xA5	; 165
     9bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
     9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <__vector_26+0xea>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     9c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     9c6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <TWI_state>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     9ca:	84 e0       	ldi	r24, 0x04	; 4
     9cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
     9d0:	ff 91       	pop	r31
     9d2:	ef 91       	pop	r30
     9d4:	bf 91       	pop	r27
     9d6:	af 91       	pop	r26
     9d8:	9f 91       	pop	r25
     9da:	8f 91       	pop	r24
     9dc:	3f 91       	pop	r19
     9de:	2f 91       	pop	r18
     9e0:	0f 90       	pop	r0
     9e2:	0b be       	out	0x3b, r0	; 59
     9e4:	0f 90       	pop	r0
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	0f 90       	pop	r0
     9ea:	1f 90       	pop	r1
     9ec:	18 95       	reti

000009ee <USART0_init>:
	tmptail = (UART0_RxTail + 1) & UART0_RX_BUFFER_MASK;
	// Store new index 
	UART0_RxTail = tmptail;
	// Return data 
	return UART0_RxBuf[tmptail];
}
     9ee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     9f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     9f6:	88 e9       	ldi	r24, 0x98	; 152
     9f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     9fc:	8e e0       	ldi	r24, 0x0E	; 14
     9fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     a02:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <UART0_RxTail>
     a06:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <UART0_RxHead>
     a0a:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <UART0_TxTail>
     a0e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <UART0_TxHead>
     a12:	08 95       	ret

00000a14 <USART0_TransmitByte>:

void USART0_TransmitByte(unsigned char data)
{
	unsigned char tmphead;
	// Calculate buffer index
	tmphead = (UART0_TxHead + 1) & UART0_TX_BUFFER_MASK;
     a14:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <UART0_TxHead>
     a18:	2f 5f       	subi	r18, 0xFF	; 255
	// Wait for free space in buffer
	while (tmphead == UART0_TxTail);
     a1a:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <UART0_TxTail>
     a1e:	29 17       	cp	r18, r25
     a20:	e1 f3       	breq	.-8      	; 0xa1a <USART0_TransmitByte+0x6>
	// Store data in buffer 
	UART0_TxBuf[tmphead] = data;
     a22:	e2 2f       	mov	r30, r18
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	ee 58       	subi	r30, 0x8E	; 142
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	80 83       	st	Z, r24
	// Store new index 
	UART0_TxHead = tmphead;
     a2c:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <UART0_TxHead>
	// Enable UDRE interrupt 
	UCSR0B |= (1<<UDRIE0);
     a30:	e1 ec       	ldi	r30, 0xC1	; 193
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	80 62       	ori	r24, 0x20	; 32
     a38:	80 83       	st	Z, r24
     a3a:	08 95       	ret

00000a3c <USART0_Transmit_IO>:
//This version is used to send formatted strings...
int USART0_Transmit_IO(char data, FILE *stream)
{
	unsigned char tmphead;
	// Calculate buffer index
	tmphead = (UART0_TxHead + 1) & UART0_TX_BUFFER_MASK;
     a3c:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <UART0_TxHead>
     a40:	2f 5f       	subi	r18, 0xFF	; 255
	// Wait for free space in buffer
	while (tmphead == UART0_TxTail);
     a42:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <UART0_TxTail>
     a46:	29 17       	cp	r18, r25
     a48:	e1 f3       	breq	.-8      	; 0xa42 <USART0_Transmit_IO+0x6>
	// Store data in buffer
	UART0_TxBuf[tmphead] = data;
     a4a:	e2 2f       	mov	r30, r18
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	ee 58       	subi	r30, 0x8E	; 142
     a50:	fe 4f       	sbci	r31, 0xFE	; 254
     a52:	80 83       	st	Z, r24
	// Store new index
	UART0_TxHead = tmphead;
     a54:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <UART0_TxHead>
	// Enable UDRE interrupt
	UCSR0B |= (1<<UDRIE0);
     a58:	e1 ec       	ldi	r30, 0xC1	; 193
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	80 62       	ori	r24, 0x20	; 32
     a60:	80 83       	st	Z, r24
	return(0);
}
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	08 95       	ret

00000a68 <USART0_putstring>:

// This put string function stops when it reaches the end of a string, which is
// always a null character (0x00) in c.
void USART0_putstring(char* StringPtr) {
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00) {
     a6e:	88 81       	ld	r24, Y
     a70:	88 23       	and	r24, r24
     a72:	29 f0       	breq	.+10     	; 0xa7e <USART0_putstring+0x16>
     a74:	21 96       	adiw	r28, 0x01	; 1
		USART0_TransmitByte(*StringPtr);
     a76:	ce df       	rcall	.-100    	; 0xa14 <USART0_TransmitByte>
}

// This put string function stops when it reaches the end of a string, which is
// always a null character (0x00) in c.
void USART0_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
     a78:	89 91       	ld	r24, Y+
     a7a:	81 11       	cpse	r24, r1
     a7c:	fc cf       	rjmp	.-8      	; 0xa76 <USART0_putstring+0xe>
		USART0_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <__vector_21>:
	// Store received data in buffer 
	UART0_RxBuf[tmphead] = data;
}*/

ISR(USART0_UDRE_vect)
{
     a84:	1f 92       	push	r1
     a86:	0f 92       	push	r0
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	0f 92       	push	r0
     a8c:	11 24       	eor	r1, r1
     a8e:	0b b6       	in	r0, 0x3b	; 59
     a90:	0f 92       	push	r0
     a92:	8f 93       	push	r24
     a94:	9f 93       	push	r25
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted 
	if (UART0_TxHead != UART0_TxTail) {
     a9a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <UART0_TxHead>
     a9e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <UART0_TxTail>
     aa2:	98 17       	cp	r25, r24
     aa4:	61 f0       	breq	.+24     	; 0xabe <__vector_21+0x3a>
		// Calculate buffer index
		tmptail = ( UART0_TxTail + 1 ) & UART0_TX_BUFFER_MASK;
     aa6:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <UART0_TxTail>
     aaa:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index 
		UART0_TxTail = tmptail;
     aac:	e0 93 70 01 	sts	0x0170, r30	; 0x800170 <UART0_TxTail>
		// Start transmission 
		UDR0 = UART0_TxBuf[tmptail];
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	ee 58       	subi	r30, 0x8E	; 142
     ab4:	fe 4f       	sbci	r31, 0xFE	; 254
     ab6:	80 81       	ld	r24, Z
     ab8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <__vector_21+0x44>
		} else {
		// Disable UDRE interrupt 
		UCSR0B &= ~(1<<UDRIE0);
     abe:	e1 ec       	ldi	r30, 0xC1	; 193
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	8f 7d       	andi	r24, 0xDF	; 223
     ac6:	80 83       	st	Z, r24
	}
     ac8:	ff 91       	pop	r31
     aca:	ef 91       	pop	r30
     acc:	9f 91       	pop	r25
     ace:	8f 91       	pop	r24
     ad0:	0f 90       	pop	r0
     ad2:	0b be       	out	0x3b, r0	; 59
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti

00000ade <__vector_28>:
*********************************************************************************
********************************************************************************/


ISR(USART1_RX_vect)
{
     ade:	1f 92       	push	r1
     ae0:	0f 92       	push	r0
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	0f 92       	push	r0
     ae6:	11 24       	eor	r1, r1
     ae8:	0b b6       	in	r0, 0x3b	; 59
     aea:	0f 92       	push	r0
     aec:	8f 93       	push	r24
     aee:	9f 93       	push	r25
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
	unsigned char data;
	unsigned char tmphead;
	
	// Read the received data 
	data = UDR1;
     af4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	// Calculate buffer index 
	tmphead = (UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
     af8:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <UART1_RxHead>
     afc:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index 
	UART1_RxHead = tmphead;
     afe:	e0 93 77 03 	sts	0x0377, r30	; 0x800377 <UART1_RxHead>

	if (tmphead == UART1_RxTail) {
     b02:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <UART1_RxTail>
		// ERROR! Receive buffer overflow 
	}
	// Store received data in buffer 
	UART1_RxBuf[tmphead] = data;
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	e8 58       	subi	r30, 0x88	; 136
     b0a:	fc 4f       	sbci	r31, 0xFC	; 252
     b0c:	80 83       	st	Z, r24
}
     b0e:	ff 91       	pop	r31
     b10:	ef 91       	pop	r30
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	0f 90       	pop	r0
     b18:	0b be       	out	0x3b, r0	; 59
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__vector_29>:

ISR(USART1_UDRE_vect)
{
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	0b b6       	in	r0, 0x3b	; 59
     b30:	0f 92       	push	r0
     b32:	8f 93       	push	r24
     b34:	9f 93       	push	r25
     b36:	ef 93       	push	r30
     b38:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted 
	if (UART1_TxHead != UART1_TxTail) {
     b3a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <UART1_TxHead>
     b3e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <UART1_TxTail>
     b42:	98 17       	cp	r25, r24
     b44:	61 f0       	breq	.+24     	; 0xb5e <__vector_29+0x3a>
		// Calculate buffer index
		tmptail = ( UART1_TxTail + 1 ) & UART1_TX_BUFFER_MASK;
     b46:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <UART1_TxTail>
     b4a:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index 
		UART1_TxTail = tmptail;
     b4c:	e0 93 74 02 	sts	0x0274, r30	; 0x800274 <UART1_TxTail>
		// Start transmission 
		UDR1 = UART1_TxBuf[tmptail];
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	ea 58       	subi	r30, 0x8A	; 138
     b54:	fd 4f       	sbci	r31, 0xFD	; 253
     b56:	80 81       	ld	r24, Z
     b58:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__vector_29+0x44>
		} else {
		// Disable UDRE interrupt 
		UCSR1B &= ~(1<<UDRIE1);
     b5e:	e9 ec       	ldi	r30, 0xC9	; 201
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8f 7d       	andi	r24, 0xDF	; 223
     b66:	80 83       	st	Z, r24
	}
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	0f 90       	pop	r0
     b72:	0b be       	out	0x3b, r0	; 59
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <__tablejump2__>:
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	00 24       	eor	r0, r0
     b84:	00 1c       	adc	r0, r0
     b86:	0b be       	out	0x3b, r0	; 59
     b88:	07 90       	elpm	r0, Z+
     b8a:	f6 91       	elpm	r31, Z
     b8c:	e0 2d       	mov	r30, r0
     b8e:	09 94       	ijmp

00000b90 <printf>:
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	ae 01       	movw	r20, r28
     b9a:	4b 5f       	subi	r20, 0xFB	; 251
     b9c:	5f 4f       	sbci	r21, 0xFF	; 255
     b9e:	fa 01       	movw	r30, r20
     ba0:	61 91       	ld	r22, Z+
     ba2:	71 91       	ld	r23, Z+
     ba4:	af 01       	movw	r20, r30
     ba6:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <__iob+0x2>
     baa:	90 91 0a 06 	lds	r25, 0x060A	; 0x80060a <__iob+0x3>
     bae:	03 d0       	rcall	.+6      	; 0xbb6 <vfprintf>
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <vfprintf>:
     bb6:	2f 92       	push	r2
     bb8:	3f 92       	push	r3
     bba:	4f 92       	push	r4
     bbc:	5f 92       	push	r5
     bbe:	6f 92       	push	r6
     bc0:	7f 92       	push	r7
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	2b 97       	sbiw	r28, 0x0b	; 11
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	6c 01       	movw	r12, r24
     bec:	7b 01       	movw	r14, r22
     bee:	8a 01       	movw	r16, r20
     bf0:	fc 01       	movw	r30, r24
     bf2:	17 82       	std	Z+7, r1	; 0x07
     bf4:	16 82       	std	Z+6, r1	; 0x06
     bf6:	83 81       	ldd	r24, Z+3	; 0x03
     bf8:	81 ff       	sbrs	r24, 1
     bfa:	bf c1       	rjmp	.+894    	; 0xf7a <vfprintf+0x3c4>
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	3c 01       	movw	r6, r24
     c02:	f6 01       	movw	r30, r12
     c04:	93 81       	ldd	r25, Z+3	; 0x03
     c06:	f7 01       	movw	r30, r14
     c08:	93 fd       	sbrc	r25, 3
     c0a:	85 91       	lpm	r24, Z+
     c0c:	93 ff       	sbrs	r25, 3
     c0e:	81 91       	ld	r24, Z+
     c10:	7f 01       	movw	r14, r30
     c12:	88 23       	and	r24, r24
     c14:	09 f4       	brne	.+2      	; 0xc18 <vfprintf+0x62>
     c16:	ad c1       	rjmp	.+858    	; 0xf72 <vfprintf+0x3bc>
     c18:	85 32       	cpi	r24, 0x25	; 37
     c1a:	39 f4       	brne	.+14     	; 0xc2a <vfprintf+0x74>
     c1c:	93 fd       	sbrc	r25, 3
     c1e:	85 91       	lpm	r24, Z+
     c20:	93 ff       	sbrs	r25, 3
     c22:	81 91       	ld	r24, Z+
     c24:	7f 01       	movw	r14, r30
     c26:	85 32       	cpi	r24, 0x25	; 37
     c28:	21 f4       	brne	.+8      	; 0xc32 <vfprintf+0x7c>
     c2a:	b6 01       	movw	r22, r12
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	d6 d1       	rcall	.+940    	; 0xfdc <fputc>
     c30:	e8 cf       	rjmp	.-48     	; 0xc02 <vfprintf+0x4c>
     c32:	91 2c       	mov	r9, r1
     c34:	21 2c       	mov	r2, r1
     c36:	31 2c       	mov	r3, r1
     c38:	ff e1       	ldi	r31, 0x1F	; 31
     c3a:	f3 15       	cp	r31, r3
     c3c:	d8 f0       	brcs	.+54     	; 0xc74 <vfprintf+0xbe>
     c3e:	8b 32       	cpi	r24, 0x2B	; 43
     c40:	79 f0       	breq	.+30     	; 0xc60 <vfprintf+0xaa>
     c42:	38 f4       	brcc	.+14     	; 0xc52 <vfprintf+0x9c>
     c44:	80 32       	cpi	r24, 0x20	; 32
     c46:	79 f0       	breq	.+30     	; 0xc66 <vfprintf+0xb0>
     c48:	83 32       	cpi	r24, 0x23	; 35
     c4a:	a1 f4       	brne	.+40     	; 0xc74 <vfprintf+0xbe>
     c4c:	23 2d       	mov	r18, r3
     c4e:	20 61       	ori	r18, 0x10	; 16
     c50:	1d c0       	rjmp	.+58     	; 0xc8c <vfprintf+0xd6>
     c52:	8d 32       	cpi	r24, 0x2D	; 45
     c54:	61 f0       	breq	.+24     	; 0xc6e <vfprintf+0xb8>
     c56:	80 33       	cpi	r24, 0x30	; 48
     c58:	69 f4       	brne	.+26     	; 0xc74 <vfprintf+0xbe>
     c5a:	23 2d       	mov	r18, r3
     c5c:	21 60       	ori	r18, 0x01	; 1
     c5e:	16 c0       	rjmp	.+44     	; 0xc8c <vfprintf+0xd6>
     c60:	83 2d       	mov	r24, r3
     c62:	82 60       	ori	r24, 0x02	; 2
     c64:	38 2e       	mov	r3, r24
     c66:	e3 2d       	mov	r30, r3
     c68:	e4 60       	ori	r30, 0x04	; 4
     c6a:	3e 2e       	mov	r3, r30
     c6c:	2a c0       	rjmp	.+84     	; 0xcc2 <vfprintf+0x10c>
     c6e:	f3 2d       	mov	r31, r3
     c70:	f8 60       	ori	r31, 0x08	; 8
     c72:	1d c0       	rjmp	.+58     	; 0xcae <vfprintf+0xf8>
     c74:	37 fc       	sbrc	r3, 7
     c76:	2d c0       	rjmp	.+90     	; 0xcd2 <vfprintf+0x11c>
     c78:	20 ed       	ldi	r18, 0xD0	; 208
     c7a:	28 0f       	add	r18, r24
     c7c:	2a 30       	cpi	r18, 0x0A	; 10
     c7e:	40 f0       	brcs	.+16     	; 0xc90 <vfprintf+0xda>
     c80:	8e 32       	cpi	r24, 0x2E	; 46
     c82:	b9 f4       	brne	.+46     	; 0xcb2 <vfprintf+0xfc>
     c84:	36 fc       	sbrc	r3, 6
     c86:	75 c1       	rjmp	.+746    	; 0xf72 <vfprintf+0x3bc>
     c88:	23 2d       	mov	r18, r3
     c8a:	20 64       	ori	r18, 0x40	; 64
     c8c:	32 2e       	mov	r3, r18
     c8e:	19 c0       	rjmp	.+50     	; 0xcc2 <vfprintf+0x10c>
     c90:	36 fe       	sbrs	r3, 6
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <vfprintf+0xea>
     c94:	8a e0       	ldi	r24, 0x0A	; 10
     c96:	98 9e       	mul	r9, r24
     c98:	20 0d       	add	r18, r0
     c9a:	11 24       	eor	r1, r1
     c9c:	92 2e       	mov	r9, r18
     c9e:	11 c0       	rjmp	.+34     	; 0xcc2 <vfprintf+0x10c>
     ca0:	ea e0       	ldi	r30, 0x0A	; 10
     ca2:	2e 9e       	mul	r2, r30
     ca4:	20 0d       	add	r18, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	22 2e       	mov	r2, r18
     caa:	f3 2d       	mov	r31, r3
     cac:	f0 62       	ori	r31, 0x20	; 32
     cae:	3f 2e       	mov	r3, r31
     cb0:	08 c0       	rjmp	.+16     	; 0xcc2 <vfprintf+0x10c>
     cb2:	8c 36       	cpi	r24, 0x6C	; 108
     cb4:	21 f4       	brne	.+8      	; 0xcbe <vfprintf+0x108>
     cb6:	83 2d       	mov	r24, r3
     cb8:	80 68       	ori	r24, 0x80	; 128
     cba:	38 2e       	mov	r3, r24
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <vfprintf+0x10c>
     cbe:	88 36       	cpi	r24, 0x68	; 104
     cc0:	41 f4       	brne	.+16     	; 0xcd2 <vfprintf+0x11c>
     cc2:	f7 01       	movw	r30, r14
     cc4:	93 fd       	sbrc	r25, 3
     cc6:	85 91       	lpm	r24, Z+
     cc8:	93 ff       	sbrs	r25, 3
     cca:	81 91       	ld	r24, Z+
     ccc:	7f 01       	movw	r14, r30
     cce:	81 11       	cpse	r24, r1
     cd0:	b3 cf       	rjmp	.-154    	; 0xc38 <vfprintf+0x82>
     cd2:	98 2f       	mov	r25, r24
     cd4:	9f 7d       	andi	r25, 0xDF	; 223
     cd6:	95 54       	subi	r25, 0x45	; 69
     cd8:	93 30       	cpi	r25, 0x03	; 3
     cda:	28 f4       	brcc	.+10     	; 0xce6 <vfprintf+0x130>
     cdc:	0c 5f       	subi	r16, 0xFC	; 252
     cde:	1f 4f       	sbci	r17, 0xFF	; 255
     ce0:	9f e3       	ldi	r25, 0x3F	; 63
     ce2:	99 83       	std	Y+1, r25	; 0x01
     ce4:	0d c0       	rjmp	.+26     	; 0xd00 <vfprintf+0x14a>
     ce6:	83 36       	cpi	r24, 0x63	; 99
     ce8:	31 f0       	breq	.+12     	; 0xcf6 <vfprintf+0x140>
     cea:	83 37       	cpi	r24, 0x73	; 115
     cec:	71 f0       	breq	.+28     	; 0xd0a <vfprintf+0x154>
     cee:	83 35       	cpi	r24, 0x53	; 83
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <vfprintf+0x13e>
     cf2:	55 c0       	rjmp	.+170    	; 0xd9e <vfprintf+0x1e8>
     cf4:	20 c0       	rjmp	.+64     	; 0xd36 <vfprintf+0x180>
     cf6:	f8 01       	movw	r30, r16
     cf8:	80 81       	ld	r24, Z
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	0e 5f       	subi	r16, 0xFE	; 254
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	88 24       	eor	r8, r8
     d02:	83 94       	inc	r8
     d04:	91 2c       	mov	r9, r1
     d06:	53 01       	movw	r10, r6
     d08:	12 c0       	rjmp	.+36     	; 0xd2e <vfprintf+0x178>
     d0a:	28 01       	movw	r4, r16
     d0c:	f2 e0       	ldi	r31, 0x02	; 2
     d0e:	4f 0e       	add	r4, r31
     d10:	51 1c       	adc	r5, r1
     d12:	f8 01       	movw	r30, r16
     d14:	a0 80       	ld	r10, Z
     d16:	b1 80       	ldd	r11, Z+1	; 0x01
     d18:	36 fe       	sbrs	r3, 6
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <vfprintf+0x16c>
     d1c:	69 2d       	mov	r22, r9
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <vfprintf+0x170>
     d22:	6f ef       	ldi	r22, 0xFF	; 255
     d24:	7f ef       	ldi	r23, 0xFF	; 255
     d26:	c5 01       	movw	r24, r10
     d28:	4e d1       	rcall	.+668    	; 0xfc6 <strnlen>
     d2a:	4c 01       	movw	r8, r24
     d2c:	82 01       	movw	r16, r4
     d2e:	f3 2d       	mov	r31, r3
     d30:	ff 77       	andi	r31, 0x7F	; 127
     d32:	3f 2e       	mov	r3, r31
     d34:	15 c0       	rjmp	.+42     	; 0xd60 <vfprintf+0x1aa>
     d36:	28 01       	movw	r4, r16
     d38:	22 e0       	ldi	r18, 0x02	; 2
     d3a:	42 0e       	add	r4, r18
     d3c:	51 1c       	adc	r5, r1
     d3e:	f8 01       	movw	r30, r16
     d40:	a0 80       	ld	r10, Z
     d42:	b1 80       	ldd	r11, Z+1	; 0x01
     d44:	36 fe       	sbrs	r3, 6
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <vfprintf+0x198>
     d48:	69 2d       	mov	r22, r9
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <vfprintf+0x19c>
     d4e:	6f ef       	ldi	r22, 0xFF	; 255
     d50:	7f ef       	ldi	r23, 0xFF	; 255
     d52:	c5 01       	movw	r24, r10
     d54:	2d d1       	rcall	.+602    	; 0xfb0 <strnlen_P>
     d56:	4c 01       	movw	r8, r24
     d58:	f3 2d       	mov	r31, r3
     d5a:	f0 68       	ori	r31, 0x80	; 128
     d5c:	3f 2e       	mov	r3, r31
     d5e:	82 01       	movw	r16, r4
     d60:	33 fc       	sbrc	r3, 3
     d62:	19 c0       	rjmp	.+50     	; 0xd96 <vfprintf+0x1e0>
     d64:	82 2d       	mov	r24, r2
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	88 16       	cp	r8, r24
     d6a:	99 06       	cpc	r9, r25
     d6c:	a0 f4       	brcc	.+40     	; 0xd96 <vfprintf+0x1e0>
     d6e:	b6 01       	movw	r22, r12
     d70:	80 e2       	ldi	r24, 0x20	; 32
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	33 d1       	rcall	.+614    	; 0xfdc <fputc>
     d76:	2a 94       	dec	r2
     d78:	f5 cf       	rjmp	.-22     	; 0xd64 <vfprintf+0x1ae>
     d7a:	f5 01       	movw	r30, r10
     d7c:	37 fc       	sbrc	r3, 7
     d7e:	85 91       	lpm	r24, Z+
     d80:	37 fe       	sbrs	r3, 7
     d82:	81 91       	ld	r24, Z+
     d84:	5f 01       	movw	r10, r30
     d86:	b6 01       	movw	r22, r12
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	28 d1       	rcall	.+592    	; 0xfdc <fputc>
     d8c:	21 10       	cpse	r2, r1
     d8e:	2a 94       	dec	r2
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	82 1a       	sub	r8, r18
     d94:	91 08       	sbc	r9, r1
     d96:	81 14       	cp	r8, r1
     d98:	91 04       	cpc	r9, r1
     d9a:	79 f7       	brne	.-34     	; 0xd7a <vfprintf+0x1c4>
     d9c:	e1 c0       	rjmp	.+450    	; 0xf60 <vfprintf+0x3aa>
     d9e:	84 36       	cpi	r24, 0x64	; 100
     da0:	11 f0       	breq	.+4      	; 0xda6 <vfprintf+0x1f0>
     da2:	89 36       	cpi	r24, 0x69	; 105
     da4:	39 f5       	brne	.+78     	; 0xdf4 <vfprintf+0x23e>
     da6:	f8 01       	movw	r30, r16
     da8:	37 fe       	sbrs	r3, 7
     daa:	07 c0       	rjmp	.+14     	; 0xdba <vfprintf+0x204>
     dac:	60 81       	ld	r22, Z
     dae:	71 81       	ldd	r23, Z+1	; 0x01
     db0:	82 81       	ldd	r24, Z+2	; 0x02
     db2:	93 81       	ldd	r25, Z+3	; 0x03
     db4:	0c 5f       	subi	r16, 0xFC	; 252
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	08 c0       	rjmp	.+16     	; 0xdca <vfprintf+0x214>
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	07 2e       	mov	r0, r23
     dc0:	00 0c       	add	r0, r0
     dc2:	88 0b       	sbc	r24, r24
     dc4:	99 0b       	sbc	r25, r25
     dc6:	0e 5f       	subi	r16, 0xFE	; 254
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	f3 2d       	mov	r31, r3
     dcc:	ff 76       	andi	r31, 0x6F	; 111
     dce:	3f 2e       	mov	r3, r31
     dd0:	97 ff       	sbrs	r25, 7
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <vfprintf+0x230>
     dd4:	90 95       	com	r25
     dd6:	80 95       	com	r24
     dd8:	70 95       	com	r23
     dda:	61 95       	neg	r22
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	8f 4f       	sbci	r24, 0xFF	; 255
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
     de2:	f0 68       	ori	r31, 0x80	; 128
     de4:	3f 2e       	mov	r3, r31
     de6:	2a e0       	ldi	r18, 0x0A	; 10
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	a3 01       	movw	r20, r6
     dec:	33 d1       	rcall	.+614    	; 0x1054 <__ultoa_invert>
     dee:	88 2e       	mov	r8, r24
     df0:	86 18       	sub	r8, r6
     df2:	44 c0       	rjmp	.+136    	; 0xe7c <vfprintf+0x2c6>
     df4:	85 37       	cpi	r24, 0x75	; 117
     df6:	31 f4       	brne	.+12     	; 0xe04 <vfprintf+0x24e>
     df8:	23 2d       	mov	r18, r3
     dfa:	2f 7e       	andi	r18, 0xEF	; 239
     dfc:	b2 2e       	mov	r11, r18
     dfe:	2a e0       	ldi	r18, 0x0A	; 10
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	25 c0       	rjmp	.+74     	; 0xe4e <vfprintf+0x298>
     e04:	93 2d       	mov	r25, r3
     e06:	99 7f       	andi	r25, 0xF9	; 249
     e08:	b9 2e       	mov	r11, r25
     e0a:	8f 36       	cpi	r24, 0x6F	; 111
     e0c:	c1 f0       	breq	.+48     	; 0xe3e <vfprintf+0x288>
     e0e:	18 f4       	brcc	.+6      	; 0xe16 <vfprintf+0x260>
     e10:	88 35       	cpi	r24, 0x58	; 88
     e12:	79 f0       	breq	.+30     	; 0xe32 <vfprintf+0x27c>
     e14:	ae c0       	rjmp	.+348    	; 0xf72 <vfprintf+0x3bc>
     e16:	80 37       	cpi	r24, 0x70	; 112
     e18:	19 f0       	breq	.+6      	; 0xe20 <vfprintf+0x26a>
     e1a:	88 37       	cpi	r24, 0x78	; 120
     e1c:	21 f0       	breq	.+8      	; 0xe26 <vfprintf+0x270>
     e1e:	a9 c0       	rjmp	.+338    	; 0xf72 <vfprintf+0x3bc>
     e20:	e9 2f       	mov	r30, r25
     e22:	e0 61       	ori	r30, 0x10	; 16
     e24:	be 2e       	mov	r11, r30
     e26:	b4 fe       	sbrs	r11, 4
     e28:	0d c0       	rjmp	.+26     	; 0xe44 <vfprintf+0x28e>
     e2a:	fb 2d       	mov	r31, r11
     e2c:	f4 60       	ori	r31, 0x04	; 4
     e2e:	bf 2e       	mov	r11, r31
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <vfprintf+0x28e>
     e32:	34 fe       	sbrs	r3, 4
     e34:	0a c0       	rjmp	.+20     	; 0xe4a <vfprintf+0x294>
     e36:	29 2f       	mov	r18, r25
     e38:	26 60       	ori	r18, 0x06	; 6
     e3a:	b2 2e       	mov	r11, r18
     e3c:	06 c0       	rjmp	.+12     	; 0xe4a <vfprintf+0x294>
     e3e:	28 e0       	ldi	r18, 0x08	; 8
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <vfprintf+0x298>
     e44:	20 e1       	ldi	r18, 0x10	; 16
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <vfprintf+0x298>
     e4a:	20 e1       	ldi	r18, 0x10	; 16
     e4c:	32 e0       	ldi	r19, 0x02	; 2
     e4e:	f8 01       	movw	r30, r16
     e50:	b7 fe       	sbrs	r11, 7
     e52:	07 c0       	rjmp	.+14     	; 0xe62 <vfprintf+0x2ac>
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	0c 5f       	subi	r16, 0xFC	; 252
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <vfprintf+0x2b8>
     e62:	60 81       	ld	r22, Z
     e64:	71 81       	ldd	r23, Z+1	; 0x01
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 5f       	subi	r16, 0xFE	; 254
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	a3 01       	movw	r20, r6
     e70:	f1 d0       	rcall	.+482    	; 0x1054 <__ultoa_invert>
     e72:	88 2e       	mov	r8, r24
     e74:	86 18       	sub	r8, r6
     e76:	fb 2d       	mov	r31, r11
     e78:	ff 77       	andi	r31, 0x7F	; 127
     e7a:	3f 2e       	mov	r3, r31
     e7c:	36 fe       	sbrs	r3, 6
     e7e:	0d c0       	rjmp	.+26     	; 0xe9a <vfprintf+0x2e4>
     e80:	23 2d       	mov	r18, r3
     e82:	2e 7f       	andi	r18, 0xFE	; 254
     e84:	a2 2e       	mov	r10, r18
     e86:	89 14       	cp	r8, r9
     e88:	58 f4       	brcc	.+22     	; 0xea0 <vfprintf+0x2ea>
     e8a:	34 fe       	sbrs	r3, 4
     e8c:	0b c0       	rjmp	.+22     	; 0xea4 <vfprintf+0x2ee>
     e8e:	32 fc       	sbrc	r3, 2
     e90:	09 c0       	rjmp	.+18     	; 0xea4 <vfprintf+0x2ee>
     e92:	83 2d       	mov	r24, r3
     e94:	8e 7e       	andi	r24, 0xEE	; 238
     e96:	a8 2e       	mov	r10, r24
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <vfprintf+0x2ee>
     e9a:	b8 2c       	mov	r11, r8
     e9c:	a3 2c       	mov	r10, r3
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <vfprintf+0x2f0>
     ea0:	b8 2c       	mov	r11, r8
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <vfprintf+0x2f0>
     ea4:	b9 2c       	mov	r11, r9
     ea6:	a4 fe       	sbrs	r10, 4
     ea8:	0f c0       	rjmp	.+30     	; 0xec8 <vfprintf+0x312>
     eaa:	fe 01       	movw	r30, r28
     eac:	e8 0d       	add	r30, r8
     eae:	f1 1d       	adc	r31, r1
     eb0:	80 81       	ld	r24, Z
     eb2:	80 33       	cpi	r24, 0x30	; 48
     eb4:	21 f4       	brne	.+8      	; 0xebe <vfprintf+0x308>
     eb6:	9a 2d       	mov	r25, r10
     eb8:	99 7e       	andi	r25, 0xE9	; 233
     eba:	a9 2e       	mov	r10, r25
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <vfprintf+0x31a>
     ebe:	a2 fe       	sbrs	r10, 2
     ec0:	06 c0       	rjmp	.+12     	; 0xece <vfprintf+0x318>
     ec2:	b3 94       	inc	r11
     ec4:	b3 94       	inc	r11
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <vfprintf+0x31a>
     ec8:	8a 2d       	mov	r24, r10
     eca:	86 78       	andi	r24, 0x86	; 134
     ecc:	09 f0       	breq	.+2      	; 0xed0 <vfprintf+0x31a>
     ece:	b3 94       	inc	r11
     ed0:	a3 fc       	sbrc	r10, 3
     ed2:	10 c0       	rjmp	.+32     	; 0xef4 <vfprintf+0x33e>
     ed4:	a0 fe       	sbrs	r10, 0
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <vfprintf+0x32e>
     ed8:	b2 14       	cp	r11, r2
     eda:	80 f4       	brcc	.+32     	; 0xefc <vfprintf+0x346>
     edc:	28 0c       	add	r2, r8
     ede:	92 2c       	mov	r9, r2
     ee0:	9b 18       	sub	r9, r11
     ee2:	0d c0       	rjmp	.+26     	; 0xefe <vfprintf+0x348>
     ee4:	b2 14       	cp	r11, r2
     ee6:	58 f4       	brcc	.+22     	; 0xefe <vfprintf+0x348>
     ee8:	b6 01       	movw	r22, r12
     eea:	80 e2       	ldi	r24, 0x20	; 32
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	76 d0       	rcall	.+236    	; 0xfdc <fputc>
     ef0:	b3 94       	inc	r11
     ef2:	f8 cf       	rjmp	.-16     	; 0xee4 <vfprintf+0x32e>
     ef4:	b2 14       	cp	r11, r2
     ef6:	18 f4       	brcc	.+6      	; 0xefe <vfprintf+0x348>
     ef8:	2b 18       	sub	r2, r11
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <vfprintf+0x34a>
     efc:	98 2c       	mov	r9, r8
     efe:	21 2c       	mov	r2, r1
     f00:	a4 fe       	sbrs	r10, 4
     f02:	0f c0       	rjmp	.+30     	; 0xf22 <vfprintf+0x36c>
     f04:	b6 01       	movw	r22, r12
     f06:	80 e3       	ldi	r24, 0x30	; 48
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	68 d0       	rcall	.+208    	; 0xfdc <fputc>
     f0c:	a2 fe       	sbrs	r10, 2
     f0e:	16 c0       	rjmp	.+44     	; 0xf3c <vfprintf+0x386>
     f10:	a1 fc       	sbrc	r10, 1
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <vfprintf+0x364>
     f14:	88 e7       	ldi	r24, 0x78	; 120
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <vfprintf+0x368>
     f1a:	88 e5       	ldi	r24, 0x58	; 88
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	b6 01       	movw	r22, r12
     f20:	0c c0       	rjmp	.+24     	; 0xf3a <vfprintf+0x384>
     f22:	8a 2d       	mov	r24, r10
     f24:	86 78       	andi	r24, 0x86	; 134
     f26:	51 f0       	breq	.+20     	; 0xf3c <vfprintf+0x386>
     f28:	a1 fe       	sbrs	r10, 1
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <vfprintf+0x37a>
     f2c:	8b e2       	ldi	r24, 0x2B	; 43
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <vfprintf+0x37c>
     f30:	80 e2       	ldi	r24, 0x20	; 32
     f32:	a7 fc       	sbrc	r10, 7
     f34:	8d e2       	ldi	r24, 0x2D	; 45
     f36:	b6 01       	movw	r22, r12
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	50 d0       	rcall	.+160    	; 0xfdc <fputc>
     f3c:	89 14       	cp	r8, r9
     f3e:	30 f4       	brcc	.+12     	; 0xf4c <vfprintf+0x396>
     f40:	b6 01       	movw	r22, r12
     f42:	80 e3       	ldi	r24, 0x30	; 48
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	4a d0       	rcall	.+148    	; 0xfdc <fputc>
     f48:	9a 94       	dec	r9
     f4a:	f8 cf       	rjmp	.-16     	; 0xf3c <vfprintf+0x386>
     f4c:	8a 94       	dec	r8
     f4e:	f3 01       	movw	r30, r6
     f50:	e8 0d       	add	r30, r8
     f52:	f1 1d       	adc	r31, r1
     f54:	80 81       	ld	r24, Z
     f56:	b6 01       	movw	r22, r12
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	40 d0       	rcall	.+128    	; 0xfdc <fputc>
     f5c:	81 10       	cpse	r8, r1
     f5e:	f6 cf       	rjmp	.-20     	; 0xf4c <vfprintf+0x396>
     f60:	22 20       	and	r2, r2
     f62:	09 f4       	brne	.+2      	; 0xf66 <vfprintf+0x3b0>
     f64:	4e ce       	rjmp	.-868    	; 0xc02 <vfprintf+0x4c>
     f66:	b6 01       	movw	r22, r12
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	37 d0       	rcall	.+110    	; 0xfdc <fputc>
     f6e:	2a 94       	dec	r2
     f70:	f7 cf       	rjmp	.-18     	; 0xf60 <vfprintf+0x3aa>
     f72:	f6 01       	movw	r30, r12
     f74:	86 81       	ldd	r24, Z+6	; 0x06
     f76:	97 81       	ldd	r25, Z+7	; 0x07
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <vfprintf+0x3c8>
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	2b 96       	adiw	r28, 0x0b	; 11
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	df 90       	pop	r13
     f98:	cf 90       	pop	r12
     f9a:	bf 90       	pop	r11
     f9c:	af 90       	pop	r10
     f9e:	9f 90       	pop	r9
     fa0:	8f 90       	pop	r8
     fa2:	7f 90       	pop	r7
     fa4:	6f 90       	pop	r6
     fa6:	5f 90       	pop	r5
     fa8:	4f 90       	pop	r4
     faa:	3f 90       	pop	r3
     fac:	2f 90       	pop	r2
     fae:	08 95       	ret

00000fb0 <strnlen_P>:
     fb0:	fc 01       	movw	r30, r24
     fb2:	05 90       	lpm	r0, Z+
     fb4:	61 50       	subi	r22, 0x01	; 1
     fb6:	70 40       	sbci	r23, 0x00	; 0
     fb8:	01 10       	cpse	r0, r1
     fba:	d8 f7       	brcc	.-10     	; 0xfb2 <strnlen_P+0x2>
     fbc:	80 95       	com	r24
     fbe:	90 95       	com	r25
     fc0:	8e 0f       	add	r24, r30
     fc2:	9f 1f       	adc	r25, r31
     fc4:	08 95       	ret

00000fc6 <strnlen>:
     fc6:	fc 01       	movw	r30, r24
     fc8:	61 50       	subi	r22, 0x01	; 1
     fca:	70 40       	sbci	r23, 0x00	; 0
     fcc:	01 90       	ld	r0, Z+
     fce:	01 10       	cpse	r0, r1
     fd0:	d8 f7       	brcc	.-10     	; 0xfc8 <strnlen+0x2>
     fd2:	80 95       	com	r24
     fd4:	90 95       	com	r25
     fd6:	8e 0f       	add	r24, r30
     fd8:	9f 1f       	adc	r25, r31
     fda:	08 95       	ret

00000fdc <fputc>:
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	fb 01       	movw	r30, r22
     fe6:	23 81       	ldd	r18, Z+3	; 0x03
     fe8:	21 fd       	sbrc	r18, 1
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <fputc+0x16>
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	9f ef       	ldi	r25, 0xFF	; 255
     ff0:	2c c0       	rjmp	.+88     	; 0x104a <fputc+0x6e>
     ff2:	22 ff       	sbrs	r18, 2
     ff4:	16 c0       	rjmp	.+44     	; 0x1022 <fputc+0x46>
     ff6:	46 81       	ldd	r20, Z+6	; 0x06
     ff8:	57 81       	ldd	r21, Z+7	; 0x07
     ffa:	24 81       	ldd	r18, Z+4	; 0x04
     ffc:	35 81       	ldd	r19, Z+5	; 0x05
     ffe:	42 17       	cp	r20, r18
    1000:	53 07       	cpc	r21, r19
    1002:	44 f4       	brge	.+16     	; 0x1014 <fputc+0x38>
    1004:	a0 81       	ld	r26, Z
    1006:	b1 81       	ldd	r27, Z+1	; 0x01
    1008:	9d 01       	movw	r18, r26
    100a:	2f 5f       	subi	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	31 83       	std	Z+1, r19	; 0x01
    1010:	20 83       	st	Z, r18
    1012:	8c 93       	st	X, r24
    1014:	26 81       	ldd	r18, Z+6	; 0x06
    1016:	37 81       	ldd	r19, Z+7	; 0x07
    1018:	2f 5f       	subi	r18, 0xFF	; 255
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	37 83       	std	Z+7, r19	; 0x07
    101e:	26 83       	std	Z+6, r18	; 0x06
    1020:	14 c0       	rjmp	.+40     	; 0x104a <fputc+0x6e>
    1022:	8b 01       	movw	r16, r22
    1024:	ec 01       	movw	r28, r24
    1026:	fb 01       	movw	r30, r22
    1028:	00 84       	ldd	r0, Z+8	; 0x08
    102a:	f1 85       	ldd	r31, Z+9	; 0x09
    102c:	e0 2d       	mov	r30, r0
    102e:	09 95       	icall
    1030:	89 2b       	or	r24, r25
    1032:	e1 f6       	brne	.-72     	; 0xfec <fputc+0x10>
    1034:	d8 01       	movw	r26, r16
    1036:	16 96       	adiw	r26, 0x06	; 6
    1038:	8d 91       	ld	r24, X+
    103a:	9c 91       	ld	r25, X
    103c:	17 97       	sbiw	r26, 0x07	; 7
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	17 96       	adiw	r26, 0x07	; 7
    1042:	9c 93       	st	X, r25
    1044:	8e 93       	st	-X, r24
    1046:	16 97       	sbiw	r26, 0x06	; 6
    1048:	ce 01       	movw	r24, r28
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

00001054 <__ultoa_invert>:
    1054:	fa 01       	movw	r30, r20
    1056:	aa 27       	eor	r26, r26
    1058:	28 30       	cpi	r18, 0x08	; 8
    105a:	51 f1       	breq	.+84     	; 0x10b0 <__ultoa_invert+0x5c>
    105c:	20 31       	cpi	r18, 0x10	; 16
    105e:	81 f1       	breq	.+96     	; 0x10c0 <__ultoa_invert+0x6c>
    1060:	e8 94       	clt
    1062:	6f 93       	push	r22
    1064:	6e 7f       	andi	r22, 0xFE	; 254
    1066:	6e 5f       	subi	r22, 0xFE	; 254
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	8f 4f       	sbci	r24, 0xFF	; 255
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	af 4f       	sbci	r26, 0xFF	; 255
    1070:	b1 e0       	ldi	r27, 0x01	; 1
    1072:	3e d0       	rcall	.+124    	; 0x10f0 <__ultoa_invert+0x9c>
    1074:	b4 e0       	ldi	r27, 0x04	; 4
    1076:	3c d0       	rcall	.+120    	; 0x10f0 <__ultoa_invert+0x9c>
    1078:	67 0f       	add	r22, r23
    107a:	78 1f       	adc	r23, r24
    107c:	89 1f       	adc	r24, r25
    107e:	9a 1f       	adc	r25, r26
    1080:	a1 1d       	adc	r26, r1
    1082:	68 0f       	add	r22, r24
    1084:	79 1f       	adc	r23, r25
    1086:	8a 1f       	adc	r24, r26
    1088:	91 1d       	adc	r25, r1
    108a:	a1 1d       	adc	r26, r1
    108c:	6a 0f       	add	r22, r26
    108e:	71 1d       	adc	r23, r1
    1090:	81 1d       	adc	r24, r1
    1092:	91 1d       	adc	r25, r1
    1094:	a1 1d       	adc	r26, r1
    1096:	20 d0       	rcall	.+64     	; 0x10d8 <__ultoa_invert+0x84>
    1098:	09 f4       	brne	.+2      	; 0x109c <__ultoa_invert+0x48>
    109a:	68 94       	set
    109c:	3f 91       	pop	r19
    109e:	2a e0       	ldi	r18, 0x0A	; 10
    10a0:	26 9f       	mul	r18, r22
    10a2:	11 24       	eor	r1, r1
    10a4:	30 19       	sub	r19, r0
    10a6:	30 5d       	subi	r19, 0xD0	; 208
    10a8:	31 93       	st	Z+, r19
    10aa:	de f6       	brtc	.-74     	; 0x1062 <__ultoa_invert+0xe>
    10ac:	cf 01       	movw	r24, r30
    10ae:	08 95       	ret
    10b0:	46 2f       	mov	r20, r22
    10b2:	47 70       	andi	r20, 0x07	; 7
    10b4:	40 5d       	subi	r20, 0xD0	; 208
    10b6:	41 93       	st	Z+, r20
    10b8:	b3 e0       	ldi	r27, 0x03	; 3
    10ba:	0f d0       	rcall	.+30     	; 0x10da <__ultoa_invert+0x86>
    10bc:	c9 f7       	brne	.-14     	; 0x10b0 <__ultoa_invert+0x5c>
    10be:	f6 cf       	rjmp	.-20     	; 0x10ac <__ultoa_invert+0x58>
    10c0:	46 2f       	mov	r20, r22
    10c2:	4f 70       	andi	r20, 0x0F	; 15
    10c4:	40 5d       	subi	r20, 0xD0	; 208
    10c6:	4a 33       	cpi	r20, 0x3A	; 58
    10c8:	18 f0       	brcs	.+6      	; 0x10d0 <__ultoa_invert+0x7c>
    10ca:	49 5d       	subi	r20, 0xD9	; 217
    10cc:	31 fd       	sbrc	r19, 1
    10ce:	40 52       	subi	r20, 0x20	; 32
    10d0:	41 93       	st	Z+, r20
    10d2:	02 d0       	rcall	.+4      	; 0x10d8 <__ultoa_invert+0x84>
    10d4:	a9 f7       	brne	.-22     	; 0x10c0 <__ultoa_invert+0x6c>
    10d6:	ea cf       	rjmp	.-44     	; 0x10ac <__ultoa_invert+0x58>
    10d8:	b4 e0       	ldi	r27, 0x04	; 4
    10da:	a6 95       	lsr	r26
    10dc:	97 95       	ror	r25
    10de:	87 95       	ror	r24
    10e0:	77 95       	ror	r23
    10e2:	67 95       	ror	r22
    10e4:	ba 95       	dec	r27
    10e6:	c9 f7       	brne	.-14     	; 0x10da <__ultoa_invert+0x86>
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 05       	cpc	r22, r1
    10ec:	71 05       	cpc	r23, r1
    10ee:	08 95       	ret
    10f0:	9b 01       	movw	r18, r22
    10f2:	ac 01       	movw	r20, r24
    10f4:	0a 2e       	mov	r0, r26
    10f6:	06 94       	lsr	r0
    10f8:	57 95       	ror	r21
    10fa:	47 95       	ror	r20
    10fc:	37 95       	ror	r19
    10fe:	27 95       	ror	r18
    1100:	ba 95       	dec	r27
    1102:	c9 f7       	brne	.-14     	; 0x10f6 <__ultoa_invert+0xa2>
    1104:	62 0f       	add	r22, r18
    1106:	73 1f       	adc	r23, r19
    1108:	84 1f       	adc	r24, r20
    110a:	95 1f       	adc	r25, r21
    110c:	a0 1d       	adc	r26, r0
    110e:	08 95       	ret

00001110 <_exit>:
    1110:	f8 94       	cli

00001112 <__stop_program>:
    1112:	ff cf       	rjmp	.-2      	; 0x1112 <__stop_program>

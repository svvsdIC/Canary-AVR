
Canary Software Package.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00002320  000023b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000417  008001ca  008001ca  0000247e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000247e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00002520  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004537  00000000  00000000  00002778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001636  00000000  00000000  00006caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a59  00000000  00000000  000082e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00009d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000baf  00000000  00000000  0000a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000194e  00000000  00000000  0000af77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000c8c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	9d c0       	rjmp	.+314    	; 0x16c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__vector_13>
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__vector_16>
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_21>
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	83 c0       	rjmp	.+262    	; 0x16c <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__vector_28>
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f2 0b       	sbc	r31, r18
      8e:	44 0c       	add	r4, r4
      90:	44 0c       	add	r4, r4
      92:	44 0c       	add	r4, r4
      94:	44 0c       	add	r4, r4
      96:	44 0c       	add	r4, r4
      98:	44 0c       	add	r4, r4
      9a:	44 0c       	add	r4, r4
      9c:	f2 0b       	sbc	r31, r18
      9e:	44 0c       	add	r4, r4
      a0:	44 0c       	add	r4, r4
      a2:	44 0c       	add	r4, r4
      a4:	44 0c       	add	r4, r4
      a6:	44 0c       	add	r4, r4
      a8:	44 0c       	add	r4, r4
      aa:	44 0c       	add	r4, r4
      ac:	f4 0b       	sbc	r31, r20
      ae:	44 0c       	add	r4, r4
      b0:	44 0c       	add	r4, r4
      b2:	44 0c       	add	r4, r4
      b4:	44 0c       	add	r4, r4
      b6:	44 0c       	add	r4, r4
      b8:	44 0c       	add	r4, r4
      ba:	44 0c       	add	r4, r4
      bc:	44 0c       	add	r4, r4
      be:	44 0c       	add	r4, r4
      c0:	44 0c       	add	r4, r4
      c2:	44 0c       	add	r4, r4
      c4:	44 0c       	add	r4, r4
      c6:	44 0c       	add	r4, r4
      c8:	44 0c       	add	r4, r4
      ca:	44 0c       	add	r4, r4
      cc:	f4 0b       	sbc	r31, r20
      ce:	44 0c       	add	r4, r4
      d0:	44 0c       	add	r4, r4
      d2:	44 0c       	add	r4, r4
      d4:	44 0c       	add	r4, r4
      d6:	44 0c       	add	r4, r4
      d8:	44 0c       	add	r4, r4
      da:	44 0c       	add	r4, r4
      dc:	44 0c       	add	r4, r4
      de:	44 0c       	add	r4, r4
      e0:	44 0c       	add	r4, r4
      e2:	44 0c       	add	r4, r4
      e4:	44 0c       	add	r4, r4
      e6:	44 0c       	add	r4, r4
      e8:	44 0c       	add	r4, r4
      ea:	44 0c       	add	r4, r4
      ec:	40 0c       	add	r4, r0
      ee:	44 0c       	add	r4, r4
      f0:	44 0c       	add	r4, r4
      f2:	44 0c       	add	r4, r4
      f4:	44 0c       	add	r4, r4
      f6:	44 0c       	add	r4, r4
      f8:	44 0c       	add	r4, r4
      fa:	44 0c       	add	r4, r4
      fc:	1d 0c       	add	r1, r13
      fe:	44 0c       	add	r4, r4
     100:	44 0c       	add	r4, r4
     102:	44 0c       	add	r4, r4
     104:	44 0c       	add	r4, r4
     106:	44 0c       	add	r4, r4
     108:	44 0c       	add	r4, r4
     10a:	44 0c       	add	r4, r4
     10c:	44 0c       	add	r4, r4
     10e:	44 0c       	add	r4, r4
     110:	44 0c       	add	r4, r4
     112:	44 0c       	add	r4, r4
     114:	44 0c       	add	r4, r4
     116:	44 0c       	add	r4, r4
     118:	44 0c       	add	r4, r4
     11a:	44 0c       	add	r4, r4
     11c:	11 0c       	add	r1, r1
     11e:	44 0c       	add	r4, r4
     120:	44 0c       	add	r4, r4
     122:	44 0c       	add	r4, r4
     124:	44 0c       	add	r4, r4
     126:	44 0c       	add	r4, r4
     128:	44 0c       	add	r4, r4
     12a:	44 0c       	add	r4, r4
     12c:	2f 0c       	add	r2, r15

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e4       	ldi	r29, 0x40	; 64
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e0 e2       	ldi	r30, 0x20	; 32
     142:	f3 e2       	ldi	r31, 0x23	; 35
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	aa 3c       	cpi	r26, 0xCA	; 202
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	25 e0       	ldi	r18, 0x05	; 5
     156:	aa ec       	ldi	r26, 0xCA	; 202
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a1 3e       	cpi	r26, 0xE1	; 225
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 24 0a 	call	0x1448	; 0x1448 <main>
     168:	0c 94 8e 11 	jmp	0x231c	; 0x231c <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__vector_default>

00000170 <ADC_SetMux>:
********************************************************************************/
void ADC_SetMux(uint8_t source) // 
{
	/* A short routine to clear the ADC input select mux bits then set
	those same bits to the source defined in the input.  */
	ADMUX &= 0b11100000; // Clear the select bits then
     170:	ec e7       	ldi	r30, 0x7C	; 124
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	90 81       	ld	r25, Z
     176:	90 7e       	andi	r25, 0xE0	; 224
     178:	90 83       	st	Z, r25
	ADMUX |= source; // Set the ADC input source
     17a:	90 81       	ld	r25, Z
     17c:	89 2b       	or	r24, r25
     17e:	80 83       	st	Z, r24
     180:	08 95       	ret

00000182 <ADC_init>:
}

void ADC_init(void)
{
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
	/* This routine is design to set up the ADC hardware on the ATMega324PA for our use. */
	static volatile int16_t ADC_result;
	
	// Select the external AVCC pin as the ADC reference voltage by setting the REFS[1:0] pin in the ADC MUX register to 0b01
	SetBit(ADMUX, REFS0);
     186:	ec e7       	ldi	r30, 0x7C	; 124
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	80 64       	ori	r24, 0x40	; 64
     18e:	80 83       	st	Z, r24
	
	// Set clock prescaler to 128 to provide a 156kHz ADC clock.  ADPS[2:0] = 0b111
	SetBit(ADCSRA, ADPS0);
     190:	ca e7       	ldi	r28, 0x7A	; 122
     192:	d0 e0       	ldi	r29, 0x00	; 0
     194:	88 81       	ld	r24, Y
     196:	81 60       	ori	r24, 0x01	; 1
     198:	88 83       	st	Y, r24
	SetBit(ADCSRA, ADPS1);
     19a:	88 81       	ld	r24, Y
     19c:	82 60       	ori	r24, 0x02	; 2
     19e:	88 83       	st	Y, r24
	SetBit(ADCSRA, ADPS2);
     1a0:	88 81       	ld	r24, Y
     1a2:	84 60       	ori	r24, 0x04	; 4
     1a4:	88 83       	st	Y, r24
	
	// Clears power reduction register to ensure we get power to the ADC hardware
	ClearBit(PRR0, PRADC);
     1a6:	a4 e6       	ldi	r26, 0x64	; 100
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	8c 91       	ld	r24, X
     1ac:	8e 7f       	andi	r24, 0xFE	; 254
     1ae:	8c 93       	st	X, r24
	
	// Clears the Left Adjust Result bit. This means that output will be right adjusted to get the max resolution
	ClearBit(ADMUX, ADLAR);
     1b0:	80 81       	ld	r24, Z
     1b2:	8f 7d       	andi	r24, 0xDF	; 223
     1b4:	80 83       	st	Z, r24
	
	// Sets Digital Input Disable Register. Writing a one to bits in the DIDR0 to disable the digital input circuitry
	DIDR0 = 0b00111111;
     1b6:	8f e3       	ldi	r24, 0x3F	; 63
     1b8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
     1bc:	88 81       	ld	r24, Y
     1be:	80 68       	ori	r24, 0x80	; 128
     1c0:	88 83       	st	Y, r24
	// Enable the ADC interrupt
	//*************TURNED OFF FOR LAB TESTING********************************
	// SetBit(ADCSRA, ADIE);  // May have to turn this off for debug
	
	// Set Register ADCSRB to free running mode, single input mode (ADTS[2:0] = 0x00);
	ADCSRB = 0x00;
     1c2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	//  Select test source = ground (GND;  ADMUX.MUX = 0b11111). Result should be 0V.
	ADC_SetMux(0b00011111); 
     1c6:	8f e1       	ldi	r24, 0x1F	; 31
     1c8:	d3 df       	rcall	.-90     	; 0x170 <ADC_SetMux>
	
	// Discard the first conversion and use the second one
	// Sets ADC Start Conversion bit
	SetBit(ADCSRA, ADSC);
     1ca:	88 81       	ld	r24, Y
     1cc:	80 64       	ori	r24, 0x40	; 64
     1ce:	88 83       	st	Y, r24
	while (BitIsClear(ADCSRA, ADIF))
     1d0:	ea e7       	ldi	r30, 0x7A	; 122
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	84 ff       	sbrs	r24, 4
     1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <ADC_init+0x52>
	{
		// Wait for conversion to be complete
	}
	
	//   Restart conversion. We'll use this result.
	SetBit(ADCSRA, ADSC);
     1da:	ea e7       	ldi	r30, 0x7A	; 122
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 64       	ori	r24, 0x40	; 64
     1e2:	80 83       	st	Z, r24
	while (BitIsClear(ADCSRA, ADIF))
     1e4:	80 81       	ld	r24, Z
     1e6:	84 ff       	sbrs	r24, 4
     1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <ADC_init+0x62>
	{
		// Wait for conversion to be complete
	}
	
	//  Read result and report error if not real close to zero
	ADC_result = ADCL;
     1ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     1f4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	ADC_result = ADC_result + (ADCH<<8);
     1f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1fc:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <__data_end>
     200:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <__data_end+0x1>
     204:	89 2f       	mov	r24, r25
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	98 2f       	mov	r25, r24
     20a:	88 27       	eor	r24, r24
     20c:	82 0f       	add	r24, r18
     20e:	93 1f       	adc	r25, r19
     210:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     214:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	if (abs(ADC_result) >4 ) //   We want to be within a few LSBs of zero.
     218:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     21c:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__data_end+0x1>
     220:	99 23       	and	r25, r25
     222:	1c f4       	brge	.+6      	; 0x22a <ADC_init+0xa8>
     224:	91 95       	neg	r25
     226:	81 95       	neg	r24
     228:	91 09       	sbc	r25, r1
     22a:	05 97       	sbiw	r24, 0x05	; 5
     22c:	2c f0       	brlt	.+10     	; 0x238 <ADC_init+0xb6>
	{
		SetBit(gas_sensor_initialization_errors, ADC_gnd_test_error);
     22e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <gas_sensor_initialization_errors>
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <gas_sensor_initialization_errors>
	}
	
	// Select test source = bandgap (BG;  ADMUX.MUX = 0b11110). Result should be 1.1V
	ADC_SetMux(0b00011110); 
     238:	8e e1       	ldi	r24, 0x1E	; 30
     23a:	9a df       	rcall	.-204    	; 0x170 <ADC_SetMux>
	SetBit(ADCSRA, ADSC); // Start conversion process
     23c:	ea e7       	ldi	r30, 0x7A	; 122
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 64       	ori	r24, 0x40	; 64
     244:	80 83       	st	Z, r24
	while (BitIsClear(ADCSRA, ADIF))
     246:	80 81       	ld	r24, Z
     248:	84 ff       	sbrs	r24, 4
     24a:	fd cf       	rjmp	.-6      	; 0x246 <ADC_init+0xc4>
	{
		// Wait for conversion to be complete
	}
	
	// Read result and report error if not 1.1
	ADC_result = ADCL;
     24c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     256:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	ADC_result = ADC_result + (ADCH<<8);
     25a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     25e:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <__data_end>
     262:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <__data_end+0x1>
     266:	89 2f       	mov	r24, r25
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	98 2f       	mov	r25, r24
     26c:	88 27       	eor	r24, r24
     26e:	82 0f       	add	r24, r18
     270:	93 1f       	adc	r25, r19
     272:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     276:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	ADC_result -= 225;  // 225 is the expected value: 1.1V*1023/5v=225
     27a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     27e:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__data_end+0x1>
     282:	81 5e       	subi	r24, 0xE1	; 225
     284:	91 09       	sbc	r25, r1
     286:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__data_end+0x1>
     28a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	if (abs(ADC_result) >= 5)  // We want to be within 4 of target voltage reading.
     28e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     292:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__data_end+0x1>
     296:	99 23       	and	r25, r25
     298:	1c f4       	brge	.+6      	; 0x2a0 <ADC_init+0x11e>
     29a:	91 95       	neg	r25
     29c:	81 95       	neg	r24
     29e:	91 09       	sbc	r25, r1
     2a0:	05 97       	sbiw	r24, 0x05	; 5
     2a2:	2c f0       	brlt	.+10     	; 0x2ae <ADC_init+0x12c>
	{
		SetBit(gas_sensor_initialization_errors, ADC_BG_test_error);
     2a4:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <gas_sensor_initialization_errors>
     2a8:	82 60       	ori	r24, 0x02	; 2
     2aa:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <gas_sensor_initialization_errors>
	}
	
	// Clear the analog to digital enable bit until we need it again
	ClearBit(ADCSRA, ADEN);
     2ae:	ea e7       	ldi	r30, 0x7A	; 122
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8f 77       	andi	r24, 0x7F	; 127
     2b6:	80 83       	st	Z, r24
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <BME_read_correction_coefficients>:
********************************************************************************/

/********************************************************************************
						Functions
********************************************************************************/
void BME_read_correction_coefficients(void) {
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
	// 	BMEmessageBuf[1] = 0x88; // The register we want to start reading from
	/*	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);*/
	// Let initialization transaction complete...
	/*	while ( TWI_Transceiver_Busy() );*/
	static volatile uint8_t BMEbusy = 1;
	while (BMEbusy) {
     2c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2cc:	88 23       	and	r24, r24
     2ce:	59 f1       	breq	.+86     	; 0x326 <BME_read_correction_coefficients+0x68>
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     2d0:	c3 e0       	ldi	r28, 0x03	; 3
     2d2:	d3 e0       	ldi	r29, 0x03	; 3
     2d4:	0f 2e       	mov	r0, r31
     2d6:	fc ee       	ldi	r31, 0xEC	; 236
     2d8:	ff 2e       	mov	r15, r31
     2da:	f0 2d       	mov	r31, r0
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     2dc:	03 ef       	ldi	r16, 0xF3	; 243
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1).
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     2de:	1d ee       	ldi	r17, 0xED	; 237
	/*	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);*/
	// Let initialization transaction complete...
	/*	while ( TWI_Transceiver_Busy() );*/
	static volatile uint8_t BMEbusy = 1;
	while (BMEbusy) {
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     2e0:	f8 82       	st	Y, r15
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     2e2:	09 83       	std	Y+1, r16	; 0x01
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     2e4:	62 e0       	ldi	r22, 0x02	; 2
     2e6:	ce 01       	movw	r24, r28
     2e8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     2ec:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     2f0:	81 11       	cpse	r24, r1
     2f2:	fc cf       	rjmp	.-8      	; 0x2ec <BME_read_correction_coefficients+0x2e>
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1).
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     2f4:	18 83       	st	Y, r17
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 26); //We want one bytes back, so use 2 in the function call.
     2f6:	6a e1       	ldi	r22, 0x1A	; 26
     2f8:	ce 01       	movw	r24, r28
     2fa:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     2fe:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     302:	81 11       	cpse	r24, r1
     304:	fc cf       	rjmp	.-8      	; 0x2fe <BME_read_correction_coefficients+0x40>
		// Copy the data we want...
		TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 26);
     306:	6a e1       	ldi	r22, 0x1A	; 26
     308:	ce 01       	movw	r24, r28
     30a:	0e 94 b7 0b 	call	0x176e	; 0x176e <TWI_Get_Data_From_Transceiver>
     30e:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <TWI_XFER_STATUS>
		// CHeck to see if things are still busy
		BMEbusy = ((0b00001000 & BMEmessageBuf[1])>>3);
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	83 fb       	bst	r24, 3
     316:	88 27       	eor	r24, r24
     318:	80 f9       	bld	r24, 0
     31a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	// 	BMEmessageBuf[1] = 0x88; // The register we want to start reading from
	/*	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);*/
	// Let initialization transaction complete...
	/*	while ( TWI_Transceiver_Busy() );*/
	static volatile uint8_t BMEbusy = 1;
	while (BMEbusy) {
     31e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     322:	81 11       	cpse	r24, r1
     324:	dd cf       	rjmp	.-70     	; 0x2e0 <BME_read_correction_coefficients+0x22>
	// 	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 26);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	// Device is completed the measurement cycle, now get the temperature data...
	// We want to start reading the data from register 0xF7 and read to register 0xFE - 8 bytes total
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     326:	e3 e0       	ldi	r30, 0x03	; 3
     328:	f3 e0       	ldi	r31, 0x03	; 3
     32a:	8c ee       	ldi	r24, 0xEC	; 236
     32c:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0x88; // The register we want to start reading from
     32e:	88 e8       	ldi	r24, 0x88	; 136
     330:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     332:	62 e0       	ldi	r22, 0x02	; 2
     334:	cf 01       	movw	r24, r30
     336:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     33a:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     33e:	81 11       	cpse	r24, r1
     340:	fc cf       	rjmp	.-8      	; 0x33a <BME_read_correction_coefficients+0x7c>
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read eight bytes, we pass "9".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     342:	8d ee       	ldi	r24, 0xED	; 237
     344:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 27); //We want eight bytes back, so use 9 in the function call.
     348:	6b e1       	ldi	r22, 0x1B	; 27
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     352:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     356:	81 11       	cpse	r24, r1
     358:	fc cf       	rjmp	.-8      	; 0x352 <BME_read_correction_coefficients+0x94>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 27);
     35a:	6b e1       	ldi	r22, 0x1B	; 27
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	0e 94 b7 0b 	call	0x176e	; 0x176e <TWI_Get_Data_From_Transceiver>
     364:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <TWI_XFER_STATUS>
     368:	c4 e0       	ldi	r28, 0x04	; 4
     36a:	d3 e0       	ldi	r29, 0x03	; 3
     36c:	0f e2       	ldi	r16, 0x2F	; 47
     36e:	13 e0       	ldi	r17, 0x03	; 3
     370:	2f e1       	ldi	r18, 0x1F	; 31
     372:	33 e0       	ldi	r19, 0x03	; 3
     374:	d8 01       	movw	r26, r16
     376:	fe 01       	movw	r30, r28
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<27;i++) 	{
		RawBMEdata[i] = BMEmessageBuf[i+1];
     378:	81 91       	ld	r24, Z+
     37a:	8d 93       	st	X+, r24
	while ( TWI_Transceiver_Busy() );
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 27);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<27;i++) 	{
     37c:	e2 17       	cp	r30, r18
     37e:	f3 07       	cpc	r31, r19
     380:	d9 f7       	brne	.-10     	; 0x378 <BME_read_correction_coefficients+0xba>
     382:	8b e1       	ldi	r24, 0x1B	; 27
     384:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <i.2313>
		RawBMEdata[i] = BMEmessageBuf[i+1];
	}
	dig_T1 = /*0x7069;*/ RawBMEdata[0] | (RawBMEdata[1]<<8);
     388:	ef e2       	ldi	r30, 0x2F	; 47
     38a:	f3 e0       	ldi	r31, 0x03	; 3
     38c:	81 81       	ldd	r24, Z+1	; 0x01
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	98 2f       	mov	r25, r24
     392:	88 27       	eor	r24, r24
     394:	20 81       	ld	r18, Z
     396:	82 2b       	or	r24, r18
     398:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <dig_T1+0x1>
     39c:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <dig_T1>
	dig_T2 = /*0x6738;*/ RawBMEdata[2] | (RawBMEdata[3]<<8);
     3a0:	83 81       	ldd	r24, Z+3	; 0x03
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	98 2f       	mov	r25, r24
     3a6:	88 27       	eor	r24, r24
     3a8:	22 81       	ldd	r18, Z+2	; 0x02
     3aa:	82 2b       	or	r24, r18
     3ac:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <dig_T2+0x1>
     3b0:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <dig_T2>
	dig_T3 = /*0x32; */RawBMEdata[4] | (RawBMEdata[5]<<8);
     3b4:	85 81       	ldd	r24, Z+5	; 0x05
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	98 2f       	mov	r25, r24
     3ba:	88 27       	eor	r24, r24
     3bc:	24 81       	ldd	r18, Z+4	; 0x04
     3be:	82 2b       	or	r24, r18
     3c0:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <dig_T3+0x1>
     3c4:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <dig_T3>
	dig_P1 = RawBMEdata[6] | (RawBMEdata[7]<<8);
     3c8:	87 81       	ldd	r24, Z+7	; 0x07
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	98 2f       	mov	r25, r24
     3ce:	88 27       	eor	r24, r24
     3d0:	26 81       	ldd	r18, Z+6	; 0x06
     3d2:	82 2b       	or	r24, r18
     3d4:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <dig_P1+0x1>
     3d8:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <dig_P1>
	dig_P2 = RawBMEdata[8] | (RawBMEdata[9]<<8);
     3dc:	81 85       	ldd	r24, Z+9	; 0x09
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	98 2f       	mov	r25, r24
     3e2:	88 27       	eor	r24, r24
     3e4:	20 85       	ldd	r18, Z+8	; 0x08
     3e6:	82 2b       	or	r24, r18
     3e8:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <dig_P2+0x1>
     3ec:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <dig_P2>
	dig_P3 = RawBMEdata[10] | (RawBMEdata[11]<<8);
     3f0:	83 85       	ldd	r24, Z+11	; 0x0b
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	98 2f       	mov	r25, r24
     3f6:	88 27       	eor	r24, r24
     3f8:	22 85       	ldd	r18, Z+10	; 0x0a
     3fa:	82 2b       	or	r24, r18
     3fc:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <dig_P3+0x1>
     400:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <dig_P3>
	dig_P4 = RawBMEdata[12] | (RawBMEdata[13]<<8);
     404:	85 85       	ldd	r24, Z+13	; 0x0d
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	98 2f       	mov	r25, r24
     40a:	88 27       	eor	r24, r24
     40c:	24 85       	ldd	r18, Z+12	; 0x0c
     40e:	82 2b       	or	r24, r18
     410:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <dig_P4+0x1>
     414:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <dig_P4>
	dig_P5 = RawBMEdata[14] | (RawBMEdata[15]<<8);
     418:	87 85       	ldd	r24, Z+15	; 0x0f
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	98 2f       	mov	r25, r24
     41e:	88 27       	eor	r24, r24
     420:	26 85       	ldd	r18, Z+14	; 0x0e
     422:	82 2b       	or	r24, r18
     424:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <dig_P5+0x1>
     428:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <dig_P5>
	dig_P6 = RawBMEdata[16] | (RawBMEdata[17]<<8);
     42c:	81 89       	ldd	r24, Z+17	; 0x11
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	98 2f       	mov	r25, r24
     432:	88 27       	eor	r24, r24
     434:	20 89       	ldd	r18, Z+16	; 0x10
     436:	82 2b       	or	r24, r18
     438:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <dig_P6+0x1>
     43c:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dig_P6>
	dig_P7 = RawBMEdata[18] | (RawBMEdata[19]<<8);
     440:	83 89       	ldd	r24, Z+19	; 0x13
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	98 2f       	mov	r25, r24
     446:	88 27       	eor	r24, r24
     448:	22 89       	ldd	r18, Z+18	; 0x12
     44a:	82 2b       	or	r24, r18
     44c:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <dig_P7+0x1>
     450:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <dig_P7>
	dig_P8 = RawBMEdata[20] | (RawBMEdata[21]<<8);
     454:	85 89       	ldd	r24, Z+21	; 0x15
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	98 2f       	mov	r25, r24
     45a:	88 27       	eor	r24, r24
     45c:	24 89       	ldd	r18, Z+20	; 0x14
     45e:	82 2b       	or	r24, r18
     460:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <dig_P8+0x1>
     464:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <dig_P8>
	dig_P9 = RawBMEdata[22] | (RawBMEdata[23]<<8);
     468:	87 89       	ldd	r24, Z+23	; 0x17
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	98 2f       	mov	r25, r24
     46e:	88 27       	eor	r24, r24
     470:	26 89       	ldd	r18, Z+22	; 0x16
     472:	82 2b       	or	r24, r18
     474:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <dig_P9+0x1>
     478:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <dig_P9>
	dig_H1 = RawBMEdata[25];
     47c:	81 8d       	ldd	r24, Z+25	; 0x19
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <dig_H1+0x1>
     484:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <dig_H1>
	//Now grab the rest of the humidity sensor data
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     488:	e3 e0       	ldi	r30, 0x03	; 3
     48a:	f3 e0       	ldi	r31, 0x03	; 3
     48c:	8c ee       	ldi	r24, 0xEC	; 236
     48e:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xE1; // The register we want to start reading from
     490:	81 ee       	ldi	r24, 0xE1	; 225
     492:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     494:	62 e0       	ldi	r22, 0x02	; 2
     496:	cf 01       	movw	r24, r30
     498:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     49c:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     4a0:	81 11       	cpse	r24, r1
     4a2:	fc cf       	rjmp	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read eight bytes, we pass "9".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     4a4:	8d ee       	ldi	r24, 0xED	; 237
     4a6:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 8); //We want eight bytes back, so use 9 in the function call.
     4aa:	68 e0       	ldi	r22, 0x08	; 8
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     4b4:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     4b8:	81 11       	cpse	r24, r1
     4ba:	fc cf       	rjmp	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 8);
     4bc:	68 e0       	ldi	r22, 0x08	; 8
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	93 e0       	ldi	r25, 0x03	; 3
     4c2:	0e 94 b7 0b 	call	0x176e	; 0x176e <TWI_Get_Data_From_Transceiver>
     4c6:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <TWI_XFER_STATUS>
     4ca:	2b e0       	ldi	r18, 0x0B	; 11
     4cc:	33 e0       	ldi	r19, 0x03	; 3
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<7;i++) 	{
		RawBMEdata[i] = BMEmessageBuf[i+1];
     4ce:	89 91       	ld	r24, Y+
     4d0:	f8 01       	movw	r30, r16
     4d2:	81 93       	st	Z+, r24
     4d4:	8f 01       	movw	r16, r30
	while ( TWI_Transceiver_Busy() );
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 8);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<7;i++) 	{
     4d6:	c2 17       	cp	r28, r18
     4d8:	d3 07       	cpc	r29, r19
     4da:	c9 f7       	brne	.-14     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4dc:	87 e0       	ldi	r24, 0x07	; 7
     4de:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <i.2313>
		RawBMEdata[i] = BMEmessageBuf[i+1];
	}
	dig_H2 = RawBMEdata[1] | (RawBMEdata[2]<<8);
     4e2:	ef e2       	ldi	r30, 0x2F	; 47
     4e4:	f3 e0       	ldi	r31, 0x03	; 3
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	98 2f       	mov	r25, r24
     4ec:	88 27       	eor	r24, r24
     4ee:	21 81       	ldd	r18, Z+1	; 0x01
     4f0:	82 2b       	or	r24, r18
     4f2:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <dig_H2+0x1>
     4f6:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <dig_H2>
	dig_H3 = RawBMEdata[3];
     4fa:	83 81       	ldd	r24, Z+3	; 0x03
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <dig_H3+0x1>
     502:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dig_H3>
	dig_H4 = (RawBMEdata[4]<<4) | (RawBMEdata[5]>>5);
     506:	85 81       	ldd	r24, Z+5	; 0x05
     508:	82 95       	swap	r24
     50a:	86 95       	lsr	r24
     50c:	87 70       	andi	r24, 0x07	; 7
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	24 81       	ldd	r18, Z+4	; 0x04
     512:	40 e1       	ldi	r20, 0x10	; 16
     514:	24 9f       	mul	r18, r20
     516:	90 01       	movw	r18, r0
     518:	11 24       	eor	r1, r1
     51a:	28 2b       	or	r18, r24
     51c:	39 2b       	or	r19, r25
     51e:	30 93 2c 03 	sts	0x032C, r19	; 0x80032c <dig_H4+0x1>
     522:	20 93 2b 03 	sts	0x032B, r18	; 0x80032b <dig_H4>
	dig_H5 = (RawBMEdata[5]>>5) | (RawBMEdata[6]<<4);
     526:	26 81       	ldd	r18, Z+6	; 0x06
     528:	40 e1       	ldi	r20, 0x10	; 16
     52a:	24 9f       	mul	r18, r20
     52c:	90 01       	movw	r18, r0
     52e:	11 24       	eor	r1, r1
     530:	82 2b       	or	r24, r18
     532:	93 2b       	or	r25, r19
     534:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <dig_H5+0x1>
     538:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <dig_H5>
	dig_H6 = RawBMEdata[7];
     53c:	87 81       	ldd	r24, Z+7	; 0x07
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <dig_H6+0x1>
     544:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <dig_H6>
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	08 95       	ret

00000554 <bme280basic_init>:
	// 3) Send the two bytes and restart
	// 4) First byte is the sensor I2C address (x2) and the read/write bit set to 1
	// 5) Start the transaction and send a NACK after you've received the last byte you want.
	//
	// First, reset the device per section 5.4.2 of the data sheet
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     554:	e3 e0       	ldi	r30, 0x03	; 3
     556:	f3 e0       	ldi	r31, 0x03	; 3
     558:	8c ee       	ldi	r24, 0xEC	; 236
     55a:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xE0; // The register we want to write to
     55c:	80 ee       	ldi	r24, 0xE0	; 224
     55e:	81 83       	std	Z+1, r24	; 0x01
	BMEmessageBuf[2] = 0xB6; // This value forces a reset to the device
     560:	86 eb       	ldi	r24, 0xB6	; 182
     562:	82 83       	std	Z+2, r24	; 0x02
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     564:	63 e0       	ldi	r22, 0x03	; 3
     566:	cf 01       	movw	r24, r30
     568:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
	// Wait for the transaction to complete...
	while ( TWI_Transceiver_Busy() );
     56c:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     570:	81 11       	cpse	r24, r1
     572:	fc cf       	rjmp	.-8      	; 0x56c <bme280basic_init+0x18>
	//
	// Now read the chip ID from register 0x0D
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     574:	e3 e0       	ldi	r30, 0x03	; 3
     576:	f3 e0       	ldi	r31, 0x03	; 3
     578:	8c ee       	ldi	r24, 0xEC	; 236
     57a:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xD0; // The register we want to read from
     57c:	80 ed       	ldi	r24, 0xD0	; 208
     57e:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     580:	62 e0       	ldi	r22, 0x02	; 2
     582:	cf 01       	movw	r24, r30
     584:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     588:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     58c:	81 11       	cpse	r24, r1
     58e:	fc cf       	rjmp	.-8      	; 0x588 <bme280basic_init+0x34>
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read one byte, we pass "2".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     590:	8d ee       	ldi	r24, 0xED	; 237
     592:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2); //We only want one byte back, so use 2 in the function call.
     596:	62 e0       	ldi	r22, 0x02	; 2
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     5a0:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     5a4:	81 11       	cpse	r24, r1
     5a6:	fc cf       	rjmp	.-8      	; 0x5a0 <bme280basic_init+0x4c>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 2);
     5a8:	62 e0       	ldi	r22, 0x02	; 2
     5aa:	83 e0       	ldi	r24, 0x03	; 3
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 b7 0b 	call	0x176e	; 0x176e <TWI_Get_Data_From_Transceiver>
     5b2:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <TWI_XFER_STATUS>
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	if (BMEmessageBuf[1]==0x60) {
     5b6:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <BMEmessageBuf+0x1>
     5ba:	80 36       	cpi	r24, 0x60	; 96
     5bc:	99 f5       	brne	.+102    	; 0x624 <bme280basic_init+0xd0>
		// We're talking to the right device.  Set up the control registers...
		//
		// We want Humidity oversampling set to x1 (ctrl_hum (0xF2) [2:0] = 0b001)
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     5be:	e3 e0       	ldi	r30, 0x03	; 3
     5c0:	f3 e0       	ldi	r31, 0x03	; 3
     5c2:	8c ee       	ldi	r24, 0xEC	; 236
     5c4:	80 83       	st	Z, r24
		BMEmessageBuf[1] = 0xF2; // The register we want to write to
     5c6:	82 ef       	ldi	r24, 0xF2	; 242
     5c8:	81 83       	std	Z+1, r24	; 0x01
		BMEmessageBuf[2] = 0x01; // Set humidity oversampling to x1
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	82 83       	std	Z+2, r24	; 0x02
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     5ce:	63 e0       	ldi	r22, 0x03	; 3
     5d0:	cf 01       	movw	r24, r30
     5d2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
		// Wait for the transaction to complete...
		while ( TWI_Transceiver_Busy() );
     5d6:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     5da:	81 11       	cpse	r24, r1
     5dc:	fc cf       	rjmp	.-8      	; 0x5d6 <bme280basic_init+0x82>
		//
		//Set Tstandby to its smallest value (0)
		//  Per table 12 and 28 we want the filter coefficient at 16 (config (0xF5) [4:2] = 0b100)
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     5de:	e3 e0       	ldi	r30, 0x03	; 3
     5e0:	f3 e0       	ldi	r31, 0x03	; 3
     5e2:	8c ee       	ldi	r24, 0xEC	; 236
     5e4:	80 83       	st	Z, r24
		BMEmessageBuf[1] = 0xF5; // The register we want to write to
     5e6:	85 ef       	ldi	r24, 0xF5	; 245
     5e8:	81 83       	std	Z+1, r24	; 0x01
		BMEmessageBuf[2] = (0b100<<2); // Set temp, pressure, and mode
     5ea:	80 e1       	ldi	r24, 0x10	; 16
     5ec:	82 83       	std	Z+2, r24	; 0x02
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     5ee:	63 e0       	ldi	r22, 0x03	; 3
     5f0:	cf 01       	movw	r24, r30
     5f2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
		// Wait for the transaction to complete...
		while ( TWI_Transceiver_Busy() );
     5f6:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     5fa:	81 11       	cpse	r24, r1
     5fc:	fc cf       	rjmp	.-8      	; 0x5f6 <bme280basic_init+0xa2>
		//
		BME_read_correction_coefficients();
     5fe:	5f de       	rcall	.-834    	; 0x2be <BME_read_correction_coefficients>
		// We want Temperature oversampling set to x1 (ctrl_meas (0xF4) [7:5] = 0b001)
		// We want Pressure oversampling set to x8 (ctrl_meas (0xF4) [4:2] = 0b100)
		// Put the device into Forced mode (we want to tell the device to "go measure") (ctrl_meas (0xF4) [1:0] = 0b01)
		BMEtriggerbyte = (0b01<<5) | (0b100<<2) | (0b01<<0);
     600:	81 e3       	ldi	r24, 0x31	; 49
     602:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <BMEtriggerbyte>
		// NOTE: THIS BYTE MUST BE RESENT EACH TIME TO GET A NEW MEASUREMENT
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     606:	e3 e0       	ldi	r30, 0x03	; 3
     608:	f3 e0       	ldi	r31, 0x03	; 3
     60a:	9c ee       	ldi	r25, 0xEC	; 236
     60c:	90 83       	st	Z, r25
		BMEmessageBuf[1] = 0xF4; // The register we want to write to
     60e:	94 ef       	ldi	r25, 0xF4	; 244
     610:	91 83       	std	Z+1, r25	; 0x01
		BMEmessageBuf[2] = BMEtriggerbyte; // Set temp, pressure, and mode
     612:	82 83       	std	Z+2, r24	; 0x02
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	cf 01       	movw	r24, r30
     618:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
		// Wait for the transaction to complete...
		while ( TWI_Transceiver_Busy() );
     61c:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     620:	81 11       	cpse	r24, r1
     622:	fc cf       	rjmp	.-8      	; 0x61c <bme280basic_init+0xc8>
     624:	08 95       	ret

00000626 <bme280basic_bulk_data_read>:
		//  All done - and first measurement cycle has  been kicked off!
	}
}

void bme280basic_bulk_data_read(void) {
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
	// See the bme280basic_init routine for the read and write protocols for using this sensor...
	uint8_t i;
	static volatile uint8_t BMEbusy;
	//
	// Ensure the device has completed the read cycle...
	BMEbusy = 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <BMEbusy.2367>
	while (BMEbusy) {
     636:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <BMEbusy.2367>
     63a:	88 23       	and	r24, r24
     63c:	59 f1       	breq	.+86     	; 0x694 <bme280basic_bulk_data_read+0x6e>
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     63e:	c3 e0       	ldi	r28, 0x03	; 3
     640:	d3 e0       	ldi	r29, 0x03	; 3
     642:	0f 2e       	mov	r0, r31
     644:	fc ee       	ldi	r31, 0xEC	; 236
     646:	ff 2e       	mov	r15, r31
     648:	f0 2d       	mov	r31, r0
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     64a:	03 ef       	ldi	r16, 0xF3	; 243
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1).
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     64c:	1d ee       	ldi	r17, 0xED	; 237
	static volatile uint8_t BMEbusy;
	//
	// Ensure the device has completed the read cycle...
	BMEbusy = 1;
	while (BMEbusy) {
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     64e:	f8 82       	st	Y, r15
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     650:	09 83       	std	Y+1, r16	; 0x01
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     652:	62 e0       	ldi	r22, 0x02	; 2
     654:	ce 01       	movw	r24, r28
     656:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     65a:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     65e:	81 11       	cpse	r24, r1
     660:	fc cf       	rjmp	.-8      	; 0x65a <bme280basic_bulk_data_read+0x34>
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1).
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     662:	18 83       	st	Y, r17
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2); //We want one bytes back, so use 2 in the function call.
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	ce 01       	movw	r24, r28
     668:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     66c:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     670:	81 11       	cpse	r24, r1
     672:	fc cf       	rjmp	.-8      	; 0x66c <bme280basic_bulk_data_read+0x46>
		// Copy the data we want...
		TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 2);
     674:	62 e0       	ldi	r22, 0x02	; 2
     676:	ce 01       	movw	r24, r28
     678:	0e 94 b7 0b 	call	0x176e	; 0x176e <TWI_Get_Data_From_Transceiver>
     67c:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <TWI_XFER_STATUS>
		// CHeck to see if things are still busy
		BMEbusy = ((0b00001000 & BMEmessageBuf[1])>>3);
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	83 fb       	bst	r24, 3
     684:	88 27       	eor	r24, r24
     686:	80 f9       	bld	r24, 0
     688:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <BMEbusy.2367>
	uint8_t i;
	static volatile uint8_t BMEbusy;
	//
	// Ensure the device has completed the read cycle...
	BMEbusy = 1;
	while (BMEbusy) {
     68c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <BMEbusy.2367>
     690:	81 11       	cpse	r24, r1
     692:	dd cf       	rjmp	.-70     	; 0x64e <bme280basic_bulk_data_read+0x28>
		BMEbusy = ((0b00001000 & BMEmessageBuf[1])>>3);
	}
	//
	// Device is completed the measurement cycle, now get the temperature data...
	// We want to start reading the data from register 0xF7 and read to register 0xFE - 8 bytes total
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     694:	e3 e0       	ldi	r30, 0x03	; 3
     696:	f3 e0       	ldi	r31, 0x03	; 3
     698:	8c ee       	ldi	r24, 0xEC	; 236
     69a:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xF7; // The register we want to start reading from
     69c:	87 ef       	ldi	r24, 0xF7	; 247
     69e:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     6a0:	62 e0       	ldi	r22, 0x02	; 2
     6a2:	cf 01       	movw	r24, r30
     6a4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     6a8:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     6ac:	81 11       	cpse	r24, r1
     6ae:	fc cf       	rjmp	.-8      	; 0x6a8 <bme280basic_bulk_data_read+0x82>
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read eight bytes, we pass "9".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     6b0:	8d ee       	ldi	r24, 0xED	; 237
     6b2:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 9); //We want eight bytes back, so use 9 in the function call.
     6b6:	69 e0       	ldi	r22, 0x09	; 9
     6b8:	83 e0       	ldi	r24, 0x03	; 3
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     6c0:	0e 94 87 0b 	call	0x170e	; 0x170e <TWI_Transceiver_Busy>
     6c4:	81 11       	cpse	r24, r1
     6c6:	fc cf       	rjmp	.-8      	; 0x6c0 <bme280basic_bulk_data_read+0x9a>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 9);
     6c8:	69 e0       	ldi	r22, 0x09	; 9
     6ca:	83 e0       	ldi	r24, 0x03	; 3
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	0e 94 b7 0b 	call	0x176e	; 0x176e <TWI_Get_Data_From_Transceiver>
     6d2:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <TWI_XFER_STATUS>
     6d6:	e4 e0       	ldi	r30, 0x04	; 4
     6d8:	f3 e0       	ldi	r31, 0x03	; 3
     6da:	af e2       	ldi	r26, 0x2F	; 47
     6dc:	b3 e0       	ldi	r27, 0x03	; 3
     6de:	2c e0       	ldi	r18, 0x0C	; 12
     6e0:	33 e0       	ldi	r19, 0x03	; 3
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<8;i++) 	{
		RawBMEdata[i] = BMEmessageBuf[i+1];
     6e2:	81 91       	ld	r24, Z+
     6e4:	8d 93       	st	X+, r24
	while ( TWI_Transceiver_Busy() );
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 9);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<8;i++) 	{
     6e6:	e2 17       	cp	r30, r18
     6e8:	f3 07       	cpc	r31, r19
     6ea:	d9 f7       	brne	.-10     	; 0x6e2 <bme280basic_bulk_data_read+0xbc>
		RawBMEdata[i] = BMEmessageBuf[i+1];
	}
	rawPress = ((uint32_t)RawBMEdata[0]<<12) | ((uint32_t)RawBMEdata[1]<<4) | ((uint32_t)RawBMEdata[2]>>4);
     6ec:	ef e2       	ldi	r30, 0x2F	; 47
     6ee:	f3 e0       	ldi	r31, 0x03	; 3
     6f0:	81 81       	ldd	r24, Z+1	; 0x01
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	aa 1f       	adc	r26, r26
     6fe:	bb 1f       	adc	r27, r27
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	aa 1f       	adc	r26, r26
     706:	bb 1f       	adc	r27, r27
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	aa 1f       	adc	r26, r26
     70e:	bb 1f       	adc	r27, r27
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	aa 1f       	adc	r26, r26
     716:	bb 1f       	adc	r27, r27
     718:	40 81       	ld	r20, Z
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	03 2e       	mov	r0, r19
     722:	3c e0       	ldi	r19, 0x0C	; 12
     724:	44 0f       	add	r20, r20
     726:	55 1f       	adc	r21, r21
     728:	66 1f       	adc	r22, r22
     72a:	77 1f       	adc	r23, r23
     72c:	3a 95       	dec	r19
     72e:	d1 f7       	brne	.-12     	; 0x724 <bme280basic_bulk_data_read+0xfe>
     730:	30 2d       	mov	r19, r0
     732:	84 2b       	or	r24, r20
     734:	95 2b       	or	r25, r21
     736:	a6 2b       	or	r26, r22
     738:	b7 2b       	or	r27, r23
     73a:	22 81       	ldd	r18, Z+2	; 0x02
     73c:	22 95       	swap	r18
     73e:	2f 70       	andi	r18, 0x0F	; 15
     740:	82 2b       	or	r24, r18
     742:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <rawPress>
     746:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <rawPress+0x1>
     74a:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <rawPress+0x2>
     74e:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <rawPress+0x3>
	rawTemp = ((uint32_t)RawBMEdata[3]<<12) | ((uint32_t)RawBMEdata[4]<<4) | ((uint32_t)RawBMEdata[5]>>4);
     752:	84 81       	ldd	r24, Z+4	; 0x04
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	a0 e0       	ldi	r26, 0x00	; 0
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	aa 1f       	adc	r26, r26
     760:	bb 1f       	adc	r27, r27
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	aa 1f       	adc	r26, r26
     768:	bb 1f       	adc	r27, r27
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	aa 1f       	adc	r26, r26
     770:	bb 1f       	adc	r27, r27
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	aa 1f       	adc	r26, r26
     778:	bb 1f       	adc	r27, r27
     77a:	43 81       	ldd	r20, Z+3	; 0x03
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	03 2e       	mov	r0, r19
     784:	3c e0       	ldi	r19, 0x0C	; 12
     786:	44 0f       	add	r20, r20
     788:	55 1f       	adc	r21, r21
     78a:	66 1f       	adc	r22, r22
     78c:	77 1f       	adc	r23, r23
     78e:	3a 95       	dec	r19
     790:	d1 f7       	brne	.-12     	; 0x786 <bme280basic_bulk_data_read+0x160>
     792:	30 2d       	mov	r19, r0
     794:	84 2b       	or	r24, r20
     796:	95 2b       	or	r25, r21
     798:	a6 2b       	or	r26, r22
     79a:	b7 2b       	or	r27, r23
     79c:	25 81       	ldd	r18, Z+5	; 0x05
     79e:	22 95       	swap	r18
     7a0:	2f 70       	andi	r18, 0x0F	; 15
     7a2:	82 2b       	or	r24, r18
     7a4:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <rawTemp>
     7a8:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <rawTemp+0x1>
     7ac:	a0 93 60 03 	sts	0x0360, r26	; 0x800360 <rawTemp+0x2>
     7b0:	b0 93 61 03 	sts	0x0361, r27	; 0x800361 <rawTemp+0x3>
	rawHum = ((uint32_t)RawBMEdata[6]<<8) | (uint32_t)RawBMEdata[7];
     7b4:	86 81       	ldd	r24, Z+6	; 0x06
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 e0       	ldi	r26, 0x00	; 0
     7ba:	b0 e0       	ldi	r27, 0x00	; 0
     7bc:	ba 2f       	mov	r27, r26
     7be:	a9 2f       	mov	r26, r25
     7c0:	98 2f       	mov	r25, r24
     7c2:	88 27       	eor	r24, r24
     7c4:	27 81       	ldd	r18, Z+7	; 0x07
     7c6:	82 2b       	or	r24, r18
     7c8:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <rawHum>
     7cc:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <rawHum+0x1>
     7d0:	a0 93 8c 03 	sts	0x038C, r26	; 0x80038c <rawHum+0x2>
     7d4:	b0 93 8d 03 	sts	0x038D, r27	; 0x80038d <rawHum+0x3>
	// We want Temperature oversampling set to x1 (ctrl_meas (0xF4) [7:5] = 0b001)
	// We want Pressure oversampling set to x8 (ctrl_meas (0xF4) [4:2] = 0b100)
	// Put the device into Forced mode (we want to tell the device to "go measure") (ctrl_meas (0xF4) [1:0] = 0b01)
	// BMEtriggerbyte ^= 0x03; // toggle the forced mode (not sure this is required)
	// NOTE: THIS BYTE MUST BE RESENT EACH TIME TO GET A NEW MEASUREMENT
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     7d8:	e3 e0       	ldi	r30, 0x03	; 3
     7da:	f3 e0       	ldi	r31, 0x03	; 3
     7dc:	8c ee       	ldi	r24, 0xEC	; 236
     7de:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xF4; // The register we want to write to
     7e0:	84 ef       	ldi	r24, 0xF4	; 244
     7e2:	81 83       	std	Z+1, r24	; 0x01
	BMEmessageBuf[2] = (0b01<<5) | (0b100<<2) | (0b01<<0); // Set temp, pressure, and mode
     7e4:	81 e3       	ldi	r24, 0x31	; 49
     7e6:	82 83       	std	Z+2, r24	; 0x02
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     7e8:	63 e0       	ldi	r22, 0x03	; 3
     7ea:	cf 01       	movw	r24, r30
     7ec:	94 d7       	rcall	.+3880   	; 0x1716 <TWI_Start_Transceiver_With_Data>
	// Wait for the transaction to complete...
	while ( TWI_Transceiver_Busy() );
     7ee:	8f d7       	rcall	.+3870   	; 0x170e <TWI_Transceiver_Busy>
     7f0:	81 11       	cpse	r24, r1
     7f2:	fd cf       	rjmp	.-6      	; 0x7ee <bme280basic_bulk_data_read+0x1c8>
	//  All done - and the next measurement cycle has  been kicked off!
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	08 95       	ret

00000800 <BME280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of ?5123? equals 51.23 Deg C.
// t_fine carries fine temperature as global value
long BME280_compensate_T_int32(long adc_T) {
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
	long var1, var2, T;
	var1  = ((((adc_T>>3) - (dig_T1<<1))) * (dig_T2)) >> 11;
     810:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <dig_T1>
     814:	30 91 02 03 	lds	r19, 0x0302	; 0x800302 <dig_T1+0x1>
	var2  = (((((adc_T>>4) - (dig_T1)) * ((adc_T>>4) - (dig_T1))) >> 12) * (dig_T3)) >> 14;
     818:	6b 01       	movw	r12, r22
     81a:	7c 01       	movw	r14, r24
     81c:	68 94       	set
     81e:	13 f8       	bld	r1, 3
     820:	f5 94       	asr	r15
     822:	e7 94       	ror	r14
     824:	d7 94       	ror	r13
     826:	c7 94       	ror	r12
     828:	16 94       	lsr	r1
     82a:	d1 f7       	brne	.-12     	; 0x820 <BME280_compensate_T_int32+0x20>
     82c:	c2 1a       	sub	r12, r18
     82e:	d3 0a       	sbc	r13, r19
     830:	e1 08       	sbc	r14, r1
     832:	f1 08       	sbc	r15, r1

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of ?5123? equals 51.23 Deg C.
// t_fine carries fine temperature as global value
long BME280_compensate_T_int32(long adc_T) {
	long var1, var2, T;
	var1  = ((((adc_T>>3) - (dig_T1<<1))) * (dig_T2)) >> 11;
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	68 94       	set
     83a:	12 f8       	bld	r1, 2
     83c:	b5 95       	asr	r27
     83e:	a7 95       	ror	r26
     840:	97 95       	ror	r25
     842:	87 95       	ror	r24
     844:	16 94       	lsr	r1
     846:	d1 f7       	brne	.-12     	; 0x83c <BME280_compensate_T_int32+0x3c>
     848:	22 0f       	add	r18, r18
     84a:	33 1f       	adc	r19, r19
     84c:	4c 01       	movw	r8, r24
     84e:	5d 01       	movw	r10, r26
     850:	82 1a       	sub	r8, r18
     852:	93 0a       	sbc	r9, r19
     854:	a1 08       	sbc	r10, r1
     856:	b1 08       	sbc	r11, r1
     858:	a5 01       	movw	r20, r10
     85a:	94 01       	movw	r18, r8
     85c:	a0 91 2d 03 	lds	r26, 0x032D	; 0x80032d <dig_T2>
     860:	b0 91 2e 03 	lds	r27, 0x032E	; 0x80032e <dig_T2+0x1>
     864:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__mulshisi3>
     868:	4b 01       	movw	r8, r22
     86a:	5c 01       	movw	r10, r24
     86c:	07 2e       	mov	r0, r23
     86e:	7b e0       	ldi	r23, 0x0B	; 11
     870:	b5 94       	asr	r11
     872:	a7 94       	ror	r10
     874:	97 94       	ror	r9
     876:	87 94       	ror	r8
     878:	7a 95       	dec	r23
     87a:	d1 f7       	brne	.-12     	; 0x870 <BME280_compensate_T_int32+0x70>
     87c:	70 2d       	mov	r23, r0
	var2  = (((((adc_T>>4) - (dig_T1)) * ((adc_T>>4) - (dig_T1))) >> 12) * (dig_T3)) >> 14;
     87e:	a7 01       	movw	r20, r14
     880:	96 01       	movw	r18, r12
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsi3>
     88a:	9b 01       	movw	r18, r22
     88c:	ac 01       	movw	r20, r24
     88e:	01 2e       	mov	r0, r17
     890:	1c e0       	ldi	r17, 0x0C	; 12
     892:	55 95       	asr	r21
     894:	47 95       	ror	r20
     896:	37 95       	ror	r19
     898:	27 95       	ror	r18
     89a:	1a 95       	dec	r17
     89c:	d1 f7       	brne	.-12     	; 0x892 <BME280_compensate_T_int32+0x92>
     89e:	10 2d       	mov	r17, r0
     8a0:	a0 91 bb 03 	lds	r26, 0x03BB	; 0x8003bb <dig_T3>
     8a4:	b0 91 bc 03 	lds	r27, 0x03BC	; 0x8003bc <dig_T3+0x1>
     8a8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__mulshisi3>
     8ac:	dc 01       	movw	r26, r24
     8ae:	cb 01       	movw	r24, r22
     8b0:	07 2e       	mov	r0, r23
     8b2:	7e e0       	ldi	r23, 0x0E	; 14
     8b4:	b5 95       	asr	r27
     8b6:	a7 95       	ror	r26
     8b8:	97 95       	ror	r25
     8ba:	87 95       	ror	r24
     8bc:	7a 95       	dec	r23
     8be:	d1 f7       	brne	.-12     	; 0x8b4 <BME280_compensate_T_int32+0xb4>
     8c0:	70 2d       	mov	r23, r0
	t_fine = var1 + var2;
     8c2:	88 0d       	add	r24, r8
     8c4:	99 1d       	adc	r25, r9
     8c6:	aa 1d       	adc	r26, r10
     8c8:	bb 1d       	adc	r27, r11
     8ca:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <t_fine>
     8ce:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <t_fine+0x1>
     8d2:	a0 93 c3 03 	sts	0x03C3, r26	; 0x8003c3 <t_fine+0x2>
     8d6:	b0 93 c4 03 	sts	0x03C4, r27	; 0x8003c4 <t_fine+0x3>
	T  = (t_fine * 5 + 128) >> 8;
     8da:	6c 01       	movw	r12, r24
     8dc:	7d 01       	movw	r14, r26
     8de:	cc 0c       	add	r12, r12
     8e0:	dd 1c       	adc	r13, r13
     8e2:	ee 1c       	adc	r14, r14
     8e4:	ff 1c       	adc	r15, r15
     8e6:	cc 0c       	add	r12, r12
     8e8:	dd 1c       	adc	r13, r13
     8ea:	ee 1c       	adc	r14, r14
     8ec:	ff 1c       	adc	r15, r15
     8ee:	8c 0d       	add	r24, r12
     8f0:	9d 1d       	adc	r25, r13
     8f2:	ae 1d       	adc	r26, r14
     8f4:	bf 1d       	adc	r27, r15
     8f6:	80 58       	subi	r24, 0x80	; 128
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
     8fa:	af 4f       	sbci	r26, 0xFF	; 255
     8fc:	bf 4f       	sbci	r27, 0xFF	; 255
     8fe:	69 2f       	mov	r22, r25
     900:	7a 2f       	mov	r23, r26
     902:	8b 2f       	mov	r24, r27
     904:	99 27       	eor	r25, r25
     906:	87 fd       	sbrc	r24, 7
     908:	9a 95       	dec	r25
	return T;
}
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	9f 90       	pop	r9
     918:	8f 90       	pop	r8
     91a:	08 95       	ret

0000091c <BME280_compensate_P_int64>:


//Return pressure in Pa as unsigned 32 bit int in Q24.8 format(24 int bits, 8 fractional)
//Output value of "24674867" represents 24674867/256 = 96386.2 Pa = 963.862 hPa
long BME280_compensate_P_int64(long adc_P)
{
     91c:	2f 92       	push	r2
     91e:	3f 92       	push	r3
     920:	4f 92       	push	r4
     922:	5f 92       	push	r5
     924:	6f 92       	push	r6
     926:	7f 92       	push	r7
     928:	8f 92       	push	r8
     92a:	9f 92       	push	r9
     92c:	af 92       	push	r10
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	6e 97       	sbiw	r28, 0x1e	; 30
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	cd bf       	out	0x3d, r28	; 61
     950:	6e 8b       	std	Y+22, r22	; 0x16
     952:	7f 8b       	std	Y+23, r23	; 0x17
     954:	88 8f       	std	Y+24, r24	; 0x18
     956:	99 8f       	std	Y+25, r25	; 0x19
	long long var1, var2, p;
	var1 = ((long)t_fine)-128000;
     958:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <t_fine>
     95c:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <t_fine+0x1>
     960:	a0 91 c3 03 	lds	r26, 0x03C3	; 0x8003c3 <t_fine+0x2>
     964:	b0 91 c4 03 	lds	r27, 0x03C4	; 0x8003c4 <t_fine+0x3>
     968:	8c 01       	movw	r16, r24
     96a:	9d 01       	movw	r18, r26
     96c:	14 5f       	subi	r17, 0xF4	; 244
     96e:	21 40       	sbci	r18, 0x01	; 1
     970:	31 09       	sbc	r19, r1
     972:	09 83       	std	Y+1, r16	; 0x01
     974:	1a 83       	std	Y+2, r17	; 0x02
     976:	2b 83       	std	Y+3, r18	; 0x03
     978:	3c 83       	std	Y+4, r19	; 0x04
     97a:	33 0f       	add	r19, r19
     97c:	00 0b       	sbc	r16, r16
     97e:	10 2f       	mov	r17, r16
     980:	98 01       	movw	r18, r16
     982:	0d 83       	std	Y+5, r16	; 0x05
     984:	1e 83       	std	Y+6, r17	; 0x06
     986:	2f 83       	std	Y+7, r18	; 0x07
     988:	38 87       	std	Y+8, r19	; 0x08
	var2 = var1*var1*(long)dig_P6;
     98a:	a9 80       	ldd	r10, Y+1	; 0x01
     98c:	ba 80       	ldd	r11, Y+2	; 0x02
     98e:	cb 80       	ldd	r12, Y+3	; 0x03
     990:	dc 80       	ldd	r13, Y+4	; 0x04
     992:	ed 80       	ldd	r14, Y+5	; 0x05
     994:	fe 2c       	mov	r15, r14
     996:	0e 2d       	mov	r16, r14
     998:	1e 2d       	mov	r17, r14
     99a:	2a 2d       	mov	r18, r10
     99c:	3b 2d       	mov	r19, r11
     99e:	4c 2d       	mov	r20, r12
     9a0:	5d 2d       	mov	r21, r13
     9a2:	60 2f       	mov	r22, r16
     9a4:	70 2f       	mov	r23, r16
     9a6:	80 2f       	mov	r24, r16
     9a8:	9e 2d       	mov	r25, r14
     9aa:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__muldi3>
     9ae:	2d 87       	std	Y+13, r18	; 0x0d
     9b0:	3e 87       	std	Y+14, r19	; 0x0e
     9b2:	4f 87       	std	Y+15, r20	; 0x0f
     9b4:	58 8b       	std	Y+16, r21	; 0x10
     9b6:	69 8b       	std	Y+17, r22	; 0x11
     9b8:	7a 8b       	std	Y+18, r23	; 0x12
     9ba:	8b 8b       	std	Y+19, r24	; 0x13
     9bc:	9c 8b       	std	Y+20, r25	; 0x14
     9be:	10 91 bd 03 	lds	r17, 0x03BD	; 0x8003bd <dig_P6>
     9c2:	1a 8f       	std	Y+26, r17	; 0x1a
     9c4:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <dig_P6+0x1>
     9c8:	2e 8f       	std	Y+30, r18	; 0x1e
	var2 = var2 + ((var1*(long)dig_P5)<<17);
     9ca:	30 91 84 03 	lds	r19, 0x0384	; 0x800384 <dig_P5>
     9ce:	3b 8f       	std	Y+27, r19	; 0x1b
     9d0:	40 91 85 03 	lds	r20, 0x0385	; 0x800385 <dig_P5+0x1>
     9d4:	4d 8f       	std	Y+29, r20	; 0x1d
	var2 = var2 + (((long long)dig_P4)<<35);
     9d6:	50 91 68 03 	lds	r21, 0x0368	; 0x800368 <dig_P4>
     9da:	5c 8f       	std	Y+28, r21	; 0x1c
     9dc:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <dig_P4+0x1>
     9e0:	8d 8b       	std	Y+21, r24	; 0x15
	var1 = ((var1*var1*(long)dig_P3)>>8)+((var1*(long)dig_P2)<<12);
     9e2:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <dig_P2+0x1>
     9e6:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <dig_P2>
     9ea:	93 2f       	mov	r25, r19
     9ec:	99 0f       	add	r25, r25
     9ee:	99 0b       	sbc	r25, r25
     9f0:	fe 2c       	mov	r15, r14
     9f2:	0e 2d       	mov	r16, r14
     9f4:	1e 2d       	mov	r17, r14
     9f6:	49 2f       	mov	r20, r25
     9f8:	59 2f       	mov	r21, r25
     9fa:	69 2f       	mov	r22, r25
     9fc:	79 2f       	mov	r23, r25
     9fe:	89 2f       	mov	r24, r25
     a00:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__muldi3>
     a04:	0c e0       	ldi	r16, 0x0C	; 12
     a06:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__ashldi3>
     a0a:	42 2e       	mov	r4, r18
     a0c:	53 2e       	mov	r5, r19
     a0e:	64 2e       	mov	r6, r20
     a10:	75 2e       	mov	r7, r21
     a12:	86 2e       	mov	r8, r22
     a14:	97 2e       	mov	r9, r23
     a16:	28 2e       	mov	r2, r24
     a18:	39 2e       	mov	r3, r25
     a1a:	b0 90 ac 03 	lds	r11, 0x03AC	; 0x8003ac <dig_P3+0x1>
     a1e:	a0 90 ab 03 	lds	r10, 0x03AB	; 0x8003ab <dig_P3>
     a22:	1b 2d       	mov	r17, r11
     a24:	11 0f       	add	r17, r17
     a26:	11 0b       	sbc	r17, r17
     a28:	c1 2e       	mov	r12, r17
     a2a:	d1 2e       	mov	r13, r17
     a2c:	e1 2e       	mov	r14, r17
     a2e:	f1 2e       	mov	r15, r17
     a30:	01 2f       	mov	r16, r17
     a32:	2d 85       	ldd	r18, Y+13	; 0x0d
     a34:	3e 85       	ldd	r19, Y+14	; 0x0e
     a36:	4f 85       	ldd	r20, Y+15	; 0x0f
     a38:	58 89       	ldd	r21, Y+16	; 0x10
     a3a:	69 89       	ldd	r22, Y+17	; 0x11
     a3c:	7a 89       	ldd	r23, Y+18	; 0x12
     a3e:	8b 89       	ldd	r24, Y+19	; 0x13
     a40:	9c 89       	ldd	r25, Y+20	; 0x14
     a42:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__muldi3>
     a46:	08 e0       	ldi	r16, 0x08	; 8
     a48:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__ashrdi3>
     a4c:	a4 2c       	mov	r10, r4
     a4e:	b5 2c       	mov	r11, r5
     a50:	c6 2c       	mov	r12, r6
     a52:	d7 2c       	mov	r13, r7
     a54:	e8 2c       	mov	r14, r8
     a56:	f9 2c       	mov	r15, r9
     a58:	02 2d       	mov	r16, r2
     a5a:	13 2d       	mov	r17, r3
     a5c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__adddi3>
	var1 = (((((long long)1)<<47)+var1))*((long long)dig_P1)>>33;
     a60:	70 58       	subi	r23, 0x80	; 128
     a62:	8f 4f       	sbci	r24, 0xFF	; 255
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	20 90 a9 03 	lds	r2, 0x03A9	; 0x8003a9 <dig_P1>
     a6a:	30 90 aa 03 	lds	r3, 0x03AA	; 0x8003aa <dig_P1+0x1>
     a6e:	a2 2c       	mov	r10, r2
     a70:	b3 2c       	mov	r11, r3
     a72:	c1 2c       	mov	r12, r1
     a74:	d1 2c       	mov	r13, r1
     a76:	e1 2c       	mov	r14, r1
     a78:	f1 2c       	mov	r15, r1
     a7a:	00 e0       	ldi	r16, 0x00	; 0
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__muldi3>
     a82:	01 e2       	ldi	r16, 0x21	; 33
     a84:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__ashrdi3>
     a88:	29 87       	std	Y+9, r18	; 0x09
     a8a:	3a 87       	std	Y+10, r19	; 0x0a
     a8c:	4b 87       	std	Y+11, r20	; 0x0b
     a8e:	45 2e       	mov	r4, r21
     a90:	56 2e       	mov	r5, r22
     a92:	7c 87       	std	Y+12, r23	; 0x0c
     a94:	38 2e       	mov	r3, r24
     a96:	29 2e       	mov	r2, r25
	if (var1 == 0)
     a98:	65 2d       	mov	r22, r5
     a9a:	83 2d       	mov	r24, r3
     a9c:	92 2d       	mov	r25, r2
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__cmpdi2_s8>
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <BME280_compensate_P_int64+0x18c>
     aa6:	7f c1       	rjmp	.+766    	; 0xda6 <BME280_compensate_P_int64+0x48a>
//Output value of "24674867" represents 24674867/256 = 96386.2 Pa = 963.862 hPa
long BME280_compensate_P_int64(long adc_P)
{
	long long var1, var2, p;
	var1 = ((long)t_fine)-128000;
	var2 = var1*var1*(long)dig_P6;
     aa8:	aa 8c       	ldd	r10, Y+26	; 0x1a
     aaa:	1e 8d       	ldd	r17, Y+30	; 0x1e
     aac:	11 0f       	add	r17, r17
     aae:	11 0b       	sbc	r17, r17
     ab0:	be 8c       	ldd	r11, Y+30	; 0x1e
     ab2:	c1 2e       	mov	r12, r17
     ab4:	d1 2e       	mov	r13, r17
     ab6:	e1 2e       	mov	r14, r17
     ab8:	f1 2e       	mov	r15, r17
     aba:	01 2f       	mov	r16, r17
     abc:	2d 85       	ldd	r18, Y+13	; 0x0d
     abe:	3e 85       	ldd	r19, Y+14	; 0x0e
     ac0:	4f 85       	ldd	r20, Y+15	; 0x0f
     ac2:	58 89       	ldd	r21, Y+16	; 0x10
     ac4:	69 89       	ldd	r22, Y+17	; 0x11
     ac6:	7a 89       	ldd	r23, Y+18	; 0x12
     ac8:	8b 89       	ldd	r24, Y+19	; 0x13
     aca:	9c 89       	ldd	r25, Y+20	; 0x14
     acc:	e0 d7       	rcall	.+4032   	; 0x1a8e <__muldi3>
     ace:	2d 87       	std	Y+13, r18	; 0x0d
     ad0:	3e 87       	std	Y+14, r19	; 0x0e
     ad2:	64 2e       	mov	r6, r20
     ad4:	75 2e       	mov	r7, r21
     ad6:	86 2e       	mov	r8, r22
     ad8:	97 2e       	mov	r9, r23
     ada:	88 8b       	std	Y+16, r24	; 0x10
     adc:	9f 87       	std	Y+15, r25	; 0x0f
	var2 = var2 + ((var1*(long)dig_P5)<<17);
     ade:	2b 8d       	ldd	r18, Y+27	; 0x1b
     ae0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ae2:	99 0f       	add	r25, r25
     ae4:	99 0b       	sbc	r25, r25
     ae6:	a9 80       	ldd	r10, Y+1	; 0x01
     ae8:	ba 80       	ldd	r11, Y+2	; 0x02
     aea:	cb 80       	ldd	r12, Y+3	; 0x03
     aec:	dc 80       	ldd	r13, Y+4	; 0x04
     aee:	ed 80       	ldd	r14, Y+5	; 0x05
     af0:	fe 2c       	mov	r15, r14
     af2:	0e 2d       	mov	r16, r14
     af4:	1e 2d       	mov	r17, r14
     af6:	3d 8d       	ldd	r19, Y+29	; 0x1d
     af8:	49 2f       	mov	r20, r25
     afa:	59 2f       	mov	r21, r25
     afc:	69 2f       	mov	r22, r25
     afe:	79 2f       	mov	r23, r25
     b00:	89 2f       	mov	r24, r25
     b02:	c5 d7       	rcall	.+3978   	; 0x1a8e <__muldi3>
     b04:	01 e1       	ldi	r16, 0x11	; 17
     b06:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__ashldi3>
     b0a:	ad 84       	ldd	r10, Y+13	; 0x0d
     b0c:	be 84       	ldd	r11, Y+14	; 0x0e
     b0e:	c6 2c       	mov	r12, r6
     b10:	d7 2c       	mov	r13, r7
     b12:	e8 2c       	mov	r14, r8
     b14:	f9 2c       	mov	r15, r9
     b16:	08 89       	ldd	r16, Y+16	; 0x10
     b18:	1f 85       	ldd	r17, Y+15	; 0x0f
     b1a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__adddi3>
     b1e:	a2 2e       	mov	r10, r18
     b20:	b3 2e       	mov	r11, r19
     b22:	c4 2e       	mov	r12, r20
     b24:	d5 2e       	mov	r13, r21
     b26:	e6 2e       	mov	r14, r22
     b28:	f7 2e       	mov	r15, r23
     b2a:	e8 2f       	mov	r30, r24
     b2c:	19 2f       	mov	r17, r25
	var1 = (((((long long)1)<<47)+var1))*((long long)dig_P1)>>33;
	if (var1 == 0)
	{
		return 0;
	}
	p = 1048576 - adc_P;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e1       	ldi	r26, 0x10	; 16
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	2e 89       	ldd	r18, Y+22	; 0x16
     b38:	3f 89       	ldd	r19, Y+23	; 0x17
     b3a:	48 8d       	ldd	r20, Y+24	; 0x18
     b3c:	59 8d       	ldd	r21, Y+25	; 0x19
     b3e:	82 1b       	sub	r24, r18
     b40:	93 0b       	sbc	r25, r19
     b42:	a4 0b       	sbc	r26, r20
     b44:	b5 0b       	sbc	r27, r21
     b46:	3c 01       	movw	r6, r24
     b48:	4d 01       	movw	r8, r26
     b4a:	99 0c       	add	r9, r9
     b4c:	66 08       	sbc	r6, r6
     b4e:	76 2c       	mov	r7, r6
     b50:	43 01       	movw	r8, r6
	p = (((p<<31)-var2)*3125)/var1;
     b52:	28 2f       	mov	r18, r24
     b54:	39 2f       	mov	r19, r25
     b56:	4a 2f       	mov	r20, r26
     b58:	5b 2f       	mov	r21, r27
     b5a:	66 2d       	mov	r22, r6
     b5c:	76 2d       	mov	r23, r6
     b5e:	86 2d       	mov	r24, r6
     b60:	96 2d       	mov	r25, r6
     b62:	0f e1       	ldi	r16, 0x1F	; 31
     b64:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__ashldi3>
     b68:	82 2e       	mov	r8, r18
     b6a:	93 2e       	mov	r9, r19
     b6c:	f4 2f       	mov	r31, r20
     b6e:	75 2e       	mov	r7, r21
     b70:	b6 2f       	mov	r27, r22
     b72:	a7 2f       	mov	r26, r23
     b74:	68 2e       	mov	r6, r24
     b76:	9d 83       	std	Y+5, r25	; 0x05
{
	long long var1, var2, p;
	var1 = ((long)t_fine)-128000;
	var2 = var1*var1*(long)dig_P6;
	var2 = var2 + ((var1*(long)dig_P5)<<17);
	var2 = var2 + (((long long)dig_P4)<<35);
     b78:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b7a:	9d 89       	ldd	r25, Y+21	; 0x15
     b7c:	99 0f       	add	r25, r25
     b7e:	99 0b       	sbc	r25, r25
     b80:	3d 89       	ldd	r19, Y+21	; 0x15
     b82:	49 2f       	mov	r20, r25
     b84:	59 2f       	mov	r21, r25
     b86:	69 2f       	mov	r22, r25
     b88:	79 2f       	mov	r23, r25
     b8a:	89 2f       	mov	r24, r25
     b8c:	03 e2       	ldi	r16, 0x23	; 35
     b8e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__ashldi3>
     b92:	0e 2f       	mov	r16, r30
     b94:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__adddi3>
     b98:	a2 2e       	mov	r10, r18
     b9a:	b3 2e       	mov	r11, r19
     b9c:	c4 2e       	mov	r12, r20
     b9e:	d5 2e       	mov	r13, r21
     ba0:	e6 2e       	mov	r14, r22
     ba2:	f7 2e       	mov	r15, r23
     ba4:	08 2f       	mov	r16, r24
     ba6:	19 2f       	mov	r17, r25
	if (var1 == 0)
	{
		return 0;
	}
	p = 1048576 - adc_P;
	p = (((p<<31)-var2)*3125)/var1;
     ba8:	28 2d       	mov	r18, r8
     baa:	39 2d       	mov	r19, r9
     bac:	4f 2f       	mov	r20, r31
     bae:	57 2d       	mov	r21, r7
     bb0:	6b 2f       	mov	r22, r27
     bb2:	7a 2f       	mov	r23, r26
     bb4:	86 2d       	mov	r24, r6
     bb6:	9d 81       	ldd	r25, Y+5	; 0x05
     bb8:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__subdi3>
     bbc:	82 2e       	mov	r8, r18
     bbe:	93 2e       	mov	r9, r19
     bc0:	49 83       	std	Y+1, r20	; 0x01
     bc2:	65 2e       	mov	r6, r21
     bc4:	b6 2f       	mov	r27, r22
     bc6:	a7 2f       	mov	r26, r23
     bc8:	f8 2f       	mov	r31, r24
     bca:	e9 2f       	mov	r30, r25
     bcc:	03 e0       	ldi	r16, 0x03	; 3
     bce:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__ashldi3>
     bd2:	a8 2c       	mov	r10, r8
     bd4:	b9 2c       	mov	r11, r9
     bd6:	c9 80       	ldd	r12, Y+1	; 0x01
     bd8:	d6 2c       	mov	r13, r6
     bda:	eb 2e       	mov	r14, r27
     bdc:	fa 2e       	mov	r15, r26
     bde:	0f 2f       	mov	r16, r31
     be0:	1e 2f       	mov	r17, r30
     be2:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__subdi3>
     be6:	a2 2e       	mov	r10, r18
     be8:	b3 2e       	mov	r11, r19
     bea:	c4 2e       	mov	r12, r20
     bec:	d5 2e       	mov	r13, r21
     bee:	e6 2e       	mov	r14, r22
     bf0:	f7 2e       	mov	r15, r23
     bf2:	78 2e       	mov	r7, r24
     bf4:	19 2f       	mov	r17, r25
     bf6:	03 e0       	ldi	r16, 0x03	; 3
     bf8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__ashldi3>
     bfc:	07 2d       	mov	r16, r7
     bfe:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__subdi3>
     c02:	03 e0       	ldi	r16, 0x03	; 3
     c04:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__ashldi3>
     c08:	a8 2c       	mov	r10, r8
     c0a:	b9 2c       	mov	r11, r9
     c0c:	c9 80       	ldd	r12, Y+1	; 0x01
     c0e:	d6 2c       	mov	r13, r6
     c10:	eb 2e       	mov	r14, r27
     c12:	fa 2e       	mov	r15, r26
     c14:	0f 2f       	mov	r16, r31
     c16:	1e 2f       	mov	r17, r30
     c18:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__subdi3>
     c1c:	02 e0       	ldi	r16, 0x02	; 2
     c1e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__ashldi3>
     c22:	0f 2f       	mov	r16, r31
     c24:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__subdi3>
     c28:	01 e0       	ldi	r16, 0x01	; 1
     c2a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__ashldi3>
     c2e:	0f 2f       	mov	r16, r31
     c30:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__subdi3>
     c34:	a9 84       	ldd	r10, Y+9	; 0x09
     c36:	ba 84       	ldd	r11, Y+10	; 0x0a
     c38:	cb 84       	ldd	r12, Y+11	; 0x0b
     c3a:	d4 2c       	mov	r13, r4
     c3c:	e5 2c       	mov	r14, r5
     c3e:	fc 84       	ldd	r15, Y+12	; 0x0c
     c40:	03 2d       	mov	r16, r3
     c42:	12 2d       	mov	r17, r2
     c44:	77 d7       	rcall	.+3822   	; 0x1b34 <__divdi3>
     c46:	2e 87       	std	Y+14, r18	; 0x0e
     c48:	3d 87       	std	Y+13, r19	; 0x0d
     c4a:	49 83       	std	Y+1, r20	; 0x01
     c4c:	5d 83       	std	Y+5, r21	; 0x05
     c4e:	69 87       	std	Y+9, r22	; 0x09
     c50:	7a 87       	std	Y+10, r23	; 0x0a
     c52:	8b 87       	std	Y+11, r24	; 0x0b
     c54:	9c 87       	std	Y+12, r25	; 0x0c
	var1 = (((long)dig_P9)*(p>>13)*(p>>13))>>25;
     c56:	0d e0       	ldi	r16, 0x0D	; 13
     c58:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__ashrdi3>
     c5c:	82 2e       	mov	r8, r18
     c5e:	93 2e       	mov	r9, r19
     c60:	74 2e       	mov	r7, r20
     c62:	65 2e       	mov	r6, r21
     c64:	56 2e       	mov	r5, r22
     c66:	47 2e       	mov	r4, r23
     c68:	38 2e       	mov	r3, r24
     c6a:	29 2e       	mov	r2, r25
     c6c:	30 91 ba 03 	lds	r19, 0x03BA	; 0x8003ba <dig_P9+0x1>
     c70:	20 91 b9 03 	lds	r18, 0x03B9	; 0x8003b9 <dig_P9>
     c74:	93 2f       	mov	r25, r19
     c76:	99 0f       	add	r25, r25
     c78:	99 0b       	sbc	r25, r25
     c7a:	a8 2c       	mov	r10, r8
     c7c:	b9 2c       	mov	r11, r9
     c7e:	c7 2c       	mov	r12, r7
     c80:	d6 2c       	mov	r13, r6
     c82:	e5 2c       	mov	r14, r5
     c84:	f4 2c       	mov	r15, r4
     c86:	03 2d       	mov	r16, r3
     c88:	12 2d       	mov	r17, r2
     c8a:	49 2f       	mov	r20, r25
     c8c:	59 2f       	mov	r21, r25
     c8e:	69 2f       	mov	r22, r25
     c90:	79 2f       	mov	r23, r25
     c92:	89 2f       	mov	r24, r25
     c94:	fc d6       	rcall	.+3576   	; 0x1a8e <__muldi3>
     c96:	a2 2e       	mov	r10, r18
     c98:	b3 2e       	mov	r11, r19
     c9a:	c4 2e       	mov	r12, r20
     c9c:	d5 2e       	mov	r13, r21
     c9e:	e6 2e       	mov	r14, r22
     ca0:	f7 2e       	mov	r15, r23
     ca2:	08 2f       	mov	r16, r24
     ca4:	19 2f       	mov	r17, r25
     ca6:	28 2d       	mov	r18, r8
     ca8:	39 2d       	mov	r19, r9
     caa:	47 2d       	mov	r20, r7
     cac:	56 2d       	mov	r21, r6
     cae:	65 2d       	mov	r22, r5
     cb0:	74 2d       	mov	r23, r4
     cb2:	83 2d       	mov	r24, r3
     cb4:	92 2d       	mov	r25, r2
     cb6:	eb d6       	rcall	.+3542   	; 0x1a8e <__muldi3>
     cb8:	09 e1       	ldi	r16, 0x19	; 25
     cba:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__ashrdi3>
     cbe:	a2 2e       	mov	r10, r18
     cc0:	b3 2e       	mov	r11, r19
     cc2:	c4 2e       	mov	r12, r20
     cc4:	d5 2e       	mov	r13, r21
     cc6:	e6 2e       	mov	r14, r22
     cc8:	f7 2e       	mov	r15, r23
     cca:	08 2f       	mov	r16, r24
     ccc:	19 2f       	mov	r17, r25
	var2 = (((long)dig_P8)*p)>>19;
	p = ((p+var1+var2)>>8)+(((long)dig_P7)<<4);
     cce:	2e 85       	ldd	r18, Y+14	; 0x0e
     cd0:	3d 85       	ldd	r19, Y+13	; 0x0d
     cd2:	49 81       	ldd	r20, Y+1	; 0x01
     cd4:	5d 81       	ldd	r21, Y+5	; 0x05
     cd6:	69 85       	ldd	r22, Y+9	; 0x09
     cd8:	7a 85       	ldd	r23, Y+10	; 0x0a
     cda:	8b 85       	ldd	r24, Y+11	; 0x0b
     cdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     cde:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__adddi3>
     ce2:	22 2e       	mov	r2, r18
     ce4:	33 2e       	mov	r3, r19
     ce6:	44 2e       	mov	r4, r20
     ce8:	55 2e       	mov	r5, r21
     cea:	66 2e       	mov	r6, r22
     cec:	77 2e       	mov	r7, r23
     cee:	88 2e       	mov	r8, r24
     cf0:	99 2e       	mov	r9, r25
		return 0;
	}
	p = 1048576 - adc_P;
	p = (((p<<31)-var2)*3125)/var1;
	var1 = (((long)dig_P9)*(p>>13)*(p>>13))>>25;
	var2 = (((long)dig_P8)*p)>>19;
     cf2:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <dig_P8+0x1>
     cf6:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <dig_P8>
     cfa:	93 2f       	mov	r25, r19
     cfc:	99 0f       	add	r25, r25
     cfe:	99 0b       	sbc	r25, r25
     d00:	ae 84       	ldd	r10, Y+14	; 0x0e
     d02:	bd 84       	ldd	r11, Y+13	; 0x0d
     d04:	c9 80       	ldd	r12, Y+1	; 0x01
     d06:	dd 80       	ldd	r13, Y+5	; 0x05
     d08:	e9 84       	ldd	r14, Y+9	; 0x09
     d0a:	fa 84       	ldd	r15, Y+10	; 0x0a
     d0c:	0b 85       	ldd	r16, Y+11	; 0x0b
     d0e:	1c 85       	ldd	r17, Y+12	; 0x0c
     d10:	49 2f       	mov	r20, r25
     d12:	59 2f       	mov	r21, r25
     d14:	69 2f       	mov	r22, r25
     d16:	79 2f       	mov	r23, r25
     d18:	89 2f       	mov	r24, r25
     d1a:	b9 d6       	rcall	.+3442   	; 0x1a8e <__muldi3>
     d1c:	03 e1       	ldi	r16, 0x13	; 19
     d1e:	f1 d7       	rcall	.+4066   	; 0x1d02 <__ashrdi3>
     d20:	a2 2e       	mov	r10, r18
     d22:	b3 2e       	mov	r11, r19
     d24:	c4 2e       	mov	r12, r20
     d26:	d5 2e       	mov	r13, r21
     d28:	e6 2e       	mov	r14, r22
     d2a:	f7 2e       	mov	r15, r23
     d2c:	08 2f       	mov	r16, r24
     d2e:	19 2f       	mov	r17, r25
	p = ((p+var1+var2)>>8)+(((long)dig_P7)<<4);
     d30:	22 2d       	mov	r18, r2
     d32:	33 2d       	mov	r19, r3
     d34:	44 2d       	mov	r20, r4
     d36:	55 2d       	mov	r21, r5
     d38:	66 2d       	mov	r22, r6
     d3a:	77 2d       	mov	r23, r7
     d3c:	88 2d       	mov	r24, r8
     d3e:	99 2d       	mov	r25, r9
     d40:	fe d7       	rcall	.+4092   	; 0x1d3e <__adddi3>
     d42:	08 e0       	ldi	r16, 0x08	; 8
     d44:	de d7       	rcall	.+4028   	; 0x1d02 <__ashrdi3>
     d46:	40 90 ff 02 	lds	r4, 0x02FF	; 0x8002ff <dig_P7>
     d4a:	50 90 00 03 	lds	r5, 0x0300	; 0x800300 <dig_P7+0x1>
     d4e:	05 2c       	mov	r0, r5
     d50:	00 0c       	add	r0, r0
     d52:	66 08       	sbc	r6, r6
     d54:	77 08       	sbc	r7, r7
     d56:	44 0c       	add	r4, r4
     d58:	55 1c       	adc	r5, r5
     d5a:	66 1c       	adc	r6, r6
     d5c:	77 1c       	adc	r7, r7
     d5e:	44 0c       	add	r4, r4
     d60:	55 1c       	adc	r5, r5
     d62:	66 1c       	adc	r6, r6
     d64:	77 1c       	adc	r7, r7
     d66:	44 0c       	add	r4, r4
     d68:	55 1c       	adc	r5, r5
     d6a:	66 1c       	adc	r6, r6
     d6c:	77 1c       	adc	r7, r7
     d6e:	44 0c       	add	r4, r4
     d70:	55 1c       	adc	r5, r5
     d72:	66 1c       	adc	r6, r6
     d74:	77 1c       	adc	r7, r7
     d76:	83 01       	movw	r16, r6
     d78:	72 01       	movw	r14, r4
     d7a:	11 0f       	add	r17, r17
     d7c:	ee 08       	sbc	r14, r14
     d7e:	fe 2c       	mov	r15, r14
     d80:	87 01       	movw	r16, r14
     d82:	e9 82       	std	Y+1, r14	; 0x01
     d84:	fa 82       	std	Y+2, r15	; 0x02
     d86:	0b 83       	std	Y+3, r16	; 0x03
     d88:	1c 83       	std	Y+4, r17	; 0x04
     d8a:	a4 2c       	mov	r10, r4
     d8c:	b5 2c       	mov	r11, r5
     d8e:	c6 2c       	mov	r12, r6
     d90:	d7 2c       	mov	r13, r7
     d92:	e9 80       	ldd	r14, Y+1	; 0x01
     d94:	fe 2c       	mov	r15, r14
     d96:	0e 2d       	mov	r16, r14
     d98:	1e 2d       	mov	r17, r14
     d9a:	d1 d7       	rcall	.+4002   	; 0x1d3e <__adddi3>
	return(long)p;
     d9c:	62 2f       	mov	r22, r18
     d9e:	73 2f       	mov	r23, r19
     da0:	84 2f       	mov	r24, r20
     da2:	95 2f       	mov	r25, r21
     da4:	04 c0       	rjmp	.+8      	; 0xdae <BME280_compensate_P_int64+0x492>
	var2 = var2 + (((long long)dig_P4)<<35);
	var1 = ((var1*var1*(long)dig_P3)>>8)+((var1*(long)dig_P2)<<12);
	var1 = (((((long long)1)<<47)+var1))*((long long)dig_P1)>>33;
	if (var1 == 0)
	{
		return 0;
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
	p = (((p<<31)-var2)*3125)/var1;
	var1 = (((long)dig_P9)*(p>>13)*(p>>13))>>25;
	var2 = (((long)dig_P8)*p)>>19;
	p = ((p+var1+var2)>>8)+(((long)dig_P7)<<4);
	return(long)p;
}
     dae:	6e 96       	adiw	r28, 0x1e	; 30
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	bf 90       	pop	r11
     dcc:	af 90       	pop	r10
     dce:	9f 90       	pop	r9
     dd0:	8f 90       	pop	r8
     dd2:	7f 90       	pop	r7
     dd4:	6f 90       	pop	r6
     dd6:	5f 90       	pop	r5
     dd8:	4f 90       	pop	r4
     dda:	3f 90       	pop	r3
     ddc:	2f 90       	pop	r2
     dde:	08 95       	ret

00000de0 <bme280_compensate_H_int32>:

// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of ?47445? represents 47445/1024 = 46.333 %RH
long bme280_compensate_H_int32(long adc_H)
{
     de0:	2f 92       	push	r2
     de2:	3f 92       	push	r3
     de4:	4f 92       	push	r4
     de6:	5f 92       	push	r5
     de8:	6f 92       	push	r6
     dea:	7f 92       	push	r7
     dec:	8f 92       	push	r8
     dee:	9f 92       	push	r9
     df0:	af 92       	push	r10
     df2:	bf 92       	push	r11
     df4:	cf 92       	push	r12
     df6:	df 92       	push	r13
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	67 97       	sbiw	r28, 0x17	; 23
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	2b 01       	movw	r4, r22
     e16:	3c 01       	movw	r6, r24
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
     e18:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <t_fine>
     e1c:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <t_fine+0x1>
     e20:	a0 91 c3 03 	lds	r26, 0x03C3	; 0x8003c3 <t_fine+0x2>
     e24:	b0 91 c4 03 	lds	r27, 0x03C4	; 0x8003c4 <t_fine+0x3>
     e28:	6c 01       	movw	r12, r24
     e2a:	7d 01       	movw	r14, r26
     e2c:	ff 0c       	add	r15, r15
     e2e:	cc 08       	sbc	r12, r12
     e30:	dc 2c       	mov	r13, r12
     e32:	76 01       	movw	r14, r12
     e34:	28 2f       	mov	r18, r24
     e36:	39 2f       	mov	r19, r25
     e38:	4a 2f       	mov	r20, r26
     e3a:	5b 2f       	mov	r21, r27
     e3c:	6c 2d       	mov	r22, r12
     e3e:	7c 2d       	mov	r23, r12
     e40:	8c 2d       	mov	r24, r12
     e42:	9c 2d       	mov	r25, r12
     e44:	3c 52       	subi	r19, 0x2C	; 44
     e46:	41 40       	sbci	r20, 0x01	; 1
     e48:	51 09       	sbc	r21, r1
     e4a:	61 09       	sbc	r22, r1
     e4c:	71 09       	sbc	r23, r1
     e4e:	81 09       	sbc	r24, r1
     e50:	91 09       	sbc	r25, r1
     e52:	2f 8b       	std	Y+23, r18	; 0x17
     e54:	3e 8b       	std	Y+22, r19	; 0x16
     e56:	49 83       	std	Y+1, r20	; 0x01
     e58:	59 87       	std	Y+9, r21	; 0x09
     e5a:	6a 87       	std	Y+10, r22	; 0x0a
     e5c:	7b 87       	std	Y+11, r23	; 0x0b
     e5e:	8c 87       	std	Y+12, r24	; 0x0c
     e60:	9d 87       	std	Y+13, r25	; 0x0d
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
     e62:	03 2e       	mov	r0, r19
     e64:	3e e0       	ldi	r19, 0x0E	; 14
     e66:	44 0c       	add	r4, r4
     e68:	55 1c       	adc	r5, r5
     e6a:	66 1c       	adc	r6, r6
     e6c:	77 1c       	adc	r7, r7
     e6e:	3a 95       	dec	r19
     e70:	d1 f7       	brne	.-12     	; 0xe66 <bme280_compensate_H_int32+0x86>
     e72:	30 2d       	mov	r19, r0
     e74:	53 01       	movw	r10, r6
     e76:	42 01       	movw	r8, r4
     e78:	bb 0c       	add	r11, r11
     e7a:	88 08       	sbc	r8, r8
     e7c:	98 2c       	mov	r9, r8
     e7e:	54 01       	movw	r10, r8
     e80:	30 91 2c 03 	lds	r19, 0x032C	; 0x80032c <dig_H4+0x1>
     e84:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <dig_H4>
     e88:	93 2f       	mov	r25, r19
     e8a:	99 0f       	add	r25, r25
     e8c:	99 0b       	sbc	r25, r25
     e8e:	49 2f       	mov	r20, r25
     e90:	59 2f       	mov	r21, r25
     e92:	69 2f       	mov	r22, r25
     e94:	79 2f       	mov	r23, r25
     e96:	89 2f       	mov	r24, r25
     e98:	04 e1       	ldi	r16, 0x14	; 20
     e9a:	1a d7       	rcall	.+3636   	; 0x1cd0 <__ashldi3>
     e9c:	f2 2f       	mov	r31, r18
     e9e:	e3 2f       	mov	r30, r19
     ea0:	c4 2e       	mov	r12, r20
     ea2:	d5 2e       	mov	r13, r21
     ea4:	e6 2e       	mov	r14, r22
     ea6:	f7 2e       	mov	r15, r23
     ea8:	08 2f       	mov	r16, r24
     eaa:	19 2f       	mov	r17, r25
     eac:	24 2d       	mov	r18, r4
     eae:	35 2d       	mov	r19, r5
     eb0:	46 2d       	mov	r20, r6
     eb2:	57 2d       	mov	r21, r7
     eb4:	68 2d       	mov	r22, r8
     eb6:	78 2d       	mov	r23, r8
     eb8:	88 2d       	mov	r24, r8
     eba:	98 2d       	mov	r25, r8
     ebc:	af 2e       	mov	r10, r31
     ebe:	be 2e       	mov	r11, r30
     ec0:	47 d7       	rcall	.+3726   	; 0x1d50 <__subdi3>
     ec2:	22 2e       	mov	r2, r18
     ec4:	33 2e       	mov	r3, r19
     ec6:	44 2e       	mov	r4, r20
     ec8:	55 2e       	mov	r5, r21
     eca:	66 2e       	mov	r6, r22
     ecc:	77 2e       	mov	r7, r23
     ece:	88 2e       	mov	r8, r24
     ed0:	99 2e       	mov	r9, r25
     ed2:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <dig_H5+0x1>
     ed6:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <dig_H5>
     eda:	93 2f       	mov	r25, r19
     edc:	99 0f       	add	r25, r25
     ede:	99 0b       	sbc	r25, r25
     ee0:	af 88       	ldd	r10, Y+23	; 0x17
     ee2:	be 88       	ldd	r11, Y+22	; 0x16
     ee4:	c9 80       	ldd	r12, Y+1	; 0x01
     ee6:	d9 84       	ldd	r13, Y+9	; 0x09
     ee8:	ea 84       	ldd	r14, Y+10	; 0x0a
     eea:	fb 84       	ldd	r15, Y+11	; 0x0b
     eec:	0c 85       	ldd	r16, Y+12	; 0x0c
     eee:	1d 85       	ldd	r17, Y+13	; 0x0d
     ef0:	49 2f       	mov	r20, r25
     ef2:	59 2f       	mov	r21, r25
     ef4:	69 2f       	mov	r22, r25
     ef6:	79 2f       	mov	r23, r25
     ef8:	89 2f       	mov	r24, r25
     efa:	c9 d5       	rcall	.+2962   	; 0x1a8e <__muldi3>
     efc:	a2 2e       	mov	r10, r18
     efe:	b3 2e       	mov	r11, r19
     f00:	c4 2e       	mov	r12, r20
     f02:	d5 2e       	mov	r13, r21
     f04:	e6 2e       	mov	r14, r22
     f06:	f7 2e       	mov	r15, r23
     f08:	08 2f       	mov	r16, r24
     f0a:	19 2f       	mov	r17, r25
     f0c:	22 2d       	mov	r18, r2
     f0e:	33 2d       	mov	r19, r3
     f10:	44 2d       	mov	r20, r4
     f12:	55 2d       	mov	r21, r5
     f14:	66 2d       	mov	r22, r6
     f16:	77 2d       	mov	r23, r7
     f18:	88 2d       	mov	r24, r8
     f1a:	99 2d       	mov	r25, r9
     f1c:	19 d7       	rcall	.+3634   	; 0x1d50 <__subdi3>
     f1e:	30 5c       	subi	r19, 0xC0	; 192
     f20:	4f 4f       	sbci	r20, 0xFF	; 255
     f22:	5f 4f       	sbci	r21, 0xFF	; 255
     f24:	6f 4f       	sbci	r22, 0xFF	; 255
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	8f 4f       	sbci	r24, 0xFF	; 255
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
     f2c:	0f e0       	ldi	r16, 0x0F	; 15
     f2e:	e9 d6       	rcall	.+3538   	; 0x1d02 <__ashrdi3>
     f30:	2e 87       	std	Y+14, r18	; 0x0e
     f32:	3f 87       	std	Y+15, r19	; 0x0f
     f34:	48 8b       	std	Y+16, r20	; 0x10
     f36:	59 8b       	std	Y+17, r21	; 0x11
     f38:	6a 8b       	std	Y+18, r22	; 0x12
     f3a:	7b 8b       	std	Y+19, r23	; 0x13
     f3c:	8c 8b       	std	Y+20, r24	; 0x14
     f3e:	9d 8b       	std	Y+21, r25	; 0x15
     f40:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <dig_H6+0x1>
     f44:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <dig_H6>
     f48:	93 2f       	mov	r25, r19
     f4a:	99 0f       	add	r25, r25
     f4c:	99 0b       	sbc	r25, r25
     f4e:	af 88       	ldd	r10, Y+23	; 0x17
     f50:	be 88       	ldd	r11, Y+22	; 0x16
     f52:	c9 80       	ldd	r12, Y+1	; 0x01
     f54:	d9 84       	ldd	r13, Y+9	; 0x09
     f56:	ea 84       	ldd	r14, Y+10	; 0x0a
     f58:	fb 84       	ldd	r15, Y+11	; 0x0b
     f5a:	0c 85       	ldd	r16, Y+12	; 0x0c
     f5c:	1d 85       	ldd	r17, Y+13	; 0x0d
     f5e:	49 2f       	mov	r20, r25
     f60:	59 2f       	mov	r21, r25
     f62:	69 2f       	mov	r22, r25
     f64:	79 2f       	mov	r23, r25
     f66:	89 2f       	mov	r24, r25
     f68:	92 d5       	rcall	.+2852   	; 0x1a8e <__muldi3>
     f6a:	0a e0       	ldi	r16, 0x0A	; 10
     f6c:	ca d6       	rcall	.+3476   	; 0x1d02 <__ashrdi3>
     f6e:	82 2e       	mov	r8, r18
     f70:	93 2e       	mov	r9, r19
     f72:	74 2e       	mov	r7, r20
     f74:	65 2e       	mov	r6, r21
     f76:	56 2e       	mov	r5, r22
     f78:	47 2e       	mov	r4, r23
     f7a:	38 2e       	mov	r3, r24
     f7c:	29 2e       	mov	r2, r25
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
     f7e:	40 91 b3 03 	lds	r20, 0x03B3	; 0x8003b3 <dig_H3>
     f82:	50 91 b4 03 	lds	r21, 0x03B4	; 0x8003b4 <dig_H3+0x1>
long bme280_compensate_H_int32(long adc_H)
{
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
     f86:	0c 85       	ldd	r16, Y+12	; 0x0c
     f88:	24 2f       	mov	r18, r20
     f8a:	35 2f       	mov	r19, r21
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	7a d5       	rcall	.+2804   	; 0x1a8e <__muldi3>
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
     f9a:	0b e0       	ldi	r16, 0x0B	; 11
     f9c:	b2 d6       	rcall	.+3428   	; 0x1d02 <__ashrdi3>
     f9e:	30 58       	subi	r19, 0x80	; 128
     fa0:	4f 4f       	sbci	r20, 0xFF	; 255
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	6f 4f       	sbci	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
long bme280_compensate_H_int32(long adc_H)
{
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
     fac:	a2 2e       	mov	r10, r18
     fae:	b3 2e       	mov	r11, r19
     fb0:	c4 2e       	mov	r12, r20
     fb2:	d5 2e       	mov	r13, r21
     fb4:	e6 2e       	mov	r14, r22
     fb6:	f7 2e       	mov	r15, r23
     fb8:	08 2f       	mov	r16, r24
     fba:	19 2f       	mov	r17, r25
     fbc:	28 2d       	mov	r18, r8
     fbe:	39 2d       	mov	r19, r9
     fc0:	47 2d       	mov	r20, r7
     fc2:	56 2d       	mov	r21, r6
     fc4:	65 2d       	mov	r22, r5
     fc6:	74 2d       	mov	r23, r4
     fc8:	83 2d       	mov	r24, r3
     fca:	92 2d       	mov	r25, r2
     fcc:	60 d5       	rcall	.+2752   	; 0x1a8e <__muldi3>
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
     fce:	0a e0       	ldi	r16, 0x0A	; 10
     fd0:	98 d6       	rcall	.+3376   	; 0x1d02 <__ashrdi3>
     fd2:	40 5e       	subi	r20, 0xE0	; 224
     fd4:	5f 4f       	sbci	r21, 0xFF	; 255
     fd6:	6f 4f       	sbci	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
	((long long)dig_H2) + 8192) >> 14));
     fde:	b0 90 c0 03 	lds	r11, 0x03C0	; 0x8003c0 <dig_H2+0x1>
     fe2:	a0 90 bf 03 	lds	r10, 0x03BF	; 0x8003bf <dig_H2>
     fe6:	1b 2d       	mov	r17, r11
     fe8:	11 0f       	add	r17, r17
     fea:	11 0b       	sbc	r17, r17
{
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
     fec:	c1 2e       	mov	r12, r17
     fee:	d1 2e       	mov	r13, r17
     ff0:	e1 2e       	mov	r14, r17
     ff2:	f1 2e       	mov	r15, r17
     ff4:	01 2f       	mov	r16, r17
     ff6:	4b d5       	rcall	.+2710   	; 0x1a8e <__muldi3>
	((long long)dig_H2) + 8192) >> 14));
     ff8:	30 5e       	subi	r19, 0xE0	; 224
     ffa:	4f 4f       	sbci	r20, 0xFF	; 255
     ffc:	5f 4f       	sbci	r21, 0xFF	; 255
     ffe:	6f 4f       	sbci	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	0e e0       	ldi	r16, 0x0E	; 14
    1008:	7c d6       	rcall	.+3320   	; 0x1d02 <__ashrdi3>
// Output value of ?47445? represents 47445/1024 = 46.333 %RH
long bme280_compensate_H_int32(long adc_H)
{
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
    100a:	a2 2e       	mov	r10, r18
    100c:	b3 2e       	mov	r11, r19
    100e:	c4 2e       	mov	r12, r20
    1010:	d5 2e       	mov	r13, r21
    1012:	e6 2e       	mov	r14, r22
    1014:	f7 2e       	mov	r15, r23
    1016:	08 2f       	mov	r16, r24
    1018:	19 2f       	mov	r17, r25
    101a:	2e 85       	ldd	r18, Y+14	; 0x0e
    101c:	3f 85       	ldd	r19, Y+15	; 0x0f
    101e:	48 89       	ldd	r20, Y+16	; 0x10
    1020:	59 89       	ldd	r21, Y+17	; 0x11
    1022:	6a 89       	ldd	r22, Y+18	; 0x12
    1024:	7b 89       	ldd	r23, Y+19	; 0x13
    1026:	8c 89       	ldd	r24, Y+20	; 0x14
    1028:	9d 89       	ldd	r25, Y+21	; 0x15
    102a:	31 d5       	rcall	.+2658   	; 0x1a8e <__muldi3>
    102c:	42 2e       	mov	r4, r18
    102e:	53 2e       	mov	r5, r19
    1030:	64 2e       	mov	r6, r20
    1032:	75 2e       	mov	r7, r21
    1034:	86 2e       	mov	r8, r22
    1036:	97 2e       	mov	r9, r23
    1038:	28 2e       	mov	r2, r24
    103a:	39 2e       	mov	r3, r25
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
	((long long)dig_H2) + 8192) >> 14));
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((long long)dig_H1)) >> 4));
    103c:	0f e0       	ldi	r16, 0x0F	; 15
    103e:	61 d6       	rcall	.+3266   	; 0x1d02 <__ashrdi3>
    1040:	a2 2e       	mov	r10, r18
    1042:	b3 2e       	mov	r11, r19
    1044:	c4 2e       	mov	r12, r20
    1046:	d5 2e       	mov	r13, r21
    1048:	e6 2e       	mov	r14, r22
    104a:	f7 2e       	mov	r15, r23
    104c:	08 2f       	mov	r16, r24
    104e:	19 2f       	mov	r17, r25
    1050:	1e d5       	rcall	.+2620   	; 0x1a8e <__muldi3>
    1052:	07 e0       	ldi	r16, 0x07	; 7
    1054:	56 d6       	rcall	.+3244   	; 0x1d02 <__ashrdi3>
    1056:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <dig_H1>
    105a:	f0 91 5c 03 	lds	r31, 0x035C	; 0x80035c <dig_H1+0x1>
    105e:	5f 01       	movw	r10, r30
    1060:	c1 2c       	mov	r12, r1
    1062:	d1 2c       	mov	r13, r1
    1064:	e1 2c       	mov	r14, r1
    1066:	f1 2c       	mov	r15, r1
    1068:	87 01       	movw	r16, r14
    106a:	e9 83       	std	Y+1, r30	; 0x01
    106c:	ba 82       	std	Y+2, r11	; 0x02
    106e:	cb 82       	std	Y+3, r12	; 0x03
    1070:	dc 82       	std	Y+4, r13	; 0x04
    1072:	ed 82       	std	Y+5, r14	; 0x05
    1074:	fe 82       	std	Y+6, r15	; 0x06
    1076:	0f 83       	std	Y+7, r16	; 0x07
    1078:	18 87       	std	Y+8, r17	; 0x08
    107a:	c1 2c       	mov	r12, r1
    107c:	d1 2c       	mov	r13, r1
    107e:	e1 2c       	mov	r14, r1
    1080:	f1 2c       	mov	r15, r1
    1082:	00 e0       	ldi	r16, 0x00	; 0
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	03 d5       	rcall	.+2566   	; 0x1a8e <__muldi3>
    1088:	04 e0       	ldi	r16, 0x04	; 4
    108a:	3b d6       	rcall	.+3190   	; 0x1d02 <__ashrdi3>
    108c:	a2 2e       	mov	r10, r18
    108e:	b3 2e       	mov	r11, r19
    1090:	c4 2e       	mov	r12, r20
    1092:	d5 2e       	mov	r13, r21
    1094:	e6 2e       	mov	r14, r22
    1096:	f7 2e       	mov	r15, r23
    1098:	08 2f       	mov	r16, r24
    109a:	19 2f       	mov	r17, r25
    109c:	24 2d       	mov	r18, r4
    109e:	35 2d       	mov	r19, r5
    10a0:	46 2d       	mov	r20, r6
    10a2:	57 2d       	mov	r21, r7
    10a4:	68 2d       	mov	r22, r8
    10a6:	79 2d       	mov	r23, r9
    10a8:	82 2d       	mov	r24, r2
    10aa:	93 2d       	mov	r25, r3
    10ac:	51 d6       	rcall	.+3234   	; 0x1d50 <__subdi3>
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
    10ae:	f2 2e       	mov	r15, r18
    10b0:	03 2f       	mov	r16, r19
    10b2:	14 2f       	mov	r17, r20
    10b4:	65 2e       	mov	r6, r21
    10b6:	76 2e       	mov	r7, r22
    10b8:	b7 2f       	mov	r27, r23
    10ba:	f8 2f       	mov	r31, r24
    10bc:	e9 2f       	mov	r30, r25
    10be:	a0 e0       	ldi	r26, 0x00	; 0
    10c0:	50 d6       	rcall	.+3232   	; 0x1d62 <__cmpdi2_s8>
    10c2:	44 f4       	brge	.+16     	; 0x10d4 <bme280_compensate_H_int32+0x2f4>
    10c4:	f1 2c       	mov	r15, r1
    10c6:	00 e0       	ldi	r16, 0x00	; 0
    10c8:	10 e0       	ldi	r17, 0x00	; 0
    10ca:	61 2c       	mov	r6, r1
    10cc:	71 2c       	mov	r7, r1
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	e0 e0       	ldi	r30, 0x00	; 0
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
    10d4:	8f 2c       	mov	r8, r15
    10d6:	90 2e       	mov	r9, r16
    10d8:	a1 2e       	mov	r10, r17
    10da:	b6 2c       	mov	r11, r6
    10dc:	c7 2c       	mov	r12, r7
    10de:	db 2e       	mov	r13, r27
    10e0:	ef 2e       	mov	r14, r31
    10e2:	ae 2f       	mov	r26, r30
    10e4:	2f 2d       	mov	r18, r15
    10e6:	30 2f       	mov	r19, r16
    10e8:	41 2f       	mov	r20, r17
    10ea:	56 2d       	mov	r21, r6
    10ec:	67 2d       	mov	r22, r7
    10ee:	7b 2f       	mov	r23, r27
    10f0:	8f 2f       	mov	r24, r31
    10f2:	9e 2f       	mov	r25, r30
    10f4:	21 15       	cp	r18, r1
    10f6:	31 05       	cpc	r19, r1
    10f8:	41 05       	cpc	r20, r1
    10fa:	59 41       	sbci	r21, 0x19	; 25
    10fc:	61 05       	cpc	r22, r1
    10fe:	71 05       	cpc	r23, r1
    1100:	81 05       	cpc	r24, r1
    1102:	91 05       	cpc	r25, r1
    1104:	61 f0       	breq	.+24     	; 0x111e <bme280_compensate_H_int32+0x33e>
    1106:	5c f0       	brlt	.+22     	; 0x111e <bme280_compensate_H_int32+0x33e>
    1108:	81 2c       	mov	r8, r1
    110a:	91 2c       	mov	r9, r1
    110c:	a1 2c       	mov	r10, r1
    110e:	0f 2e       	mov	r0, r31
    1110:	f9 e1       	ldi	r31, 0x19	; 25
    1112:	bf 2e       	mov	r11, r31
    1114:	f0 2d       	mov	r31, r0
    1116:	c1 2c       	mov	r12, r1
    1118:	d1 2c       	mov	r13, r1
    111a:	e1 2c       	mov	r14, r1
    111c:	a0 e0       	ldi	r26, 0x00	; 0
	return (long)(v_x1_u32r>>12);
    111e:	28 2d       	mov	r18, r8
    1120:	39 2d       	mov	r19, r9
    1122:	4a 2d       	mov	r20, r10
    1124:	5b 2d       	mov	r21, r11
    1126:	6c 2d       	mov	r22, r12
    1128:	7d 2d       	mov	r23, r13
    112a:	8e 2d       	mov	r24, r14
    112c:	9a 2f       	mov	r25, r26
    112e:	0c e0       	ldi	r16, 0x0C	; 12
    1130:	e8 d5       	rcall	.+3024   	; 0x1d02 <__ashrdi3>
    1132:	62 2f       	mov	r22, r18
    1134:	73 2f       	mov	r23, r19
    1136:	84 2f       	mov	r24, r20
    1138:	95 2f       	mov	r25, r21
}
    113a:	67 96       	adiw	r28, 0x17	; 23
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	bf 90       	pop	r11
    1158:	af 90       	pop	r10
    115a:	9f 90       	pop	r9
    115c:	8f 90       	pop	r8
    115e:	7f 90       	pop	r7
    1160:	6f 90       	pop	r6
    1162:	5f 90       	pop	r5
    1164:	4f 90       	pop	r4
    1166:	3f 90       	pop	r3
    1168:	2f 90       	pop	r2
    116a:	08 95       	ret

0000116c <canary_io_pin_initialization>:
	}
}

void canary_io_pin_initialization(void) {
	// For Canary, Port B pins 0, 1, and 2 are the red, green, and blue LED feedback pins
	DDRB  = 0x07;
    116c:	87 e0       	ldi	r24, 0x07	; 7
    116e:	84 b9       	out	0x04, r24	; 4
	//
	// Set all LEDs off
	PORTB &= !0x07;
    1170:	85 b1       	in	r24, 0x05	; 5
    1172:	15 b8       	out	0x05, r1	; 5
	// The Canary start button is on Port B pin 3.  Set the pull-up resistor for pin 3:
	SetBit(PORTB, PORTB3);
    1174:	2b 9a       	sbi	0x05, 3	; 5
	//
	// Set the Data Direction Register and pullups for the TWI system
	SetBit(DDRC, PORTC0); // Set clock as output
    1176:	38 9a       	sbi	0x07, 0	; 7
	SetBit(DDRC, PORTC1); // Data Line as output
    1178:	39 9a       	sbi	0x07, 1	; 7
	SetBit(PORTC, PORTC0); //Set pull-up resistor for clock
    117a:	40 9a       	sbi	0x08, 0	; 8
	SetBit(PORTC, PORTC1); //Set pull-up resistor for data
    117c:	41 9a       	sbi	0x08, 1	; 8
    117e:	08 95       	ret

00001180 <get_gas_sensor_limits>:
#include "gas_sensors.h"

/********************************************************************************
						Functions
********************************************************************************/
void get_gas_sensor_limits(void) {
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
	This just sets some upper and lower bounds for the initialization code to use.
	Actual values will need to be derived empirically (using the UCAR test chamber) */
	for (ii=0; ii<5; ii++)
	{
		gas_sensor_boundaries[ii][0] = 0;
		gas_sensor_boundaries[ii][1] = 1023;
    1184:	2f ef       	ldi	r18, 0xFF	; 255
    1186:	33 e0       	ldi	r19, 0x03	; 3
	/* THIS IS A TEMPORARY ROUTINE, to be replaced by the EEPROM read commented out below.
	This just sets some upper and lower bounds for the initialization code to use.
	Actual values will need to be derived empirically (using the UCAR test chamber) */
	for (ii=0; ii<5; ii++)
	{
		gas_sensor_boundaries[ii][0] = 0;
    1188:	fc 01       	movw	r30, r24
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	ec 5e       	subi	r30, 0xEC	; 236
    1194:	fc 4f       	sbci	r31, 0xFC	; 252
    1196:	11 82       	std	Z+1, r1	; 0x01
    1198:	10 82       	st	Z, r1
		gas_sensor_boundaries[ii][1] = 1023;
    119a:	33 83       	std	Z+3, r19	; 0x03
    119c:	22 83       	std	Z+2, r18	; 0x02
    119e:	01 96       	adiw	r24, 0x01	; 1
void get_gas_sensor_limits(void) {
	uint8_t ii;
	/* THIS IS A TEMPORARY ROUTINE, to be replaced by the EEPROM read commented out below.
	This just sets some upper and lower bounds for the initialization code to use.
	Actual values will need to be derived empirically (using the UCAR test chamber) */
	for (ii=0; ii<5; ii++)
    11a0:	85 30       	cpi	r24, 0x05	; 5
    11a2:	91 05       	cpc	r25, r1
    11a4:	89 f7       	brne	.-30     	; 0x1188 <get_gas_sensor_limits+0x8>
	{
		gas_sensor_boundaries[ii][0] = 0;
		gas_sensor_boundaries[ii][1] = 1023;
	}
}
    11a6:	08 95       	ret

000011a8 <get_gas_sensor_limits_from_EEPROM>:

void get_gas_sensor_limits_from_EEPROM(void) {
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	0f 2e       	mov	r0, r31
    11b6:	fa ee       	ldi	r31, 0xEA	; 234
    11b8:	ef 2e       	mov	r14, r31
    11ba:	f2 e0       	ldi	r31, 0x02	; 2
    11bc:	ff 2e       	mov	r15, r31
    11be:	f0 2d       	mov	r31, r0
    11c0:	00 e0       	ldi	r16, 0x00	; 0
    11c2:	10 e0       	ldi	r17, 0x00	; 0
	// This routine reads the empirically derived upper and lower limits
	// for the gas sensors from EEPROM.  We can also use defined constants
	// if we need to...
	for (ii=0; ii<5; ii++)
	{
		gas_sensor_boundaries[ii][0] = eeprom_read_word(&gas_sensor_boundary_constants[ii][0]);
    11c4:	c7 01       	movw	r24, r14
    11c6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <eeprom_read_word>
    11ca:	e8 01       	movw	r28, r16
    11cc:	cc 0f       	add	r28, r28
    11ce:	dd 1f       	adc	r29, r29
    11d0:	cc 0f       	add	r28, r28
    11d2:	dd 1f       	adc	r29, r29
    11d4:	cc 5e       	subi	r28, 0xEC	; 236
    11d6:	dc 4f       	sbci	r29, 0xFC	; 252
    11d8:	99 83       	std	Y+1, r25	; 0x01
    11da:	88 83       	st	Y, r24
		gas_sensor_boundaries[ii][1] = eeprom_read_word(&gas_sensor_boundary_constants[ii][1]);
    11dc:	c7 01       	movw	r24, r14
    11de:	02 96       	adiw	r24, 0x02	; 2
    11e0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <eeprom_read_word>
    11e4:	9b 83       	std	Y+3, r25	; 0x03
    11e6:	8a 83       	std	Y+2, r24	; 0x02
    11e8:	0f 5f       	subi	r16, 0xFF	; 255
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	84 e0       	ldi	r24, 0x04	; 4
    11ee:	e8 0e       	add	r14, r24
    11f0:	f1 1c       	adc	r15, r1
void get_gas_sensor_limits_from_EEPROM(void) {
	uint8_t ii;
	// This routine reads the empirically derived upper and lower limits
	// for the gas sensors from EEPROM.  We can also use defined constants
	// if we need to...
	for (ii=0; ii<5; ii++)
    11f2:	05 30       	cpi	r16, 0x05	; 5
    11f4:	11 05       	cpc	r17, r1
    11f6:	31 f7       	brne	.-52     	; 0x11c4 <get_gas_sensor_limits_from_EEPROM+0x1c>
	{
		gas_sensor_boundaries[ii][0] = eeprom_read_word(&gas_sensor_boundary_constants[ii][0]);
		gas_sensor_boundaries[ii][1] = eeprom_read_word(&gas_sensor_boundary_constants[ii][1]);
	}
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	08 95       	ret

00001206 <gas_sensors_init>:

void gas_sensors_init(void)
{
    1206:	af 92       	push	r10
    1208:	bf 92       	push	r11
    120a:	cf 92       	push	r12
    120c:	df 92       	push	r13
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	1f 92       	push	r1
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t sensor_id;
	int16_t ADC_result;
	
	// Clear our error trackers
	gas_sensor_initialization_errors=0; // Keeps track (by bit) of errors we've encountered.
    1220:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <gas_sensor_initialization_errors>
	gas_sensor_operational_errors=0;  // Keeps track (by bit) of errors we've encountered.
    1224:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <gas_sensor_operational_errors>
	// Get the upper and lower boundaries on the gas sensors...
	// The first cal is just to test the EEPROM code
	get_gas_sensor_limits_from_EEPROM();
    1228:	bf df       	rcall	.-130    	; 0x11a8 <get_gas_sensor_limits_from_EEPROM>
	// This second cal is temporary and simply initializes the array to usable values...
	get_gas_sensor_limits();
    122a:	aa df       	rcall	.-172    	; 0x1180 <get_gas_sensor_limits>
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
    122c:	ea e7       	ldi	r30, 0x7A	; 122
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 68       	ori	r24, 0x80	; 128
    1234:	80 83       	st	Z, r24
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
    1236:	19 82       	std	Y+1, r1	; 0x01
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	85 30       	cpi	r24, 0x05	; 5
    123c:	08 f0       	brcs	.+2      	; 0x1240 <gas_sensors_init+0x3a>
    123e:	52 c0       	rjmp	.+164    	; 0x12e4 <gas_sensors_init+0xde>
	{
		ADC_SetMux(sensor_id);
		// Start conversion
		SetBit(ADCSRA, ADSC);
    1240:	0a e7       	ldi	r16, 0x7A	; 122
    1242:	10 e0       	ldi	r17, 0x00	; 0
		while (BitIsClear(ADCSRA, ADIF))
		{
			// Wait for conversion to be complete
		}
		// Read result
		ADC_result = ADC;
    1244:	0f 2e       	mov	r0, r31
    1246:	f8 e7       	ldi	r31, 0x78	; 120
    1248:	ef 2e       	mov	r14, r31
    124a:	f1 2c       	mov	r15, r1
    124c:	f0 2d       	mov	r31, r0
		// sen0 = ADC_result;
		// Test the reading to ensure it is within acceptable boundaries
		if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
    124e:	bb 24       	eor	r11, r11
    1250:	b3 94       	inc	r11
    1252:	a1 2c       	mov	r10, r1
		{
			SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
    1254:	cc 24       	eor	r12, r12
    1256:	c3 94       	inc	r12
    1258:	d1 2c       	mov	r13, r1
	SetBit(ADCSRA, ADEN);
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
	{
		ADC_SetMux(sensor_id);
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	0e 94 b8 00 	call	0x170	; 0x170 <ADC_SetMux>
		// Start conversion
		SetBit(ADCSRA, ADSC);
    1260:	f8 01       	movw	r30, r16
    1262:	80 81       	ld	r24, Z
    1264:	80 64       	ori	r24, 0x40	; 64
    1266:	80 83       	st	Z, r24
		while (BitIsClear(ADCSRA, ADIF))
    1268:	f8 01       	movw	r30, r16
    126a:	80 81       	ld	r24, Z
    126c:	84 ff       	sbrs	r24, 4
    126e:	fc cf       	rjmp	.-8      	; 0x1268 <gas_sensors_init+0x62>
		{
			// Wait for conversion to be complete
		}
		// Read result
		ADC_result = ADC;
    1270:	f7 01       	movw	r30, r14
    1272:	80 81       	ld	r24, Z
    1274:	91 81       	ldd	r25, Z+1	; 0x01
		// sen0 = ADC_result;
		// Test the reading to ensure it is within acceptable boundaries
		if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
    1276:	e9 81       	ldd	r30, Y+1	; 0x01
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	ec 5e       	subi	r30, 0xEC	; 236
    1284:	fc 4f       	sbci	r31, 0xFC	; 252
    1286:	20 81       	ld	r18, Z
    1288:	31 81       	ldd	r19, Z+1	; 0x01
    128a:	e9 81       	ldd	r30, Y+1	; 0x01
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	ee 0f       	add	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	ec 5e       	subi	r30, 0xEC	; 236
    1298:	fc 4f       	sbci	r31, 0xFC	; 252
    129a:	62 81       	ldd	r22, Z+2	; 0x02
    129c:	73 81       	ldd	r23, Z+3	; 0x03
    129e:	4b 2d       	mov	r20, r11
    12a0:	68 17       	cp	r22, r24
    12a2:	79 07       	cpc	r23, r25
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <gas_sensors_init+0xa2>
    12a6:	4a 2d       	mov	r20, r10
    12a8:	41 11       	cpse	r20, r1
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <gas_sensors_init+0xb4>
    12ac:	4b 2d       	mov	r20, r11
    12ae:	82 17       	cp	r24, r18
    12b0:	93 07       	cpc	r25, r19
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <gas_sensors_init+0xb0>
    12b4:	4a 2d       	mov	r20, r10
    12b6:	44 23       	and	r20, r20
    12b8:	71 f0       	breq	.+28     	; 0x12d6 <gas_sensors_init+0xd0>
		{
			SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
    12ba:	99 81       	ldd	r25, Y+1	; 0x01
    12bc:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <gas_sensor_initialization_errors>
    12c0:	9d 5f       	subi	r25, 0xFD	; 253
    12c2:	a6 01       	movw	r20, r12
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <gas_sensors_init+0xc4>
    12c6:	44 0f       	add	r20, r20
    12c8:	55 1f       	adc	r21, r21
    12ca:	9a 95       	dec	r25
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <gas_sensors_init+0xc0>
    12ce:	ca 01       	movw	r24, r20
    12d0:	82 2b       	or	r24, r18
    12d2:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <gas_sensor_initialization_errors>
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	85 30       	cpi	r24, 0x05	; 5
    12e0:	08 f4       	brcc	.+2      	; 0x12e4 <gas_sensors_init+0xde>
    12e2:	bb cf       	rjmp	.-138    	; 0x125a <gas_sensors_init+0x54>
		if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
		{
			SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
		}		
	}
	ClearBit(ADCSRA, ADEN);  //Disable the ADC until we go operational
    12e4:	ea e7       	ldi	r30, 0x7A	; 122
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	8f 77       	andi	r24, 0x7F	; 127
    12ec:	80 83       	st	Z, r24
	// Report status via the LED that the gas sensors are ready (or not)
	//display_status(gas_sensors, gas_sensor_initialization_errors);
}
    12ee:	0f 90       	pop	r0
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	bf 90       	pop	r11
    1302:	af 90       	pop	r10
    1304:	08 95       	ret

00001306 <start_gas_sensor_read>:

void start_gas_sensor_read(void)
{
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	00 d0       	rcall	.+0      	; 0x1320 <start_gas_sensor_read+0x1a>
    1320:	1f 92       	push	r1
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	int16_t ADC_result;
	volatile int16_t total;
	int16_t gas_average;
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
    1326:	ea e7       	ldi	r30, 0x7A	; 122
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	80 68       	ori	r24, 0x80	; 128
    132e:	80 83       	st	Z, r24
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	85 30       	cpi	r24, 0x05	; 5
    1336:	08 f0       	brcs	.+2      	; 0x133a <start_gas_sensor_read+0x34>
    1338:	77 c0       	rjmp	.+238    	; 0x1428 <start_gas_sensor_read+0x122>
	{
		ADC_SetMux(sensor_id);
		total = 0;	// re-zero the average
    133a:	68 94       	set
    133c:	88 24       	eor	r8, r8
    133e:	82 f8       	bld	r8, 2
    1340:	91 2c       	mov	r9, r1
		
		for(int i = 0; i < max_gas_sample_count; i++)
		{
			// Start conversion
			SetBit(ADCSRA, ADSC);
    1342:	0a e7       	ldi	r16, 0x7A	; 122
    1344:	10 e0       	ldi	r17, 0x00	; 0
			{
				// Wait for conversion to be complete
				// NOTE: In production version, we should wait for the interrupt and process in the background
			}
			// Read result
			ADC_result = ADC;
    1346:	0f 2e       	mov	r0, r31
    1348:	f8 e7       	ldi	r31, 0x78	; 120
    134a:	ef 2e       	mov	r14, r31
    134c:	f1 2c       	mov	r15, r1
    134e:	f0 2d       	mov	r31, r0
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
    1350:	cc 24       	eor	r12, r12
    1352:	c3 94       	inc	r12
    1354:	d1 2c       	mov	r13, r1
				// NOTE: In production version, we should wait for the interrupt and process in the background
			}
			// Read result
			ADC_result = ADC;
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
    1356:	bb 24       	eor	r11, r11
    1358:	b3 94       	inc	r11
    135a:	a1 2c       	mov	r10, r1
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
	{
		ADC_SetMux(sensor_id);
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	0e 94 b8 00 	call	0x170	; 0x170 <ADC_SetMux>
		total = 0;	// re-zero the average
    1362:	1b 82       	std	Y+3, r1	; 0x03
    1364:	1a 82       	std	Y+2, r1	; 0x02
    1366:	28 2d       	mov	r18, r8
    1368:	39 2d       	mov	r19, r9
		
		for(int i = 0; i < max_gas_sample_count; i++)
		{
			// Start conversion
			SetBit(ADCSRA, ADSC);
    136a:	f8 01       	movw	r30, r16
    136c:	80 81       	ld	r24, Z
    136e:	80 64       	ori	r24, 0x40	; 64
    1370:	80 83       	st	Z, r24
			while (BitIsClear(ADCSRA, ADIF))
    1372:	f8 01       	movw	r30, r16
    1374:	80 81       	ld	r24, Z
    1376:	84 ff       	sbrs	r24, 4
    1378:	fc cf       	rjmp	.-8      	; 0x1372 <start_gas_sensor_read+0x6c>
			{
				// Wait for conversion to be complete
				// NOTE: In production version, we should wait for the interrupt and process in the background
			}
			// Read result
			ADC_result = ADC;
    137a:	f7 01       	movw	r30, r14
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	ec 5e       	subi	r30, 0xEC	; 236
    138e:	fc 4f       	sbci	r31, 0xFC	; 252
    1390:	40 81       	ld	r20, Z
    1392:	51 81       	ldd	r21, Z+1	; 0x01
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	ec 5e       	subi	r30, 0xEC	; 236
    13a2:	fc 4f       	sbci	r31, 0xFC	; 252
    13a4:	62 81       	ldd	r22, Z+2	; 0x02
    13a6:	73 81       	ldd	r23, Z+3	; 0x03
    13a8:	eb 2d       	mov	r30, r11
    13aa:	68 17       	cp	r22, r24
    13ac:	79 07       	cpc	r23, r25
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <start_gas_sensor_read+0xac>
    13b0:	ea 2d       	mov	r30, r10
    13b2:	e1 11       	cpse	r30, r1
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <start_gas_sensor_read+0xbe>
    13b6:	6b 2d       	mov	r22, r11
    13b8:	84 17       	cp	r24, r20
    13ba:	95 07       	cpc	r25, r21
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <start_gas_sensor_read+0xba>
    13be:	6a 2d       	mov	r22, r10
    13c0:	66 23       	and	r22, r22
    13c2:	71 f0       	breq	.+28     	; 0x13e0 <start_gas_sensor_read+0xda>
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
    13c4:	59 81       	ldd	r21, Y+1	; 0x01
    13c6:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <gas_sensor_initialization_errors>
    13ca:	5d 5f       	subi	r21, 0xFD	; 253
    13cc:	f6 01       	movw	r30, r12
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <start_gas_sensor_read+0xce>
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	5a 95       	dec	r21
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <start_gas_sensor_read+0xca>
    13d8:	af 01       	movw	r20, r30
    13da:	46 2b       	or	r20, r22
    13dc:	40 93 a8 03 	sts	0x03A8, r20	; 0x8003a8 <gas_sensor_initialization_errors>
			}
			total += ADC_result;
    13e0:	4a 81       	ldd	r20, Y+2	; 0x02
    13e2:	5b 81       	ldd	r21, Y+3	; 0x03
    13e4:	84 0f       	add	r24, r20
    13e6:	95 1f       	adc	r25, r21
    13e8:	9b 83       	std	Y+3, r25	; 0x03
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	21 50       	subi	r18, 0x01	; 1
    13ee:	31 09       	sbc	r19, r1
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
	{
		ADC_SetMux(sensor_id);
		total = 0;	// re-zero the average
		
		for(int i = 0; i < max_gas_sample_count; i++)
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <start_gas_sensor_read+0xee>
    13f2:	bb cf       	rjmp	.-138    	; 0x136a <start_gas_sensor_read+0x64>
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
			}
			total += ADC_result;
		}
		gas_average = total / max_gas_sample_count;
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
		raw_gas_vector[sensor_id] = gas_average;
    13f8:	e9 81       	ldd	r30, Y+1	; 0x01
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	ee 0f       	add	r30, r30
    13fe:	ff 1f       	adc	r31, r31
    1400:	e8 58       	subi	r30, 0x88	; 136
    1402:	fc 4f       	sbci	r31, 0xFC	; 252
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
			}
			total += ADC_result;
		}
		gas_average = total / max_gas_sample_count;
    1404:	9c 01       	movw	r18, r24
    1406:	99 23       	and	r25, r25
    1408:	14 f4       	brge	.+4      	; 0x140e <start_gas_sensor_read+0x108>
    140a:	2d 5f       	subi	r18, 0xFD	; 253
    140c:	3f 4f       	sbci	r19, 0xFF	; 255
    140e:	35 95       	asr	r19
    1410:	27 95       	ror	r18
    1412:	35 95       	asr	r19
    1414:	27 95       	ror	r18
		raw_gas_vector[sensor_id] = gas_average;
    1416:	31 83       	std	Z+1, r19	; 0x01
    1418:	20 83       	st	Z, r18
	int16_t gas_average;
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	8f 5f       	subi	r24, 0xFF	; 255
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	85 30       	cpi	r24, 0x05	; 5
    1424:	08 f4       	brcc	.+2      	; 0x1428 <start_gas_sensor_read+0x122>
    1426:	9a cf       	rjmp	.-204    	; 0x135c <start_gas_sensor_read+0x56>
			total += ADC_result;
		}
		gas_average = total / max_gas_sample_count;
		raw_gas_vector[sensor_id] = gas_average;
	}
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	df 90       	pop	r13
    143c:	cf 90       	pop	r12
    143e:	bf 90       	pop	r11
    1440:	af 90       	pop	r10
    1442:	9f 90       	pop	r9
    1444:	8f 90       	pop	r8
    1446:	08 95       	ret

00001448 <main>:
	// *************************************************************************
	//        Initialization code & device configuration
	// *************************************************************************
 	//
	// Set the I/O pins
	canary_io_pin_initialization();
    1448:	91 de       	rcall	.-734    	; 0x116c <canary_io_pin_initialization>
	//
	// Set a simple counter for the loop below.  Debug only.
	seconds=0;
    144a:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <seconds+0x1>
    144e:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <seconds>
	ItsTime=0;
    1452:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <ItsTime>
	//
	// set up our output for handling printf and string operations,,,
	stdout = &mystdout;
    1456:	8b e2       	ldi	r24, 0x2B	; 43
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	90 93 de 05 	sts	0x05DE, r25	; 0x8005de <__iob+0x3>
    145e:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <__iob+0x2>
	//
	// Initialize the timer counter 1 for 1Hz interrupt
	// This interrupt is only enabled if we don't have the GPS sensor connected.
	initialize_timer_counter_1();
    1462:	2b d1       	rcall	.+598    	; 0x16ba <initialize_timer_counter_1>
	//
	// Initialize our main communication to the ground (UART0)
	USART0_init(MYUBRR0);
    1464:	81 e8       	ldi	r24, 0x81	; 129
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	25 d2       	rcall	.+1098   	; 0x18b4 <USART0_init>
	//
	// Initialize the connection to the GPS sensor (UART1)
	USART1_init(MYUBRR1);
    146a:	81 e8       	ldi	r24, 0x81	; 129
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	7d d2       	rcall	.+1274   	; 0x196a <USART1_init>
	//
	// Initialize the TWI peripheral
	TWI_Master_Initialise();
    1470:	44 d1       	rcall	.+648    	; 0x16fa <TWI_Master_Initialise>
	//
	// Initialize the Analog to digital hardware - and test the I/F.
	ADC_init();
    1472:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_init>
	//
	// initialize the gas sensors
	gas_sensors_init();
    1476:	c7 de       	rcall	.-626    	; 0x1206 <gas_sensors_init>
	//
	// Test our bad interrupt light...
	SetBit(PORTB, PORTB2);
    1478:	2a 9a       	sbi	0x05, 2	; 5
	ClearBit(PORTB, PORTB2);
    147a:	2a 98       	cbi	0x05, 2	; 5
	// 
	// Start all interrupts
	sei();
    147c:	78 94       	sei
	//
	// Initialize and check the BME interface...
	bme280basic_init();
    147e:	6a d8       	rcall	.-3884   	; 0x554 <bme280basic_init>
	// Wait here for the start/standby button to be selected.. (PORTB pin 3).
	// Now call the routines to "kick off" the sensor measurements
	//
	// ===================================================
	// The next few lines are for debugging the (working at one time) UART0 routines...remove these lines once it is working again.
	printf("\n%s",String);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	9f 93       	push	r25
    1486:	8f 93       	push	r24
    1488:	8a e3       	ldi	r24, 0x3A	; 58
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	9f 93       	push	r25
    148e:	8f 93       	push	r24
    1490:	83 d4       	rcall	.+2310   	; 0x1d98 <printf>
	//wait until button is pushed before proceeding to loop
	ToggleBit(PORTB, PORTB0); //will keep yellow LED until button is pressed.
    1492:	95 b1       	in	r25, 0x05	; 5
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	98 27       	eor	r25, r24
    1498:	95 b9       	out	0x05, r25	; 5
	// ====================================================
	////////////////////////////////////////////////////////////////////////////
 	// *************************************************************************
 	// main loop
 	// *************************************************************************
	ToggleBit(PORTB, PORTB0);
    149a:	95 b1       	in	r25, 0x05	; 5
    149c:	89 27       	eor	r24, r25
    149e:	85 b9       	out	0x05, r24	; 5
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
		// to 1 whenever we get a $GPGGA message from that sensor.
		///////////////////////////////////////////////////////////
		if (ItsTime == 1){ //wait for our 1Hz flag (from GPS or Interrupt)
			ItsTime = 0; 
 			seconds++;
 			printf("\nSeconds = %u", seconds);
    14a8:	0f 2e       	mov	r0, r31
    14aa:	fe e3       	ldi	r31, 0x3E	; 62
    14ac:	af 2e       	mov	r10, r31
    14ae:	f1 e0       	ldi	r31, 0x01	; 1
    14b0:	bf 2e       	mov	r11, r31
    14b2:	f0 2d       	mov	r31, r0
			// - Send the data over the serial port
			// - Wait for the transmission to complete, then
			// - go to the next sensor 
			//**********************************
			// The GPS message triggers the whole collection cycle, so we can send it now...
			printf("\n%s",messageWant);
    14b4:	0f 2e       	mov	r0, r31
    14b6:	fb ed       	ldi	r31, 0xDB	; 219
    14b8:	cf 2e       	mov	r12, r31
    14ba:	f4 e0       	ldi	r31, 0x04	; 4
    14bc:	df 2e       	mov	r13, r31
    14be:	f0 2d       	mov	r31, r0
    14c0:	0f 2e       	mov	r0, r31
    14c2:	fa e3       	ldi	r31, 0x3A	; 58
    14c4:	ef 2e       	mov	r14, r31
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	ff 2e       	mov	r15, r31
    14ca:	f0 2d       	mov	r31, r0
			// each time through this loop.  Comment out the code you
			// don't want to use when debugging the code you are adding... 
			//============================
			 //Now test reading the LIDAR interface
// 			distance = LIDAR_distance();
 			printf("\nLIDAR distance = %u", distance);
    14cc:	0c e4       	ldi	r16, 0x4C	; 76
    14ce:	11 e0       	ldi	r17, 0x01	; 1
//  			printf("\nCarbon Monoxide = %u", raw_gas_vector[0]);
//  			printf("\nHydrogen = %u", raw_gas_vector[1]);
//  			printf("\nAmmonia = %u", raw_gas_vector[2]);
//  			printf("\nMethane = %u", raw_gas_vector[3]);
//  			printf("\nOzone = %u\n", raw_gas_vector[4]);
 			printf("\nCO = %u", raw_gas_vector[0]);
    14d0:	c8 e7       	ldi	r28, 0x78	; 120
    14d2:	d3 e0       	ldi	r29, 0x03	; 3
    14d4:	0f 2e       	mov	r0, r31
    14d6:	f1 e6       	ldi	r31, 0x61	; 97
    14d8:	8f 2e       	mov	r8, r31
    14da:	f1 e0       	ldi	r31, 0x01	; 1
    14dc:	9f 2e       	mov	r9, r31
    14de:	f0 2d       	mov	r31, r0
			while(UART0TransmitInProgress) {}
 			printf("\nH = %u", raw_gas_vector[1]);
    14e0:	0f 2e       	mov	r0, r31
    14e2:	fa e6       	ldi	r31, 0x6A	; 106
    14e4:	2f 2e       	mov	r2, r31
    14e6:	f1 e0       	ldi	r31, 0x01	; 1
    14e8:	3f 2e       	mov	r3, r31
    14ea:	f0 2d       	mov	r31, r0
		// reached steady state...do nothing for the moment - wait for interrupts.
		// The variable ItsTime gets set to 1 every second using the 1Hz interrupt
		// When GPS is connected and enabled, then ItsTime gets set 
		// to 1 whenever we get a $GPGGA message from that sensor.
		///////////////////////////////////////////////////////////
		if (ItsTime == 1){ //wait for our 1Hz flag (from GPS or Interrupt)
    14ec:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <ItsTime>
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	e1 f7       	brne	.-8      	; 0x14ec <main+0xa4>
			ItsTime = 0; 
    14f4:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <ItsTime>
 			seconds++;
    14f8:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <seconds>
    14fc:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <seconds+0x1>
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	90 93 da 03 	sts	0x03DA, r25	; 0x8003da <seconds+0x1>
    1506:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <seconds>
 			printf("\nSeconds = %u", seconds);
    150a:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <seconds>
    150e:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <seconds+0x1>
    1512:	9f 93       	push	r25
    1514:	8f 93       	push	r24
    1516:	bf 92       	push	r11
    1518:	af 92       	push	r10
    151a:	3e d4       	rcall	.+2172   	; 0x1d98 <printf>
			// - Send the data over the serial port
			// - Wait for the transmission to complete, then
			// - go to the next sensor 
			//**********************************
			// The GPS message triggers the whole collection cycle, so we can send it now...
			printf("\n%s",messageWant);
    151c:	df 92       	push	r13
    151e:	cf 92       	push	r12
    1520:	ff 92       	push	r15
    1522:	ef 92       	push	r14
    1524:	39 d4       	rcall	.+2162   	; 0x1d98 <printf>
			// each time through this loop.  Comment out the code you
			// don't want to use when debugging the code you are adding... 
			//============================
			 //Now test reading the LIDAR interface
// 			distance = LIDAR_distance();
 			printf("\nLIDAR distance = %u", distance);
    1526:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <distance+0x1>
    152a:	8f 93       	push	r24
    152c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <distance>
    1530:	8f 93       	push	r24
    1532:	1f 93       	push	r17
    1534:	0f 93       	push	r16
    1536:	30 d4       	rcall	.+2144   	; 0x1d98 <printf>
// 				}
// 			}
// 			printf("Z");
			//============================
			// Now test the gas sensor interface...
			start_gas_sensor_read();
    1538:	e6 de       	rcall	.-564    	; 0x1306 <start_gas_sensor_read>
//  			printf("\nCarbon Monoxide = %u", raw_gas_vector[0]);
//  			printf("\nHydrogen = %u", raw_gas_vector[1]);
//  			printf("\nAmmonia = %u", raw_gas_vector[2]);
//  			printf("\nMethane = %u", raw_gas_vector[3]);
//  			printf("\nOzone = %u\n", raw_gas_vector[4]);
 			printf("\nCO = %u", raw_gas_vector[0]);
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	8f 93       	push	r24
    153e:	88 81       	ld	r24, Y
    1540:	8f 93       	push	r24
    1542:	9f 92       	push	r9
    1544:	8f 92       	push	r8
    1546:	28 d4       	rcall	.+2128   	; 0x1d98 <printf>
			while(UART0TransmitInProgress) {}
 			printf("\nH = %u", raw_gas_vector[1]);
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	8f 93       	push	r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	8f 93       	push	r24
    1550:	3f 92       	push	r3
    1552:	2f 92       	push	r2
    1554:	21 d4       	rcall	.+2114   	; 0x1d98 <printf>
			while(UART0TransmitInProgress) {}
 			printf("\nNA = %u", raw_gas_vector[2]);
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	8f 93       	push	r24
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	8f 93       	push	r24
    155e:	a2 e7       	ldi	r26, 0x72	; 114
    1560:	b1 e0       	ldi	r27, 0x01	; 1
    1562:	bf 93       	push	r27
    1564:	af 93       	push	r26
    1566:	18 d4       	rcall	.+2096   	; 0x1d98 <printf>
			while(UART0TransmitInProgress) {} 
 			printf("\nCH4 = %u", raw_gas_vector[3]);
    1568:	8f 81       	ldd	r24, Y+7	; 0x07
    156a:	8f 93       	push	r24
    156c:	8e 81       	ldd	r24, Y+6	; 0x06
    156e:	8f 93       	push	r24
    1570:	ab e7       	ldi	r26, 0x7B	; 123
    1572:	b1 e0       	ldi	r27, 0x01	; 1
    1574:	bf 93       	push	r27
    1576:	af 93       	push	r26
    1578:	0f d4       	rcall	.+2078   	; 0x1d98 <printf>
			while(UART0TransmitInProgress) {}
 			printf("\nO3 = %u", raw_gas_vector[4]);
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	8f 93       	push	r24
    157e:	88 85       	ldd	r24, Y+8	; 0x08
    1580:	8f 93       	push	r24
    1582:	a5 e8       	ldi	r26, 0x85	; 133
    1584:	b1 e0       	ldi	r27, 0x01	; 1
    1586:	bf 93       	push	r27
    1588:	af 93       	push	r26
    158a:	06 d4       	rcall	.+2060   	; 0x1d98 <printf>
			while(UART0TransmitInProgress) {}
			//
			//============================
			// Now read the BME interface...
 			bme280basic_bulk_data_read();
    158c:	ad b7       	in	r26, 0x3d	; 61
    158e:	be b7       	in	r27, 0x3e	; 62
    1590:	90 96       	adiw	r26, 0x20	; 32
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	be bf       	out	0x3e, r27	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	ad bf       	out	0x3d, r26	; 61
    159c:	44 d8       	rcall	.-3960   	; 0x626 <bme280basic_bulk_data_read>
 			// Calculate the temperature and print it
			tempCelsius = BME280_compensate_T_int32(rawTemp);
    159e:	60 91 5e 03 	lds	r22, 0x035E	; 0x80035e <rawTemp>
    15a2:	70 91 5f 03 	lds	r23, 0x035F	; 0x80035f <rawTemp+0x1>
    15a6:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <rawTemp+0x2>
    15aa:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <rawTemp+0x3>
    15ae:	28 d9       	rcall	.-3504   	; 0x800 <BME280_compensate_T_int32>
    15b0:	60 93 57 03 	sts	0x0357, r22	; 0x800357 <tempCelsius>
    15b4:	70 93 58 03 	sts	0x0358, r23	; 0x800358 <tempCelsius+0x1>
    15b8:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <tempCelsius+0x2>
    15bc:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <tempCelsius+0x3>
// 			sprintf(temperatureBuf, "%lu", tempCelsius);
  			printf("\nCelsius = %lu", tempCelsius);
    15c0:	9f 93       	push	r25
    15c2:	8f 93       	push	r24
    15c4:	7f 93       	push	r23
    15c6:	6f 93       	push	r22
    15c8:	ae e8       	ldi	r26, 0x8E	; 142
    15ca:	b1 e0       	ldi	r27, 0x01	; 1
    15cc:	bf 93       	push	r27
    15ce:	af 93       	push	r26
    15d0:	e3 d3       	rcall	.+1990   	; 0x1d98 <printf>
			while(UART0TransmitInProgress) {}
 			// Calculate the pressure and print it
			pressure = BME280_compensate_P_int64(rawPress);
    15d2:	60 91 86 03 	lds	r22, 0x0386	; 0x800386 <rawPress>
    15d6:	70 91 87 03 	lds	r23, 0x0387	; 0x800387 <rawPress+0x1>
    15da:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <rawPress+0x2>
    15de:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <rawPress+0x3>
    15e2:	9c d9       	rcall	.-3272   	; 0x91c <BME280_compensate_P_int64>
    15e4:	60 93 6b 03 	sts	0x036B, r22	; 0x80036b <pressure>
    15e8:	70 93 6c 03 	sts	0x036C, r23	; 0x80036c <pressure+0x1>
    15ec:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <pressure+0x2>
    15f0:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <pressure+0x3>
 			printf("\nPressure in Pa = %lu", pressure>>8);
    15f4:	bb 27       	eor	r27, r27
    15f6:	97 fd       	sbrc	r25, 7
    15f8:	ba 95       	dec	r27
    15fa:	a9 2f       	mov	r26, r25
    15fc:	98 2f       	mov	r25, r24
    15fe:	87 2f       	mov	r24, r23
    1600:	bf 93       	push	r27
    1602:	af 93       	push	r26
    1604:	9f 93       	push	r25
    1606:	8f 93       	push	r24
    1608:	ad e9       	ldi	r26, 0x9D	; 157
    160a:	b1 e0       	ldi	r27, 0x01	; 1
    160c:	bf 93       	push	r27
    160e:	af 93       	push	r26
    1610:	c3 d3       	rcall	.+1926   	; 0x1d98 <printf>
			while(UART0TransmitInProgress) {}
 			// Calculate the humidity and print it
			 humidity = bme280_compensate_H_int32(rawHum);
    1612:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <rawHum>
    1616:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <rawHum+0x1>
    161a:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <rawHum+0x2>
    161e:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <rawHum+0x3>
    1622:	de db       	rcall	.-2116   	; 0xde0 <bme280_compensate_H_int32>
    1624:	2b 01       	movw	r4, r22
    1626:	3c 01       	movw	r6, r24
    1628:	60 93 73 03 	sts	0x0373, r22	; 0x800373 <humidity>
    162c:	70 93 74 03 	sts	0x0374, r23	; 0x800374 <humidity+0x1>
    1630:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <humidity+0x2>
    1634:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <humidity+0x3>
 			printf("\nHumidity%% = %lu.%lu\n", humidity>>10, ((humidity*1000)>>10));
    1638:	a8 ee       	ldi	r26, 0xE8	; 232
    163a:	b3 e0       	ldi	r27, 0x03	; 3
    163c:	9b 01       	movw	r18, r22
    163e:	ac 01       	movw	r20, r24
    1640:	16 d2       	rcall	.+1068   	; 0x1a6e <__muluhisi3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	07 2e       	mov	r0, r23
    1648:	7a e0       	ldi	r23, 0x0A	; 10
    164a:	b5 95       	asr	r27
    164c:	a7 95       	ror	r26
    164e:	97 95       	ror	r25
    1650:	87 95       	ror	r24
    1652:	7a 95       	dec	r23
    1654:	d1 f7       	brne	.-12     	; 0x164a <main+0x202>
    1656:	70 2d       	mov	r23, r0
    1658:	bf 93       	push	r27
    165a:	af 93       	push	r26
    165c:	9f 93       	push	r25
    165e:	8f 93       	push	r24
    1660:	d3 01       	movw	r26, r6
    1662:	c2 01       	movw	r24, r4
    1664:	07 2e       	mov	r0, r23
    1666:	7a e0       	ldi	r23, 0x0A	; 10
    1668:	b5 95       	asr	r27
    166a:	a7 95       	ror	r26
    166c:	97 95       	ror	r25
    166e:	87 95       	ror	r24
    1670:	7a 95       	dec	r23
    1672:	d1 f7       	brne	.-12     	; 0x1668 <main+0x220>
    1674:	70 2d       	mov	r23, r0
    1676:	bf 93       	push	r27
    1678:	af 93       	push	r26
    167a:	9f 93       	push	r25
    167c:	8f 93       	push	r24
    167e:	a3 eb       	ldi	r26, 0xB3	; 179
    1680:	b1 e0       	ldi	r27, 0x01	; 1
    1682:	bf 93       	push	r27
    1684:	af 93       	push	r26
    1686:	88 d3       	rcall	.+1808   	; 0x1d98 <printf>
			while(UART0TransmitInProgress) {}
    1688:	ad b7       	in	r26, 0x3d	; 61
    168a:	be b7       	in	r27, 0x3e	; 62
    168c:	56 96       	adiw	r26, 0x16	; 22
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	be bf       	out	0x3e, r27	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	ad bf       	out	0x3d, r26	; 61
// 			printf("\n BME message = http://canary.chordsrt.com/measurements/url_create?instrument_id=1&temp=%.5s.%.5s&pres=%lu&hum=%lu&key=4e6fba7420ec9e881f510bcddb%.3s:%.4s:%.3s", temp, temp+2, pressure, humidity, time, time+2, time+4); //need key
			//
			//============================
			//re-enable the GPS receiver & interrupt after processing all sensor data
			UCSR1B |= ((1<<RXCIE1)|(1<<RXEN1));
    1698:	e9 ec       	ldi	r30, 0xC9	; 201
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	80 69       	ori	r24, 0x90	; 144
    16a0:	80 83       	st	Z, r24
    16a2:	24 cf       	rjmp	.-440    	; 0x14ec <main+0xa4>

000016a4 <__vector_default>:
						Interrupt Service Routines
*********************************************************************************
********************************************************************************/

ISR(BADISR_vect)
{
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
	// Code should never reach this point.  This is a bad interrupt trap.
	SetBit(PORTB, PORTB2);
    16ae:	2a 9a       	sbi	0x05, 2	; 5
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <initialize_timer_counter_1>:
	Not using any of the other compare features, so all other CR bits are 0
	Finally, we have to enable the interrupt vector on compare register A
	TCCR1A = 0; Control Register A is reset to 0x00 on startup. */
	//  
	// Set the WGM mode and prescaler select in control register B
	TCCR1B = ((1<<WGM12) | (1<<CS12) | (1<<CS10));
    16ba:	8d e0       	ldi	r24, 0x0D	; 13
    16bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// TCCR1C = 0; Control Register C is reset to 0x00 on startup.
	// Now we need to enter out TOP value in OCR1A
	OCR1A = 19530;
    16c0:	8a e4       	ldi	r24, 0x4A	; 74
    16c2:	9c e4       	ldi	r25, 0x4C	; 76
    16c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    16c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    16cc:	08 95       	ret

000016ce <__vector_16>:
*********************************************************************************
********************************************************************************/


// 100Hz timer interrupt generated by OC0A and used by the FATFS code.
EMPTY_INTERRUPT(TIMER0_COMPA_vect);
    16ce:	18 95       	reti

000016d0 <__vector_13>:
// }



ISR(TIMER1_COMPA_vect)
{
    16d0:	1f 92       	push	r1
    16d2:	0f 92       	push	r0
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	0f 92       	push	r0
    16d8:	11 24       	eor	r1, r1
    16da:	8f 93       	push	r24
    16dc:	9f 93       	push	r25
	ToggleBit(PORTB, PORTB1); //for now, just toggle the green status LED
    16de:	95 b1       	in	r25, 0x05	; 5
    16e0:	82 e0       	ldi	r24, 0x02	; 2
    16e2:	89 27       	eor	r24, r25
    16e4:	85 b9       	out	0x05, r24	; 5
	ItsTime = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <ItsTime>
}
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <TWI_Master_Initialise>:
void TWI_Start_Transceiver( void )
{
  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
  TWI_statusReg.all = 0;      
  TWI_state         = TWI_NO_STATE ;
  TWCR = (1<<TWEN)|                             // TWI Interface enabled.
    16fa:	81 e1       	ldi	r24, 0x11	; 17
    16fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1706:	84 e0       	ldi	r24, 0x04	; 4
    1708:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    170c:	08 95       	ret

0000170e <TWI_Transceiver_Busy>:
    170e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1712:	81 78       	andi	r24, 0x81	; 129
    1714:	08 95       	ret

00001716 <TWI_Start_Transceiver_With_Data>:
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	ec 01       	movw	r28, r24
    171c:	ec eb       	ldi	r30, 0xBC	; 188
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	90 81       	ld	r25, Z
    1722:	91 78       	andi	r25, 0x81	; 129
    1724:	e9 f7       	brne	.-6      	; 0x1720 <TWI_Start_Transceiver_With_Data+0xa>
    1726:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <TWI_msgSize>
    172a:	88 81       	ld	r24, Y
    172c:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <TWI_buf>
    1730:	80 fd       	sbrc	r24, 0
    1732:	12 c0       	rjmp	.+36     	; 0x1758 <TWI_Start_Transceiver_With_Data+0x42>
    1734:	62 30       	cpi	r22, 0x02	; 2
    1736:	80 f0       	brcs	.+32     	; 0x1758 <TWI_Start_Transceiver_With_Data+0x42>
    1738:	fe 01       	movw	r30, r28
    173a:	31 96       	adiw	r30, 0x01	; 1
    173c:	a2 ed       	ldi	r26, 0xD2	; 210
    173e:	b1 e0       	ldi	r27, 0x01	; 1
    1740:	62 50       	subi	r22, 0x02	; 2
    1742:	26 2f       	mov	r18, r22
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	2e 5f       	subi	r18, 0xFE	; 254
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	2c 0f       	add	r18, r28
    174c:	3d 1f       	adc	r19, r29
    174e:	91 91       	ld	r25, Z+
    1750:	9d 93       	st	X+, r25
    1752:	e2 17       	cp	r30, r18
    1754:	f3 07       	cpc	r31, r19
    1756:	d9 f7       	brne	.-10     	; 0x174e <TWI_Start_Transceiver_With_Data+0x38>
    1758:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <TWI_statusReg>
    175c:	88 ef       	ldi	r24, 0xF8	; 248
    175e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <TWI_state>
    1762:	85 ea       	ldi	r24, 0xA5	; 165
    1764:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <TWI_Get_Data_From_Transceiver>:
requested (including the address field) in the function call. The function will hold execution (loop)
until the TWI_ISR has completed with the previous operation, before reading out the data and returning.
If there was an error in the previous transmission the function will return the TWI error code.
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
    176e:	ac 01       	movw	r20, r24
/****************************************************************************
Call this function to test if the TWI_ISR is busy transmitting.
****************************************************************************/
unsigned char TWI_Transceiver_Busy( void )
{
  return ( TWCR & ((1<<TWIE)|(1<<TWINT)));                  // IF TWI Interrupt is enabled then the Transceiver is busy
    1770:	ec eb       	ldi	r30, 0xBC	; 188
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	90 81       	ld	r25, Z
    1776:	91 78       	andi	r25, 0x81	; 129
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
  unsigned char i;

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
    1778:	e9 f7       	brne	.-6      	; 0x1774 <TWI_Get_Data_From_Transceiver+0x6>

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
    177a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TWI_statusReg>
    177e:	80 ff       	sbrs	r24, 0
    1780:	11 c0       	rjmp	.+34     	; 0x17a4 <TWI_Get_Data_From_Transceiver+0x36>
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
    1782:	66 23       	and	r22, r22
    1784:	79 f0       	breq	.+30     	; 0x17a4 <TWI_Get_Data_From_Transceiver+0x36>
    1786:	a1 ed       	ldi	r26, 0xD1	; 209
    1788:	b1 e0       	ldi	r27, 0x01	; 1
    178a:	fa 01       	movw	r30, r20
    178c:	61 50       	subi	r22, 0x01	; 1
    178e:	26 2f       	mov	r18, r22
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	2f 5f       	subi	r18, 0xFF	; 255
    1794:	3f 4f       	sbci	r19, 0xFF	; 255
    1796:	24 0f       	add	r18, r20
    1798:	35 1f       	adc	r19, r21
    {
      msg[ i ] = TWI_buf[ i ];
    179a:	9d 91       	ld	r25, X+
    179c:	91 93       	st	Z+, r25

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
    179e:	e2 17       	cp	r30, r18
    17a0:	f3 07       	cpc	r31, r19
    17a2:	d9 f7       	brne	.-10     	; 0x179a <TWI_Get_Data_From_Transceiver+0x2c>
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
    17a4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TWI_statusReg>
}
    17a8:	81 70       	andi	r24, 0x01	; 1
    17aa:	08 95       	ret

000017ac <__vector_26>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	0b b6       	in	r0, 0x3b	; 59
    17b8:	0f 92       	push	r0
    17ba:	2f 93       	push	r18
    17bc:	3f 93       	push	r19
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
    17c6:	ef 93       	push	r30
    17c8:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
    17ca:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    17ce:	8e 2f       	mov	r24, r30
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	fc 01       	movw	r30, r24
    17d4:	38 97       	sbiw	r30, 0x08	; 8
    17d6:	e1 35       	cpi	r30, 0x51	; 81
    17d8:	f1 05       	cpc	r31, r1
    17da:	08 f0       	brcs	.+2      	; 0x17de <__vector_26+0x32>
    17dc:	55 c0       	rjmp	.+170    	; 0x1888 <__vector_26+0xdc>
    17de:	ea 5b       	subi	r30, 0xBA	; 186
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	3c c1       	rjmp	.+632    	; 0x1a5c <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
    17e4:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <TWI_bufPtr.1555>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
    17e8:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TWI_bufPtr.1555>
    17ec:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <TWI_msgSize>
    17f0:	e8 17       	cp	r30, r24
    17f2:	70 f4       	brcc	.+28     	; 0x1810 <__vector_26+0x64>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	8e 0f       	add	r24, r30
    17f8:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <TWI_bufPtr.1555>
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	ef 52       	subi	r30, 0x2F	; 47
    1800:	fe 4f       	sbci	r31, 0xFE	; 254
    1802:	80 81       	ld	r24, Z
    1804:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    1808:	85 e8       	ldi	r24, 0x85	; 133
    180a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    180e:	43 c0       	rjmp	.+134    	; 0x1896 <__vector_26+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
    1810:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TWI_statusReg>
    1814:	81 60       	ori	r24, 0x01	; 1
    1816:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    181a:	84 e9       	ldi	r24, 0x94	; 148
    181c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1820:	3a c0       	rjmp	.+116    	; 0x1896 <__vector_26+0xea>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
    1822:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TWI_bufPtr.1555>
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	8e 0f       	add	r24, r30
    182a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <TWI_bufPtr.1555>
    182e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	ef 52       	subi	r30, 0x2F	; 47
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
    183a:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <TWI_bufPtr.1555>
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <TWI_msgSize>
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	28 17       	cp	r18, r24
    184a:	39 07       	cpc	r19, r25
    184c:	24 f4       	brge	.+8      	; 0x1856 <__vector_26+0xaa>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    184e:	85 ec       	ldi	r24, 0xC5	; 197
    1850:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1854:	20 c0       	rjmp	.+64     	; 0x1896 <__vector_26+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    1856:	85 e8       	ldi	r24, 0x85	; 133
    1858:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    185c:	1c c0       	rjmp	.+56     	; 0x1896 <__vector_26+0xea>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
    185e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1862:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TWI_bufPtr.1555>
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	ef 52       	subi	r30, 0x2F	; 47
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
    186e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TWI_statusReg>
    1872:	81 60       	ori	r24, 0x01	; 1
    1874:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    1878:	84 e9       	ldi	r24, 0x94	; 148
    187a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
    187e:	0b c0       	rjmp	.+22     	; 0x1896 <__vector_26+0xea>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
    1880:	85 ea       	ldi	r24, 0xA5	; 165
    1882:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
    1886:	07 c0       	rjmp	.+14     	; 0x1896 <__vector_26+0xea>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
    1888:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    188c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <TWI_state>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
    1890:	84 e0       	ldi	r24, 0x04	; 4
    1892:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
    1896:	ff 91       	pop	r31
    1898:	ef 91       	pop	r30
    189a:	bf 91       	pop	r27
    189c:	af 91       	pop	r26
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	3f 91       	pop	r19
    18a4:	2f 91       	pop	r18
    18a6:	0f 90       	pop	r0
    18a8:	0b be       	out	0x3b, r0	; 59
    18aa:	0f 90       	pop	r0
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	0f 90       	pop	r0
    18b0:	1f 90       	pop	r1
    18b2:	18 95       	reti

000018b4 <USART0_init>:
void USART0_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
		USART0_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
    18b4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    18b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    18bc:	88 e0       	ldi	r24, 0x08	; 8
    18be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    18c2:	86 e0       	ldi	r24, 0x06	; 6
    18c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    18c8:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <UART0_RxTail>
    18cc:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <UART0_RxHead>
    18d0:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <UART0_TxTail>
    18d4:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <UART0_TxHead>
    18d8:	08 95       	ret

000018da <USART0_Transmit_IO>:
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <UART0TransmitInProgress>
    18e0:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <UART0_TxHead>
    18e4:	2f 5f       	subi	r18, 0xFF	; 255
    18e6:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <UART0_TxTail>
    18ea:	29 17       	cp	r18, r25
    18ec:	e1 f3       	breq	.-8      	; 0x18e6 <USART0_Transmit_IO+0xc>
    18ee:	e2 2f       	mov	r30, r18
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	ed 51       	subi	r30, 0x1D	; 29
    18f4:	fe 4f       	sbci	r31, 0xFE	; 254
    18f6:	80 83       	st	Z, r24
    18f8:	20 93 e2 01 	sts	0x01E2, r18	; 0x8001e2 <UART0_TxHead>
    18fc:	e1 ec       	ldi	r30, 0xC1	; 193
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	80 62       	ori	r24, 0x20	; 32
    1904:	80 83       	st	Z, r24
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	08 95       	ret

0000190c <__vector_21>:
	// Store received data in buffer 
	UART0_RxBuf[tmphead] = data;
}*/

ISR(USART0_UDRE_vect)
{
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	0f 92       	push	r0
    1914:	11 24       	eor	r1, r1
    1916:	0b b6       	in	r0, 0x3b	; 59
    1918:	0f 92       	push	r0
    191a:	8f 93       	push	r24
    191c:	9f 93       	push	r25
    191e:	ef 93       	push	r30
    1920:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted 
	if (UART0_TxHead != UART0_TxTail) {
    1922:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <UART0_TxHead>
    1926:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <UART0_TxTail>
    192a:	98 17       	cp	r25, r24
    192c:	61 f0       	breq	.+24     	; 0x1946 <__vector_21+0x3a>
		// Calculate buffer index
		tmptail = ( UART0_TxTail + 1 ) & UART0_TX_BUFFER_MASK;
    192e:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <UART0_TxTail>
    1932:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index 
		UART0_TxTail = tmptail;
    1934:	e0 93 e1 01 	sts	0x01E1, r30	; 0x8001e1 <UART0_TxTail>
		// Start transmission 
		UDR0 = UART0_TxBuf[tmptail];
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	ed 51       	subi	r30, 0x1D	; 29
    193c:	fe 4f       	sbci	r31, 0xFE	; 254
    193e:	80 81       	ld	r24, Z
    1940:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1944:	07 c0       	rjmp	.+14     	; 0x1954 <__vector_21+0x48>
		} 
		else {
		// Disable UDRE interrupt 
		UCSR0B &= ~(1<<UDRIE0);
    1946:	e1 ec       	ldi	r30, 0xC1	; 193
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8f 7d       	andi	r24, 0xDF	; 223
    194e:	80 83       	st	Z, r24
		// Indicate transmission is complete
		UART0TransmitInProgress = 0;
    1950:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <UART0TransmitInProgress>
	}
    1954:	ff 91       	pop	r31
    1956:	ef 91       	pop	r30
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	0f 90       	pop	r0
    195e:	0b be       	out	0x3b, r0	; 59
    1960:	0f 90       	pop	r0
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	0f 90       	pop	r0
    1966:	1f 90       	pop	r1
    1968:	18 95       	reti

0000196a <USART1_init>:
void USART1_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
		USART1_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
    196a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    196e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1972:	80 e9       	ldi	r24, 0x90	; 144
    1974:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    197e:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <UART1_RxTail>
    1982:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <UART1_RxHead>
    1986:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <UART1_TxTail>
    198a:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <UART1_TxHead>
    198e:	08 95       	ret

00001990 <__vector_28>:
*********************************************************************************
********************************************************************************/


ISR(USART1_RX_vect)
{
    1990:	1f 92       	push	r1
    1992:	0f 92       	push	r0
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	0f 92       	push	r0
    1998:	11 24       	eor	r1, r1
    199a:	0b b6       	in	r0, 0x3b	; 59
    199c:	0f 92       	push	r0
    199e:	2f 93       	push	r18
    19a0:	3f 93       	push	r19
    19a2:	8f 93       	push	r24
    19a4:	9f 93       	push	r25
    19a6:	af 93       	push	r26
    19a8:	bf 93       	push	r27
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	ef 93       	push	r30
    19b0:	ff 93       	push	r31
	unsigned char data;
	unsigned char tmphead;
	unsigned char i;
	// Read the received data 
	data = UDR1;
    19b2:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	// Calculate buffer index 
	tmphead = (UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
    19b6:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <UART1_RxHead>
    19ba:	8f 5f       	subi	r24, 0xFF	; 255
	// Store new index 
	UART1_RxHead = tmphead;
    19bc:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <UART1_RxHead>

	if (tmphead == UART1_RxTail) {
    19c0:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <UART1_RxTail>
		// ERROR! Receive buffer overflow 
	}
	// Store received data in buffer 
	UART1_RxBuf[tmphead] = data;
    19c4:	e8 2f       	mov	r30, r24
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	e5 52       	subi	r30, 0x25	; 37
    19ca:	fc 4f       	sbci	r31, 0xFC	; 252
    19cc:	90 83       	st	Z, r25
	
	if (data == 10)
    19ce:	9a 30       	cpi	r25, 0x0A	; 10
    19d0:	29 f5       	brne	.+74     	; 0x1a1c <__vector_28+0x8c>
	{
		//USART0_TransmitByte('n');
		if (UART1_RxBuf[5] == 'G')
    19d2:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <UART1_RxBuf+0x5>
    19d6:	97 34       	cpi	r25, 0x47	; 71
    19d8:	e9 f4       	brne	.+58     	; 0x1a14 <__vector_28+0x84>
    19da:	e0 e0       	ldi	r30, 0x00	; 0
		{
			//USART0_TransmitByte(UART1_RxBuf[5]);
			for (i = 0; i<= tmphead; i++)
			{
				messageWant[i] = UART1_RxBuf[i+1]; //UART1_RxBuf[i];
    19dc:	2e 2f       	mov	r18, r30
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	d9 01       	movw	r26, r18
    19e2:	a5 52       	subi	r26, 0x25	; 37
    19e4:	bb 4f       	sbci	r27, 0xFB	; 251
    19e6:	e9 01       	movw	r28, r18
    19e8:	c5 52       	subi	r28, 0x25	; 37
    19ea:	dc 4f       	sbci	r29, 0xFC	; 252
    19ec:	99 81       	ldd	r25, Y+1	; 0x01
    19ee:	9c 93       	st	X, r25
	{
		//USART0_TransmitByte('n');
		if (UART1_RxBuf[5] == 'G')
		{
			//USART0_TransmitByte(UART1_RxBuf[5]);
			for (i = 0; i<= tmphead; i++)
    19f0:	ef 5f       	subi	r30, 0xFF	; 255
    19f2:	8e 17       	cp	r24, r30
    19f4:	98 f7       	brcc	.-26     	; 0x19dc <__vector_28+0x4c>
			{
				messageWant[i] = UART1_RxBuf[i+1]; //UART1_RxBuf[i];

			}
			messageWant[i-3]=0x00; //This sets the end of the string after the checksum, removing the CR/LF codes from the string.
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	e8 52       	subi	r30, 0x28	; 40
    19fa:	fb 4f       	sbci	r31, 0xFB	; 251
    19fc:	10 82       	st	Z, r1
 			UCSR1B &= !((1<<RXCIE1)|(1<<RXEN1));  //Clear the receive interrupt on USART 1 until we're done reading all other sensors.
    19fe:	e9 ec       	ldi	r30, 0xC9	; 201
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	10 82       	st	Z, r1
 			ItsTime = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <ItsTime>
 			ToggleBit(PORTB, PORTB1);
    1a0c:	95 b1       	in	r25, 0x05	; 5
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	89 27       	eor	r24, r25
    1a12:	85 b9       	out	0x05, r24	; 5
		}
		UART1_RxTail = 0;
    1a14:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <UART1_RxTail>
		UART1_RxHead = 0;
    1a18:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <UART1_RxHead>
	}
}
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	bf 91       	pop	r27
    1a26:	af 91       	pop	r26
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	3f 91       	pop	r19
    1a2e:	2f 91       	pop	r18
    1a30:	0f 90       	pop	r0
    1a32:	0b be       	out	0x3b, r0	; 59
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <__mulsi3>:
    1a3e:	db 01       	movw	r26, r22
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	14 d0       	rcall	.+40     	; 0x1a6e <__muluhisi3>
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	a2 9f       	mul	r26, r18
    1a4c:	80 0d       	add	r24, r0
    1a4e:	91 1d       	adc	r25, r1
    1a50:	a3 9f       	mul	r26, r19
    1a52:	90 0d       	add	r25, r0
    1a54:	b2 9f       	mul	r27, r18
    1a56:	90 0d       	add	r25, r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	08 95       	ret

00001a5c <__tablejump2__>:
    1a5c:	ee 0f       	add	r30, r30
    1a5e:	ff 1f       	adc	r31, r31
    1a60:	00 24       	eor	r0, r0
    1a62:	00 1c       	adc	r0, r0
    1a64:	0b be       	out	0x3b, r0	; 59
    1a66:	07 90       	elpm	r0, Z+
    1a68:	f6 91       	elpm	r31, Z
    1a6a:	e0 2d       	mov	r30, r0
    1a6c:	09 94       	ijmp

00001a6e <__muluhisi3>:
    1a6e:	85 d1       	rcall	.+778    	; 0x1d7a <__umulhisi3>
    1a70:	a5 9f       	mul	r26, r21
    1a72:	90 0d       	add	r25, r0
    1a74:	b4 9f       	mul	r27, r20
    1a76:	90 0d       	add	r25, r0
    1a78:	a4 9f       	mul	r26, r20
    1a7a:	80 0d       	add	r24, r0
    1a7c:	91 1d       	adc	r25, r1
    1a7e:	11 24       	eor	r1, r1
    1a80:	08 95       	ret

00001a82 <__mulshisi3>:
    1a82:	b7 ff       	sbrs	r27, 7
    1a84:	f4 cf       	rjmp	.-24     	; 0x1a6e <__muluhisi3>

00001a86 <__mulohisi3>:
    1a86:	f3 df       	rcall	.-26     	; 0x1a6e <__muluhisi3>
    1a88:	82 1b       	sub	r24, r18
    1a8a:	93 0b       	sbc	r25, r19
    1a8c:	08 95       	ret

00001a8e <__muldi3>:
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	1f 93       	push	r17
    1a94:	0f 93       	push	r16
    1a96:	9a 9d       	mul	r25, r10
    1a98:	f0 2d       	mov	r31, r0
    1a9a:	21 9f       	mul	r18, r17
    1a9c:	f0 0d       	add	r31, r0
    1a9e:	8b 9d       	mul	r24, r11
    1aa0:	f0 0d       	add	r31, r0
    1aa2:	8a 9d       	mul	r24, r10
    1aa4:	e0 2d       	mov	r30, r0
    1aa6:	f1 0d       	add	r31, r1
    1aa8:	03 9f       	mul	r16, r19
    1aaa:	f0 0d       	add	r31, r0
    1aac:	02 9f       	mul	r16, r18
    1aae:	e0 0d       	add	r30, r0
    1ab0:	f1 1d       	adc	r31, r1
    1ab2:	4e 9d       	mul	r20, r14
    1ab4:	e0 0d       	add	r30, r0
    1ab6:	f1 1d       	adc	r31, r1
    1ab8:	5e 9d       	mul	r21, r14
    1aba:	f0 0d       	add	r31, r0
    1abc:	4f 9d       	mul	r20, r15
    1abe:	f0 0d       	add	r31, r0
    1ac0:	7f 93       	push	r23
    1ac2:	6f 93       	push	r22
    1ac4:	bf 92       	push	r11
    1ac6:	af 92       	push	r10
    1ac8:	5f 93       	push	r21
    1aca:	4f 93       	push	r20
    1acc:	d5 01       	movw	r26, r10
    1ace:	55 d1       	rcall	.+682    	; 0x1d7a <__umulhisi3>
    1ad0:	8b 01       	movw	r16, r22
    1ad2:	ac 01       	movw	r20, r24
    1ad4:	d7 01       	movw	r26, r14
    1ad6:	51 d1       	rcall	.+674    	; 0x1d7a <__umulhisi3>
    1ad8:	eb 01       	movw	r28, r22
    1ada:	e8 0f       	add	r30, r24
    1adc:	f9 1f       	adc	r31, r25
    1ade:	d6 01       	movw	r26, r12
    1ae0:	1f d0       	rcall	.+62     	; 0x1b20 <__muldi3_6>
    1ae2:	2f 91       	pop	r18
    1ae4:	3f 91       	pop	r19
    1ae6:	d6 01       	movw	r26, r12
    1ae8:	48 d1       	rcall	.+656    	; 0x1d7a <__umulhisi3>
    1aea:	c6 0f       	add	r28, r22
    1aec:	d7 1f       	adc	r29, r23
    1aee:	e8 1f       	adc	r30, r24
    1af0:	f9 1f       	adc	r31, r25
    1af2:	af 91       	pop	r26
    1af4:	bf 91       	pop	r27
    1af6:	14 d0       	rcall	.+40     	; 0x1b20 <__muldi3_6>
    1af8:	2f 91       	pop	r18
    1afa:	3f 91       	pop	r19
    1afc:	3e d1       	rcall	.+636    	; 0x1d7a <__umulhisi3>
    1afe:	c6 0f       	add	r28, r22
    1b00:	d7 1f       	adc	r29, r23
    1b02:	e8 1f       	adc	r30, r24
    1b04:	f9 1f       	adc	r31, r25
    1b06:	d6 01       	movw	r26, r12
    1b08:	38 d1       	rcall	.+624    	; 0x1d7a <__umulhisi3>
    1b0a:	e6 0f       	add	r30, r22
    1b0c:	f7 1f       	adc	r31, r23
    1b0e:	98 01       	movw	r18, r16
    1b10:	be 01       	movw	r22, r28
    1b12:	cf 01       	movw	r24, r30
    1b14:	11 24       	eor	r1, r1
    1b16:	0f 91       	pop	r16
    1b18:	1f 91       	pop	r17
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <__muldi3_6>:
    1b20:	2c d1       	rcall	.+600    	; 0x1d7a <__umulhisi3>
    1b22:	46 0f       	add	r20, r22
    1b24:	57 1f       	adc	r21, r23
    1b26:	c8 1f       	adc	r28, r24
    1b28:	d9 1f       	adc	r29, r25
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <__muldi3_6+0xe>
    1b2c:	31 96       	adiw	r30, 0x01	; 1
    1b2e:	08 95       	ret

00001b30 <__moddi3>:
    1b30:	68 94       	set
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <__divdi3_moddi3>

00001b34 <__divdi3>:
    1b34:	e8 94       	clt

00001b36 <__divdi3_moddi3>:
    1b36:	f9 2f       	mov	r31, r25
    1b38:	f1 2b       	or	r31, r17
    1b3a:	0a f0       	brmi	.+2      	; 0x1b3e <__divdi3_moddi3+0x8>
    1b3c:	27 c0       	rjmp	.+78     	; 0x1b8c <__udivdi3_umoddi3>
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e4 ea       	ldi	r30, 0xA4	; 164
    1b44:	fd e0       	ldi	r31, 0x0D	; 13
    1b46:	93 c0       	rjmp	.+294    	; 0x1c6e <__prologue_saves__+0xc>
    1b48:	09 2e       	mov	r0, r25
    1b4a:	05 94       	asr	r0
    1b4c:	1a f4       	brpl	.+6      	; 0x1b54 <__divdi3_moddi3+0x1e>
    1b4e:	79 d0       	rcall	.+242    	; 0x1c42 <__negdi2>
    1b50:	11 23       	and	r17, r17
    1b52:	92 f4       	brpl	.+36     	; 0x1b78 <__divdi3_moddi3+0x42>
    1b54:	f0 e8       	ldi	r31, 0x80	; 128
    1b56:	0f 26       	eor	r0, r31
    1b58:	ff ef       	ldi	r31, 0xFF	; 255
    1b5a:	e0 94       	com	r14
    1b5c:	f0 94       	com	r15
    1b5e:	00 95       	com	r16
    1b60:	10 95       	com	r17
    1b62:	b0 94       	com	r11
    1b64:	c0 94       	com	r12
    1b66:	d0 94       	com	r13
    1b68:	a1 94       	neg	r10
    1b6a:	bf 0a       	sbc	r11, r31
    1b6c:	cf 0a       	sbc	r12, r31
    1b6e:	df 0a       	sbc	r13, r31
    1b70:	ef 0a       	sbc	r14, r31
    1b72:	ff 0a       	sbc	r15, r31
    1b74:	0f 0b       	sbc	r16, r31
    1b76:	1f 0b       	sbc	r17, r31
    1b78:	13 d0       	rcall	.+38     	; 0x1ba0 <__udivmod64>
    1b7a:	07 fc       	sbrc	r0, 7
    1b7c:	62 d0       	rcall	.+196    	; 0x1c42 <__negdi2>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	ec e0       	ldi	r30, 0x0C	; 12
    1b84:	90 c0       	rjmp	.+288    	; 0x1ca6 <__epilogue_restores__+0xc>

00001b86 <__umoddi3>:
    1b86:	68 94       	set
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <__udivdi3_umoddi3>

00001b8a <__udivdi3>:
    1b8a:	e8 94       	clt

00001b8c <__udivdi3_umoddi3>:
    1b8c:	8f 92       	push	r8
    1b8e:	9f 92       	push	r9
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	05 d0       	rcall	.+10     	; 0x1ba0 <__udivmod64>
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	9f 90       	pop	r9
    1b9c:	8f 90       	pop	r8
    1b9e:	08 95       	ret

00001ba0 <__udivmod64>:
    1ba0:	88 24       	eor	r8, r8
    1ba2:	99 24       	eor	r9, r9
    1ba4:	f4 01       	movw	r30, r8
    1ba6:	e4 01       	movw	r28, r8
    1ba8:	b0 e4       	ldi	r27, 0x40	; 64
    1baa:	9f 93       	push	r25
    1bac:	aa 27       	eor	r26, r26
    1bae:	9a 15       	cp	r25, r10
    1bb0:	8b 04       	cpc	r8, r11
    1bb2:	9c 04       	cpc	r9, r12
    1bb4:	ed 05       	cpc	r30, r13
    1bb6:	fe 05       	cpc	r31, r14
    1bb8:	cf 05       	cpc	r28, r15
    1bba:	d0 07       	cpc	r29, r16
    1bbc:	a1 07       	cpc	r26, r17
    1bbe:	98 f4       	brcc	.+38     	; 0x1be6 <__udivmod64+0x46>
    1bc0:	ad 2f       	mov	r26, r29
    1bc2:	dc 2f       	mov	r29, r28
    1bc4:	cf 2f       	mov	r28, r31
    1bc6:	fe 2f       	mov	r31, r30
    1bc8:	e9 2d       	mov	r30, r9
    1bca:	98 2c       	mov	r9, r8
    1bcc:	89 2e       	mov	r8, r25
    1bce:	98 2f       	mov	r25, r24
    1bd0:	87 2f       	mov	r24, r23
    1bd2:	76 2f       	mov	r23, r22
    1bd4:	65 2f       	mov	r22, r21
    1bd6:	54 2f       	mov	r21, r20
    1bd8:	43 2f       	mov	r20, r19
    1bda:	32 2f       	mov	r19, r18
    1bdc:	22 27       	eor	r18, r18
    1bde:	b8 50       	subi	r27, 0x08	; 8
    1be0:	31 f7       	brne	.-52     	; 0x1bae <__udivmod64+0xe>
    1be2:	bf 91       	pop	r27
    1be4:	27 c0       	rjmp	.+78     	; 0x1c34 <__udivmod64+0x94>
    1be6:	1b 2e       	mov	r1, r27
    1be8:	bf 91       	pop	r27
    1bea:	bb 27       	eor	r27, r27
    1bec:	22 0f       	add	r18, r18
    1bee:	33 1f       	adc	r19, r19
    1bf0:	44 1f       	adc	r20, r20
    1bf2:	55 1f       	adc	r21, r21
    1bf4:	66 1f       	adc	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	88 1c       	adc	r8, r8
    1bfe:	99 1c       	adc	r9, r9
    1c00:	ee 1f       	adc	r30, r30
    1c02:	ff 1f       	adc	r31, r31
    1c04:	cc 1f       	adc	r28, r28
    1c06:	dd 1f       	adc	r29, r29
    1c08:	aa 1f       	adc	r26, r26
    1c0a:	bb 1f       	adc	r27, r27
    1c0c:	8a 14       	cp	r8, r10
    1c0e:	9b 04       	cpc	r9, r11
    1c10:	ec 05       	cpc	r30, r12
    1c12:	fd 05       	cpc	r31, r13
    1c14:	ce 05       	cpc	r28, r14
    1c16:	df 05       	cpc	r29, r15
    1c18:	a0 07       	cpc	r26, r16
    1c1a:	b1 07       	cpc	r27, r17
    1c1c:	48 f0       	brcs	.+18     	; 0x1c30 <__udivmod64+0x90>
    1c1e:	8a 18       	sub	r8, r10
    1c20:	9b 08       	sbc	r9, r11
    1c22:	ec 09       	sbc	r30, r12
    1c24:	fd 09       	sbc	r31, r13
    1c26:	ce 09       	sbc	r28, r14
    1c28:	df 09       	sbc	r29, r15
    1c2a:	a0 0b       	sbc	r26, r16
    1c2c:	b1 0b       	sbc	r27, r17
    1c2e:	21 60       	ori	r18, 0x01	; 1
    1c30:	1a 94       	dec	r1
    1c32:	e1 f6       	brne	.-72     	; 0x1bec <__udivmod64+0x4c>
    1c34:	2e f4       	brtc	.+10     	; 0x1c40 <__udivmod64+0xa0>
    1c36:	94 01       	movw	r18, r8
    1c38:	af 01       	movw	r20, r30
    1c3a:	be 01       	movw	r22, r28
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	00 0c       	add	r0, r0
    1c40:	08 95       	ret

00001c42 <__negdi2>:
    1c42:	60 95       	com	r22
    1c44:	70 95       	com	r23
    1c46:	80 95       	com	r24
    1c48:	90 95       	com	r25
    1c4a:	30 95       	com	r19
    1c4c:	40 95       	com	r20
    1c4e:	50 95       	com	r21
    1c50:	21 95       	neg	r18
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	4f 4f       	sbci	r20, 0xFF	; 255
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255
    1c58:	6f 4f       	sbci	r22, 0xFF	; 255
    1c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	08 95       	ret

00001c62 <__prologue_saves__>:
    1c62:	2f 92       	push	r2
    1c64:	3f 92       	push	r3
    1c66:	4f 92       	push	r4
    1c68:	5f 92       	push	r5
    1c6a:	6f 92       	push	r6
    1c6c:	7f 92       	push	r7
    1c6e:	8f 92       	push	r8
    1c70:	9f 92       	push	r9
    1c72:	af 92       	push	r10
    1c74:	bf 92       	push	r11
    1c76:	cf 92       	push	r12
    1c78:	df 92       	push	r13
    1c7a:	ef 92       	push	r14
    1c7c:	ff 92       	push	r15
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	ca 1b       	sub	r28, r26
    1c8c:	db 0b       	sbc	r29, r27
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	09 94       	ijmp

00001c9a <__epilogue_restores__>:
    1c9a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c9c:	39 88       	ldd	r3, Y+17	; 0x11
    1c9e:	48 88       	ldd	r4, Y+16	; 0x10
    1ca0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ca2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ca4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ca6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ca8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1caa:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cac:	b9 84       	ldd	r11, Y+9	; 0x09
    1cae:	c8 84       	ldd	r12, Y+8	; 0x08
    1cb0:	df 80       	ldd	r13, Y+7	; 0x07
    1cb2:	ee 80       	ldd	r14, Y+6	; 0x06
    1cb4:	fd 80       	ldd	r15, Y+5	; 0x05
    1cb6:	0c 81       	ldd	r16, Y+4	; 0x04
    1cb8:	1b 81       	ldd	r17, Y+3	; 0x03
    1cba:	aa 81       	ldd	r26, Y+2	; 0x02
    1cbc:	b9 81       	ldd	r27, Y+1	; 0x01
    1cbe:	ce 0f       	add	r28, r30
    1cc0:	d1 1d       	adc	r29, r1
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	ed 01       	movw	r28, r26
    1cce:	08 95       	ret

00001cd0 <__ashldi3>:
    1cd0:	0f 93       	push	r16
    1cd2:	08 30       	cpi	r16, 0x08	; 8
    1cd4:	90 f0       	brcs	.+36     	; 0x1cfa <__ashldi3+0x2a>
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	87 2f       	mov	r24, r23
    1cda:	76 2f       	mov	r23, r22
    1cdc:	65 2f       	mov	r22, r21
    1cde:	54 2f       	mov	r21, r20
    1ce0:	43 2f       	mov	r20, r19
    1ce2:	32 2f       	mov	r19, r18
    1ce4:	22 27       	eor	r18, r18
    1ce6:	08 50       	subi	r16, 0x08	; 8
    1ce8:	f4 cf       	rjmp	.-24     	; 0x1cd2 <__ashldi3+0x2>
    1cea:	22 0f       	add	r18, r18
    1cec:	33 1f       	adc	r19, r19
    1cee:	44 1f       	adc	r20, r20
    1cf0:	55 1f       	adc	r21, r21
    1cf2:	66 1f       	adc	r22, r22
    1cf4:	77 1f       	adc	r23, r23
    1cf6:	88 1f       	adc	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 95       	dec	r16
    1cfc:	b2 f7       	brpl	.-20     	; 0x1cea <__ashldi3+0x1a>
    1cfe:	0f 91       	pop	r16
    1d00:	08 95       	ret

00001d02 <__ashrdi3>:
    1d02:	97 fb       	bst	r25, 7
    1d04:	10 f8       	bld	r1, 0

00001d06 <__lshrdi3>:
    1d06:	16 94       	lsr	r1
    1d08:	00 08       	sbc	r0, r0
    1d0a:	0f 93       	push	r16
    1d0c:	08 30       	cpi	r16, 0x08	; 8
    1d0e:	98 f0       	brcs	.+38     	; 0x1d36 <__lshrdi3+0x30>
    1d10:	08 50       	subi	r16, 0x08	; 8
    1d12:	23 2f       	mov	r18, r19
    1d14:	34 2f       	mov	r19, r20
    1d16:	45 2f       	mov	r20, r21
    1d18:	56 2f       	mov	r21, r22
    1d1a:	67 2f       	mov	r22, r23
    1d1c:	78 2f       	mov	r23, r24
    1d1e:	89 2f       	mov	r24, r25
    1d20:	90 2d       	mov	r25, r0
    1d22:	f4 cf       	rjmp	.-24     	; 0x1d0c <__lshrdi3+0x6>
    1d24:	05 94       	asr	r0
    1d26:	97 95       	ror	r25
    1d28:	87 95       	ror	r24
    1d2a:	77 95       	ror	r23
    1d2c:	67 95       	ror	r22
    1d2e:	57 95       	ror	r21
    1d30:	47 95       	ror	r20
    1d32:	37 95       	ror	r19
    1d34:	27 95       	ror	r18
    1d36:	0a 95       	dec	r16
    1d38:	aa f7       	brpl	.-22     	; 0x1d24 <__lshrdi3+0x1e>
    1d3a:	0f 91       	pop	r16
    1d3c:	08 95       	ret

00001d3e <__adddi3>:
    1d3e:	2a 0d       	add	r18, r10
    1d40:	3b 1d       	adc	r19, r11
    1d42:	4c 1d       	adc	r20, r12
    1d44:	5d 1d       	adc	r21, r13
    1d46:	6e 1d       	adc	r22, r14
    1d48:	7f 1d       	adc	r23, r15
    1d4a:	80 1f       	adc	r24, r16
    1d4c:	91 1f       	adc	r25, r17
    1d4e:	08 95       	ret

00001d50 <__subdi3>:
    1d50:	2a 19       	sub	r18, r10
    1d52:	3b 09       	sbc	r19, r11
    1d54:	4c 09       	sbc	r20, r12
    1d56:	5d 09       	sbc	r21, r13
    1d58:	6e 09       	sbc	r22, r14
    1d5a:	7f 09       	sbc	r23, r15
    1d5c:	80 0b       	sbc	r24, r16
    1d5e:	91 0b       	sbc	r25, r17
    1d60:	08 95       	ret

00001d62 <__cmpdi2_s8>:
    1d62:	00 24       	eor	r0, r0
    1d64:	a7 fd       	sbrc	r26, 7
    1d66:	00 94       	com	r0
    1d68:	2a 17       	cp	r18, r26
    1d6a:	30 05       	cpc	r19, r0
    1d6c:	40 05       	cpc	r20, r0
    1d6e:	50 05       	cpc	r21, r0
    1d70:	60 05       	cpc	r22, r0
    1d72:	70 05       	cpc	r23, r0
    1d74:	80 05       	cpc	r24, r0
    1d76:	90 05       	cpc	r25, r0
    1d78:	08 95       	ret

00001d7a <__umulhisi3>:
    1d7a:	a2 9f       	mul	r26, r18
    1d7c:	b0 01       	movw	r22, r0
    1d7e:	b3 9f       	mul	r27, r19
    1d80:	c0 01       	movw	r24, r0
    1d82:	a3 9f       	mul	r26, r19
    1d84:	70 0d       	add	r23, r0
    1d86:	81 1d       	adc	r24, r1
    1d88:	11 24       	eor	r1, r1
    1d8a:	91 1d       	adc	r25, r1
    1d8c:	b2 9f       	mul	r27, r18
    1d8e:	70 0d       	add	r23, r0
    1d90:	81 1d       	adc	r24, r1
    1d92:	11 24       	eor	r1, r1
    1d94:	91 1d       	adc	r25, r1
    1d96:	08 95       	ret

00001d98 <printf>:
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	ae 01       	movw	r20, r28
    1da2:	4b 5f       	subi	r20, 0xFB	; 251
    1da4:	5f 4f       	sbci	r21, 0xFF	; 255
    1da6:	fa 01       	movw	r30, r20
    1da8:	61 91       	ld	r22, Z+
    1daa:	71 91       	ld	r23, Z+
    1dac:	af 01       	movw	r20, r30
    1dae:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <__iob+0x2>
    1db2:	90 91 de 05 	lds	r25, 0x05DE	; 0x8005de <__iob+0x3>
    1db6:	03 d0       	rcall	.+6      	; 0x1dbe <vfprintf>
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	08 95       	ret

00001dbe <vfprintf>:
    1dbe:	2f 92       	push	r2
    1dc0:	3f 92       	push	r3
    1dc2:	4f 92       	push	r4
    1dc4:	5f 92       	push	r5
    1dc6:	6f 92       	push	r6
    1dc8:	7f 92       	push	r7
    1dca:	8f 92       	push	r8
    1dcc:	9f 92       	push	r9
    1dce:	af 92       	push	r10
    1dd0:	bf 92       	push	r11
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	2c 97       	sbiw	r28, 0x0c	; 12
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	7c 01       	movw	r14, r24
    1df4:	6b 01       	movw	r12, r22
    1df6:	8a 01       	movw	r16, r20
    1df8:	fc 01       	movw	r30, r24
    1dfa:	17 82       	std	Z+7, r1	; 0x07
    1dfc:	16 82       	std	Z+6, r1	; 0x06
    1dfe:	83 81       	ldd	r24, Z+3	; 0x03
    1e00:	81 ff       	sbrs	r24, 1
    1e02:	b0 c1       	rjmp	.+864    	; 0x2164 <vfprintf+0x3a6>
    1e04:	ce 01       	movw	r24, r28
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	4c 01       	movw	r8, r24
    1e0a:	f7 01       	movw	r30, r14
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	f6 01       	movw	r30, r12
    1e10:	93 fd       	sbrc	r25, 3
    1e12:	85 91       	lpm	r24, Z+
    1e14:	93 ff       	sbrs	r25, 3
    1e16:	81 91       	ld	r24, Z+
    1e18:	6f 01       	movw	r12, r30
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <vfprintf+0x62>
    1e1e:	9e c1       	rjmp	.+828    	; 0x215c <vfprintf+0x39e>
    1e20:	85 32       	cpi	r24, 0x25	; 37
    1e22:	39 f4       	brne	.+14     	; 0x1e32 <vfprintf+0x74>
    1e24:	93 fd       	sbrc	r25, 3
    1e26:	85 91       	lpm	r24, Z+
    1e28:	93 ff       	sbrs	r25, 3
    1e2a:	81 91       	ld	r24, Z+
    1e2c:	6f 01       	movw	r12, r30
    1e2e:	85 32       	cpi	r24, 0x25	; 37
    1e30:	21 f4       	brne	.+8      	; 0x1e3a <vfprintf+0x7c>
    1e32:	b7 01       	movw	r22, r14
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	c7 d1       	rcall	.+910    	; 0x21c6 <fputc>
    1e38:	e8 cf       	rjmp	.-48     	; 0x1e0a <vfprintf+0x4c>
    1e3a:	51 2c       	mov	r5, r1
    1e3c:	31 2c       	mov	r3, r1
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	20 32       	cpi	r18, 0x20	; 32
    1e42:	a0 f4       	brcc	.+40     	; 0x1e6c <vfprintf+0xae>
    1e44:	8b 32       	cpi	r24, 0x2B	; 43
    1e46:	69 f0       	breq	.+26     	; 0x1e62 <vfprintf+0xa4>
    1e48:	30 f4       	brcc	.+12     	; 0x1e56 <vfprintf+0x98>
    1e4a:	80 32       	cpi	r24, 0x20	; 32
    1e4c:	59 f0       	breq	.+22     	; 0x1e64 <vfprintf+0xa6>
    1e4e:	83 32       	cpi	r24, 0x23	; 35
    1e50:	69 f4       	brne	.+26     	; 0x1e6c <vfprintf+0xae>
    1e52:	20 61       	ori	r18, 0x10	; 16
    1e54:	2c c0       	rjmp	.+88     	; 0x1eae <vfprintf+0xf0>
    1e56:	8d 32       	cpi	r24, 0x2D	; 45
    1e58:	39 f0       	breq	.+14     	; 0x1e68 <vfprintf+0xaa>
    1e5a:	80 33       	cpi	r24, 0x30	; 48
    1e5c:	39 f4       	brne	.+14     	; 0x1e6c <vfprintf+0xae>
    1e5e:	21 60       	ori	r18, 0x01	; 1
    1e60:	26 c0       	rjmp	.+76     	; 0x1eae <vfprintf+0xf0>
    1e62:	22 60       	ori	r18, 0x02	; 2
    1e64:	24 60       	ori	r18, 0x04	; 4
    1e66:	23 c0       	rjmp	.+70     	; 0x1eae <vfprintf+0xf0>
    1e68:	28 60       	ori	r18, 0x08	; 8
    1e6a:	21 c0       	rjmp	.+66     	; 0x1eae <vfprintf+0xf0>
    1e6c:	27 fd       	sbrc	r18, 7
    1e6e:	27 c0       	rjmp	.+78     	; 0x1ebe <vfprintf+0x100>
    1e70:	30 ed       	ldi	r19, 0xD0	; 208
    1e72:	38 0f       	add	r19, r24
    1e74:	3a 30       	cpi	r19, 0x0A	; 10
    1e76:	78 f4       	brcc	.+30     	; 0x1e96 <vfprintf+0xd8>
    1e78:	26 ff       	sbrs	r18, 6
    1e7a:	06 c0       	rjmp	.+12     	; 0x1e88 <vfprintf+0xca>
    1e7c:	fa e0       	ldi	r31, 0x0A	; 10
    1e7e:	5f 9e       	mul	r5, r31
    1e80:	30 0d       	add	r19, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	53 2e       	mov	r5, r19
    1e86:	13 c0       	rjmp	.+38     	; 0x1eae <vfprintf+0xf0>
    1e88:	8a e0       	ldi	r24, 0x0A	; 10
    1e8a:	38 9e       	mul	r3, r24
    1e8c:	30 0d       	add	r19, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	33 2e       	mov	r3, r19
    1e92:	20 62       	ori	r18, 0x20	; 32
    1e94:	0c c0       	rjmp	.+24     	; 0x1eae <vfprintf+0xf0>
    1e96:	8e 32       	cpi	r24, 0x2E	; 46
    1e98:	21 f4       	brne	.+8      	; 0x1ea2 <vfprintf+0xe4>
    1e9a:	26 fd       	sbrc	r18, 6
    1e9c:	5f c1       	rjmp	.+702    	; 0x215c <vfprintf+0x39e>
    1e9e:	20 64       	ori	r18, 0x40	; 64
    1ea0:	06 c0       	rjmp	.+12     	; 0x1eae <vfprintf+0xf0>
    1ea2:	8c 36       	cpi	r24, 0x6C	; 108
    1ea4:	11 f4       	brne	.+4      	; 0x1eaa <vfprintf+0xec>
    1ea6:	20 68       	ori	r18, 0x80	; 128
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <vfprintf+0xf0>
    1eaa:	88 36       	cpi	r24, 0x68	; 104
    1eac:	41 f4       	brne	.+16     	; 0x1ebe <vfprintf+0x100>
    1eae:	f6 01       	movw	r30, r12
    1eb0:	93 fd       	sbrc	r25, 3
    1eb2:	85 91       	lpm	r24, Z+
    1eb4:	93 ff       	sbrs	r25, 3
    1eb6:	81 91       	ld	r24, Z+
    1eb8:	6f 01       	movw	r12, r30
    1eba:	81 11       	cpse	r24, r1
    1ebc:	c1 cf       	rjmp	.-126    	; 0x1e40 <vfprintf+0x82>
    1ebe:	98 2f       	mov	r25, r24
    1ec0:	9f 7d       	andi	r25, 0xDF	; 223
    1ec2:	95 54       	subi	r25, 0x45	; 69
    1ec4:	93 30       	cpi	r25, 0x03	; 3
    1ec6:	28 f4       	brcc	.+10     	; 0x1ed2 <vfprintf+0x114>
    1ec8:	0c 5f       	subi	r16, 0xFC	; 252
    1eca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ecc:	ff e3       	ldi	r31, 0x3F	; 63
    1ece:	f9 83       	std	Y+1, r31	; 0x01
    1ed0:	0d c0       	rjmp	.+26     	; 0x1eec <vfprintf+0x12e>
    1ed2:	83 36       	cpi	r24, 0x63	; 99
    1ed4:	31 f0       	breq	.+12     	; 0x1ee2 <vfprintf+0x124>
    1ed6:	83 37       	cpi	r24, 0x73	; 115
    1ed8:	71 f0       	breq	.+28     	; 0x1ef6 <vfprintf+0x138>
    1eda:	83 35       	cpi	r24, 0x53	; 83
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <vfprintf+0x122>
    1ede:	57 c0       	rjmp	.+174    	; 0x1f8e <vfprintf+0x1d0>
    1ee0:	21 c0       	rjmp	.+66     	; 0x1f24 <vfprintf+0x166>
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	80 81       	ld	r24, Z
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	0e 5f       	subi	r16, 0xFE	; 254
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	44 24       	eor	r4, r4
    1eee:	43 94       	inc	r4
    1ef0:	51 2c       	mov	r5, r1
    1ef2:	54 01       	movw	r10, r8
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <vfprintf+0x160>
    1ef6:	38 01       	movw	r6, r16
    1ef8:	f2 e0       	ldi	r31, 0x02	; 2
    1efa:	6f 0e       	add	r6, r31
    1efc:	71 1c       	adc	r7, r1
    1efe:	f8 01       	movw	r30, r16
    1f00:	a0 80       	ld	r10, Z
    1f02:	b1 80       	ldd	r11, Z+1	; 0x01
    1f04:	26 ff       	sbrs	r18, 6
    1f06:	03 c0       	rjmp	.+6      	; 0x1f0e <vfprintf+0x150>
    1f08:	65 2d       	mov	r22, r5
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <vfprintf+0x154>
    1f0e:	6f ef       	ldi	r22, 0xFF	; 255
    1f10:	7f ef       	ldi	r23, 0xFF	; 255
    1f12:	c5 01       	movw	r24, r10
    1f14:	2c 87       	std	Y+12, r18	; 0x0c
    1f16:	4c d1       	rcall	.+664    	; 0x21b0 <strnlen>
    1f18:	2c 01       	movw	r4, r24
    1f1a:	83 01       	movw	r16, r6
    1f1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f1e:	2f 77       	andi	r18, 0x7F	; 127
    1f20:	22 2e       	mov	r2, r18
    1f22:	16 c0       	rjmp	.+44     	; 0x1f50 <vfprintf+0x192>
    1f24:	38 01       	movw	r6, r16
    1f26:	f2 e0       	ldi	r31, 0x02	; 2
    1f28:	6f 0e       	add	r6, r31
    1f2a:	71 1c       	adc	r7, r1
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	a0 80       	ld	r10, Z
    1f30:	b1 80       	ldd	r11, Z+1	; 0x01
    1f32:	26 ff       	sbrs	r18, 6
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <vfprintf+0x17e>
    1f36:	65 2d       	mov	r22, r5
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <vfprintf+0x182>
    1f3c:	6f ef       	ldi	r22, 0xFF	; 255
    1f3e:	7f ef       	ldi	r23, 0xFF	; 255
    1f40:	c5 01       	movw	r24, r10
    1f42:	2c 87       	std	Y+12, r18	; 0x0c
    1f44:	2a d1       	rcall	.+596    	; 0x219a <strnlen_P>
    1f46:	2c 01       	movw	r4, r24
    1f48:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f4a:	20 68       	ori	r18, 0x80	; 128
    1f4c:	22 2e       	mov	r2, r18
    1f4e:	83 01       	movw	r16, r6
    1f50:	23 fc       	sbrc	r2, 3
    1f52:	19 c0       	rjmp	.+50     	; 0x1f86 <vfprintf+0x1c8>
    1f54:	83 2d       	mov	r24, r3
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	48 16       	cp	r4, r24
    1f5a:	59 06       	cpc	r5, r25
    1f5c:	a0 f4       	brcc	.+40     	; 0x1f86 <vfprintf+0x1c8>
    1f5e:	b7 01       	movw	r22, r14
    1f60:	80 e2       	ldi	r24, 0x20	; 32
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	30 d1       	rcall	.+608    	; 0x21c6 <fputc>
    1f66:	3a 94       	dec	r3
    1f68:	f5 cf       	rjmp	.-22     	; 0x1f54 <vfprintf+0x196>
    1f6a:	f5 01       	movw	r30, r10
    1f6c:	27 fc       	sbrc	r2, 7
    1f6e:	85 91       	lpm	r24, Z+
    1f70:	27 fe       	sbrs	r2, 7
    1f72:	81 91       	ld	r24, Z+
    1f74:	5f 01       	movw	r10, r30
    1f76:	b7 01       	movw	r22, r14
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	25 d1       	rcall	.+586    	; 0x21c6 <fputc>
    1f7c:	31 10       	cpse	r3, r1
    1f7e:	3a 94       	dec	r3
    1f80:	f1 e0       	ldi	r31, 0x01	; 1
    1f82:	4f 1a       	sub	r4, r31
    1f84:	51 08       	sbc	r5, r1
    1f86:	41 14       	cp	r4, r1
    1f88:	51 04       	cpc	r5, r1
    1f8a:	79 f7       	brne	.-34     	; 0x1f6a <vfprintf+0x1ac>
    1f8c:	de c0       	rjmp	.+444    	; 0x214a <vfprintf+0x38c>
    1f8e:	84 36       	cpi	r24, 0x64	; 100
    1f90:	11 f0       	breq	.+4      	; 0x1f96 <vfprintf+0x1d8>
    1f92:	89 36       	cpi	r24, 0x69	; 105
    1f94:	31 f5       	brne	.+76     	; 0x1fe2 <vfprintf+0x224>
    1f96:	f8 01       	movw	r30, r16
    1f98:	27 ff       	sbrs	r18, 7
    1f9a:	07 c0       	rjmp	.+14     	; 0x1faa <vfprintf+0x1ec>
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	0c 5f       	subi	r16, 0xFC	; 252
    1fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <vfprintf+0x1fc>
    1faa:	60 81       	ld	r22, Z
    1fac:	71 81       	ldd	r23, Z+1	; 0x01
    1fae:	07 2e       	mov	r0, r23
    1fb0:	00 0c       	add	r0, r0
    1fb2:	88 0b       	sbc	r24, r24
    1fb4:	99 0b       	sbc	r25, r25
    1fb6:	0e 5f       	subi	r16, 0xFE	; 254
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	2f 76       	andi	r18, 0x6F	; 111
    1fbc:	72 2e       	mov	r7, r18
    1fbe:	97 ff       	sbrs	r25, 7
    1fc0:	09 c0       	rjmp	.+18     	; 0x1fd4 <vfprintf+0x216>
    1fc2:	90 95       	com	r25
    1fc4:	80 95       	com	r24
    1fc6:	70 95       	com	r23
    1fc8:	61 95       	neg	r22
    1fca:	7f 4f       	sbci	r23, 0xFF	; 255
    1fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	20 68       	ori	r18, 0x80	; 128
    1fd2:	72 2e       	mov	r7, r18
    1fd4:	2a e0       	ldi	r18, 0x0A	; 10
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	a4 01       	movw	r20, r8
    1fda:	2d d1       	rcall	.+602    	; 0x2236 <__ultoa_invert>
    1fdc:	a8 2e       	mov	r10, r24
    1fde:	a8 18       	sub	r10, r8
    1fe0:	43 c0       	rjmp	.+134    	; 0x2068 <vfprintf+0x2aa>
    1fe2:	85 37       	cpi	r24, 0x75	; 117
    1fe4:	29 f4       	brne	.+10     	; 0x1ff0 <vfprintf+0x232>
    1fe6:	2f 7e       	andi	r18, 0xEF	; 239
    1fe8:	b2 2e       	mov	r11, r18
    1fea:	2a e0       	ldi	r18, 0x0A	; 10
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	25 c0       	rjmp	.+74     	; 0x203a <vfprintf+0x27c>
    1ff0:	f2 2f       	mov	r31, r18
    1ff2:	f9 7f       	andi	r31, 0xF9	; 249
    1ff4:	bf 2e       	mov	r11, r31
    1ff6:	8f 36       	cpi	r24, 0x6F	; 111
    1ff8:	c1 f0       	breq	.+48     	; 0x202a <vfprintf+0x26c>
    1ffa:	18 f4       	brcc	.+6      	; 0x2002 <vfprintf+0x244>
    1ffc:	88 35       	cpi	r24, 0x58	; 88
    1ffe:	79 f0       	breq	.+30     	; 0x201e <vfprintf+0x260>
    2000:	ad c0       	rjmp	.+346    	; 0x215c <vfprintf+0x39e>
    2002:	80 37       	cpi	r24, 0x70	; 112
    2004:	19 f0       	breq	.+6      	; 0x200c <vfprintf+0x24e>
    2006:	88 37       	cpi	r24, 0x78	; 120
    2008:	21 f0       	breq	.+8      	; 0x2012 <vfprintf+0x254>
    200a:	a8 c0       	rjmp	.+336    	; 0x215c <vfprintf+0x39e>
    200c:	2f 2f       	mov	r18, r31
    200e:	20 61       	ori	r18, 0x10	; 16
    2010:	b2 2e       	mov	r11, r18
    2012:	b4 fe       	sbrs	r11, 4
    2014:	0d c0       	rjmp	.+26     	; 0x2030 <vfprintf+0x272>
    2016:	8b 2d       	mov	r24, r11
    2018:	84 60       	ori	r24, 0x04	; 4
    201a:	b8 2e       	mov	r11, r24
    201c:	09 c0       	rjmp	.+18     	; 0x2030 <vfprintf+0x272>
    201e:	24 ff       	sbrs	r18, 4
    2020:	0a c0       	rjmp	.+20     	; 0x2036 <vfprintf+0x278>
    2022:	9f 2f       	mov	r25, r31
    2024:	96 60       	ori	r25, 0x06	; 6
    2026:	b9 2e       	mov	r11, r25
    2028:	06 c0       	rjmp	.+12     	; 0x2036 <vfprintf+0x278>
    202a:	28 e0       	ldi	r18, 0x08	; 8
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	05 c0       	rjmp	.+10     	; 0x203a <vfprintf+0x27c>
    2030:	20 e1       	ldi	r18, 0x10	; 16
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	02 c0       	rjmp	.+4      	; 0x203a <vfprintf+0x27c>
    2036:	20 e1       	ldi	r18, 0x10	; 16
    2038:	32 e0       	ldi	r19, 0x02	; 2
    203a:	f8 01       	movw	r30, r16
    203c:	b7 fe       	sbrs	r11, 7
    203e:	07 c0       	rjmp	.+14     	; 0x204e <vfprintf+0x290>
    2040:	60 81       	ld	r22, Z
    2042:	71 81       	ldd	r23, Z+1	; 0x01
    2044:	82 81       	ldd	r24, Z+2	; 0x02
    2046:	93 81       	ldd	r25, Z+3	; 0x03
    2048:	0c 5f       	subi	r16, 0xFC	; 252
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
    204c:	06 c0       	rjmp	.+12     	; 0x205a <vfprintf+0x29c>
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	0e 5f       	subi	r16, 0xFE	; 254
    2058:	1f 4f       	sbci	r17, 0xFF	; 255
    205a:	a4 01       	movw	r20, r8
    205c:	ec d0       	rcall	.+472    	; 0x2236 <__ultoa_invert>
    205e:	a8 2e       	mov	r10, r24
    2060:	a8 18       	sub	r10, r8
    2062:	fb 2d       	mov	r31, r11
    2064:	ff 77       	andi	r31, 0x7F	; 127
    2066:	7f 2e       	mov	r7, r31
    2068:	76 fe       	sbrs	r7, 6
    206a:	0b c0       	rjmp	.+22     	; 0x2082 <vfprintf+0x2c4>
    206c:	37 2d       	mov	r19, r7
    206e:	3e 7f       	andi	r19, 0xFE	; 254
    2070:	a5 14       	cp	r10, r5
    2072:	50 f4       	brcc	.+20     	; 0x2088 <vfprintf+0x2ca>
    2074:	74 fe       	sbrs	r7, 4
    2076:	0a c0       	rjmp	.+20     	; 0x208c <vfprintf+0x2ce>
    2078:	72 fc       	sbrc	r7, 2
    207a:	08 c0       	rjmp	.+16     	; 0x208c <vfprintf+0x2ce>
    207c:	37 2d       	mov	r19, r7
    207e:	3e 7e       	andi	r19, 0xEE	; 238
    2080:	05 c0       	rjmp	.+10     	; 0x208c <vfprintf+0x2ce>
    2082:	ba 2c       	mov	r11, r10
    2084:	37 2d       	mov	r19, r7
    2086:	03 c0       	rjmp	.+6      	; 0x208e <vfprintf+0x2d0>
    2088:	ba 2c       	mov	r11, r10
    208a:	01 c0       	rjmp	.+2      	; 0x208e <vfprintf+0x2d0>
    208c:	b5 2c       	mov	r11, r5
    208e:	34 ff       	sbrs	r19, 4
    2090:	0d c0       	rjmp	.+26     	; 0x20ac <vfprintf+0x2ee>
    2092:	fe 01       	movw	r30, r28
    2094:	ea 0d       	add	r30, r10
    2096:	f1 1d       	adc	r31, r1
    2098:	80 81       	ld	r24, Z
    209a:	80 33       	cpi	r24, 0x30	; 48
    209c:	11 f4       	brne	.+4      	; 0x20a2 <vfprintf+0x2e4>
    209e:	39 7e       	andi	r19, 0xE9	; 233
    20a0:	09 c0       	rjmp	.+18     	; 0x20b4 <vfprintf+0x2f6>
    20a2:	32 ff       	sbrs	r19, 2
    20a4:	06 c0       	rjmp	.+12     	; 0x20b2 <vfprintf+0x2f4>
    20a6:	b3 94       	inc	r11
    20a8:	b3 94       	inc	r11
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <vfprintf+0x2f6>
    20ac:	83 2f       	mov	r24, r19
    20ae:	86 78       	andi	r24, 0x86	; 134
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <vfprintf+0x2f6>
    20b2:	b3 94       	inc	r11
    20b4:	33 fd       	sbrc	r19, 3
    20b6:	12 c0       	rjmp	.+36     	; 0x20dc <vfprintf+0x31e>
    20b8:	30 ff       	sbrs	r19, 0
    20ba:	06 c0       	rjmp	.+12     	; 0x20c8 <vfprintf+0x30a>
    20bc:	5a 2c       	mov	r5, r10
    20be:	b3 14       	cp	r11, r3
    20c0:	18 f4       	brcc	.+6      	; 0x20c8 <vfprintf+0x30a>
    20c2:	53 0c       	add	r5, r3
    20c4:	5b 18       	sub	r5, r11
    20c6:	b3 2c       	mov	r11, r3
    20c8:	b3 14       	cp	r11, r3
    20ca:	60 f4       	brcc	.+24     	; 0x20e4 <vfprintf+0x326>
    20cc:	b7 01       	movw	r22, r14
    20ce:	80 e2       	ldi	r24, 0x20	; 32
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	3c 87       	std	Y+12, r19	; 0x0c
    20d4:	78 d0       	rcall	.+240    	; 0x21c6 <fputc>
    20d6:	b3 94       	inc	r11
    20d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    20da:	f6 cf       	rjmp	.-20     	; 0x20c8 <vfprintf+0x30a>
    20dc:	b3 14       	cp	r11, r3
    20de:	10 f4       	brcc	.+4      	; 0x20e4 <vfprintf+0x326>
    20e0:	3b 18       	sub	r3, r11
    20e2:	01 c0       	rjmp	.+2      	; 0x20e6 <vfprintf+0x328>
    20e4:	31 2c       	mov	r3, r1
    20e6:	34 ff       	sbrs	r19, 4
    20e8:	11 c0       	rjmp	.+34     	; 0x210c <vfprintf+0x34e>
    20ea:	b7 01       	movw	r22, r14
    20ec:	80 e3       	ldi	r24, 0x30	; 48
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	3c 87       	std	Y+12, r19	; 0x0c
    20f2:	69 d0       	rcall	.+210    	; 0x21c6 <fputc>
    20f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    20f6:	32 ff       	sbrs	r19, 2
    20f8:	16 c0       	rjmp	.+44     	; 0x2126 <vfprintf+0x368>
    20fa:	31 fd       	sbrc	r19, 1
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <vfprintf+0x346>
    20fe:	88 e7       	ldi	r24, 0x78	; 120
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <vfprintf+0x34a>
    2104:	88 e5       	ldi	r24, 0x58	; 88
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	b7 01       	movw	r22, r14
    210a:	0c c0       	rjmp	.+24     	; 0x2124 <vfprintf+0x366>
    210c:	83 2f       	mov	r24, r19
    210e:	86 78       	andi	r24, 0x86	; 134
    2110:	51 f0       	breq	.+20     	; 0x2126 <vfprintf+0x368>
    2112:	31 ff       	sbrs	r19, 1
    2114:	02 c0       	rjmp	.+4      	; 0x211a <vfprintf+0x35c>
    2116:	8b e2       	ldi	r24, 0x2B	; 43
    2118:	01 c0       	rjmp	.+2      	; 0x211c <vfprintf+0x35e>
    211a:	80 e2       	ldi	r24, 0x20	; 32
    211c:	37 fd       	sbrc	r19, 7
    211e:	8d e2       	ldi	r24, 0x2D	; 45
    2120:	b7 01       	movw	r22, r14
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	50 d0       	rcall	.+160    	; 0x21c6 <fputc>
    2126:	a5 14       	cp	r10, r5
    2128:	30 f4       	brcc	.+12     	; 0x2136 <vfprintf+0x378>
    212a:	b7 01       	movw	r22, r14
    212c:	80 e3       	ldi	r24, 0x30	; 48
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	4a d0       	rcall	.+148    	; 0x21c6 <fputc>
    2132:	5a 94       	dec	r5
    2134:	f8 cf       	rjmp	.-16     	; 0x2126 <vfprintf+0x368>
    2136:	aa 94       	dec	r10
    2138:	f4 01       	movw	r30, r8
    213a:	ea 0d       	add	r30, r10
    213c:	f1 1d       	adc	r31, r1
    213e:	80 81       	ld	r24, Z
    2140:	b7 01       	movw	r22, r14
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	40 d0       	rcall	.+128    	; 0x21c6 <fputc>
    2146:	a1 10       	cpse	r10, r1
    2148:	f6 cf       	rjmp	.-20     	; 0x2136 <vfprintf+0x378>
    214a:	33 20       	and	r3, r3
    214c:	09 f4       	brne	.+2      	; 0x2150 <vfprintf+0x392>
    214e:	5d ce       	rjmp	.-838    	; 0x1e0a <vfprintf+0x4c>
    2150:	b7 01       	movw	r22, r14
    2152:	80 e2       	ldi	r24, 0x20	; 32
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	37 d0       	rcall	.+110    	; 0x21c6 <fputc>
    2158:	3a 94       	dec	r3
    215a:	f7 cf       	rjmp	.-18     	; 0x214a <vfprintf+0x38c>
    215c:	f7 01       	movw	r30, r14
    215e:	86 81       	ldd	r24, Z+6	; 0x06
    2160:	97 81       	ldd	r25, Z+7	; 0x07
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <vfprintf+0x3aa>
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	9f ef       	ldi	r25, 0xFF	; 255
    2168:	2c 96       	adiw	r28, 0x0c	; 12
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	1f 91       	pop	r17
    217a:	0f 91       	pop	r16
    217c:	ff 90       	pop	r15
    217e:	ef 90       	pop	r14
    2180:	df 90       	pop	r13
    2182:	cf 90       	pop	r12
    2184:	bf 90       	pop	r11
    2186:	af 90       	pop	r10
    2188:	9f 90       	pop	r9
    218a:	8f 90       	pop	r8
    218c:	7f 90       	pop	r7
    218e:	6f 90       	pop	r6
    2190:	5f 90       	pop	r5
    2192:	4f 90       	pop	r4
    2194:	3f 90       	pop	r3
    2196:	2f 90       	pop	r2
    2198:	08 95       	ret

0000219a <strnlen_P>:
    219a:	fc 01       	movw	r30, r24
    219c:	05 90       	lpm	r0, Z+
    219e:	61 50       	subi	r22, 0x01	; 1
    21a0:	70 40       	sbci	r23, 0x00	; 0
    21a2:	01 10       	cpse	r0, r1
    21a4:	d8 f7       	brcc	.-10     	; 0x219c <strnlen_P+0x2>
    21a6:	80 95       	com	r24
    21a8:	90 95       	com	r25
    21aa:	8e 0f       	add	r24, r30
    21ac:	9f 1f       	adc	r25, r31
    21ae:	08 95       	ret

000021b0 <strnlen>:
    21b0:	fc 01       	movw	r30, r24
    21b2:	61 50       	subi	r22, 0x01	; 1
    21b4:	70 40       	sbci	r23, 0x00	; 0
    21b6:	01 90       	ld	r0, Z+
    21b8:	01 10       	cpse	r0, r1
    21ba:	d8 f7       	brcc	.-10     	; 0x21b2 <strnlen+0x2>
    21bc:	80 95       	com	r24
    21be:	90 95       	com	r25
    21c0:	8e 0f       	add	r24, r30
    21c2:	9f 1f       	adc	r25, r31
    21c4:	08 95       	ret

000021c6 <fputc>:
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	fb 01       	movw	r30, r22
    21d0:	23 81       	ldd	r18, Z+3	; 0x03
    21d2:	21 fd       	sbrc	r18, 1
    21d4:	03 c0       	rjmp	.+6      	; 0x21dc <fputc+0x16>
    21d6:	8f ef       	ldi	r24, 0xFF	; 255
    21d8:	9f ef       	ldi	r25, 0xFF	; 255
    21da:	28 c0       	rjmp	.+80     	; 0x222c <fputc+0x66>
    21dc:	22 ff       	sbrs	r18, 2
    21de:	16 c0       	rjmp	.+44     	; 0x220c <fputc+0x46>
    21e0:	46 81       	ldd	r20, Z+6	; 0x06
    21e2:	57 81       	ldd	r21, Z+7	; 0x07
    21e4:	24 81       	ldd	r18, Z+4	; 0x04
    21e6:	35 81       	ldd	r19, Z+5	; 0x05
    21e8:	42 17       	cp	r20, r18
    21ea:	53 07       	cpc	r21, r19
    21ec:	44 f4       	brge	.+16     	; 0x21fe <fputc+0x38>
    21ee:	a0 81       	ld	r26, Z
    21f0:	b1 81       	ldd	r27, Z+1	; 0x01
    21f2:	9d 01       	movw	r18, r26
    21f4:	2f 5f       	subi	r18, 0xFF	; 255
    21f6:	3f 4f       	sbci	r19, 0xFF	; 255
    21f8:	31 83       	std	Z+1, r19	; 0x01
    21fa:	20 83       	st	Z, r18
    21fc:	8c 93       	st	X, r24
    21fe:	26 81       	ldd	r18, Z+6	; 0x06
    2200:	37 81       	ldd	r19, Z+7	; 0x07
    2202:	2f 5f       	subi	r18, 0xFF	; 255
    2204:	3f 4f       	sbci	r19, 0xFF	; 255
    2206:	37 83       	std	Z+7, r19	; 0x07
    2208:	26 83       	std	Z+6, r18	; 0x06
    220a:	10 c0       	rjmp	.+32     	; 0x222c <fputc+0x66>
    220c:	eb 01       	movw	r28, r22
    220e:	09 2f       	mov	r16, r25
    2210:	18 2f       	mov	r17, r24
    2212:	00 84       	ldd	r0, Z+8	; 0x08
    2214:	f1 85       	ldd	r31, Z+9	; 0x09
    2216:	e0 2d       	mov	r30, r0
    2218:	09 95       	icall
    221a:	89 2b       	or	r24, r25
    221c:	e1 f6       	brne	.-72     	; 0x21d6 <fputc+0x10>
    221e:	8e 81       	ldd	r24, Y+6	; 0x06
    2220:	9f 81       	ldd	r25, Y+7	; 0x07
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	9f 83       	std	Y+7, r25	; 0x07
    2226:	8e 83       	std	Y+6, r24	; 0x06
    2228:	81 2f       	mov	r24, r17
    222a:	90 2f       	mov	r25, r16
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	08 95       	ret

00002236 <__ultoa_invert>:
    2236:	fa 01       	movw	r30, r20
    2238:	aa 27       	eor	r26, r26
    223a:	28 30       	cpi	r18, 0x08	; 8
    223c:	51 f1       	breq	.+84     	; 0x2292 <__ultoa_invert+0x5c>
    223e:	20 31       	cpi	r18, 0x10	; 16
    2240:	81 f1       	breq	.+96     	; 0x22a2 <__ultoa_invert+0x6c>
    2242:	e8 94       	clt
    2244:	6f 93       	push	r22
    2246:	6e 7f       	andi	r22, 0xFE	; 254
    2248:	6e 5f       	subi	r22, 0xFE	; 254
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	8f 4f       	sbci	r24, 0xFF	; 255
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	af 4f       	sbci	r26, 0xFF	; 255
    2252:	b1 e0       	ldi	r27, 0x01	; 1
    2254:	3e d0       	rcall	.+124    	; 0x22d2 <__ultoa_invert+0x9c>
    2256:	b4 e0       	ldi	r27, 0x04	; 4
    2258:	3c d0       	rcall	.+120    	; 0x22d2 <__ultoa_invert+0x9c>
    225a:	67 0f       	add	r22, r23
    225c:	78 1f       	adc	r23, r24
    225e:	89 1f       	adc	r24, r25
    2260:	9a 1f       	adc	r25, r26
    2262:	a1 1d       	adc	r26, r1
    2264:	68 0f       	add	r22, r24
    2266:	79 1f       	adc	r23, r25
    2268:	8a 1f       	adc	r24, r26
    226a:	91 1d       	adc	r25, r1
    226c:	a1 1d       	adc	r26, r1
    226e:	6a 0f       	add	r22, r26
    2270:	71 1d       	adc	r23, r1
    2272:	81 1d       	adc	r24, r1
    2274:	91 1d       	adc	r25, r1
    2276:	a1 1d       	adc	r26, r1
    2278:	20 d0       	rcall	.+64     	; 0x22ba <__ultoa_invert+0x84>
    227a:	09 f4       	brne	.+2      	; 0x227e <__ultoa_invert+0x48>
    227c:	68 94       	set
    227e:	3f 91       	pop	r19
    2280:	2a e0       	ldi	r18, 0x0A	; 10
    2282:	26 9f       	mul	r18, r22
    2284:	11 24       	eor	r1, r1
    2286:	30 19       	sub	r19, r0
    2288:	30 5d       	subi	r19, 0xD0	; 208
    228a:	31 93       	st	Z+, r19
    228c:	de f6       	brtc	.-74     	; 0x2244 <__ultoa_invert+0xe>
    228e:	cf 01       	movw	r24, r30
    2290:	08 95       	ret
    2292:	46 2f       	mov	r20, r22
    2294:	47 70       	andi	r20, 0x07	; 7
    2296:	40 5d       	subi	r20, 0xD0	; 208
    2298:	41 93       	st	Z+, r20
    229a:	b3 e0       	ldi	r27, 0x03	; 3
    229c:	0f d0       	rcall	.+30     	; 0x22bc <__ultoa_invert+0x86>
    229e:	c9 f7       	brne	.-14     	; 0x2292 <__ultoa_invert+0x5c>
    22a0:	f6 cf       	rjmp	.-20     	; 0x228e <__ultoa_invert+0x58>
    22a2:	46 2f       	mov	r20, r22
    22a4:	4f 70       	andi	r20, 0x0F	; 15
    22a6:	40 5d       	subi	r20, 0xD0	; 208
    22a8:	4a 33       	cpi	r20, 0x3A	; 58
    22aa:	18 f0       	brcs	.+6      	; 0x22b2 <__ultoa_invert+0x7c>
    22ac:	49 5d       	subi	r20, 0xD9	; 217
    22ae:	31 fd       	sbrc	r19, 1
    22b0:	40 52       	subi	r20, 0x20	; 32
    22b2:	41 93       	st	Z+, r20
    22b4:	02 d0       	rcall	.+4      	; 0x22ba <__ultoa_invert+0x84>
    22b6:	a9 f7       	brne	.-22     	; 0x22a2 <__ultoa_invert+0x6c>
    22b8:	ea cf       	rjmp	.-44     	; 0x228e <__ultoa_invert+0x58>
    22ba:	b4 e0       	ldi	r27, 0x04	; 4
    22bc:	a6 95       	lsr	r26
    22be:	97 95       	ror	r25
    22c0:	87 95       	ror	r24
    22c2:	77 95       	ror	r23
    22c4:	67 95       	ror	r22
    22c6:	ba 95       	dec	r27
    22c8:	c9 f7       	brne	.-14     	; 0x22bc <__ultoa_invert+0x86>
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	61 05       	cpc	r22, r1
    22ce:	71 05       	cpc	r23, r1
    22d0:	08 95       	ret
    22d2:	9b 01       	movw	r18, r22
    22d4:	ac 01       	movw	r20, r24
    22d6:	0a 2e       	mov	r0, r26
    22d8:	06 94       	lsr	r0
    22da:	57 95       	ror	r21
    22dc:	47 95       	ror	r20
    22de:	37 95       	ror	r19
    22e0:	27 95       	ror	r18
    22e2:	ba 95       	dec	r27
    22e4:	c9 f7       	brne	.-14     	; 0x22d8 <__ultoa_invert+0xa2>
    22e6:	62 0f       	add	r22, r18
    22e8:	73 1f       	adc	r23, r19
    22ea:	84 1f       	adc	r24, r20
    22ec:	95 1f       	adc	r25, r21
    22ee:	a0 1d       	adc	r26, r0
    22f0:	08 95       	ret

000022f2 <eeprom_read_word>:
    22f2:	a8 e1       	ldi	r26, 0x18	; 24
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	42 e0       	ldi	r20, 0x02	; 2
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <eeprom_read_blraw>

000022fc <eeprom_read_block>:
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22

00002300 <eeprom_read_blraw>:
    2300:	fc 01       	movw	r30, r24
    2302:	f9 99       	sbic	0x1f, 1	; 31
    2304:	fe cf       	rjmp	.-4      	; 0x2302 <eeprom_read_blraw+0x2>
    2306:	06 c0       	rjmp	.+12     	; 0x2314 <eeprom_read_blraw+0x14>
    2308:	f2 bd       	out	0x22, r31	; 34
    230a:	e1 bd       	out	0x21, r30	; 33
    230c:	f8 9a       	sbi	0x1f, 0	; 31
    230e:	31 96       	adiw	r30, 0x01	; 1
    2310:	00 b4       	in	r0, 0x20	; 32
    2312:	0d 92       	st	X+, r0
    2314:	41 50       	subi	r20, 0x01	; 1
    2316:	50 40       	sbci	r21, 0x00	; 0
    2318:	b8 f7       	brcc	.-18     	; 0x2308 <eeprom_read_blraw+0x8>
    231a:	08 95       	ret

0000231c <_exit>:
    231c:	f8 94       	cli

0000231e <__stop_program>:
    231e:	ff cf       	rjmp	.-2      	; 0x231e <__stop_program>

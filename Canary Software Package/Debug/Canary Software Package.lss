
Canary Software Package.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  000032ae  00003342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042b  00800222  00800222  00003464  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000034c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00003500  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049e1  00000000  00000000  00003760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001666  00000000  00000000  00008141  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b0e  00000000  00000000  000097a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000748  00000000  00000000  0000b2b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6a  00000000  00000000  0000ba00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cde  00000000  00000000  0000c66a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000e348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	9d c0       	rjmp	.+314    	; 0x16c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__vector_13>
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__vector_16>
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__vector_21>
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	83 c0       	rjmp	.+262    	; 0x16c <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__vector_28>
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a5 13       	cpse	r26, r21
      8e:	f7 13       	cpse	r31, r23
      90:	f7 13       	cpse	r31, r23
      92:	f7 13       	cpse	r31, r23
      94:	f7 13       	cpse	r31, r23
      96:	f7 13       	cpse	r31, r23
      98:	f7 13       	cpse	r31, r23
      9a:	f7 13       	cpse	r31, r23
      9c:	a5 13       	cpse	r26, r21
      9e:	f7 13       	cpse	r31, r23
      a0:	f7 13       	cpse	r31, r23
      a2:	f7 13       	cpse	r31, r23
      a4:	f7 13       	cpse	r31, r23
      a6:	f7 13       	cpse	r31, r23
      a8:	f7 13       	cpse	r31, r23
      aa:	f7 13       	cpse	r31, r23
      ac:	a7 13       	cpse	r26, r23
      ae:	f7 13       	cpse	r31, r23
      b0:	f7 13       	cpse	r31, r23
      b2:	f7 13       	cpse	r31, r23
      b4:	f7 13       	cpse	r31, r23
      b6:	f7 13       	cpse	r31, r23
      b8:	f7 13       	cpse	r31, r23
      ba:	f7 13       	cpse	r31, r23
      bc:	f7 13       	cpse	r31, r23
      be:	f7 13       	cpse	r31, r23
      c0:	f7 13       	cpse	r31, r23
      c2:	f7 13       	cpse	r31, r23
      c4:	f7 13       	cpse	r31, r23
      c6:	f7 13       	cpse	r31, r23
      c8:	f7 13       	cpse	r31, r23
      ca:	f7 13       	cpse	r31, r23
      cc:	a7 13       	cpse	r26, r23
      ce:	f7 13       	cpse	r31, r23
      d0:	f7 13       	cpse	r31, r23
      d2:	f7 13       	cpse	r31, r23
      d4:	f7 13       	cpse	r31, r23
      d6:	f7 13       	cpse	r31, r23
      d8:	f7 13       	cpse	r31, r23
      da:	f7 13       	cpse	r31, r23
      dc:	f7 13       	cpse	r31, r23
      de:	f7 13       	cpse	r31, r23
      e0:	f7 13       	cpse	r31, r23
      e2:	f7 13       	cpse	r31, r23
      e4:	f7 13       	cpse	r31, r23
      e6:	f7 13       	cpse	r31, r23
      e8:	f7 13       	cpse	r31, r23
      ea:	f7 13       	cpse	r31, r23
      ec:	f3 13       	cpse	r31, r19
      ee:	f7 13       	cpse	r31, r23
      f0:	f7 13       	cpse	r31, r23
      f2:	f7 13       	cpse	r31, r23
      f4:	f7 13       	cpse	r31, r23
      f6:	f7 13       	cpse	r31, r23
      f8:	f7 13       	cpse	r31, r23
      fa:	f7 13       	cpse	r31, r23
      fc:	d0 13       	cpse	r29, r16
      fe:	f7 13       	cpse	r31, r23
     100:	f7 13       	cpse	r31, r23
     102:	f7 13       	cpse	r31, r23
     104:	f7 13       	cpse	r31, r23
     106:	f7 13       	cpse	r31, r23
     108:	f7 13       	cpse	r31, r23
     10a:	f7 13       	cpse	r31, r23
     10c:	f7 13       	cpse	r31, r23
     10e:	f7 13       	cpse	r31, r23
     110:	f7 13       	cpse	r31, r23
     112:	f7 13       	cpse	r31, r23
     114:	f7 13       	cpse	r31, r23
     116:	f7 13       	cpse	r31, r23
     118:	f7 13       	cpse	r31, r23
     11a:	f7 13       	cpse	r31, r23
     11c:	c4 13       	cpse	r28, r20
     11e:	f7 13       	cpse	r31, r23
     120:	f7 13       	cpse	r31, r23
     122:	f7 13       	cpse	r31, r23
     124:	f7 13       	cpse	r31, r23
     126:	f7 13       	cpse	r31, r23
     128:	f7 13       	cpse	r31, r23
     12a:	f7 13       	cpse	r31, r23
     12c:	e2 13       	cpse	r30, r18

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e4       	ldi	r29, 0x40	; 64
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ee ea       	ldi	r30, 0xAE	; 174
     142:	f2 e3       	ldi	r31, 0x32	; 50
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a2 32       	cpi	r26, 0x22	; 34
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	26 e0       	ldi	r18, 0x06	; 6
     156:	a2 e2       	ldi	r26, 0x22	; 34
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	ad 34       	cpi	r26, 0x4D	; 77
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 88 11 	call	0x2310	; 0x2310 <main>
     168:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 05 13 	jmp	0x260a	; 0x260a <__vector_default>

00000170 <ADC_SetMux>:
********************************************************************************/
void ADC_SetMux(uint8_t source) // 
{
	/* A short routine to clear the ADC input select mux bits then set
	those same bits to the source defined in the input.  */
	ADMUX &= 0b11100000; // Clear the select bits then
     170:	ec e7       	ldi	r30, 0x7C	; 124
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	90 81       	ld	r25, Z
     176:	90 7e       	andi	r25, 0xE0	; 224
     178:	90 83       	st	Z, r25
	ADMUX |= source; // Set the ADC input source
     17a:	90 81       	ld	r25, Z
     17c:	89 2b       	or	r24, r25
     17e:	80 83       	st	Z, r24
     180:	08 95       	ret

00000182 <ADC_init>:
}

void ADC_init(void)
{
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
	/* This routine is design to set up the ADC hardware on the ATMega324PA for our use. */
	static volatile int16_t ADC_result;
	
	// Select the external AVCC pin as the ADC reference voltage by setting the REFS[1:0] pin in the ADC MUX register to 0b01
	SetBit(ADMUX, REFS0);
     186:	ec e7       	ldi	r30, 0x7C	; 124
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	80 64       	ori	r24, 0x40	; 64
     18e:	80 83       	st	Z, r24
	
	// Set clock prescaler to 128 to provide a 156kHz ADC clock.  ADPS[2:0] = 0b111
	SetBit(ADCSRA, ADPS0);
     190:	ca e7       	ldi	r28, 0x7A	; 122
     192:	d0 e0       	ldi	r29, 0x00	; 0
     194:	88 81       	ld	r24, Y
     196:	81 60       	ori	r24, 0x01	; 1
     198:	88 83       	st	Y, r24
	SetBit(ADCSRA, ADPS1);
     19a:	88 81       	ld	r24, Y
     19c:	82 60       	ori	r24, 0x02	; 2
     19e:	88 83       	st	Y, r24
	SetBit(ADCSRA, ADPS2);
     1a0:	88 81       	ld	r24, Y
     1a2:	84 60       	ori	r24, 0x04	; 4
     1a4:	88 83       	st	Y, r24
	
	// Clears power reduction register to ensure we get power to the ADC hardware
	ClearBit(PRR0, PRADC);
     1a6:	a4 e6       	ldi	r26, 0x64	; 100
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	8c 91       	ld	r24, X
     1ac:	8e 7f       	andi	r24, 0xFE	; 254
     1ae:	8c 93       	st	X, r24
	
	// Clears the Left Adjust Result bit. This means that output will be right adjusted to get the max resolution
	ClearBit(ADMUX, ADLAR);
     1b0:	80 81       	ld	r24, Z
     1b2:	8f 7d       	andi	r24, 0xDF	; 223
     1b4:	80 83       	st	Z, r24
	
	// Sets Digital Input Disable Register. Writing a one to bits in the DIDR0 to disable the digital input circuitry
	DIDR0 = 0b00111111;
     1b6:	8f e3       	ldi	r24, 0x3F	; 63
     1b8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
     1bc:	88 81       	ld	r24, Y
     1be:	80 68       	ori	r24, 0x80	; 128
     1c0:	88 83       	st	Y, r24
	// Enable the ADC interrupt
	//*************TURNED OFF FOR LAB TESTING********************************
	// SetBit(ADCSRA, ADIE);  // May have to turn this off for debug
	
	// Set Register ADCSRB to free running mode, single input mode (ADTS[2:0] = 0x00);
	ADCSRB = 0x00;
     1c2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	//  Select test source = ground (GND;  ADMUX.MUX = 0b11111). Result should be 0V.
	ADC_SetMux(0b00011111); 
     1c6:	8f e1       	ldi	r24, 0x1F	; 31
     1c8:	d3 df       	rcall	.-90     	; 0x170 <ADC_SetMux>
	
	// Discard the first conversion and use the second one
	// Sets ADC Start Conversion bit
	SetBit(ADCSRA, ADSC);
     1ca:	88 81       	ld	r24, Y
     1cc:	80 64       	ori	r24, 0x40	; 64
     1ce:	88 83       	st	Y, r24
	while (BitIsClear(ADCSRA, ADIF))
     1d0:	ea e7       	ldi	r30, 0x7A	; 122
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	84 ff       	sbrs	r24, 4
     1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <ADC_init+0x52>
	{
		// Wait for conversion to be complete
	}
	
	//   Restart conversion. We'll use this result.
	SetBit(ADCSRA, ADSC);
     1da:	ea e7       	ldi	r30, 0x7A	; 122
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 64       	ori	r24, 0x40	; 64
     1e2:	80 83       	st	Z, r24
	while (BitIsClear(ADCSRA, ADIF))
     1e4:	80 81       	ld	r24, Z
     1e6:	84 ff       	sbrs	r24, 4
     1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <ADC_init+0x62>
	{
		// Wait for conversion to be complete
	}
	
	//  Read result and report error if not real close to zero
	ADC_result = ADCL;
     1ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <__data_end+0x1>
     1f4:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
	ADC_result = ADC_result + (ADCH<<8);
     1f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1fc:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <__data_end>
     200:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <__data_end+0x1>
     204:	89 2f       	mov	r24, r25
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	98 2f       	mov	r25, r24
     20a:	88 27       	eor	r24, r24
     20c:	82 0f       	add	r24, r18
     20e:	93 1f       	adc	r25, r19
     210:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <__data_end+0x1>
     214:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
	if (abs(ADC_result) >4 ) //   We want to be within a few LSBs of zero.
     218:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
     21c:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <__data_end+0x1>
     220:	99 23       	and	r25, r25
     222:	1c f4       	brge	.+6      	; 0x22a <ADC_init+0xa8>
     224:	91 95       	neg	r25
     226:	81 95       	neg	r24
     228:	91 09       	sbc	r25, r1
     22a:	05 97       	sbiw	r24, 0x05	; 5
     22c:	2c f0       	brlt	.+10     	; 0x238 <ADC_init+0xb6>
	{
		SetBit(gas_sensor_initialization_errors, ADC_gnd_test_error);
     22e:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <gas_sensor_initialization_errors>
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <gas_sensor_initialization_errors>
	}
	
	// Select test source = bandgap (BG;  ADMUX.MUX = 0b11110). Result should be 1.1V
	ADC_SetMux(0b00011110); 
     238:	8e e1       	ldi	r24, 0x1E	; 30
     23a:	9a df       	rcall	.-204    	; 0x170 <ADC_SetMux>
	SetBit(ADCSRA, ADSC); // Start conversion process
     23c:	ea e7       	ldi	r30, 0x7A	; 122
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 64       	ori	r24, 0x40	; 64
     244:	80 83       	st	Z, r24
	while (BitIsClear(ADCSRA, ADIF))
     246:	80 81       	ld	r24, Z
     248:	84 ff       	sbrs	r24, 4
     24a:	fd cf       	rjmp	.-6      	; 0x246 <ADC_init+0xc4>
	{
		// Wait for conversion to be complete
	}
	
	// Read result and report error if not 1.1
	ADC_result = ADCL;
     24c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <__data_end+0x1>
     256:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
	ADC_result = ADC_result + (ADCH<<8);
     25a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     25e:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <__data_end>
     262:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <__data_end+0x1>
     266:	89 2f       	mov	r24, r25
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	98 2f       	mov	r25, r24
     26c:	88 27       	eor	r24, r24
     26e:	82 0f       	add	r24, r18
     270:	93 1f       	adc	r25, r19
     272:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <__data_end+0x1>
     276:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
	ADC_result -= 225;  // 225 is the expected value: 1.1V*1023/5v=225
     27a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
     27e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <__data_end+0x1>
     282:	81 5e       	subi	r24, 0xE1	; 225
     284:	91 09       	sbc	r25, r1
     286:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <__data_end+0x1>
     28a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
	if (abs(ADC_result) >= 5)  // We want to be within 4 of target voltage reading.
     28e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
     292:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <__data_end+0x1>
     296:	99 23       	and	r25, r25
     298:	1c f4       	brge	.+6      	; 0x2a0 <ADC_init+0x11e>
     29a:	91 95       	neg	r25
     29c:	81 95       	neg	r24
     29e:	91 09       	sbc	r25, r1
     2a0:	05 97       	sbiw	r24, 0x05	; 5
     2a2:	2c f0       	brlt	.+10     	; 0x2ae <ADC_init+0x12c>
	{
		SetBit(gas_sensor_initialization_errors, ADC_BG_test_error);
     2a4:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <gas_sensor_initialization_errors>
     2a8:	82 60       	ori	r24, 0x02	; 2
     2aa:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <gas_sensor_initialization_errors>
	}
	
	// Clear the analog to digital enable bit until we need it again
	ClearBit(ADCSRA, ADEN);
     2ae:	ea e7       	ldi	r30, 0x7A	; 122
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8f 77       	andi	r24, 0x7F	; 127
     2b6:	80 83       	st	Z, r24
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <BME_read_correction_coefficients>:
********************************************************************************/

/********************************************************************************
						Functions
********************************************************************************/
void BME_read_correction_coefficients(void) {
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
	// 	BMEmessageBuf[1] = 0x88; // The register we want to start reading from
	/*	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);*/
	// Let initialization transaction complete...
	/*	while ( TWI_Transceiver_Busy() );*/
	static volatile uint8_t BMEbusy = 1;
	while (BMEbusy) {
     2c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2cc:	88 23       	and	r24, r24
     2ce:	59 f1       	breq	.+86     	; 0x326 <BME_read_correction_coefficients+0x68>
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     2d0:	cb e5       	ldi	r28, 0x5B	; 91
     2d2:	d3 e0       	ldi	r29, 0x03	; 3
     2d4:	0f 2e       	mov	r0, r31
     2d6:	fc ee       	ldi	r31, 0xEC	; 236
     2d8:	ff 2e       	mov	r15, r31
     2da:	f0 2d       	mov	r31, r0
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     2dc:	03 ef       	ldi	r16, 0xF3	; 243
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1).
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     2de:	1d ee       	ldi	r17, 0xED	; 237
	/*	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);*/
	// Let initialization transaction complete...
	/*	while ( TWI_Transceiver_Busy() );*/
	static volatile uint8_t BMEbusy = 1;
	while (BMEbusy) {
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     2e0:	f8 82       	st	Y, r15
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     2e2:	09 83       	std	Y+1, r16	; 0x01
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     2e4:	62 e0       	ldi	r22, 0x02	; 2
     2e6:	ce 01       	movw	r24, r28
     2e8:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     2ec:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     2f0:	81 11       	cpse	r24, r1
     2f2:	fc cf       	rjmp	.-8      	; 0x2ec <BME_read_correction_coefficients+0x2e>
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1).
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     2f4:	18 83       	st	Y, r17
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 26); //We want one bytes back, so use 2 in the function call.
     2f6:	6a e1       	ldi	r22, 0x1A	; 26
     2f8:	ce 01       	movw	r24, r28
     2fa:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     2fe:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     302:	81 11       	cpse	r24, r1
     304:	fc cf       	rjmp	.-8      	; 0x2fe <BME_read_correction_coefficients+0x40>
		// Copy the data we want...
		TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 26);
     306:	6a e1       	ldi	r22, 0x1A	; 26
     308:	ce 01       	movw	r24, r28
     30a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_Get_Data_From_Transceiver>
     30e:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <TWI_XFER_STATUS>
		// CHeck to see if things are still busy
		BMEbusy = ((0b00001000 & BMEmessageBuf[1])>>3);
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	83 fb       	bst	r24, 3
     316:	88 27       	eor	r24, r24
     318:	80 f9       	bld	r24, 0
     31a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	// 	BMEmessageBuf[1] = 0x88; // The register we want to start reading from
	/*	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);*/
	// Let initialization transaction complete...
	/*	while ( TWI_Transceiver_Busy() );*/
	static volatile uint8_t BMEbusy = 1;
	while (BMEbusy) {
     31e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     322:	81 11       	cpse	r24, r1
     324:	dd cf       	rjmp	.-70     	; 0x2e0 <BME_read_correction_coefficients+0x22>
	// 	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 26);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	// Device is completed the measurement cycle, now get the temperature data...
	// We want to start reading the data from register 0xF7 and read to register 0xFE - 8 bytes total
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     326:	eb e5       	ldi	r30, 0x5B	; 91
     328:	f3 e0       	ldi	r31, 0x03	; 3
     32a:	8c ee       	ldi	r24, 0xEC	; 236
     32c:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0x88; // The register we want to start reading from
     32e:	88 e8       	ldi	r24, 0x88	; 136
     330:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     332:	62 e0       	ldi	r22, 0x02	; 2
     334:	cf 01       	movw	r24, r30
     336:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     33a:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     33e:	81 11       	cpse	r24, r1
     340:	fc cf       	rjmp	.-8      	; 0x33a <BME_read_correction_coefficients+0x7c>
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read eight bytes, we pass "9".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     342:	8d ee       	ldi	r24, 0xED	; 237
     344:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 27); //We want eight bytes back, so use 9 in the function call.
     348:	6b e1       	ldi	r22, 0x1B	; 27
     34a:	8b e5       	ldi	r24, 0x5B	; 91
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     352:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     356:	81 11       	cpse	r24, r1
     358:	fc cf       	rjmp	.-8      	; 0x352 <BME_read_correction_coefficients+0x94>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 27);
     35a:	6b e1       	ldi	r22, 0x1B	; 27
     35c:	8b e5       	ldi	r24, 0x5B	; 91
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_Get_Data_From_Transceiver>
     364:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <TWI_XFER_STATUS>
     368:	cc e5       	ldi	r28, 0x5C	; 92
     36a:	d3 e0       	ldi	r29, 0x03	; 3
     36c:	07 e8       	ldi	r16, 0x87	; 135
     36e:	13 e0       	ldi	r17, 0x03	; 3
     370:	27 e7       	ldi	r18, 0x77	; 119
     372:	33 e0       	ldi	r19, 0x03	; 3
     374:	d8 01       	movw	r26, r16
     376:	fe 01       	movw	r30, r28
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<27;i++) 	{
		RawBMEdata[i] = BMEmessageBuf[i+1];
     378:	81 91       	ld	r24, Z+
     37a:	8d 93       	st	X+, r24
	while ( TWI_Transceiver_Busy() );
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 27);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<27;i++) 	{
     37c:	e2 17       	cp	r30, r18
     37e:	f3 07       	cpc	r31, r19
     380:	d9 f7       	brne	.-10     	; 0x378 <BME_read_correction_coefficients+0xba>
     382:	8b e1       	ldi	r24, 0x1B	; 27
     384:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <i.2323>
		RawBMEdata[i] = BMEmessageBuf[i+1];
	}
	dig_T1 = /*0x7069;*/ RawBMEdata[0] | (RawBMEdata[1]<<8);
     388:	e7 e8       	ldi	r30, 0x87	; 135
     38a:	f3 e0       	ldi	r31, 0x03	; 3
     38c:	81 81       	ldd	r24, Z+1	; 0x01
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	98 2f       	mov	r25, r24
     392:	88 27       	eor	r24, r24
     394:	20 81       	ld	r18, Z
     396:	82 2b       	or	r24, r18
     398:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <dig_T1+0x1>
     39c:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <dig_T1>
	dig_T2 = /*0x6738;*/ RawBMEdata[2] | (RawBMEdata[3]<<8);
     3a0:	83 81       	ldd	r24, Z+3	; 0x03
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	98 2f       	mov	r25, r24
     3a6:	88 27       	eor	r24, r24
     3a8:	22 81       	ldd	r18, Z+2	; 0x02
     3aa:	82 2b       	or	r24, r18
     3ac:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <dig_T2+0x1>
     3b0:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <dig_T2>
	dig_T3 = /*0x32; */RawBMEdata[4] | (RawBMEdata[5]<<8);
     3b4:	85 81       	ldd	r24, Z+5	; 0x05
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	98 2f       	mov	r25, r24
     3ba:	88 27       	eor	r24, r24
     3bc:	24 81       	ldd	r18, Z+4	; 0x04
     3be:	82 2b       	or	r24, r18
     3c0:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <dig_T3+0x1>
     3c4:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <dig_T3>
	dig_P1 = RawBMEdata[6] | (RawBMEdata[7]<<8);
     3c8:	87 81       	ldd	r24, Z+7	; 0x07
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	98 2f       	mov	r25, r24
     3ce:	88 27       	eor	r24, r24
     3d0:	26 81       	ldd	r18, Z+6	; 0x06
     3d2:	82 2b       	or	r24, r18
     3d4:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <dig_P1+0x1>
     3d8:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <dig_P1>
	dig_P2 = RawBMEdata[8] | (RawBMEdata[9]<<8);
     3dc:	81 85       	ldd	r24, Z+9	; 0x09
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	98 2f       	mov	r25, r24
     3e2:	88 27       	eor	r24, r24
     3e4:	20 85       	ldd	r18, Z+8	; 0x08
     3e6:	82 2b       	or	r24, r18
     3e8:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <dig_P2+0x1>
     3ec:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <dig_P2>
	dig_P3 = RawBMEdata[10] | (RawBMEdata[11]<<8);
     3f0:	83 85       	ldd	r24, Z+11	; 0x0b
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	98 2f       	mov	r25, r24
     3f6:	88 27       	eor	r24, r24
     3f8:	22 85       	ldd	r18, Z+10	; 0x0a
     3fa:	82 2b       	or	r24, r18
     3fc:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <dig_P3+0x1>
     400:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <dig_P3>
	dig_P4 = RawBMEdata[12] | (RawBMEdata[13]<<8);
     404:	85 85       	ldd	r24, Z+13	; 0x0d
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	98 2f       	mov	r25, r24
     40a:	88 27       	eor	r24, r24
     40c:	24 85       	ldd	r18, Z+12	; 0x0c
     40e:	82 2b       	or	r24, r18
     410:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <dig_P4+0x1>
     414:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <dig_P4>
	dig_P5 = RawBMEdata[14] | (RawBMEdata[15]<<8);
     418:	87 85       	ldd	r24, Z+15	; 0x0f
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	98 2f       	mov	r25, r24
     41e:	88 27       	eor	r24, r24
     420:	26 85       	ldd	r18, Z+14	; 0x0e
     422:	82 2b       	or	r24, r18
     424:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <dig_P5+0x1>
     428:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <dig_P5>
	dig_P6 = RawBMEdata[16] | (RawBMEdata[17]<<8);
     42c:	81 89       	ldd	r24, Z+17	; 0x11
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	98 2f       	mov	r25, r24
     432:	88 27       	eor	r24, r24
     434:	20 89       	ldd	r18, Z+16	; 0x10
     436:	82 2b       	or	r24, r18
     438:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <dig_P6+0x1>
     43c:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <dig_P6>
	dig_P7 = RawBMEdata[18] | (RawBMEdata[19]<<8);
     440:	83 89       	ldd	r24, Z+19	; 0x13
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	98 2f       	mov	r25, r24
     446:	88 27       	eor	r24, r24
     448:	22 89       	ldd	r18, Z+18	; 0x12
     44a:	82 2b       	or	r24, r18
     44c:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <dig_P7+0x1>
     450:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <dig_P7>
	dig_P8 = RawBMEdata[20] | (RawBMEdata[21]<<8);
     454:	85 89       	ldd	r24, Z+21	; 0x15
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	98 2f       	mov	r25, r24
     45a:	88 27       	eor	r24, r24
     45c:	24 89       	ldd	r18, Z+20	; 0x14
     45e:	82 2b       	or	r24, r18
     460:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <dig_P8+0x1>
     464:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <dig_P8>
	dig_P9 = RawBMEdata[22] | (RawBMEdata[23]<<8);
     468:	87 89       	ldd	r24, Z+23	; 0x17
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	98 2f       	mov	r25, r24
     46e:	88 27       	eor	r24, r24
     470:	26 89       	ldd	r18, Z+22	; 0x16
     472:	82 2b       	or	r24, r18
     474:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <dig_P9+0x1>
     478:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <dig_P9>
	dig_H1 = RawBMEdata[25];
     47c:	81 8d       	ldd	r24, Z+25	; 0x19
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	90 93 b6 03 	sts	0x03B6, r25	; 0x8003b6 <dig_H1+0x1>
     484:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <dig_H1>
	//Now grab the rest of the humidity sensor data
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     488:	eb e5       	ldi	r30, 0x5B	; 91
     48a:	f3 e0       	ldi	r31, 0x03	; 3
     48c:	8c ee       	ldi	r24, 0xEC	; 236
     48e:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xE1; // The register we want to start reading from
     490:	81 ee       	ldi	r24, 0xE1	; 225
     492:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     494:	62 e0       	ldi	r22, 0x02	; 2
     496:	cf 01       	movw	r24, r30
     498:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     49c:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     4a0:	81 11       	cpse	r24, r1
     4a2:	fc cf       	rjmp	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read eight bytes, we pass "9".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     4a4:	8d ee       	ldi	r24, 0xED	; 237
     4a6:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 8); //We want eight bytes back, so use 9 in the function call.
     4aa:	68 e0       	ldi	r22, 0x08	; 8
     4ac:	8b e5       	ldi	r24, 0x5B	; 91
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     4b4:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     4b8:	81 11       	cpse	r24, r1
     4ba:	fc cf       	rjmp	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 8);
     4bc:	68 e0       	ldi	r22, 0x08	; 8
     4be:	8b e5       	ldi	r24, 0x5B	; 91
     4c0:	93 e0       	ldi	r25, 0x03	; 3
     4c2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_Get_Data_From_Transceiver>
     4c6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <TWI_XFER_STATUS>
     4ca:	23 e6       	ldi	r18, 0x63	; 99
     4cc:	33 e0       	ldi	r19, 0x03	; 3
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<7;i++) 	{
		RawBMEdata[i] = BMEmessageBuf[i+1];
     4ce:	89 91       	ld	r24, Y+
     4d0:	f8 01       	movw	r30, r16
     4d2:	81 93       	st	Z+, r24
     4d4:	8f 01       	movw	r16, r30
	while ( TWI_Transceiver_Busy() );
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 8);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<7;i++) 	{
     4d6:	c2 17       	cp	r28, r18
     4d8:	d3 07       	cpc	r29, r19
     4da:	c9 f7       	brne	.-14     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4dc:	87 e0       	ldi	r24, 0x07	; 7
     4de:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <i.2323>
		RawBMEdata[i] = BMEmessageBuf[i+1];
	}
	dig_H2 = RawBMEdata[1] | (RawBMEdata[2]<<8);
     4e2:	e7 e8       	ldi	r30, 0x87	; 135
     4e4:	f3 e0       	ldi	r31, 0x03	; 3
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	98 2f       	mov	r25, r24
     4ec:	88 27       	eor	r24, r24
     4ee:	21 81       	ldd	r18, Z+1	; 0x01
     4f0:	82 2b       	or	r24, r18
     4f2:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <dig_H2+0x1>
     4f6:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <dig_H2>
	dig_H3 = RawBMEdata[3];
     4fa:	83 81       	ldd	r24, Z+3	; 0x03
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <dig_H3+0x1>
     502:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <dig_H3>
	dig_H4 = (RawBMEdata[4]<<4) | (RawBMEdata[5]>>5);
     506:	85 81       	ldd	r24, Z+5	; 0x05
     508:	82 95       	swap	r24
     50a:	86 95       	lsr	r24
     50c:	87 70       	andi	r24, 0x07	; 7
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	24 81       	ldd	r18, Z+4	; 0x04
     512:	40 e1       	ldi	r20, 0x10	; 16
     514:	24 9f       	mul	r18, r20
     516:	90 01       	movw	r18, r0
     518:	11 24       	eor	r1, r1
     51a:	28 2b       	or	r18, r24
     51c:	39 2b       	or	r19, r25
     51e:	30 93 84 03 	sts	0x0384, r19	; 0x800384 <dig_H4+0x1>
     522:	20 93 83 03 	sts	0x0383, r18	; 0x800383 <dig_H4>
	dig_H5 = (RawBMEdata[5]>>5) | (RawBMEdata[6]<<4);
     526:	26 81       	ldd	r18, Z+6	; 0x06
     528:	40 e1       	ldi	r20, 0x10	; 16
     52a:	24 9f       	mul	r18, r20
     52c:	90 01       	movw	r18, r0
     52e:	11 24       	eor	r1, r1
     530:	82 2b       	or	r24, r18
     532:	93 2b       	or	r25, r19
     534:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <dig_H5+0x1>
     538:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <dig_H5>
	dig_H6 = RawBMEdata[7];
     53c:	87 81       	ldd	r24, Z+7	; 0x07
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <dig_H6+0x1>
     544:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <dig_H6>
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	08 95       	ret

00000554 <bme280basic_init>:
	// 3) Send the two bytes and restart
	// 4) First byte is the sensor I2C address (x2) and the read/write bit set to 1
	// 5) Start the transaction and send a NACK after you've received the last byte you want.
	//
	// First, reset the device per section 5.4.2 of the data sheet
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     554:	eb e5       	ldi	r30, 0x5B	; 91
     556:	f3 e0       	ldi	r31, 0x03	; 3
     558:	8c ee       	ldi	r24, 0xEC	; 236
     55a:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xE0; // The register we want to write to
     55c:	80 ee       	ldi	r24, 0xE0	; 224
     55e:	81 83       	std	Z+1, r24	; 0x01
	BMEmessageBuf[2] = 0xB6; // This value forces a reset to the device
     560:	86 eb       	ldi	r24, 0xB6	; 182
     562:	82 83       	std	Z+2, r24	; 0x02
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     564:	63 e0       	ldi	r22, 0x03	; 3
     566:	cf 01       	movw	r24, r30
     568:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
	// Wait for the transaction to complete...
	while ( TWI_Transceiver_Busy() );
     56c:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     570:	81 11       	cpse	r24, r1
     572:	fc cf       	rjmp	.-8      	; 0x56c <bme280basic_init+0x18>
	//
	// Now read the chip ID from register 0x0D
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     574:	eb e5       	ldi	r30, 0x5B	; 91
     576:	f3 e0       	ldi	r31, 0x03	; 3
     578:	8c ee       	ldi	r24, 0xEC	; 236
     57a:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xD0; // The register we want to read from
     57c:	80 ed       	ldi	r24, 0xD0	; 208
     57e:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     580:	62 e0       	ldi	r22, 0x02	; 2
     582:	cf 01       	movw	r24, r30
     584:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     588:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     58c:	81 11       	cpse	r24, r1
     58e:	fc cf       	rjmp	.-8      	; 0x588 <bme280basic_init+0x34>
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read one byte, we pass "2".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     590:	8d ee       	ldi	r24, 0xED	; 237
     592:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2); //We only want one byte back, so use 2 in the function call.
     596:	62 e0       	ldi	r22, 0x02	; 2
     598:	8b e5       	ldi	r24, 0x5B	; 91
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     5a0:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     5a4:	81 11       	cpse	r24, r1
     5a6:	fc cf       	rjmp	.-8      	; 0x5a0 <bme280basic_init+0x4c>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 2);
     5a8:	62 e0       	ldi	r22, 0x02	; 2
     5aa:	8b e5       	ldi	r24, 0x5B	; 91
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_Get_Data_From_Transceiver>
     5b2:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <TWI_XFER_STATUS>
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	if (BMEmessageBuf[1]==0x60) {
     5b6:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <BMEmessageBuf+0x1>
     5ba:	80 36       	cpi	r24, 0x60	; 96
     5bc:	99 f5       	brne	.+102    	; 0x624 <bme280basic_init+0xd0>
		// We're talking to the right device.  Set up the control registers...
		//
		// We want Humidity oversampling set to x1 (ctrl_hum (0xF2) [2:0] = 0b001)
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     5be:	eb e5       	ldi	r30, 0x5B	; 91
     5c0:	f3 e0       	ldi	r31, 0x03	; 3
     5c2:	8c ee       	ldi	r24, 0xEC	; 236
     5c4:	80 83       	st	Z, r24
		BMEmessageBuf[1] = 0xF2; // The register we want to write to
     5c6:	82 ef       	ldi	r24, 0xF2	; 242
     5c8:	81 83       	std	Z+1, r24	; 0x01
		BMEmessageBuf[2] = 0x01; // Set humidity oversampling to x1
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	82 83       	std	Z+2, r24	; 0x02
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     5ce:	63 e0       	ldi	r22, 0x03	; 3
     5d0:	cf 01       	movw	r24, r30
     5d2:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
		// Wait for the transaction to complete...
		while ( TWI_Transceiver_Busy() );
     5d6:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     5da:	81 11       	cpse	r24, r1
     5dc:	fc cf       	rjmp	.-8      	; 0x5d6 <bme280basic_init+0x82>
		//
		//Set Tstandby to its smallest value (0)
		//  Per table 12 and 28 we want the filter coefficient at 16 (config (0xF5) [4:2] = 0b100)
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     5de:	eb e5       	ldi	r30, 0x5B	; 91
     5e0:	f3 e0       	ldi	r31, 0x03	; 3
     5e2:	8c ee       	ldi	r24, 0xEC	; 236
     5e4:	80 83       	st	Z, r24
		BMEmessageBuf[1] = 0xF5; // The register we want to write to
     5e6:	85 ef       	ldi	r24, 0xF5	; 245
     5e8:	81 83       	std	Z+1, r24	; 0x01
		BMEmessageBuf[2] = (0b100<<2); // Set temp, pressure, and mode
     5ea:	80 e1       	ldi	r24, 0x10	; 16
     5ec:	82 83       	std	Z+2, r24	; 0x02
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     5ee:	63 e0       	ldi	r22, 0x03	; 3
     5f0:	cf 01       	movw	r24, r30
     5f2:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
		// Wait for the transaction to complete...
		while ( TWI_Transceiver_Busy() );
     5f6:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     5fa:	81 11       	cpse	r24, r1
     5fc:	fc cf       	rjmp	.-8      	; 0x5f6 <bme280basic_init+0xa2>
		//
		BME_read_correction_coefficients();
     5fe:	5f de       	rcall	.-834    	; 0x2be <BME_read_correction_coefficients>
		// We want Temperature oversampling set to x1 (ctrl_meas (0xF4) [7:5] = 0b001)
		// We want Pressure oversampling set to x8 (ctrl_meas (0xF4) [4:2] = 0b100)
		// Put the device into Forced mode (we want to tell the device to "go measure") (ctrl_meas (0xF4) [1:0] = 0b01)
		BMEtriggerbyte = (0b01<<5) | (0b100<<2) | (0b01<<0);
     600:	81 e3       	ldi	r24, 0x31	; 49
     602:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <BMEtriggerbyte>
		// NOTE: THIS BYTE MUST BE RESENT EACH TIME TO GET A NEW MEASUREMENT
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     606:	eb e5       	ldi	r30, 0x5B	; 91
     608:	f3 e0       	ldi	r31, 0x03	; 3
     60a:	9c ee       	ldi	r25, 0xEC	; 236
     60c:	90 83       	st	Z, r25
		BMEmessageBuf[1] = 0xF4; // The register we want to write to
     60e:	94 ef       	ldi	r25, 0xF4	; 244
     610:	91 83       	std	Z+1, r25	; 0x01
		BMEmessageBuf[2] = BMEtriggerbyte; // Set temp, pressure, and mode
     612:	82 83       	std	Z+2, r24	; 0x02
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	cf 01       	movw	r24, r30
     618:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
		// Wait for the transaction to complete...
		while ( TWI_Transceiver_Busy() );
     61c:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     620:	81 11       	cpse	r24, r1
     622:	fc cf       	rjmp	.-8      	; 0x61c <bme280basic_init+0xc8>
     624:	08 95       	ret

00000626 <bme280basic_bulk_data_read>:
		//  All done - and first measurement cycle has  been kicked off!
	}
}

void bme280basic_bulk_data_read(void) {
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
	// See the bme280basic_init routine for the read and write protocols for using this sensor...
	uint8_t i;
	static volatile uint8_t BMEbusy;
	//
	// Ensure the device has completed the read cycle...
	BMEbusy = 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <BMEbusy.2377>
	while (BMEbusy) {
     636:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <BMEbusy.2377>
     63a:	88 23       	and	r24, r24
     63c:	59 f1       	breq	.+86     	; 0x694 <bme280basic_bulk_data_read+0x6e>
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     63e:	cb e5       	ldi	r28, 0x5B	; 91
     640:	d3 e0       	ldi	r29, 0x03	; 3
     642:	0f 2e       	mov	r0, r31
     644:	fc ee       	ldi	r31, 0xEC	; 236
     646:	ff 2e       	mov	r15, r31
     648:	f0 2d       	mov	r31, r0
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     64a:	03 ef       	ldi	r16, 0xF3	; 243
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1).
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     64c:	1d ee       	ldi	r17, 0xED	; 237
	static volatile uint8_t BMEbusy;
	//
	// Ensure the device has completed the read cycle...
	BMEbusy = 1;
	while (BMEbusy) {
		BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     64e:	f8 82       	st	Y, r15
		BMEmessageBuf[1] = 0xF3; // The BME280 status register
     650:	09 83       	std	Y+1, r16	; 0x01
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     652:	62 e0       	ldi	r22, 0x02	; 2
     654:	ce 01       	movw	r24, r28
     656:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     65a:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     65e:	81 11       	cpse	r24, r1
     660:	fc cf       	rjmp	.-8      	; 0x65a <bme280basic_bulk_data_read+0x34>
		// Bytes to read = (number_of_bytes_to_read (on next cycle) +1).
		BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     662:	18 83       	st	Y, r17
		TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2); //We want one bytes back, so use 2 in the function call.
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	ce 01       	movw	r24, r28
     668:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
		// Let initialization transaction complete...
		while ( TWI_Transceiver_Busy() );
     66c:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     670:	81 11       	cpse	r24, r1
     672:	fc cf       	rjmp	.-8      	; 0x66c <bme280basic_bulk_data_read+0x46>
		// Copy the data we want...
		TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 2);
     674:	62 e0       	ldi	r22, 0x02	; 2
     676:	ce 01       	movw	r24, r28
     678:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_Get_Data_From_Transceiver>
     67c:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <TWI_XFER_STATUS>
		// CHeck to see if things are still busy
		BMEbusy = ((0b00001000 & BMEmessageBuf[1])>>3);
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	83 fb       	bst	r24, 3
     684:	88 27       	eor	r24, r24
     686:	80 f9       	bld	r24, 0
     688:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <BMEbusy.2377>
	uint8_t i;
	static volatile uint8_t BMEbusy;
	//
	// Ensure the device has completed the read cycle...
	BMEbusy = 1;
	while (BMEbusy) {
     68c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <BMEbusy.2377>
     690:	81 11       	cpse	r24, r1
     692:	dd cf       	rjmp	.-70     	; 0x64e <bme280basic_bulk_data_read+0x28>
		BMEbusy = ((0b00001000 & BMEmessageBuf[1])>>3);
	}
	//
	// Device is completed the measurement cycle, now get the temperature data...
	// We want to start reading the data from register 0xF7 and read to register 0xFE - 8 bytes total
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     694:	eb e5       	ldi	r30, 0x5B	; 91
     696:	f3 e0       	ldi	r31, 0x03	; 3
     698:	8c ee       	ldi	r24, 0xEC	; 236
     69a:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xF7; // The register we want to start reading from
     69c:	87 ef       	ldi	r24, 0xF7	; 247
     69e:	81 83       	std	Z+1, r24	; 0x01
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 2);
     6a0:	62 e0       	ldi	r22, 0x02	; 2
     6a2:	cf 01       	movw	r24, r30
     6a4:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     6a8:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     6ac:	81 11       	cpse	r24, r1
     6ae:	fc cf       	rjmp	.-8      	; 0x6a8 <bme280basic_bulk_data_read+0x82>
	// Now for the read part...
	// Bytes to read = (number_of_bytes_to_read (on next cycle) +1). Zero origin.   If we want to read eight bytes, we pass "9".
	BMEmessageBuf[0] = BME_READ_ADDRESS; // The first byte must always have TWI slave address.
     6b0:	8d ee       	ldi	r24, 0xED	; 237
     6b2:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <BMEmessageBuf>
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 9); //We want eight bytes back, so use 9 in the function call.
     6b6:	69 e0       	ldi	r22, 0x09	; 9
     6b8:	8b e5       	ldi	r24, 0x5B	; 91
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
	// Let initialization transaction complete...
	while ( TWI_Transceiver_Busy() );
     6c0:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     6c4:	81 11       	cpse	r24, r1
     6c6:	fc cf       	rjmp	.-8      	; 0x6c0 <bme280basic_bulk_data_read+0x9a>
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 9);
     6c8:	69 e0       	ldi	r22, 0x09	; 9
     6ca:	8b e5       	ldi	r24, 0x5B	; 91
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_Get_Data_From_Transceiver>
     6d2:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <TWI_XFER_STATUS>
     6d6:	ec e5       	ldi	r30, 0x5C	; 92
     6d8:	f3 e0       	ldi	r31, 0x03	; 3
     6da:	a7 e8       	ldi	r26, 0x87	; 135
     6dc:	b3 e0       	ldi	r27, 0x03	; 3
     6de:	24 e6       	ldi	r18, 0x64	; 100
     6e0:	33 e0       	ldi	r19, 0x03	; 3
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<8;i++) 	{
		RawBMEdata[i] = BMEmessageBuf[i+1];
     6e2:	81 91       	ld	r24, Z+
     6e4:	8d 93       	st	X+, r24
	while ( TWI_Transceiver_Busy() );
	// Now get the data we just read...note this call just copies the data from the TWI routine buffer to our local buffer (BMEmessageBuf)...
	TWI_XFER_STATUS = TWI_Get_Data_From_Transceiver(BMEmessageBuf, 9);
	// Note that the data we want starts in BMEmessageBuf[1], not BMEmessageBuf[0]
	// Transfer the data to a variable we can manipulate to get our data out...
	for (i=0;i<8;i++) 	{
     6e6:	e2 17       	cp	r30, r18
     6e8:	f3 07       	cpc	r31, r19
     6ea:	d9 f7       	brne	.-10     	; 0x6e2 <bme280basic_bulk_data_read+0xbc>
		RawBMEdata[i] = BMEmessageBuf[i+1];
	}
	rawPress = ((uint32_t)RawBMEdata[0]<<12) | ((uint32_t)RawBMEdata[1]<<4) | ((uint32_t)RawBMEdata[2]>>4);
     6ec:	e7 e8       	ldi	r30, 0x87	; 135
     6ee:	f3 e0       	ldi	r31, 0x03	; 3
     6f0:	81 81       	ldd	r24, Z+1	; 0x01
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	aa 1f       	adc	r26, r26
     6fe:	bb 1f       	adc	r27, r27
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	aa 1f       	adc	r26, r26
     706:	bb 1f       	adc	r27, r27
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	aa 1f       	adc	r26, r26
     70e:	bb 1f       	adc	r27, r27
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	aa 1f       	adc	r26, r26
     716:	bb 1f       	adc	r27, r27
     718:	40 81       	ld	r20, Z
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	03 2e       	mov	r0, r19
     722:	3c e0       	ldi	r19, 0x0C	; 12
     724:	44 0f       	add	r20, r20
     726:	55 1f       	adc	r21, r21
     728:	66 1f       	adc	r22, r22
     72a:	77 1f       	adc	r23, r23
     72c:	3a 95       	dec	r19
     72e:	d1 f7       	brne	.-12     	; 0x724 <bme280basic_bulk_data_read+0xfe>
     730:	30 2d       	mov	r19, r0
     732:	84 2b       	or	r24, r20
     734:	95 2b       	or	r25, r21
     736:	a6 2b       	or	r26, r22
     738:	b7 2b       	or	r27, r23
     73a:	22 81       	ldd	r18, Z+2	; 0x02
     73c:	22 95       	swap	r18
     73e:	2f 70       	andi	r18, 0x0F	; 15
     740:	82 2b       	or	r24, r18
     742:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <rawPress>
     746:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <rawPress+0x1>
     74a:	a0 93 f2 03 	sts	0x03F2, r26	; 0x8003f2 <rawPress+0x2>
     74e:	b0 93 f3 03 	sts	0x03F3, r27	; 0x8003f3 <rawPress+0x3>
	rawTemp = ((uint32_t)RawBMEdata[3]<<12) | ((uint32_t)RawBMEdata[4]<<4) | ((uint32_t)RawBMEdata[5]>>4);
     752:	84 81       	ldd	r24, Z+4	; 0x04
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	a0 e0       	ldi	r26, 0x00	; 0
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	aa 1f       	adc	r26, r26
     760:	bb 1f       	adc	r27, r27
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	aa 1f       	adc	r26, r26
     768:	bb 1f       	adc	r27, r27
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	aa 1f       	adc	r26, r26
     770:	bb 1f       	adc	r27, r27
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	aa 1f       	adc	r26, r26
     778:	bb 1f       	adc	r27, r27
     77a:	43 81       	ldd	r20, Z+3	; 0x03
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	03 2e       	mov	r0, r19
     784:	3c e0       	ldi	r19, 0x0C	; 12
     786:	44 0f       	add	r20, r20
     788:	55 1f       	adc	r21, r21
     78a:	66 1f       	adc	r22, r22
     78c:	77 1f       	adc	r23, r23
     78e:	3a 95       	dec	r19
     790:	d1 f7       	brne	.-12     	; 0x786 <bme280basic_bulk_data_read+0x160>
     792:	30 2d       	mov	r19, r0
     794:	84 2b       	or	r24, r20
     796:	95 2b       	or	r25, r21
     798:	a6 2b       	or	r26, r22
     79a:	b7 2b       	or	r27, r23
     79c:	25 81       	ldd	r18, Z+5	; 0x05
     79e:	22 95       	swap	r18
     7a0:	2f 70       	andi	r18, 0x0F	; 15
     7a2:	82 2b       	or	r24, r18
     7a4:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <rawTemp>
     7a8:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <rawTemp+0x1>
     7ac:	a0 93 ba 03 	sts	0x03BA, r26	; 0x8003ba <rawTemp+0x2>
     7b0:	b0 93 bb 03 	sts	0x03BB, r27	; 0x8003bb <rawTemp+0x3>
	rawHum = ((uint32_t)RawBMEdata[6]<<8) | (uint32_t)RawBMEdata[7];
     7b4:	86 81       	ldd	r24, Z+6	; 0x06
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 e0       	ldi	r26, 0x00	; 0
     7ba:	b0 e0       	ldi	r27, 0x00	; 0
     7bc:	ba 2f       	mov	r27, r26
     7be:	a9 2f       	mov	r26, r25
     7c0:	98 2f       	mov	r25, r24
     7c2:	88 27       	eor	r24, r24
     7c4:	27 81       	ldd	r18, Z+7	; 0x07
     7c6:	82 2b       	or	r24, r18
     7c8:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <rawHum>
     7cc:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <rawHum+0x1>
     7d0:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <rawHum+0x2>
     7d4:	b0 93 f7 03 	sts	0x03F7, r27	; 0x8003f7 <rawHum+0x3>
	// We want Temperature oversampling set to x1 (ctrl_meas (0xF4) [7:5] = 0b001)
	// We want Pressure oversampling set to x8 (ctrl_meas (0xF4) [4:2] = 0b100)
	// Put the device into Forced mode (we want to tell the device to "go measure") (ctrl_meas (0xF4) [1:0] = 0b01)
	// BMEtriggerbyte ^= 0x03; // toggle the forced mode (not sure this is required)
	// NOTE: THIS BYTE MUST BE RESENT EACH TIME TO GET A NEW MEASUREMENT
	BMEmessageBuf[0] = BME_WRITE_ADDRESS; // The first byte must always have TWI slave address.
     7d8:	eb e5       	ldi	r30, 0x5B	; 91
     7da:	f3 e0       	ldi	r31, 0x03	; 3
     7dc:	8c ee       	ldi	r24, 0xEC	; 236
     7de:	80 83       	st	Z, r24
	BMEmessageBuf[1] = 0xF4; // The register we want to write to
     7e0:	84 ef       	ldi	r24, 0xF4	; 244
     7e2:	81 83       	std	Z+1, r24	; 0x01
	BMEmessageBuf[2] = (0b01<<5) | (0b100<<2) | (0b01<<0); // Set temp, pressure, and mode
     7e4:	81 e3       	ldi	r24, 0x31	; 49
     7e6:	82 83       	std	Z+2, r24	; 0x02
	TWI_Start_Transceiver_With_Data( BMEmessageBuf, 3);
     7e8:	63 e0       	ldi	r22, 0x03	; 3
     7ea:	cf 01       	movw	r24, r30
     7ec:	0e 94 3e 13 	call	0x267c	; 0x267c <TWI_Start_Transceiver_With_Data>
	// Wait for the transaction to complete...
	while ( TWI_Transceiver_Busy() );
     7f0:	0e 94 3a 13 	call	0x2674	; 0x2674 <TWI_Transceiver_Busy>
     7f4:	81 11       	cpse	r24, r1
     7f6:	fc cf       	rjmp	.-8      	; 0x7f0 <bme280basic_bulk_data_read+0x1ca>
	//  All done - and the next measurement cycle has  been kicked off!
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	08 95       	ret

00000804 <BME280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of ?5123? equals 51.23 Deg C.
// t_fine carries fine temperature as global value
long BME280_compensate_T_int32(long adc_T) {
     804:	8f 92       	push	r8
     806:	9f 92       	push	r9
     808:	af 92       	push	r10
     80a:	bf 92       	push	r11
     80c:	cf 92       	push	r12
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
	long var1, var2, T;
	var1  = ((((adc_T>>3) - (dig_T1<<1))) * (dig_T2)) >> 11;
     814:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <dig_T1>
     818:	30 91 5a 03 	lds	r19, 0x035A	; 0x80035a <dig_T1+0x1>
	var2  = (((((adc_T>>4) - (dig_T1)) * ((adc_T>>4) - (dig_T1))) >> 12) * (dig_T3)) >> 14;
     81c:	6b 01       	movw	r12, r22
     81e:	7c 01       	movw	r14, r24
     820:	68 94       	set
     822:	13 f8       	bld	r1, 3
     824:	f5 94       	asr	r15
     826:	e7 94       	ror	r14
     828:	d7 94       	ror	r13
     82a:	c7 94       	ror	r12
     82c:	16 94       	lsr	r1
     82e:	d1 f7       	brne	.-12     	; 0x824 <BME280_compensate_T_int32+0x20>
     830:	c2 1a       	sub	r12, r18
     832:	d3 0a       	sbc	r13, r19
     834:	e1 08       	sbc	r14, r1
     836:	f1 08       	sbc	r15, r1

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of ?5123? equals 51.23 Deg C.
// t_fine carries fine temperature as global value
long BME280_compensate_T_int32(long adc_T) {
	long var1, var2, T;
	var1  = ((((adc_T>>3) - (dig_T1<<1))) * (dig_T2)) >> 11;
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	68 94       	set
     83e:	12 f8       	bld	r1, 2
     840:	b5 95       	asr	r27
     842:	a7 95       	ror	r26
     844:	97 95       	ror	r25
     846:	87 95       	ror	r24
     848:	16 94       	lsr	r1
     84a:	d1 f7       	brne	.-12     	; 0x840 <BME280_compensate_T_int32+0x3c>
     84c:	22 0f       	add	r18, r18
     84e:	33 1f       	adc	r19, r19
     850:	4c 01       	movw	r8, r24
     852:	5d 01       	movw	r10, r26
     854:	82 1a       	sub	r8, r18
     856:	93 0a       	sbc	r9, r19
     858:	a1 08       	sbc	r10, r1
     85a:	b1 08       	sbc	r11, r1
     85c:	a5 01       	movw	r20, r10
     85e:	94 01       	movw	r18, r8
     860:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <dig_T2>
     864:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <dig_T2+0x1>
     868:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__mulshisi3>
     86c:	4b 01       	movw	r8, r22
     86e:	5c 01       	movw	r10, r24
     870:	07 2e       	mov	r0, r23
     872:	7b e0       	ldi	r23, 0x0B	; 11
     874:	b5 94       	asr	r11
     876:	a7 94       	ror	r10
     878:	97 94       	ror	r9
     87a:	87 94       	ror	r8
     87c:	7a 95       	dec	r23
     87e:	d1 f7       	brne	.-12     	; 0x874 <BME280_compensate_T_int32+0x70>
     880:	70 2d       	mov	r23, r0
	var2  = (((((adc_T>>4) - (dig_T1)) * ((adc_T>>4) - (dig_T1))) >> 12) * (dig_T3)) >> 14;
     882:	a7 01       	movw	r20, r14
     884:	96 01       	movw	r18, r12
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__mulsi3>
     88e:	9b 01       	movw	r18, r22
     890:	ac 01       	movw	r20, r24
     892:	01 2e       	mov	r0, r17
     894:	1c e0       	ldi	r17, 0x0C	; 12
     896:	55 95       	asr	r21
     898:	47 95       	ror	r20
     89a:	37 95       	ror	r19
     89c:	27 95       	ror	r18
     89e:	1a 95       	dec	r17
     8a0:	d1 f7       	brne	.-12     	; 0x896 <BME280_compensate_T_int32+0x92>
     8a2:	10 2d       	mov	r17, r0
     8a4:	a0 91 25 04 	lds	r26, 0x0425	; 0x800425 <dig_T3>
     8a8:	b0 91 26 04 	lds	r27, 0x0426	; 0x800426 <dig_T3+0x1>
     8ac:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__mulshisi3>
     8b0:	dc 01       	movw	r26, r24
     8b2:	cb 01       	movw	r24, r22
     8b4:	07 2e       	mov	r0, r23
     8b6:	7e e0       	ldi	r23, 0x0E	; 14
     8b8:	b5 95       	asr	r27
     8ba:	a7 95       	ror	r26
     8bc:	97 95       	ror	r25
     8be:	87 95       	ror	r24
     8c0:	7a 95       	dec	r23
     8c2:	d1 f7       	brne	.-12     	; 0x8b8 <BME280_compensate_T_int32+0xb4>
     8c4:	70 2d       	mov	r23, r0
	t_fine = var1 + var2;
     8c6:	88 0d       	add	r24, r8
     8c8:	99 1d       	adc	r25, r9
     8ca:	aa 1d       	adc	r26, r10
     8cc:	bb 1d       	adc	r27, r11
     8ce:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <t_fine>
     8d2:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <t_fine+0x1>
     8d6:	a0 93 2d 04 	sts	0x042D, r26	; 0x80042d <t_fine+0x2>
     8da:	b0 93 2e 04 	sts	0x042E, r27	; 0x80042e <t_fine+0x3>
	T  = (t_fine * 5 + 128) >> 8;
     8de:	6c 01       	movw	r12, r24
     8e0:	7d 01       	movw	r14, r26
     8e2:	cc 0c       	add	r12, r12
     8e4:	dd 1c       	adc	r13, r13
     8e6:	ee 1c       	adc	r14, r14
     8e8:	ff 1c       	adc	r15, r15
     8ea:	cc 0c       	add	r12, r12
     8ec:	dd 1c       	adc	r13, r13
     8ee:	ee 1c       	adc	r14, r14
     8f0:	ff 1c       	adc	r15, r15
     8f2:	8c 0d       	add	r24, r12
     8f4:	9d 1d       	adc	r25, r13
     8f6:	ae 1d       	adc	r26, r14
     8f8:	bf 1d       	adc	r27, r15
     8fa:	80 58       	subi	r24, 0x80	; 128
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	af 4f       	sbci	r26, 0xFF	; 255
     900:	bf 4f       	sbci	r27, 0xFF	; 255
     902:	69 2f       	mov	r22, r25
     904:	7a 2f       	mov	r23, r26
     906:	8b 2f       	mov	r24, r27
     908:	99 27       	eor	r25, r25
     90a:	87 fd       	sbrc	r24, 7
     90c:	9a 95       	dec	r25
	return T;
}
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	bf 90       	pop	r11
     918:	af 90       	pop	r10
     91a:	9f 90       	pop	r9
     91c:	8f 90       	pop	r8
     91e:	08 95       	ret

00000920 <BME280_compensate_P_int64>:


//Return pressure in Pa as unsigned 32 bit int in Q24.8 format(24 int bits, 8 fractional)
//Output value of "24674867" represents 24674867/256 = 96386.2 Pa = 963.862 hPa
long BME280_compensate_P_int64(long adc_P)
{
     920:	2f 92       	push	r2
     922:	3f 92       	push	r3
     924:	4f 92       	push	r4
     926:	5f 92       	push	r5
     928:	6f 92       	push	r6
     92a:	7f 92       	push	r7
     92c:	8f 92       	push	r8
     92e:	9f 92       	push	r9
     930:	af 92       	push	r10
     932:	bf 92       	push	r11
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	6e 97       	sbiw	r28, 0x1e	; 30
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
     954:	6e 8b       	std	Y+22, r22	; 0x16
     956:	7f 8b       	std	Y+23, r23	; 0x17
     958:	88 8f       	std	Y+24, r24	; 0x18
     95a:	99 8f       	std	Y+25, r25	; 0x19
	long long var1, var2, p;
	var1 = ((long)t_fine)-128000;
     95c:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <t_fine>
     960:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <t_fine+0x1>
     964:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <t_fine+0x2>
     968:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <t_fine+0x3>
     96c:	8c 01       	movw	r16, r24
     96e:	9d 01       	movw	r18, r26
     970:	14 5f       	subi	r17, 0xF4	; 244
     972:	21 40       	sbci	r18, 0x01	; 1
     974:	31 09       	sbc	r19, r1
     976:	09 83       	std	Y+1, r16	; 0x01
     978:	1a 83       	std	Y+2, r17	; 0x02
     97a:	2b 83       	std	Y+3, r18	; 0x03
     97c:	3c 83       	std	Y+4, r19	; 0x04
     97e:	33 0f       	add	r19, r19
     980:	00 0b       	sbc	r16, r16
     982:	10 2f       	mov	r17, r16
     984:	98 01       	movw	r18, r16
     986:	0d 83       	std	Y+5, r16	; 0x05
     988:	1e 83       	std	Y+6, r17	; 0x06
     98a:	2f 83       	std	Y+7, r18	; 0x07
     98c:	38 87       	std	Y+8, r19	; 0x08
	var2 = var1*var1*(long)dig_P6;
     98e:	a9 80       	ldd	r10, Y+1	; 0x01
     990:	ba 80       	ldd	r11, Y+2	; 0x02
     992:	cb 80       	ldd	r12, Y+3	; 0x03
     994:	dc 80       	ldd	r13, Y+4	; 0x04
     996:	ed 80       	ldd	r14, Y+5	; 0x05
     998:	fe 2c       	mov	r15, r14
     99a:	0e 2d       	mov	r16, r14
     99c:	1e 2d       	mov	r17, r14
     99e:	2a 2d       	mov	r18, r10
     9a0:	3b 2d       	mov	r19, r11
     9a2:	4c 2d       	mov	r20, r12
     9a4:	5d 2d       	mov	r21, r13
     9a6:	60 2f       	mov	r22, r16
     9a8:	70 2f       	mov	r23, r16
     9aa:	80 2f       	mov	r24, r16
     9ac:	9e 2d       	mov	r25, r14
     9ae:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     9b2:	2d 87       	std	Y+13, r18	; 0x0d
     9b4:	3e 87       	std	Y+14, r19	; 0x0e
     9b6:	4f 87       	std	Y+15, r20	; 0x0f
     9b8:	58 8b       	std	Y+16, r21	; 0x10
     9ba:	69 8b       	std	Y+17, r22	; 0x11
     9bc:	7a 8b       	std	Y+18, r23	; 0x12
     9be:	8b 8b       	std	Y+19, r24	; 0x13
     9c0:	9c 8b       	std	Y+20, r25	; 0x14
     9c2:	10 91 27 04 	lds	r17, 0x0427	; 0x800427 <dig_P6>
     9c6:	1a 8f       	std	Y+26, r17	; 0x1a
     9c8:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <dig_P6+0x1>
     9cc:	2e 8f       	std	Y+30, r18	; 0x1e
	var2 = var2 + ((var1*(long)dig_P5)<<17);
     9ce:	30 91 ee 03 	lds	r19, 0x03EE	; 0x8003ee <dig_P5>
     9d2:	3b 8f       	std	Y+27, r19	; 0x1b
     9d4:	40 91 ef 03 	lds	r20, 0x03EF	; 0x8003ef <dig_P5+0x1>
     9d8:	4d 8f       	std	Y+29, r20	; 0x1d
	var2 = var2 + (((long long)dig_P4)<<35);
     9da:	50 91 ce 03 	lds	r21, 0x03CE	; 0x8003ce <dig_P4>
     9de:	5c 8f       	std	Y+28, r21	; 0x1c
     9e0:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <dig_P4+0x1>
     9e4:	8d 8b       	std	Y+21, r24	; 0x15
	var1 = ((var1*var1*(long)dig_P3)>>8)+((var1*(long)dig_P2)<<12);
     9e6:	30 91 cd 03 	lds	r19, 0x03CD	; 0x8003cd <dig_P2+0x1>
     9ea:	20 91 cc 03 	lds	r18, 0x03CC	; 0x8003cc <dig_P2>
     9ee:	93 2f       	mov	r25, r19
     9f0:	99 0f       	add	r25, r25
     9f2:	99 0b       	sbc	r25, r25
     9f4:	fe 2c       	mov	r15, r14
     9f6:	0e 2d       	mov	r16, r14
     9f8:	1e 2d       	mov	r17, r14
     9fa:	49 2f       	mov	r20, r25
     9fc:	59 2f       	mov	r21, r25
     9fe:	69 2f       	mov	r22, r25
     a00:	79 2f       	mov	r23, r25
     a02:	89 2f       	mov	r24, r25
     a04:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     a08:	0c e0       	ldi	r16, 0x0C	; 12
     a0a:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__ashldi3>
     a0e:	42 2e       	mov	r4, r18
     a10:	53 2e       	mov	r5, r19
     a12:	64 2e       	mov	r6, r20
     a14:	75 2e       	mov	r7, r21
     a16:	86 2e       	mov	r8, r22
     a18:	97 2e       	mov	r9, r23
     a1a:	28 2e       	mov	r2, r24
     a1c:	39 2e       	mov	r3, r25
     a1e:	b0 90 16 04 	lds	r11, 0x0416	; 0x800416 <dig_P3+0x1>
     a22:	a0 90 15 04 	lds	r10, 0x0415	; 0x800415 <dig_P3>
     a26:	1b 2d       	mov	r17, r11
     a28:	11 0f       	add	r17, r17
     a2a:	11 0b       	sbc	r17, r17
     a2c:	c1 2e       	mov	r12, r17
     a2e:	d1 2e       	mov	r13, r17
     a30:	e1 2e       	mov	r14, r17
     a32:	f1 2e       	mov	r15, r17
     a34:	01 2f       	mov	r16, r17
     a36:	2d 85       	ldd	r18, Y+13	; 0x0d
     a38:	3e 85       	ldd	r19, Y+14	; 0x0e
     a3a:	4f 85       	ldd	r20, Y+15	; 0x0f
     a3c:	58 89       	ldd	r21, Y+16	; 0x10
     a3e:	69 89       	ldd	r22, Y+17	; 0x11
     a40:	7a 89       	ldd	r23, Y+18	; 0x12
     a42:	8b 89       	ldd	r24, Y+19	; 0x13
     a44:	9c 89       	ldd	r25, Y+20	; 0x14
     a46:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     a4a:	08 e0       	ldi	r16, 0x08	; 8
     a4c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
     a50:	a4 2c       	mov	r10, r4
     a52:	b5 2c       	mov	r11, r5
     a54:	c6 2c       	mov	r12, r6
     a56:	d7 2c       	mov	r13, r7
     a58:	e8 2c       	mov	r14, r8
     a5a:	f9 2c       	mov	r15, r9
     a5c:	02 2d       	mov	r16, r2
     a5e:	13 2d       	mov	r17, r3
     a60:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__adddi3>
	var1 = (((((long long)1)<<47)+var1))*((long long)dig_P1)>>33;
     a64:	70 58       	subi	r23, 0x80	; 128
     a66:	8f 4f       	sbci	r24, 0xFF	; 255
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	20 90 13 04 	lds	r2, 0x0413	; 0x800413 <dig_P1>
     a6e:	30 90 14 04 	lds	r3, 0x0414	; 0x800414 <dig_P1+0x1>
     a72:	a2 2c       	mov	r10, r2
     a74:	b3 2c       	mov	r11, r3
     a76:	c1 2c       	mov	r12, r1
     a78:	d1 2c       	mov	r13, r1
     a7a:	e1 2c       	mov	r14, r1
     a7c:	f1 2c       	mov	r15, r1
     a7e:	00 e0       	ldi	r16, 0x00	; 0
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     a86:	01 e2       	ldi	r16, 0x21	; 33
     a88:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
     a8c:	29 87       	std	Y+9, r18	; 0x09
     a8e:	3a 87       	std	Y+10, r19	; 0x0a
     a90:	4b 87       	std	Y+11, r20	; 0x0b
     a92:	45 2e       	mov	r4, r21
     a94:	56 2e       	mov	r5, r22
     a96:	7c 87       	std	Y+12, r23	; 0x0c
     a98:	38 2e       	mov	r3, r24
     a9a:	29 2e       	mov	r2, r25
	if (var1 == 0)
     a9c:	65 2d       	mov	r22, r5
     a9e:	83 2d       	mov	r24, r3
     aa0:	92 2d       	mov	r25, r2
     aa2:	a0 e0       	ldi	r26, 0x00	; 0
     aa4:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__cmpdi2_s8>
     aa8:	09 f4       	brne	.+2      	; 0xaac <BME280_compensate_P_int64+0x18c>
     aaa:	89 c1       	rjmp	.+786    	; 0xdbe <BME280_compensate_P_int64+0x49e>
//Output value of "24674867" represents 24674867/256 = 96386.2 Pa = 963.862 hPa
long BME280_compensate_P_int64(long adc_P)
{
	long long var1, var2, p;
	var1 = ((long)t_fine)-128000;
	var2 = var1*var1*(long)dig_P6;
     aac:	aa 8c       	ldd	r10, Y+26	; 0x1a
     aae:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ab0:	11 0f       	add	r17, r17
     ab2:	11 0b       	sbc	r17, r17
     ab4:	be 8c       	ldd	r11, Y+30	; 0x1e
     ab6:	c1 2e       	mov	r12, r17
     ab8:	d1 2e       	mov	r13, r17
     aba:	e1 2e       	mov	r14, r17
     abc:	f1 2e       	mov	r15, r17
     abe:	01 2f       	mov	r16, r17
     ac0:	2d 85       	ldd	r18, Y+13	; 0x0d
     ac2:	3e 85       	ldd	r19, Y+14	; 0x0e
     ac4:	4f 85       	ldd	r20, Y+15	; 0x0f
     ac6:	58 89       	ldd	r21, Y+16	; 0x10
     ac8:	69 89       	ldd	r22, Y+17	; 0x11
     aca:	7a 89       	ldd	r23, Y+18	; 0x12
     acc:	8b 89       	ldd	r24, Y+19	; 0x13
     ace:	9c 89       	ldd	r25, Y+20	; 0x14
     ad0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     ad4:	2d 87       	std	Y+13, r18	; 0x0d
     ad6:	3e 87       	std	Y+14, r19	; 0x0e
     ad8:	64 2e       	mov	r6, r20
     ada:	75 2e       	mov	r7, r21
     adc:	86 2e       	mov	r8, r22
     ade:	97 2e       	mov	r9, r23
     ae0:	88 8b       	std	Y+16, r24	; 0x10
     ae2:	9f 87       	std	Y+15, r25	; 0x0f
	var2 = var2 + ((var1*(long)dig_P5)<<17);
     ae4:	2b 8d       	ldd	r18, Y+27	; 0x1b
     ae6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ae8:	99 0f       	add	r25, r25
     aea:	99 0b       	sbc	r25, r25
     aec:	a9 80       	ldd	r10, Y+1	; 0x01
     aee:	ba 80       	ldd	r11, Y+2	; 0x02
     af0:	cb 80       	ldd	r12, Y+3	; 0x03
     af2:	dc 80       	ldd	r13, Y+4	; 0x04
     af4:	ed 80       	ldd	r14, Y+5	; 0x05
     af6:	fe 2c       	mov	r15, r14
     af8:	0e 2d       	mov	r16, r14
     afa:	1e 2d       	mov	r17, r14
     afc:	3d 8d       	ldd	r19, Y+29	; 0x1d
     afe:	49 2f       	mov	r20, r25
     b00:	59 2f       	mov	r21, r25
     b02:	69 2f       	mov	r22, r25
     b04:	79 2f       	mov	r23, r25
     b06:	89 2f       	mov	r24, r25
     b08:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     b0c:	01 e1       	ldi	r16, 0x11	; 17
     b0e:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__ashldi3>
     b12:	ad 84       	ldd	r10, Y+13	; 0x0d
     b14:	be 84       	ldd	r11, Y+14	; 0x0e
     b16:	c6 2c       	mov	r12, r6
     b18:	d7 2c       	mov	r13, r7
     b1a:	e8 2c       	mov	r14, r8
     b1c:	f9 2c       	mov	r15, r9
     b1e:	08 89       	ldd	r16, Y+16	; 0x10
     b20:	1f 85       	ldd	r17, Y+15	; 0x0f
     b22:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__adddi3>
     b26:	a2 2e       	mov	r10, r18
     b28:	b3 2e       	mov	r11, r19
     b2a:	c4 2e       	mov	r12, r20
     b2c:	d5 2e       	mov	r13, r21
     b2e:	e6 2e       	mov	r14, r22
     b30:	f7 2e       	mov	r15, r23
     b32:	e8 2f       	mov	r30, r24
     b34:	19 2f       	mov	r17, r25
	var1 = (((((long long)1)<<47)+var1))*((long long)dig_P1)>>33;
	if (var1 == 0)
	{
		return 0;
	}
	p = 1048576 - adc_P;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e1       	ldi	r26, 0x10	; 16
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	2e 89       	ldd	r18, Y+22	; 0x16
     b40:	3f 89       	ldd	r19, Y+23	; 0x17
     b42:	48 8d       	ldd	r20, Y+24	; 0x18
     b44:	59 8d       	ldd	r21, Y+25	; 0x19
     b46:	82 1b       	sub	r24, r18
     b48:	93 0b       	sbc	r25, r19
     b4a:	a4 0b       	sbc	r26, r20
     b4c:	b5 0b       	sbc	r27, r21
     b4e:	3c 01       	movw	r6, r24
     b50:	4d 01       	movw	r8, r26
     b52:	99 0c       	add	r9, r9
     b54:	66 08       	sbc	r6, r6
     b56:	76 2c       	mov	r7, r6
     b58:	43 01       	movw	r8, r6
	p = (((p<<31)-var2)*3125)/var1;
     b5a:	28 2f       	mov	r18, r24
     b5c:	39 2f       	mov	r19, r25
     b5e:	4a 2f       	mov	r20, r26
     b60:	5b 2f       	mov	r21, r27
     b62:	66 2d       	mov	r22, r6
     b64:	76 2d       	mov	r23, r6
     b66:	86 2d       	mov	r24, r6
     b68:	96 2d       	mov	r25, r6
     b6a:	0f e1       	ldi	r16, 0x1F	; 31
     b6c:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__ashldi3>
     b70:	82 2e       	mov	r8, r18
     b72:	93 2e       	mov	r9, r19
     b74:	f4 2f       	mov	r31, r20
     b76:	75 2e       	mov	r7, r21
     b78:	b6 2f       	mov	r27, r22
     b7a:	a7 2f       	mov	r26, r23
     b7c:	68 2e       	mov	r6, r24
     b7e:	9d 83       	std	Y+5, r25	; 0x05
{
	long long var1, var2, p;
	var1 = ((long)t_fine)-128000;
	var2 = var1*var1*(long)dig_P6;
	var2 = var2 + ((var1*(long)dig_P5)<<17);
	var2 = var2 + (((long long)dig_P4)<<35);
     b80:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b82:	9d 89       	ldd	r25, Y+21	; 0x15
     b84:	99 0f       	add	r25, r25
     b86:	99 0b       	sbc	r25, r25
     b88:	3d 89       	ldd	r19, Y+21	; 0x15
     b8a:	49 2f       	mov	r20, r25
     b8c:	59 2f       	mov	r21, r25
     b8e:	69 2f       	mov	r22, r25
     b90:	79 2f       	mov	r23, r25
     b92:	89 2f       	mov	r24, r25
     b94:	03 e2       	ldi	r16, 0x23	; 35
     b96:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__ashldi3>
     b9a:	0e 2f       	mov	r16, r30
     b9c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__adddi3>
     ba0:	a2 2e       	mov	r10, r18
     ba2:	b3 2e       	mov	r11, r19
     ba4:	c4 2e       	mov	r12, r20
     ba6:	d5 2e       	mov	r13, r21
     ba8:	e6 2e       	mov	r14, r22
     baa:	f7 2e       	mov	r15, r23
     bac:	08 2f       	mov	r16, r24
     bae:	19 2f       	mov	r17, r25
	if (var1 == 0)
	{
		return 0;
	}
	p = 1048576 - adc_P;
	p = (((p<<31)-var2)*3125)/var1;
     bb0:	28 2d       	mov	r18, r8
     bb2:	39 2d       	mov	r19, r9
     bb4:	4f 2f       	mov	r20, r31
     bb6:	57 2d       	mov	r21, r7
     bb8:	6b 2f       	mov	r22, r27
     bba:	7a 2f       	mov	r23, r26
     bbc:	86 2d       	mov	r24, r6
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__subdi3>
     bc4:	82 2e       	mov	r8, r18
     bc6:	93 2e       	mov	r9, r19
     bc8:	49 83       	std	Y+1, r20	; 0x01
     bca:	65 2e       	mov	r6, r21
     bcc:	b6 2f       	mov	r27, r22
     bce:	a7 2f       	mov	r26, r23
     bd0:	f8 2f       	mov	r31, r24
     bd2:	e9 2f       	mov	r30, r25
     bd4:	03 e0       	ldi	r16, 0x03	; 3
     bd6:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__ashldi3>
     bda:	a8 2c       	mov	r10, r8
     bdc:	b9 2c       	mov	r11, r9
     bde:	c9 80       	ldd	r12, Y+1	; 0x01
     be0:	d6 2c       	mov	r13, r6
     be2:	eb 2e       	mov	r14, r27
     be4:	fa 2e       	mov	r15, r26
     be6:	0f 2f       	mov	r16, r31
     be8:	1e 2f       	mov	r17, r30
     bea:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__subdi3>
     bee:	a2 2e       	mov	r10, r18
     bf0:	b3 2e       	mov	r11, r19
     bf2:	c4 2e       	mov	r12, r20
     bf4:	d5 2e       	mov	r13, r21
     bf6:	e6 2e       	mov	r14, r22
     bf8:	f7 2e       	mov	r15, r23
     bfa:	78 2e       	mov	r7, r24
     bfc:	19 2f       	mov	r17, r25
     bfe:	03 e0       	ldi	r16, 0x03	; 3
     c00:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__ashldi3>
     c04:	07 2d       	mov	r16, r7
     c06:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__subdi3>
     c0a:	03 e0       	ldi	r16, 0x03	; 3
     c0c:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__ashldi3>
     c10:	a8 2c       	mov	r10, r8
     c12:	b9 2c       	mov	r11, r9
     c14:	c9 80       	ldd	r12, Y+1	; 0x01
     c16:	d6 2c       	mov	r13, r6
     c18:	eb 2e       	mov	r14, r27
     c1a:	fa 2e       	mov	r15, r26
     c1c:	0f 2f       	mov	r16, r31
     c1e:	1e 2f       	mov	r17, r30
     c20:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__subdi3>
     c24:	02 e0       	ldi	r16, 0x02	; 2
     c26:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__ashldi3>
     c2a:	0f 2f       	mov	r16, r31
     c2c:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__subdi3>
     c30:	01 e0       	ldi	r16, 0x01	; 1
     c32:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__ashldi3>
     c36:	0f 2f       	mov	r16, r31
     c38:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__subdi3>
     c3c:	a9 84       	ldd	r10, Y+9	; 0x09
     c3e:	ba 84       	ldd	r11, Y+10	; 0x0a
     c40:	cb 84       	ldd	r12, Y+11	; 0x0b
     c42:	d4 2c       	mov	r13, r4
     c44:	e5 2c       	mov	r14, r5
     c46:	fc 84       	ldd	r15, Y+12	; 0x0c
     c48:	03 2d       	mov	r16, r3
     c4a:	12 2d       	mov	r17, r2
     c4c:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__divdi3>
     c50:	2e 87       	std	Y+14, r18	; 0x0e
     c52:	3d 87       	std	Y+13, r19	; 0x0d
     c54:	49 83       	std	Y+1, r20	; 0x01
     c56:	5d 83       	std	Y+5, r21	; 0x05
     c58:	69 87       	std	Y+9, r22	; 0x09
     c5a:	7a 87       	std	Y+10, r23	; 0x0a
     c5c:	8b 87       	std	Y+11, r24	; 0x0b
     c5e:	9c 87       	std	Y+12, r25	; 0x0c
	var1 = (((long)dig_P9)*(p>>13)*(p>>13))>>25;
     c60:	0d e0       	ldi	r16, 0x0D	; 13
     c62:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
     c66:	82 2e       	mov	r8, r18
     c68:	93 2e       	mov	r9, r19
     c6a:	74 2e       	mov	r7, r20
     c6c:	65 2e       	mov	r6, r21
     c6e:	56 2e       	mov	r5, r22
     c70:	47 2e       	mov	r4, r23
     c72:	38 2e       	mov	r3, r24
     c74:	29 2e       	mov	r2, r25
     c76:	30 91 24 04 	lds	r19, 0x0424	; 0x800424 <dig_P9+0x1>
     c7a:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <dig_P9>
     c7e:	93 2f       	mov	r25, r19
     c80:	99 0f       	add	r25, r25
     c82:	99 0b       	sbc	r25, r25
     c84:	a8 2c       	mov	r10, r8
     c86:	b9 2c       	mov	r11, r9
     c88:	c7 2c       	mov	r12, r7
     c8a:	d6 2c       	mov	r13, r6
     c8c:	e5 2c       	mov	r14, r5
     c8e:	f4 2c       	mov	r15, r4
     c90:	03 2d       	mov	r16, r3
     c92:	12 2d       	mov	r17, r2
     c94:	49 2f       	mov	r20, r25
     c96:	59 2f       	mov	r21, r25
     c98:	69 2f       	mov	r22, r25
     c9a:	79 2f       	mov	r23, r25
     c9c:	89 2f       	mov	r24, r25
     c9e:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     ca2:	a2 2e       	mov	r10, r18
     ca4:	b3 2e       	mov	r11, r19
     ca6:	c4 2e       	mov	r12, r20
     ca8:	d5 2e       	mov	r13, r21
     caa:	e6 2e       	mov	r14, r22
     cac:	f7 2e       	mov	r15, r23
     cae:	08 2f       	mov	r16, r24
     cb0:	19 2f       	mov	r17, r25
     cb2:	28 2d       	mov	r18, r8
     cb4:	39 2d       	mov	r19, r9
     cb6:	47 2d       	mov	r20, r7
     cb8:	56 2d       	mov	r21, r6
     cba:	65 2d       	mov	r22, r5
     cbc:	74 2d       	mov	r23, r4
     cbe:	83 2d       	mov	r24, r3
     cc0:	92 2d       	mov	r25, r2
     cc2:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     cc6:	09 e1       	ldi	r16, 0x19	; 25
     cc8:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
     ccc:	a2 2e       	mov	r10, r18
     cce:	b3 2e       	mov	r11, r19
     cd0:	c4 2e       	mov	r12, r20
     cd2:	d5 2e       	mov	r13, r21
     cd4:	e6 2e       	mov	r14, r22
     cd6:	f7 2e       	mov	r15, r23
     cd8:	08 2f       	mov	r16, r24
     cda:	19 2f       	mov	r17, r25
	var2 = (((long)dig_P8)*p)>>19;
	p = ((p+var1+var2)>>8)+(((long)dig_P7)<<4);
     cdc:	2e 85       	ldd	r18, Y+14	; 0x0e
     cde:	3d 85       	ldd	r19, Y+13	; 0x0d
     ce0:	49 81       	ldd	r20, Y+1	; 0x01
     ce2:	5d 81       	ldd	r21, Y+5	; 0x05
     ce4:	69 85       	ldd	r22, Y+9	; 0x09
     ce6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ce8:	8b 85       	ldd	r24, Y+11	; 0x0b
     cea:	9c 85       	ldd	r25, Y+12	; 0x0c
     cec:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__adddi3>
     cf0:	22 2e       	mov	r2, r18
     cf2:	33 2e       	mov	r3, r19
     cf4:	44 2e       	mov	r4, r20
     cf6:	55 2e       	mov	r5, r21
     cf8:	66 2e       	mov	r6, r22
     cfa:	77 2e       	mov	r7, r23
     cfc:	88 2e       	mov	r8, r24
     cfe:	99 2e       	mov	r9, r25
		return 0;
	}
	p = 1048576 - adc_P;
	p = (((p<<31)-var2)*3125)/var1;
	var1 = (((long)dig_P9)*(p>>13)*(p>>13))>>25;
	var2 = (((long)dig_P8)*p)>>19;
     d00:	30 91 18 04 	lds	r19, 0x0418	; 0x800418 <dig_P8+0x1>
     d04:	20 91 17 04 	lds	r18, 0x0417	; 0x800417 <dig_P8>
     d08:	93 2f       	mov	r25, r19
     d0a:	99 0f       	add	r25, r25
     d0c:	99 0b       	sbc	r25, r25
     d0e:	ae 84       	ldd	r10, Y+14	; 0x0e
     d10:	bd 84       	ldd	r11, Y+13	; 0x0d
     d12:	c9 80       	ldd	r12, Y+1	; 0x01
     d14:	dd 80       	ldd	r13, Y+5	; 0x05
     d16:	e9 84       	ldd	r14, Y+9	; 0x09
     d18:	fa 84       	ldd	r15, Y+10	; 0x0a
     d1a:	0b 85       	ldd	r16, Y+11	; 0x0b
     d1c:	1c 85       	ldd	r17, Y+12	; 0x0c
     d1e:	49 2f       	mov	r20, r25
     d20:	59 2f       	mov	r21, r25
     d22:	69 2f       	mov	r22, r25
     d24:	79 2f       	mov	r23, r25
     d26:	89 2f       	mov	r24, r25
     d28:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     d2c:	03 e1       	ldi	r16, 0x13	; 19
     d2e:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
     d32:	a2 2e       	mov	r10, r18
     d34:	b3 2e       	mov	r11, r19
     d36:	c4 2e       	mov	r12, r20
     d38:	d5 2e       	mov	r13, r21
     d3a:	e6 2e       	mov	r14, r22
     d3c:	f7 2e       	mov	r15, r23
     d3e:	08 2f       	mov	r16, r24
     d40:	19 2f       	mov	r17, r25
	p = ((p+var1+var2)>>8)+(((long)dig_P7)<<4);
     d42:	22 2d       	mov	r18, r2
     d44:	33 2d       	mov	r19, r3
     d46:	44 2d       	mov	r20, r4
     d48:	55 2d       	mov	r21, r5
     d4a:	66 2d       	mov	r22, r6
     d4c:	77 2d       	mov	r23, r7
     d4e:	88 2d       	mov	r24, r8
     d50:	99 2d       	mov	r25, r9
     d52:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__adddi3>
     d56:	08 e0       	ldi	r16, 0x08	; 8
     d58:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
     d5c:	40 90 57 03 	lds	r4, 0x0357	; 0x800357 <dig_P7>
     d60:	50 90 58 03 	lds	r5, 0x0358	; 0x800358 <dig_P7+0x1>
     d64:	05 2c       	mov	r0, r5
     d66:	00 0c       	add	r0, r0
     d68:	66 08       	sbc	r6, r6
     d6a:	77 08       	sbc	r7, r7
     d6c:	44 0c       	add	r4, r4
     d6e:	55 1c       	adc	r5, r5
     d70:	66 1c       	adc	r6, r6
     d72:	77 1c       	adc	r7, r7
     d74:	44 0c       	add	r4, r4
     d76:	55 1c       	adc	r5, r5
     d78:	66 1c       	adc	r6, r6
     d7a:	77 1c       	adc	r7, r7
     d7c:	44 0c       	add	r4, r4
     d7e:	55 1c       	adc	r5, r5
     d80:	66 1c       	adc	r6, r6
     d82:	77 1c       	adc	r7, r7
     d84:	44 0c       	add	r4, r4
     d86:	55 1c       	adc	r5, r5
     d88:	66 1c       	adc	r6, r6
     d8a:	77 1c       	adc	r7, r7
     d8c:	83 01       	movw	r16, r6
     d8e:	72 01       	movw	r14, r4
     d90:	11 0f       	add	r17, r17
     d92:	ee 08       	sbc	r14, r14
     d94:	fe 2c       	mov	r15, r14
     d96:	87 01       	movw	r16, r14
     d98:	e9 82       	std	Y+1, r14	; 0x01
     d9a:	fa 82       	std	Y+2, r15	; 0x02
     d9c:	0b 83       	std	Y+3, r16	; 0x03
     d9e:	1c 83       	std	Y+4, r17	; 0x04
     da0:	a4 2c       	mov	r10, r4
     da2:	b5 2c       	mov	r11, r5
     da4:	c6 2c       	mov	r12, r6
     da6:	d7 2c       	mov	r13, r7
     da8:	e9 80       	ldd	r14, Y+1	; 0x01
     daa:	fe 2c       	mov	r15, r14
     dac:	0e 2d       	mov	r16, r14
     dae:	1e 2d       	mov	r17, r14
     db0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__adddi3>
	return(long)p;
     db4:	62 2f       	mov	r22, r18
     db6:	73 2f       	mov	r23, r19
     db8:	84 2f       	mov	r24, r20
     dba:	95 2f       	mov	r25, r21
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <BME280_compensate_P_int64+0x4a6>
	var2 = var2 + (((long long)dig_P4)<<35);
	var1 = ((var1*var1*(long)dig_P3)>>8)+((var1*(long)dig_P2)<<12);
	var1 = (((((long long)1)<<47)+var1))*((long long)dig_P1)>>33;
	if (var1 == 0)
	{
		return 0;
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
	p = (((p<<31)-var2)*3125)/var1;
	var1 = (((long)dig_P9)*(p>>13)*(p>>13))>>25;
	var2 = (((long)dig_P8)*p)>>19;
	p = ((p+var1+var2)>>8)+(((long)dig_P7)<<4);
	return(long)p;
}
     dc6:	6e 96       	adiw	r28, 0x1e	; 30
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	af 90       	pop	r10
     de6:	9f 90       	pop	r9
     de8:	8f 90       	pop	r8
     dea:	7f 90       	pop	r7
     dec:	6f 90       	pop	r6
     dee:	5f 90       	pop	r5
     df0:	4f 90       	pop	r4
     df2:	3f 90       	pop	r3
     df4:	2f 90       	pop	r2
     df6:	08 95       	ret

00000df8 <bme280_compensate_H_int32>:

// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of ?47445? represents 47445/1024 = 46.333 %RH
long bme280_compensate_H_int32(long adc_H)
{
     df8:	2f 92       	push	r2
     dfa:	3f 92       	push	r3
     dfc:	4f 92       	push	r4
     dfe:	5f 92       	push	r5
     e00:	6f 92       	push	r6
     e02:	7f 92       	push	r7
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	67 97       	sbiw	r28, 0x17	; 23
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	2b 01       	movw	r4, r22
     e2e:	3c 01       	movw	r6, r24
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
     e30:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <t_fine>
     e34:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <t_fine+0x1>
     e38:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <t_fine+0x2>
     e3c:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <t_fine+0x3>
     e40:	6c 01       	movw	r12, r24
     e42:	7d 01       	movw	r14, r26
     e44:	ff 0c       	add	r15, r15
     e46:	cc 08       	sbc	r12, r12
     e48:	dc 2c       	mov	r13, r12
     e4a:	76 01       	movw	r14, r12
     e4c:	28 2f       	mov	r18, r24
     e4e:	39 2f       	mov	r19, r25
     e50:	4a 2f       	mov	r20, r26
     e52:	5b 2f       	mov	r21, r27
     e54:	6c 2d       	mov	r22, r12
     e56:	7c 2d       	mov	r23, r12
     e58:	8c 2d       	mov	r24, r12
     e5a:	9c 2d       	mov	r25, r12
     e5c:	3c 52       	subi	r19, 0x2C	; 44
     e5e:	41 40       	sbci	r20, 0x01	; 1
     e60:	51 09       	sbc	r21, r1
     e62:	61 09       	sbc	r22, r1
     e64:	71 09       	sbc	r23, r1
     e66:	81 09       	sbc	r24, r1
     e68:	91 09       	sbc	r25, r1
     e6a:	2f 8b       	std	Y+23, r18	; 0x17
     e6c:	3e 8b       	std	Y+22, r19	; 0x16
     e6e:	49 83       	std	Y+1, r20	; 0x01
     e70:	59 87       	std	Y+9, r21	; 0x09
     e72:	6a 87       	std	Y+10, r22	; 0x0a
     e74:	7b 87       	std	Y+11, r23	; 0x0b
     e76:	8c 87       	std	Y+12, r24	; 0x0c
     e78:	9d 87       	std	Y+13, r25	; 0x0d
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
     e7a:	03 2e       	mov	r0, r19
     e7c:	3e e0       	ldi	r19, 0x0E	; 14
     e7e:	44 0c       	add	r4, r4
     e80:	55 1c       	adc	r5, r5
     e82:	66 1c       	adc	r6, r6
     e84:	77 1c       	adc	r7, r7
     e86:	3a 95       	dec	r19
     e88:	d1 f7       	brne	.-12     	; 0xe7e <bme280_compensate_H_int32+0x86>
     e8a:	30 2d       	mov	r19, r0
     e8c:	53 01       	movw	r10, r6
     e8e:	42 01       	movw	r8, r4
     e90:	bb 0c       	add	r11, r11
     e92:	88 08       	sbc	r8, r8
     e94:	98 2c       	mov	r9, r8
     e96:	54 01       	movw	r10, r8
     e98:	30 91 84 03 	lds	r19, 0x0384	; 0x800384 <dig_H4+0x1>
     e9c:	20 91 83 03 	lds	r18, 0x0383	; 0x800383 <dig_H4>
     ea0:	93 2f       	mov	r25, r19
     ea2:	99 0f       	add	r25, r25
     ea4:	99 0b       	sbc	r25, r25
     ea6:	49 2f       	mov	r20, r25
     ea8:	59 2f       	mov	r21, r25
     eaa:	69 2f       	mov	r22, r25
     eac:	79 2f       	mov	r23, r25
     eae:	89 2f       	mov	r24, r25
     eb0:	04 e1       	ldi	r16, 0x14	; 20
     eb2:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__ashldi3>
     eb6:	f2 2f       	mov	r31, r18
     eb8:	e3 2f       	mov	r30, r19
     eba:	c4 2e       	mov	r12, r20
     ebc:	d5 2e       	mov	r13, r21
     ebe:	e6 2e       	mov	r14, r22
     ec0:	f7 2e       	mov	r15, r23
     ec2:	08 2f       	mov	r16, r24
     ec4:	19 2f       	mov	r17, r25
     ec6:	24 2d       	mov	r18, r4
     ec8:	35 2d       	mov	r19, r5
     eca:	46 2d       	mov	r20, r6
     ecc:	57 2d       	mov	r21, r7
     ece:	68 2d       	mov	r22, r8
     ed0:	78 2d       	mov	r23, r8
     ed2:	88 2d       	mov	r24, r8
     ed4:	98 2d       	mov	r25, r8
     ed6:	af 2e       	mov	r10, r31
     ed8:	be 2e       	mov	r11, r30
     eda:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__subdi3>
     ede:	22 2e       	mov	r2, r18
     ee0:	33 2e       	mov	r3, r19
     ee2:	44 2e       	mov	r4, r20
     ee4:	55 2e       	mov	r5, r21
     ee6:	66 2e       	mov	r6, r22
     ee8:	77 2e       	mov	r7, r23
     eea:	88 2e       	mov	r8, r24
     eec:	99 2e       	mov	r9, r25
     eee:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <dig_H5+0x1>
     ef2:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <dig_H5>
     ef6:	93 2f       	mov	r25, r19
     ef8:	99 0f       	add	r25, r25
     efa:	99 0b       	sbc	r25, r25
     efc:	af 88       	ldd	r10, Y+23	; 0x17
     efe:	be 88       	ldd	r11, Y+22	; 0x16
     f00:	c9 80       	ldd	r12, Y+1	; 0x01
     f02:	d9 84       	ldd	r13, Y+9	; 0x09
     f04:	ea 84       	ldd	r14, Y+10	; 0x0a
     f06:	fb 84       	ldd	r15, Y+11	; 0x0b
     f08:	0c 85       	ldd	r16, Y+12	; 0x0c
     f0a:	1d 85       	ldd	r17, Y+13	; 0x0d
     f0c:	49 2f       	mov	r20, r25
     f0e:	59 2f       	mov	r21, r25
     f10:	69 2f       	mov	r22, r25
     f12:	79 2f       	mov	r23, r25
     f14:	89 2f       	mov	r24, r25
     f16:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     f1a:	a2 2e       	mov	r10, r18
     f1c:	b3 2e       	mov	r11, r19
     f1e:	c4 2e       	mov	r12, r20
     f20:	d5 2e       	mov	r13, r21
     f22:	e6 2e       	mov	r14, r22
     f24:	f7 2e       	mov	r15, r23
     f26:	08 2f       	mov	r16, r24
     f28:	19 2f       	mov	r17, r25
     f2a:	22 2d       	mov	r18, r2
     f2c:	33 2d       	mov	r19, r3
     f2e:	44 2d       	mov	r20, r4
     f30:	55 2d       	mov	r21, r5
     f32:	66 2d       	mov	r22, r6
     f34:	77 2d       	mov	r23, r7
     f36:	88 2d       	mov	r24, r8
     f38:	99 2d       	mov	r25, r9
     f3a:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__subdi3>
     f3e:	30 5c       	subi	r19, 0xC0	; 192
     f40:	4f 4f       	sbci	r20, 0xFF	; 255
     f42:	5f 4f       	sbci	r21, 0xFF	; 255
     f44:	6f 4f       	sbci	r22, 0xFF	; 255
     f46:	7f 4f       	sbci	r23, 0xFF	; 255
     f48:	8f 4f       	sbci	r24, 0xFF	; 255
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
     f4c:	0f e0       	ldi	r16, 0x0F	; 15
     f4e:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
     f52:	2e 87       	std	Y+14, r18	; 0x0e
     f54:	3f 87       	std	Y+15, r19	; 0x0f
     f56:	48 8b       	std	Y+16, r20	; 0x10
     f58:	59 8b       	std	Y+17, r21	; 0x11
     f5a:	6a 8b       	std	Y+18, r22	; 0x12
     f5c:	7b 8b       	std	Y+19, r23	; 0x13
     f5e:	8c 8b       	std	Y+20, r24	; 0x14
     f60:	9d 8b       	std	Y+21, r25	; 0x15
     f62:	30 91 dc 03 	lds	r19, 0x03DC	; 0x8003dc <dig_H6+0x1>
     f66:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <dig_H6>
     f6a:	93 2f       	mov	r25, r19
     f6c:	99 0f       	add	r25, r25
     f6e:	99 0b       	sbc	r25, r25
     f70:	af 88       	ldd	r10, Y+23	; 0x17
     f72:	be 88       	ldd	r11, Y+22	; 0x16
     f74:	c9 80       	ldd	r12, Y+1	; 0x01
     f76:	d9 84       	ldd	r13, Y+9	; 0x09
     f78:	ea 84       	ldd	r14, Y+10	; 0x0a
     f7a:	fb 84       	ldd	r15, Y+11	; 0x0b
     f7c:	0c 85       	ldd	r16, Y+12	; 0x0c
     f7e:	1d 85       	ldd	r17, Y+13	; 0x0d
     f80:	49 2f       	mov	r20, r25
     f82:	59 2f       	mov	r21, r25
     f84:	69 2f       	mov	r22, r25
     f86:	79 2f       	mov	r23, r25
     f88:	89 2f       	mov	r24, r25
     f8a:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
     f8e:	0a e0       	ldi	r16, 0x0A	; 10
     f90:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
     f94:	82 2e       	mov	r8, r18
     f96:	93 2e       	mov	r9, r19
     f98:	74 2e       	mov	r7, r20
     f9a:	65 2e       	mov	r6, r21
     f9c:	56 2e       	mov	r5, r22
     f9e:	47 2e       	mov	r4, r23
     fa0:	38 2e       	mov	r3, r24
     fa2:	29 2e       	mov	r2, r25
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
     fa4:	40 91 1d 04 	lds	r20, 0x041D	; 0x80041d <dig_H3>
     fa8:	50 91 1e 04 	lds	r21, 0x041E	; 0x80041e <dig_H3+0x1>
long bme280_compensate_H_int32(long adc_H)
{
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
     fac:	0c 85       	ldd	r16, Y+12	; 0x0c
     fae:	24 2f       	mov	r18, r20
     fb0:	35 2f       	mov	r19, r21
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
     fc2:	0b e0       	ldi	r16, 0x0B	; 11
     fc4:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
     fc8:	30 58       	subi	r19, 0x80	; 128
     fca:	4f 4f       	sbci	r20, 0xFF	; 255
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	6f 4f       	sbci	r22, 0xFF	; 255
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	8f 4f       	sbci	r24, 0xFF	; 255
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
long bme280_compensate_H_int32(long adc_H)
{
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
     fd6:	a2 2e       	mov	r10, r18
     fd8:	b3 2e       	mov	r11, r19
     fda:	c4 2e       	mov	r12, r20
     fdc:	d5 2e       	mov	r13, r21
     fde:	e6 2e       	mov	r14, r22
     fe0:	f7 2e       	mov	r15, r23
     fe2:	08 2f       	mov	r16, r24
     fe4:	19 2f       	mov	r17, r25
     fe6:	28 2d       	mov	r18, r8
     fe8:	39 2d       	mov	r19, r9
     fea:	47 2d       	mov	r20, r7
     fec:	56 2d       	mov	r21, r6
     fee:	65 2d       	mov	r22, r5
     ff0:	74 2d       	mov	r23, r4
     ff2:	83 2d       	mov	r24, r3
     ff4:	92 2d       	mov	r25, r2
     ff6:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
     ffa:	0a e0       	ldi	r16, 0x0A	; 10
     ffc:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
    1000:	40 5e       	subi	r20, 0xE0	; 224
    1002:	5f 4f       	sbci	r21, 0xFF	; 255
    1004:	6f 4f       	sbci	r22, 0xFF	; 255
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	8f 4f       	sbci	r24, 0xFF	; 255
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
	((long long)dig_H2) + 8192) >> 14));
    100c:	b0 90 2a 04 	lds	r11, 0x042A	; 0x80042a <dig_H2+0x1>
    1010:	a0 90 29 04 	lds	r10, 0x0429	; 0x800429 <dig_H2>
    1014:	1b 2d       	mov	r17, r11
    1016:	11 0f       	add	r17, r17
    1018:	11 0b       	sbc	r17, r17
{
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
    101a:	c1 2e       	mov	r12, r17
    101c:	d1 2e       	mov	r13, r17
    101e:	e1 2e       	mov	r14, r17
    1020:	f1 2e       	mov	r15, r17
    1022:	01 2f       	mov	r16, r17
    1024:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
	((long long)dig_H2) + 8192) >> 14));
    1028:	30 5e       	subi	r19, 0xE0	; 224
    102a:	4f 4f       	sbci	r20, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	6f 4f       	sbci	r22, 0xFF	; 255
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	8f 4f       	sbci	r24, 0xFF	; 255
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	0e e0       	ldi	r16, 0x0E	; 14
    1038:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
// Output value of ?47445? represents 47445/1024 = 46.333 %RH
long bme280_compensate_H_int32(long adc_H)
{
	long long v_x1_u32r;
	v_x1_u32r = (t_fine - ((long long)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long long)dig_H4) << 20) - (((long long)dig_H5) * v_x1_u32r)) +
    103c:	a2 2e       	mov	r10, r18
    103e:	b3 2e       	mov	r11, r19
    1040:	c4 2e       	mov	r12, r20
    1042:	d5 2e       	mov	r13, r21
    1044:	e6 2e       	mov	r14, r22
    1046:	f7 2e       	mov	r15, r23
    1048:	08 2f       	mov	r16, r24
    104a:	19 2f       	mov	r17, r25
    104c:	2e 85       	ldd	r18, Y+14	; 0x0e
    104e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1050:	48 89       	ldd	r20, Y+16	; 0x10
    1052:	59 89       	ldd	r21, Y+17	; 0x11
    1054:	6a 89       	ldd	r22, Y+18	; 0x12
    1056:	7b 89       	ldd	r23, Y+19	; 0x13
    1058:	8c 89       	ldd	r24, Y+20	; 0x14
    105a:	9d 89       	ldd	r25, Y+21	; 0x15
    105c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
    1060:	42 2e       	mov	r4, r18
    1062:	53 2e       	mov	r5, r19
    1064:	64 2e       	mov	r6, r20
    1066:	75 2e       	mov	r7, r21
    1068:	86 2e       	mov	r8, r22
    106a:	97 2e       	mov	r9, r23
    106c:	28 2e       	mov	r2, r24
    106e:	39 2e       	mov	r3, r25
	((long long)16384)) >> 15) * (((((((v_x1_u32r * ((long long)dig_H6)) >> 10) * (((v_x1_u32r *
	((long long)dig_H3)) >> 11) + ((long long)32768))) >> 10) + ((long long)2097152)) *
	((long long)dig_H2) + 8192) >> 14));
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((long long)dig_H1)) >> 4));
    1070:	0f e0       	ldi	r16, 0x0F	; 15
    1072:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
    1076:	a2 2e       	mov	r10, r18
    1078:	b3 2e       	mov	r11, r19
    107a:	c4 2e       	mov	r12, r20
    107c:	d5 2e       	mov	r13, r21
    107e:	e6 2e       	mov	r14, r22
    1080:	f7 2e       	mov	r15, r23
    1082:	08 2f       	mov	r16, r24
    1084:	19 2f       	mov	r17, r25
    1086:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
    108a:	07 e0       	ldi	r16, 0x07	; 7
    108c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
    1090:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <dig_H1>
    1094:	f0 91 b6 03 	lds	r31, 0x03B6	; 0x8003b6 <dig_H1+0x1>
    1098:	5f 01       	movw	r10, r30
    109a:	c1 2c       	mov	r12, r1
    109c:	d1 2c       	mov	r13, r1
    109e:	e1 2c       	mov	r14, r1
    10a0:	f1 2c       	mov	r15, r1
    10a2:	87 01       	movw	r16, r14
    10a4:	e9 83       	std	Y+1, r30	; 0x01
    10a6:	ba 82       	std	Y+2, r11	; 0x02
    10a8:	cb 82       	std	Y+3, r12	; 0x03
    10aa:	dc 82       	std	Y+4, r13	; 0x04
    10ac:	ed 82       	std	Y+5, r14	; 0x05
    10ae:	fe 82       	std	Y+6, r15	; 0x06
    10b0:	0f 83       	std	Y+7, r16	; 0x07
    10b2:	18 87       	std	Y+8, r17	; 0x08
    10b4:	c1 2c       	mov	r12, r1
    10b6:	d1 2c       	mov	r13, r1
    10b8:	e1 2c       	mov	r14, r1
    10ba:	f1 2c       	mov	r15, r1
    10bc:	00 e0       	ldi	r16, 0x00	; 0
    10be:	10 e0       	ldi	r17, 0x00	; 0
    10c0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muldi3>
    10c4:	04 e0       	ldi	r16, 0x04	; 4
    10c6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
    10ca:	a2 2e       	mov	r10, r18
    10cc:	b3 2e       	mov	r11, r19
    10ce:	c4 2e       	mov	r12, r20
    10d0:	d5 2e       	mov	r13, r21
    10d2:	e6 2e       	mov	r14, r22
    10d4:	f7 2e       	mov	r15, r23
    10d6:	08 2f       	mov	r16, r24
    10d8:	19 2f       	mov	r17, r25
    10da:	24 2d       	mov	r18, r4
    10dc:	35 2d       	mov	r19, r5
    10de:	46 2d       	mov	r20, r6
    10e0:	57 2d       	mov	r21, r7
    10e2:	68 2d       	mov	r22, r8
    10e4:	79 2d       	mov	r23, r9
    10e6:	82 2d       	mov	r24, r2
    10e8:	93 2d       	mov	r25, r3
    10ea:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__subdi3>
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
    10ee:	f2 2e       	mov	r15, r18
    10f0:	03 2f       	mov	r16, r19
    10f2:	14 2f       	mov	r17, r20
    10f4:	65 2e       	mov	r6, r21
    10f6:	76 2e       	mov	r7, r22
    10f8:	b7 2f       	mov	r27, r23
    10fa:	f8 2f       	mov	r31, r24
    10fc:	e9 2f       	mov	r30, r25
    10fe:	a0 e0       	ldi	r26, 0x00	; 0
    1100:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__cmpdi2_s8>
    1104:	44 f4       	brge	.+16     	; 0x1116 <bme280_compensate_H_int32+0x31e>
    1106:	f1 2c       	mov	r15, r1
    1108:	00 e0       	ldi	r16, 0x00	; 0
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	61 2c       	mov	r6, r1
    110e:	71 2c       	mov	r7, r1
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	e0 e0       	ldi	r30, 0x00	; 0
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
    1116:	8f 2c       	mov	r8, r15
    1118:	90 2e       	mov	r9, r16
    111a:	a1 2e       	mov	r10, r17
    111c:	b6 2c       	mov	r11, r6
    111e:	c7 2c       	mov	r12, r7
    1120:	db 2e       	mov	r13, r27
    1122:	ef 2e       	mov	r14, r31
    1124:	ae 2f       	mov	r26, r30
    1126:	2f 2d       	mov	r18, r15
    1128:	30 2f       	mov	r19, r16
    112a:	41 2f       	mov	r20, r17
    112c:	56 2d       	mov	r21, r6
    112e:	67 2d       	mov	r22, r7
    1130:	7b 2f       	mov	r23, r27
    1132:	8f 2f       	mov	r24, r31
    1134:	9e 2f       	mov	r25, r30
    1136:	21 15       	cp	r18, r1
    1138:	31 05       	cpc	r19, r1
    113a:	41 05       	cpc	r20, r1
    113c:	59 41       	sbci	r21, 0x19	; 25
    113e:	61 05       	cpc	r22, r1
    1140:	71 05       	cpc	r23, r1
    1142:	81 05       	cpc	r24, r1
    1144:	91 05       	cpc	r25, r1
    1146:	61 f0       	breq	.+24     	; 0x1160 <bme280_compensate_H_int32+0x368>
    1148:	5c f0       	brlt	.+22     	; 0x1160 <bme280_compensate_H_int32+0x368>
    114a:	81 2c       	mov	r8, r1
    114c:	91 2c       	mov	r9, r1
    114e:	a1 2c       	mov	r10, r1
    1150:	0f 2e       	mov	r0, r31
    1152:	f9 e1       	ldi	r31, 0x19	; 25
    1154:	bf 2e       	mov	r11, r31
    1156:	f0 2d       	mov	r31, r0
    1158:	c1 2c       	mov	r12, r1
    115a:	d1 2c       	mov	r13, r1
    115c:	e1 2c       	mov	r14, r1
    115e:	a0 e0       	ldi	r26, 0x00	; 0
	return (long)(v_x1_u32r>>12);
    1160:	28 2d       	mov	r18, r8
    1162:	39 2d       	mov	r19, r9
    1164:	4a 2d       	mov	r20, r10
    1166:	5b 2d       	mov	r21, r11
    1168:	6c 2d       	mov	r22, r12
    116a:	7d 2d       	mov	r23, r13
    116c:	8e 2d       	mov	r24, r14
    116e:	9a 2f       	mov	r25, r26
    1170:	0c e0       	ldi	r16, 0x0C	; 12
    1172:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ashrdi3>
    1176:	62 2f       	mov	r22, r18
    1178:	73 2f       	mov	r23, r19
    117a:	84 2f       	mov	r24, r20
    117c:	95 2f       	mov	r25, r21
}
    117e:	67 96       	adiw	r28, 0x17	; 23
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	bf 90       	pop	r11
    119c:	af 90       	pop	r10
    119e:	9f 90       	pop	r9
    11a0:	8f 90       	pop	r8
    11a2:	7f 90       	pop	r7
    11a4:	6f 90       	pop	r6
    11a6:	5f 90       	pop	r5
    11a8:	4f 90       	pop	r4
    11aa:	3f 90       	pop	r3
    11ac:	2f 90       	pop	r2
    11ae:	08 95       	ret

000011b0 <canary_io_pin_initialization>:
	}
}

void canary_io_pin_initialization(void) {
	// For Canary, Port B pins 0, 1, and 2 are the red, green, and blue LED feedback pins
	DDRB  = 0x07;
    11b0:	87 e0       	ldi	r24, 0x07	; 7
    11b2:	84 b9       	out	0x04, r24	; 4
	//
	// Set all LEDs off
	PORTB &= !0x07;
    11b4:	85 b1       	in	r24, 0x05	; 5
    11b6:	15 b8       	out	0x05, r1	; 5
	// The Canary start button is on Port B pin 3.  Set the pull-up resistor for pin 3:
	SetBit(PORTB, PORTB3);
    11b8:	2b 9a       	sbi	0x05, 3	; 5
	//
	// Set the Data Direction Register and pullups for the TWI system
	SetBit(DDRC, PORTC0); // Set clock as output
    11ba:	38 9a       	sbi	0x07, 0	; 7
	SetBit(DDRC, PORTC1); // Data Line as output
    11bc:	39 9a       	sbi	0x07, 1	; 7
	SetBit(PORTC, PORTC0); //Set pull-up resistor for clock
    11be:	40 9a       	sbi	0x08, 0	; 8
	SetBit(PORTC, PORTC1); //Set pull-up resistor for data
    11c0:	41 9a       	sbi	0x08, 1	; 8
    11c2:	08 95       	ret

000011c4 <get_gas_sensor_limits>:
#include "gas_sensors.h"

/********************************************************************************
						Functions
********************************************************************************/
void get_gas_sensor_limits(void) {
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
	This just sets some upper and lower bounds for the initialization code to use.
	Actual values will need to be derived empirically (using the UCAR test chamber) */
	for (ii=0; ii<5; ii++)
	{
		gas_sensor_boundaries[ii][0] = 0;
		gas_sensor_boundaries[ii][1] = 1023;
    11c8:	2f ef       	ldi	r18, 0xFF	; 255
    11ca:	33 e0       	ldi	r19, 0x03	; 3
	/* THIS IS A TEMPORARY ROUTINE, to be replaced by the EEPROM read commented out below.
	This just sets some upper and lower bounds for the initialization code to use.
	Actual values will need to be derived empirically (using the UCAR test chamber) */
	for (ii=0; ii<5; ii++)
	{
		gas_sensor_boundaries[ii][0] = 0;
    11cc:	fc 01       	movw	r30, r24
    11ce:	ee 0f       	add	r30, r30
    11d0:	ff 1f       	adc	r31, r31
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	e4 59       	subi	r30, 0x94	; 148
    11d8:	fc 4f       	sbci	r31, 0xFC	; 252
    11da:	11 82       	std	Z+1, r1	; 0x01
    11dc:	10 82       	st	Z, r1
		gas_sensor_boundaries[ii][1] = 1023;
    11de:	33 83       	std	Z+3, r19	; 0x03
    11e0:	22 83       	std	Z+2, r18	; 0x02
    11e2:	01 96       	adiw	r24, 0x01	; 1
void get_gas_sensor_limits(void) {
	uint8_t ii;
	/* THIS IS A TEMPORARY ROUTINE, to be replaced by the EEPROM read commented out below.
	This just sets some upper and lower bounds for the initialization code to use.
	Actual values will need to be derived empirically (using the UCAR test chamber) */
	for (ii=0; ii<5; ii++)
    11e4:	85 30       	cpi	r24, 0x05	; 5
    11e6:	91 05       	cpc	r25, r1
    11e8:	89 f7       	brne	.-30     	; 0x11cc <get_gas_sensor_limits+0x8>
	{
		gas_sensor_boundaries[ii][0] = 0;
		gas_sensor_boundaries[ii][1] = 1023;
	}
}
    11ea:	08 95       	ret

000011ec <get_gas_sensor_limits_from_EEPROM>:

void get_gas_sensor_limits_from_EEPROM(void) {
    11ec:	ef 92       	push	r14
    11ee:	ff 92       	push	r15
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	0f 2e       	mov	r0, r31
    11fa:	f2 e4       	ldi	r31, 0x42	; 66
    11fc:	ef 2e       	mov	r14, r31
    11fe:	f3 e0       	ldi	r31, 0x03	; 3
    1200:	ff 2e       	mov	r15, r31
    1202:	f0 2d       	mov	r31, r0
    1204:	00 e0       	ldi	r16, 0x00	; 0
    1206:	10 e0       	ldi	r17, 0x00	; 0
	// This routine reads the empirically derived upper and lower limits
	// for the gas sensors from EEPROM.  We can also use defined constants
	// if we need to...
	for (ii=0; ii<5; ii++)
	{
		gas_sensor_boundaries[ii][0] = eeprom_read_word(&gas_sensor_boundary_constants[ii][0]);
    1208:	c7 01       	movw	r24, r14
    120a:	0e 94 40 19 	call	0x3280	; 0x3280 <eeprom_read_word>
    120e:	e8 01       	movw	r28, r16
    1210:	cc 0f       	add	r28, r28
    1212:	dd 1f       	adc	r29, r29
    1214:	cc 0f       	add	r28, r28
    1216:	dd 1f       	adc	r29, r29
    1218:	c4 59       	subi	r28, 0x94	; 148
    121a:	dc 4f       	sbci	r29, 0xFC	; 252
    121c:	99 83       	std	Y+1, r25	; 0x01
    121e:	88 83       	st	Y, r24
		gas_sensor_boundaries[ii][1] = eeprom_read_word(&gas_sensor_boundary_constants[ii][1]);
    1220:	c7 01       	movw	r24, r14
    1222:	02 96       	adiw	r24, 0x02	; 2
    1224:	0e 94 40 19 	call	0x3280	; 0x3280 <eeprom_read_word>
    1228:	9b 83       	std	Y+3, r25	; 0x03
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	0f 5f       	subi	r16, 0xFF	; 255
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	84 e0       	ldi	r24, 0x04	; 4
    1232:	e8 0e       	add	r14, r24
    1234:	f1 1c       	adc	r15, r1
void get_gas_sensor_limits_from_EEPROM(void) {
	uint8_t ii;
	// This routine reads the empirically derived upper and lower limits
	// for the gas sensors from EEPROM.  We can also use defined constants
	// if we need to...
	for (ii=0; ii<5; ii++)
    1236:	05 30       	cpi	r16, 0x05	; 5
    1238:	11 05       	cpc	r17, r1
    123a:	31 f7       	brne	.-52     	; 0x1208 <get_gas_sensor_limits_from_EEPROM+0x1c>
	{
		gas_sensor_boundaries[ii][0] = eeprom_read_word(&gas_sensor_boundary_constants[ii][0]);
		gas_sensor_boundaries[ii][1] = eeprom_read_word(&gas_sensor_boundary_constants[ii][1]);
	}
}
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	08 95       	ret

0000124a <gas_sensors_init>:

void gas_sensors_init(void)
{
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	1f 92       	push	r1
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t sensor_id;
	int16_t ADC_result;
	
	// Clear our error trackers
	gas_sensor_initialization_errors=0; // Keeps track (by bit) of errors we've encountered.
    1264:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <gas_sensor_initialization_errors>
	gas_sensor_operational_errors=0;  // Keeps track (by bit) of errors we've encountered.
    1268:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <gas_sensor_operational_errors>
	// Get the upper and lower boundaries on the gas sensors...
	// The first cal is just to test the EEPROM code
	get_gas_sensor_limits_from_EEPROM();
    126c:	bf df       	rcall	.-130    	; 0x11ec <get_gas_sensor_limits_from_EEPROM>
	// This second cal is temporary and simply initializes the array to usable values...
	get_gas_sensor_limits();
    126e:	aa df       	rcall	.-172    	; 0x11c4 <get_gas_sensor_limits>
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
    1270:	ea e7       	ldi	r30, 0x7A	; 122
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 68       	ori	r24, 0x80	; 128
    1278:	80 83       	st	Z, r24
	
	
	
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
    127a:	19 82       	std	Y+1, r1	; 0x01
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	85 30       	cpi	r24, 0x05	; 5
    1280:	08 f0       	brcs	.+2      	; 0x1284 <gas_sensors_init+0x3a>
    1282:	52 c0       	rjmp	.+164    	; 0x1328 <gas_sensors_init+0xde>
	{
		ADC_SetMux(sensor_id);
		// Start conversion
		SetBit(ADCSRA, ADSC);
    1284:	0a e7       	ldi	r16, 0x7A	; 122
    1286:	10 e0       	ldi	r17, 0x00	; 0
		while (BitIsClear(ADCSRA, ADIF))
		{
			// Wait for conversion to be complete
		}
		// Read result
		ADC_result = ADC;
    1288:	0f 2e       	mov	r0, r31
    128a:	f8 e7       	ldi	r31, 0x78	; 120
    128c:	ef 2e       	mov	r14, r31
    128e:	f1 2c       	mov	r15, r1
    1290:	f0 2d       	mov	r31, r0
		// sen0 = ADC_result;
		// Test the reading to ensure it is within acceptable boundaries
		if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
    1292:	bb 24       	eor	r11, r11
    1294:	b3 94       	inc	r11
    1296:	a1 2c       	mov	r10, r1
		{
			SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
    1298:	cc 24       	eor	r12, r12
    129a:	c3 94       	inc	r12
    129c:	d1 2c       	mov	r13, r1
	
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
	{
		ADC_SetMux(sensor_id);
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	0e 94 b8 00 	call	0x170	; 0x170 <ADC_SetMux>
		// Start conversion
		SetBit(ADCSRA, ADSC);
    12a4:	f8 01       	movw	r30, r16
    12a6:	80 81       	ld	r24, Z
    12a8:	80 64       	ori	r24, 0x40	; 64
    12aa:	80 83       	st	Z, r24
		while (BitIsClear(ADCSRA, ADIF))
    12ac:	f8 01       	movw	r30, r16
    12ae:	80 81       	ld	r24, Z
    12b0:	84 ff       	sbrs	r24, 4
    12b2:	fc cf       	rjmp	.-8      	; 0x12ac <gas_sensors_init+0x62>
		{
			// Wait for conversion to be complete
		}
		// Read result
		ADC_result = ADC;
    12b4:	f7 01       	movw	r30, r14
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
		// sen0 = ADC_result;
		// Test the reading to ensure it is within acceptable boundaries
		if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
    12ba:	e9 81       	ldd	r30, Y+1	; 0x01
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	ee 0f       	add	r30, r30
    12c0:	ff 1f       	adc	r31, r31
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	e4 59       	subi	r30, 0x94	; 148
    12c8:	fc 4f       	sbci	r31, 0xFC	; 252
    12ca:	20 81       	ld	r18, Z
    12cc:	31 81       	ldd	r19, Z+1	; 0x01
    12ce:	e9 81       	ldd	r30, Y+1	; 0x01
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	ee 0f       	add	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	e4 59       	subi	r30, 0x94	; 148
    12dc:	fc 4f       	sbci	r31, 0xFC	; 252
    12de:	62 81       	ldd	r22, Z+2	; 0x02
    12e0:	73 81       	ldd	r23, Z+3	; 0x03
    12e2:	4b 2d       	mov	r20, r11
    12e4:	68 17       	cp	r22, r24
    12e6:	79 07       	cpc	r23, r25
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <gas_sensors_init+0xa2>
    12ea:	4a 2d       	mov	r20, r10
    12ec:	41 11       	cpse	r20, r1
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <gas_sensors_init+0xb4>
    12f0:	4b 2d       	mov	r20, r11
    12f2:	82 17       	cp	r24, r18
    12f4:	93 07       	cpc	r25, r19
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <gas_sensors_init+0xb0>
    12f8:	4a 2d       	mov	r20, r10
    12fa:	44 23       	and	r20, r20
    12fc:	71 f0       	breq	.+28     	; 0x131a <gas_sensors_init+0xd0>
		{
			SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
    12fe:	99 81       	ldd	r25, Y+1	; 0x01
    1300:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <gas_sensor_initialization_errors>
    1304:	9d 5f       	subi	r25, 0xFD	; 253
    1306:	a6 01       	movw	r20, r12
    1308:	02 c0       	rjmp	.+4      	; 0x130e <gas_sensors_init+0xc4>
    130a:	44 0f       	add	r20, r20
    130c:	55 1f       	adc	r21, r21
    130e:	9a 95       	dec	r25
    1310:	e2 f7       	brpl	.-8      	; 0x130a <gas_sensors_init+0xc0>
    1312:	ca 01       	movw	r24, r20
    1314:	82 2b       	or	r24, r18
    1316:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <gas_sensor_initialization_errors>
	
	
	
	
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	8f 5f       	subi	r24, 0xFF	; 255
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	85 30       	cpi	r24, 0x05	; 5
    1324:	08 f4       	brcc	.+2      	; 0x1328 <gas_sensors_init+0xde>
    1326:	bb cf       	rjmp	.-138    	; 0x129e <gas_sensors_init+0x54>
	
	
	
	
	
	ClearBit(ADCSRA, ADEN);  //Disable the ADC until we go operational
    1328:	ea e7       	ldi	r30, 0x7A	; 122
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	8f 77       	andi	r24, 0x7F	; 127
    1330:	80 83       	st	Z, r24
	// Report status via the LED that the gas sensors are ready (or not)
	//display_status(gas_sensors, gas_sensor_initialization_errors);
}
    1332:	0f 90       	pop	r0
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	cf 90       	pop	r12
    1344:	bf 90       	pop	r11
    1346:	af 90       	pop	r10
    1348:	08 95       	ret

0000134a <start_gas_sensor_read>:

void start_gas_sensor_read(void)
{
    134a:	8f 92       	push	r8
    134c:	9f 92       	push	r9
    134e:	af 92       	push	r10
    1350:	bf 92       	push	r11
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	00 d0       	rcall	.+0      	; 0x1364 <start_gas_sensor_read+0x1a>
    1364:	1f 92       	push	r1
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	int16_t ADC_result;
	volatile int16_t total;
	int16_t gas_average;
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
    136a:	ea e7       	ldi	r30, 0x7A	; 122
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	80 68       	ori	r24, 0x80	; 128
    1372:	80 83       	st	Z, r24
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
    1374:	19 82       	std	Y+1, r1	; 0x01
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	85 30       	cpi	r24, 0x05	; 5
    137a:	08 f0       	brcs	.+2      	; 0x137e <start_gas_sensor_read+0x34>
    137c:	77 c0       	rjmp	.+238    	; 0x146c <start_gas_sensor_read+0x122>
	{
		ADC_SetMux(sensor_id);
		total = 0;	// re-zero the average
    137e:	68 94       	set
    1380:	88 24       	eor	r8, r8
    1382:	82 f8       	bld	r8, 2
    1384:	91 2c       	mov	r9, r1
		
		for(int i = 0; i < max_gas_sample_count; i++)
		{
			// Start conversion
			SetBit(ADCSRA, ADSC);
    1386:	0a e7       	ldi	r16, 0x7A	; 122
    1388:	10 e0       	ldi	r17, 0x00	; 0
			{
				// Wait for conversion to be complete
				// NOTE: In production version, we should wait for the interrupt and process in the background
			}
			// Read result
			ADC_result = ADC;
    138a:	0f 2e       	mov	r0, r31
    138c:	f8 e7       	ldi	r31, 0x78	; 120
    138e:	ef 2e       	mov	r14, r31
    1390:	f1 2c       	mov	r15, r1
    1392:	f0 2d       	mov	r31, r0
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
    1394:	cc 24       	eor	r12, r12
    1396:	c3 94       	inc	r12
    1398:	d1 2c       	mov	r13, r1
				// NOTE: In production version, we should wait for the interrupt and process in the background
			}
			// Read result
			ADC_result = ADC;
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
    139a:	bb 24       	eor	r11, r11
    139c:	b3 94       	inc	r11
    139e:	a1 2c       	mov	r10, r1
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
	{
		ADC_SetMux(sensor_id);
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	0e 94 b8 00 	call	0x170	; 0x170 <ADC_SetMux>
		total = 0;	// re-zero the average
    13a6:	1b 82       	std	Y+3, r1	; 0x03
    13a8:	1a 82       	std	Y+2, r1	; 0x02
    13aa:	28 2d       	mov	r18, r8
    13ac:	39 2d       	mov	r19, r9
		
		for(int i = 0; i < max_gas_sample_count; i++)
		{
			// Start conversion
			SetBit(ADCSRA, ADSC);
    13ae:	f8 01       	movw	r30, r16
    13b0:	80 81       	ld	r24, Z
    13b2:	80 64       	ori	r24, 0x40	; 64
    13b4:	80 83       	st	Z, r24
			while (BitIsClear(ADCSRA, ADIF))
    13b6:	f8 01       	movw	r30, r16
    13b8:	80 81       	ld	r24, Z
    13ba:	84 ff       	sbrs	r24, 4
    13bc:	fc cf       	rjmp	.-8      	; 0x13b6 <start_gas_sensor_read+0x6c>
			{
				// Wait for conversion to be complete
				// NOTE: In production version, we should wait for the interrupt and process in the background
			}
			// Read result
			ADC_result = ADC;
    13be:	f7 01       	movw	r30, r14
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
			// Test the reading to ensure it is within acceptable boundaries
			if ((ADC_result < gas_sensor_boundaries[sensor_id][0])|(ADC_result > gas_sensor_boundaries[sensor_id][1]))
    13c4:	e9 81       	ldd	r30, Y+1	; 0x01
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	e4 59       	subi	r30, 0x94	; 148
    13d2:	fc 4f       	sbci	r31, 0xFC	; 252
    13d4:	40 81       	ld	r20, Z
    13d6:	51 81       	ldd	r21, Z+1	; 0x01
    13d8:	e9 81       	ldd	r30, Y+1	; 0x01
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	ee 0f       	add	r30, r30
    13de:	ff 1f       	adc	r31, r31
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	e4 59       	subi	r30, 0x94	; 148
    13e6:	fc 4f       	sbci	r31, 0xFC	; 252
    13e8:	62 81       	ldd	r22, Z+2	; 0x02
    13ea:	73 81       	ldd	r23, Z+3	; 0x03
    13ec:	eb 2d       	mov	r30, r11
    13ee:	68 17       	cp	r22, r24
    13f0:	79 07       	cpc	r23, r25
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <start_gas_sensor_read+0xac>
    13f4:	ea 2d       	mov	r30, r10
    13f6:	e1 11       	cpse	r30, r1
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <start_gas_sensor_read+0xbe>
    13fa:	6b 2d       	mov	r22, r11
    13fc:	84 17       	cp	r24, r20
    13fe:	95 07       	cpc	r25, r21
    1400:	08 f0       	brcs	.+2      	; 0x1404 <start_gas_sensor_read+0xba>
    1402:	6a 2d       	mov	r22, r10
    1404:	66 23       	and	r22, r22
    1406:	71 f0       	breq	.+28     	; 0x1424 <start_gas_sensor_read+0xda>
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
    1408:	59 81       	ldd	r21, Y+1	; 0x01
    140a:	60 91 12 04 	lds	r22, 0x0412	; 0x800412 <gas_sensor_initialization_errors>
    140e:	5d 5f       	subi	r21, 0xFD	; 253
    1410:	f6 01       	movw	r30, r12
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <start_gas_sensor_read+0xce>
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	5a 95       	dec	r21
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <start_gas_sensor_read+0xca>
    141c:	af 01       	movw	r20, r30
    141e:	46 2b       	or	r20, r22
    1420:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <gas_sensor_initialization_errors>
			}
			total += ADC_result;
    1424:	4a 81       	ldd	r20, Y+2	; 0x02
    1426:	5b 81       	ldd	r21, Y+3	; 0x03
    1428:	84 0f       	add	r24, r20
    142a:	95 1f       	adc	r25, r21
    142c:	9b 83       	std	Y+3, r25	; 0x03
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	21 50       	subi	r18, 0x01	; 1
    1432:	31 09       	sbc	r19, r1
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
	{
		ADC_SetMux(sensor_id);
		total = 0;	// re-zero the average
		
		for(int i = 0; i < max_gas_sample_count; i++)
    1434:	09 f0       	breq	.+2      	; 0x1438 <start_gas_sensor_read+0xee>
    1436:	bb cf       	rjmp	.-138    	; 0x13ae <start_gas_sensor_read+0x64>
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
			}
			total += ADC_result;
		}
		gas_average = total / max_gas_sample_count;
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	9b 81       	ldd	r25, Y+3	; 0x03
		raw_gas_vector[sensor_id] = gas_average;
    143c:	e9 81       	ldd	r30, Y+1	; 0x01
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	ee 51       	subi	r30, 0x1E	; 30
    1446:	fc 4f       	sbci	r31, 0xFC	; 252
			{
				SetBit(gas_sensor_initialization_errors,(sensor_id+3));  // If not, report an error
			}
			total += ADC_result;
		}
		gas_average = total / max_gas_sample_count;
    1448:	9c 01       	movw	r18, r24
    144a:	99 23       	and	r25, r25
    144c:	14 f4       	brge	.+4      	; 0x1452 <start_gas_sensor_read+0x108>
    144e:	2d 5f       	subi	r18, 0xFD	; 253
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	35 95       	asr	r19
    1454:	27 95       	ror	r18
    1456:	35 95       	asr	r19
    1458:	27 95       	ror	r18
		raw_gas_vector[sensor_id] = gas_average;
    145a:	31 83       	std	Z+1, r19	; 0x01
    145c:	20 83       	st	Z, r18
	int16_t gas_average;
	
	// Enable the ADC
	SetBit(ADCSRA, ADEN);
	//Read initial value from the sensors
	for(sensor_id = 0; sensor_id < 5; sensor_id++)
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	8f 5f       	subi	r24, 0xFF	; 255
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	85 30       	cpi	r24, 0x05	; 5
    1468:	08 f4       	brcc	.+2      	; 0x146c <start_gas_sensor_read+0x122>
    146a:	9a cf       	rjmp	.-204    	; 0x13a0 <start_gas_sensor_read+0x56>
			total += ADC_result;
		}
		gas_average = total / max_gas_sample_count;
		raw_gas_vector[sensor_id] = gas_average;
	}
}
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	af 90       	pop	r10
    1486:	9f 90       	pop	r9
    1488:	8f 90       	pop	r8
    148a:	08 95       	ret

0000148c <binary_search>:

void binary_search(int array[], int top, int bottom, int number) //return value directly above & below number
{
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
	if ((number > array[top]) && (number < array[bottom]))
    1490:	fb 01       	movw	r30, r22
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	e8 0f       	add	r30, r24
    1498:	f9 1f       	adc	r31, r25
    149a:	01 90       	ld	r0, Z+
    149c:	f0 81       	ld	r31, Z
    149e:	e0 2d       	mov	r30, r0
    14a0:	e2 17       	cp	r30, r18
    14a2:	f3 07       	cpc	r31, r19
    14a4:	cc f5       	brge	.+114    	; 0x1518 <binary_search+0x8c>
    14a6:	fa 01       	movw	r30, r20
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	e8 0f       	add	r30, r24
    14ae:	f9 1f       	adc	r31, r25
    14b0:	01 90       	ld	r0, Z+
    14b2:	f0 81       	ld	r31, Z
    14b4:	e0 2d       	mov	r30, r0
    14b6:	2e 17       	cp	r18, r30
    14b8:	3f 07       	cpc	r19, r31
    14ba:	74 f5       	brge	.+92     	; 0x1518 <binary_search+0x8c>
	{
		int mid = bottom + (top - bottom)/2;
    14bc:	db 01       	movw	r26, r22
    14be:	a4 1b       	sub	r26, r20
    14c0:	b5 0b       	sbc	r27, r21
    14c2:	fd 01       	movw	r30, r26
    14c4:	0a f4       	brpl	.+2      	; 0x14c8 <binary_search+0x3c>
    14c6:	31 96       	adiw	r30, 0x01	; 1
    14c8:	f5 95       	asr	r31
    14ca:	e7 95       	ror	r30
    14cc:	e4 0f       	add	r30, r20
    14ce:	f5 1f       	adc	r31, r21
		
		// If the element is closest to the middle
		if (number >= array[mid] && number <= array [mid + 1])
    14d0:	df 01       	movw	r26, r30
    14d2:	aa 0f       	add	r26, r26
    14d4:	bb 1f       	adc	r27, r27
    14d6:	ec 01       	movw	r28, r24
    14d8:	ca 0f       	add	r28, r26
    14da:	db 1f       	adc	r29, r27
    14dc:	09 90       	ld	r0, Y+
    14de:	d8 81       	ld	r29, Y
    14e0:	c0 2d       	mov	r28, r0
    14e2:	2c 17       	cp	r18, r28
    14e4:	3d 07       	cpc	r19, r29
    14e6:	8c f0       	brlt	.+34     	; 0x150a <binary_search+0x7e>
    14e8:	a8 0f       	add	r26, r24
    14ea:	b9 1f       	adc	r27, r25
    14ec:	12 96       	adiw	r26, 0x02	; 2
    14ee:	4d 91       	ld	r20, X+
    14f0:	5c 91       	ld	r21, X
    14f2:	13 97       	sbiw	r26, 0x03	; 3
    14f4:	42 17       	cp	r20, r18
    14f6:	53 07       	cpc	r21, r19
    14f8:	5c f0       	brlt	.+22     	; 0x1510 <binary_search+0x84>
		{
			valueOfIndex = mid + 1;
    14fa:	af 01       	movw	r20, r30
    14fc:	4f 5f       	subi	r20, 0xFF	; 255
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1500:	50 93 40 04 	sts	0x0440, r21	; 0x800440 <valueOfIndex+0x1>
    1504:	40 93 3f 04 	sts	0x043F, r20	; 0x80043f <valueOfIndex>
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <binary_search+0x84>
		}
		
		// If element is smaller than mid, then
		// it can only be present in left subarray
		else if (number < array[mid])
		return binary_search(array, mid, bottom, number);
    150a:	bf 01       	movw	r22, r30
    150c:	bf df       	rcall	.-130    	; 0x148c <binary_search>
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <binary_search+0x8c>
		
		// Else the element can only be present
		// in right subarray
		return binary_search(array, top, mid+1, number);
    1510:	af 01       	movw	r20, r30
    1512:	4f 5f       	subi	r20, 0xFF	; 255
    1514:	5f 4f       	sbci	r21, 0xFF	; 255
    1516:	ba df       	rcall	.-140    	; 0x148c <binary_search>
		return 0;
	}
	// We reach here when element is not
	// present in array
	//printf('value not in array');
}
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <convert_to_ppm>:

uint16_t convert_to_ppm(uint8_t sensor_id)
{
    151e:	2f 92       	push	r2
    1520:	3f 92       	push	r3
    1522:	4f 92       	push	r4
    1524:	5f 92       	push	r5
    1526:	6f 92       	push	r6
    1528:	7f 92       	push	r7
    152a:	8f 92       	push	r8
    152c:	9f 92       	push	r9
    152e:	af 92       	push	r10
    1530:	bf 92       	push	r11
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	c2 50       	subi	r28, 0x02	; 2
    1548:	d6 40       	sbci	r29, 0x06	; 6
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
	int R0_VALS_GAS_SENSORS[6] = {381, 508, 308, 405, 38, 0}; //all R0 values. We may have a 6th sensor but it is currently not in existence
	int R0_RATIOS_CO[6][2][64] = {{{101, 99, 98, 96, 95, 93, 92, 90, 89, 87, 86, 84, 83, 81, 80, 78, 77, 75, 74, 72, 71, 69, 67, 66, 64, 63, 61, 60,
    1554:	9e 01       	movw	r18, r28
    1556:	2f 5f       	subi	r18, 0xFF	; 255
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	cf 5f       	subi	r28, 0xFF	; 255
    155c:	d9 4f       	sbci	r29, 0xF9	; 249
    155e:	39 83       	std	Y+1, r19	; 0x01
    1560:	28 83       	st	Y, r18
    1562:	c1 50       	subi	r28, 0x01	; 1
    1564:	d6 40       	sbci	r29, 0x06	; 6
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	96 e0       	ldi	r25, 0x06	; 6
    156a:	f9 01       	movw	r30, r18
    156c:	9c 01       	movw	r18, r24
    156e:	11 92       	st	Z+, r1
    1570:	21 50       	subi	r18, 0x01	; 1
    1572:	30 40       	sbci	r19, 0x00	; 0
    1574:	e1 f7       	brne	.-8      	; 0x156e <convert_to_ppm+0x50>
    1576:	85 e6       	ldi	r24, 0x65	; 101
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	43 e6       	ldi	r20, 0x63	; 99
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	5c 83       	std	Y+4, r21	; 0x04
    1584:	4b 83       	std	Y+3, r20	; 0x03
    1586:	82 e6       	ldi	r24, 0x62	; 98
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
    158e:	80 e6       	ldi	r24, 0x60	; 96
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	98 87       	std	Y+8, r25	; 0x08
    1594:	8f 83       	std	Y+7, r24	; 0x07
    1596:	8f e5       	ldi	r24, 0x5F	; 95
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9a 87       	std	Y+10, r25	; 0x0a
    159c:	89 87       	std	Y+9, r24	; 0x09
    159e:	8d e5       	ldi	r24, 0x5D	; 93
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9c 87       	std	Y+12, r25	; 0x0c
    15a4:	8b 87       	std	Y+11, r24	; 0x0b
    15a6:	8c e5       	ldi	r24, 0x5C	; 92
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	9e 87       	std	Y+14, r25	; 0x0e
    15ac:	8d 87       	std	Y+13, r24	; 0x0d
    15ae:	8a e5       	ldi	r24, 0x5A	; 90
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	98 8b       	std	Y+16, r25	; 0x10
    15b4:	8f 87       	std	Y+15, r24	; 0x0f
    15b6:	89 e5       	ldi	r24, 0x59	; 89
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	9a 8b       	std	Y+18, r25	; 0x12
    15bc:	89 8b       	std	Y+17, r24	; 0x11
    15be:	87 e5       	ldi	r24, 0x57	; 87
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	9c 8b       	std	Y+20, r25	; 0x14
    15c4:	8b 8b       	std	Y+19, r24	; 0x13
    15c6:	86 e5       	ldi	r24, 0x56	; 86
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	9e 8b       	std	Y+22, r25	; 0x16
    15cc:	8d 8b       	std	Y+21, r24	; 0x15
    15ce:	84 e5       	ldi	r24, 0x54	; 84
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	98 8f       	std	Y+24, r25	; 0x18
    15d4:	8f 8b       	std	Y+23, r24	; 0x17
    15d6:	e3 e5       	ldi	r30, 0x53	; 83
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	fa 8f       	std	Y+26, r31	; 0x1a
    15dc:	e9 8f       	std	Y+25, r30	; 0x19
    15de:	81 e5       	ldi	r24, 0x51	; 81
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9c 8f       	std	Y+28, r25	; 0x1c
    15e4:	8b 8f       	std	Y+27, r24	; 0x1b
    15e6:	0f 2e       	mov	r0, r31
    15e8:	f0 e5       	ldi	r31, 0x50	; 80
    15ea:	cf 2e       	mov	r12, r31
    15ec:	d1 2c       	mov	r13, r1
    15ee:	f0 2d       	mov	r31, r0
    15f0:	de 8e       	std	Y+30, r13	; 0x1e
    15f2:	cd 8e       	std	Y+29, r12	; 0x1d
    15f4:	2e e4       	ldi	r18, 0x4E	; 78
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	38 a3       	std	Y+32, r19	; 0x20
    15fa:	2f 8f       	std	Y+31, r18	; 0x1f
    15fc:	8d e4       	ldi	r24, 0x4D	; 77
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9a a3       	std	Y+34, r25	; 0x22
    1602:	89 a3       	std	Y+33, r24	; 0x21
    1604:	4b e4       	ldi	r20, 0x4B	; 75
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	5c a3       	std	Y+36, r21	; 0x24
    160a:	4b a3       	std	Y+35, r20	; 0x23
    160c:	0f 2e       	mov	r0, r31
    160e:	fa e4       	ldi	r31, 0x4A	; 74
    1610:	2f 2e       	mov	r2, r31
    1612:	31 2c       	mov	r3, r1
    1614:	f0 2d       	mov	r31, r0
    1616:	3e a2       	std	Y+38, r3	; 0x26
    1618:	2d a2       	std	Y+37, r2	; 0x25
    161a:	88 e4       	ldi	r24, 0x48	; 72
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	98 a7       	std	Y+40, r25	; 0x28
    1620:	8f a3       	std	Y+39, r24	; 0x27
    1622:	0f 2e       	mov	r0, r31
    1624:	f7 e4       	ldi	r31, 0x47	; 71
    1626:	4f 2e       	mov	r4, r31
    1628:	51 2c       	mov	r5, r1
    162a:	f0 2d       	mov	r31, r0
    162c:	5a a6       	std	Y+42, r5	; 0x2a
    162e:	49 a6       	std	Y+41, r4	; 0x29
    1630:	85 e4       	ldi	r24, 0x45	; 69
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9c a7       	std	Y+44, r25	; 0x2c
    1636:	8b a7       	std	Y+43, r24	; 0x2b
    1638:	0f 2e       	mov	r0, r31
    163a:	f3 e4       	ldi	r31, 0x43	; 67
    163c:	6f 2e       	mov	r6, r31
    163e:	71 2c       	mov	r7, r1
    1640:	f0 2d       	mov	r31, r0
    1642:	7e a6       	std	Y+46, r7	; 0x2e
    1644:	6d a6       	std	Y+45, r6	; 0x2d
    1646:	0f 2e       	mov	r0, r31
    1648:	f2 e4       	ldi	r31, 0x42	; 66
    164a:	8f 2e       	mov	r8, r31
    164c:	91 2c       	mov	r9, r1
    164e:	f0 2d       	mov	r31, r0
    1650:	98 aa       	std	Y+48, r9	; 0x30
    1652:	8f a6       	std	Y+47, r8	; 0x2f
    1654:	68 94       	set
    1656:	aa 24       	eor	r10, r10
    1658:	a6 f8       	bld	r10, 6
    165a:	b1 2c       	mov	r11, r1
    165c:	ba aa       	std	Y+50, r11	; 0x32
    165e:	a9 aa       	std	Y+49, r10	; 0x31
    1660:	8f e3       	ldi	r24, 0x3F	; 63
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9c ab       	std	Y+52, r25	; 0x34
    1666:	8b ab       	std	Y+51, r24	; 0x33
    1668:	8d e3       	ldi	r24, 0x3D	; 61
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9e ab       	std	Y+54, r25	; 0x36
    166e:	8d ab       	std	Y+53, r24	; 0x35
    1670:	6c e3       	ldi	r22, 0x3C	; 60
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	78 af       	std	Y+56, r23	; 0x38
    1676:	6f ab       	std	Y+55, r22	; 0x37
    1678:	8a e3       	ldi	r24, 0x3A	; 58
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9a af       	std	Y+58, r25	; 0x3a
    167e:	89 af       	std	Y+57, r24	; 0x39
    1680:	49 e3       	ldi	r20, 0x39	; 57
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	5c af       	std	Y+60, r21	; 0x3c
    1686:	4b af       	std	Y+59, r20	; 0x3b
    1688:	a7 e3       	ldi	r26, 0x37	; 55
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	be af       	std	Y+62, r27	; 0x3e
    168e:	ad af       	std	Y+61, r26	; 0x3d
    1690:	06 e3       	ldi	r16, 0x36	; 54
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	21 96       	adiw	r28, 0x01	; 1
    1696:	1f af       	std	Y+63, r17	; 0x3f
    1698:	0e af       	std	Y+62, r16	; 0x3e
    169a:	21 97       	sbiw	r28, 0x01	; 1
    169c:	0f 2e       	mov	r0, r31
    169e:	f4 e3       	ldi	r31, 0x34	; 52
    16a0:	ef 2e       	mov	r14, r31
    16a2:	f1 2c       	mov	r15, r1
    16a4:	f0 2d       	mov	r31, r0
    16a6:	23 96       	adiw	r28, 0x03	; 3
    16a8:	ff ae       	std	Y+63, r15	; 0x3f
    16aa:	ee ae       	std	Y+62, r14	; 0x3e
    16ac:	23 97       	sbiw	r28, 0x03	; 3
    16ae:	83 e3       	ldi	r24, 0x33	; 51
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	25 96       	adiw	r28, 0x05	; 5
    16b4:	9f af       	std	Y+63, r25	; 0x3f
    16b6:	8e af       	std	Y+62, r24	; 0x3e
    16b8:	25 97       	sbiw	r28, 0x05	; 5
    16ba:	81 e3       	ldi	r24, 0x31	; 49
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	27 96       	adiw	r28, 0x07	; 7
    16c0:	9f af       	std	Y+63, r25	; 0x3f
    16c2:	8e af       	std	Y+62, r24	; 0x3e
    16c4:	27 97       	sbiw	r28, 0x07	; 7
    16c6:	80 e3       	ldi	r24, 0x30	; 48
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	29 96       	adiw	r28, 0x09	; 9
    16cc:	9f af       	std	Y+63, r25	; 0x3f
    16ce:	8e af       	std	Y+62, r24	; 0x3e
    16d0:	29 97       	sbiw	r28, 0x09	; 9
    16d2:	8e e2       	ldi	r24, 0x2E	; 46
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	2b 96       	adiw	r28, 0x0b	; 11
    16d8:	9f af       	std	Y+63, r25	; 0x3f
    16da:	8e af       	std	Y+62, r24	; 0x3e
    16dc:	2b 97       	sbiw	r28, 0x0b	; 11
    16de:	8d e2       	ldi	r24, 0x2D	; 45
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	2d 96       	adiw	r28, 0x0d	; 13
    16e4:	9f af       	std	Y+63, r25	; 0x3f
    16e6:	8e af       	std	Y+62, r24	; 0x3e
    16e8:	2d 97       	sbiw	r28, 0x0d	; 13
    16ea:	8b e2       	ldi	r24, 0x2B	; 43
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	2f 96       	adiw	r28, 0x0f	; 15
    16f0:	9f af       	std	Y+63, r25	; 0x3f
    16f2:	8e af       	std	Y+62, r24	; 0x3e
    16f4:	2f 97       	sbiw	r28, 0x0f	; 15
    16f6:	8a e2       	ldi	r24, 0x2A	; 42
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	61 96       	adiw	r28, 0x11	; 17
    16fc:	9f af       	std	Y+63, r25	; 0x3f
    16fe:	8e af       	std	Y+62, r24	; 0x3e
    1700:	61 97       	sbiw	r28, 0x11	; 17
    1702:	88 e2       	ldi	r24, 0x28	; 40
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	63 96       	adiw	r28, 0x13	; 19
    1708:	9f af       	std	Y+63, r25	; 0x3f
    170a:	8e af       	std	Y+62, r24	; 0x3e
    170c:	63 97       	sbiw	r28, 0x13	; 19
    170e:	87 e2       	ldi	r24, 0x27	; 39
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	65 96       	adiw	r28, 0x15	; 21
    1714:	9f af       	std	Y+63, r25	; 0x3f
    1716:	8e af       	std	Y+62, r24	; 0x3e
    1718:	65 97       	sbiw	r28, 0x15	; 21
    171a:	85 e2       	ldi	r24, 0x25	; 37
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	67 96       	adiw	r28, 0x17	; 23
    1720:	9f af       	std	Y+63, r25	; 0x3f
    1722:	8e af       	std	Y+62, r24	; 0x3e
    1724:	67 97       	sbiw	r28, 0x17	; 23
    1726:	83 e2       	ldi	r24, 0x23	; 35
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	69 96       	adiw	r28, 0x19	; 25
    172c:	9f af       	std	Y+63, r25	; 0x3f
    172e:	8e af       	std	Y+62, r24	; 0x3e
    1730:	69 97       	sbiw	r28, 0x19	; 25
    1732:	82 e2       	ldi	r24, 0x22	; 34
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	6b 96       	adiw	r28, 0x1b	; 27
    1738:	9f af       	std	Y+63, r25	; 0x3f
    173a:	8e af       	std	Y+62, r24	; 0x3e
    173c:	6b 97       	sbiw	r28, 0x1b	; 27
    173e:	80 e2       	ldi	r24, 0x20	; 32
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	6d 96       	adiw	r28, 0x1d	; 29
    1744:	9f af       	std	Y+63, r25	; 0x3f
    1746:	8e af       	std	Y+62, r24	; 0x3e
    1748:	6d 97       	sbiw	r28, 0x1d	; 29
    174a:	8f e1       	ldi	r24, 0x1F	; 31
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	6f 96       	adiw	r28, 0x1f	; 31
    1750:	9f af       	std	Y+63, r25	; 0x3f
    1752:	8e af       	std	Y+62, r24	; 0x3e
    1754:	6f 97       	sbiw	r28, 0x1f	; 31
    1756:	8d e1       	ldi	r24, 0x1D	; 29
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a1 96       	adiw	r28, 0x21	; 33
    175c:	9f af       	std	Y+63, r25	; 0x3f
    175e:	8e af       	std	Y+62, r24	; 0x3e
    1760:	a1 97       	sbiw	r28, 0x21	; 33
    1762:	8c e1       	ldi	r24, 0x1C	; 28
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a3 96       	adiw	r28, 0x23	; 35
    1768:	9f af       	std	Y+63, r25	; 0x3f
    176a:	8e af       	std	Y+62, r24	; 0x3e
    176c:	a3 97       	sbiw	r28, 0x23	; 35
    176e:	8a e1       	ldi	r24, 0x1A	; 26
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a5 96       	adiw	r28, 0x25	; 37
    1774:	9f af       	std	Y+63, r25	; 0x3f
    1776:	8e af       	std	Y+62, r24	; 0x3e
    1778:	a5 97       	sbiw	r28, 0x25	; 37
    177a:	89 e1       	ldi	r24, 0x19	; 25
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a7 96       	adiw	r28, 0x27	; 39
    1780:	9f af       	std	Y+63, r25	; 0x3f
    1782:	8e af       	std	Y+62, r24	; 0x3e
    1784:	a7 97       	sbiw	r28, 0x27	; 39
    1786:	87 e1       	ldi	r24, 0x17	; 23
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a9 96       	adiw	r28, 0x29	; 41
    178c:	9f af       	std	Y+63, r25	; 0x3f
    178e:	8e af       	std	Y+62, r24	; 0x3e
    1790:	a9 97       	sbiw	r28, 0x29	; 41
    1792:	86 e1       	ldi	r24, 0x16	; 22
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	ab 96       	adiw	r28, 0x2b	; 43
    1798:	9f af       	std	Y+63, r25	; 0x3f
    179a:	8e af       	std	Y+62, r24	; 0x3e
    179c:	ab 97       	sbiw	r28, 0x2b	; 43
    179e:	84 e1       	ldi	r24, 0x14	; 20
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	ad 96       	adiw	r28, 0x2d	; 45
    17a4:	9f af       	std	Y+63, r25	; 0x3f
    17a6:	8e af       	std	Y+62, r24	; 0x3e
    17a8:	ad 97       	sbiw	r28, 0x2d	; 45
    17aa:	83 e1       	ldi	r24, 0x13	; 19
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	af 96       	adiw	r28, 0x2f	; 47
    17b0:	9f af       	std	Y+63, r25	; 0x3f
    17b2:	8e af       	std	Y+62, r24	; 0x3e
    17b4:	af 97       	sbiw	r28, 0x2f	; 47
    17b6:	81 e1       	ldi	r24, 0x11	; 17
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	e1 96       	adiw	r28, 0x31	; 49
    17bc:	9f af       	std	Y+63, r25	; 0x3f
    17be:	8e af       	std	Y+62, r24	; 0x3e
    17c0:	e1 97       	sbiw	r28, 0x31	; 49
    17c2:	80 e1       	ldi	r24, 0x10	; 16
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	e3 96       	adiw	r28, 0x33	; 51
    17c8:	9f af       	std	Y+63, r25	; 0x3f
    17ca:	8e af       	std	Y+62, r24	; 0x3e
    17cc:	e3 97       	sbiw	r28, 0x33	; 51
    17ce:	8e e0       	ldi	r24, 0x0E	; 14
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	e5 96       	adiw	r28, 0x35	; 53
    17d4:	9f af       	std	Y+63, r25	; 0x3f
    17d6:	8e af       	std	Y+62, r24	; 0x3e
    17d8:	e5 97       	sbiw	r28, 0x35	; 53
    17da:	8d e0       	ldi	r24, 0x0D	; 13
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	e7 96       	adiw	r28, 0x37	; 55
    17e0:	9f af       	std	Y+63, r25	; 0x3f
    17e2:	8e af       	std	Y+62, r24	; 0x3e
    17e4:	e7 97       	sbiw	r28, 0x37	; 55
    17e6:	8b e0       	ldi	r24, 0x0B	; 11
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	e9 96       	adiw	r28, 0x39	; 57
    17ec:	9f af       	std	Y+63, r25	; 0x3f
    17ee:	8e af       	std	Y+62, r24	; 0x3e
    17f0:	e9 97       	sbiw	r28, 0x39	; 57
    17f2:	8a e0       	ldi	r24, 0x0A	; 10
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	eb 96       	adiw	r28, 0x3b	; 59
    17f8:	9f af       	std	Y+63, r25	; 0x3f
    17fa:	8e af       	std	Y+62, r24	; 0x3e
    17fc:	eb 97       	sbiw	r28, 0x3b	; 59
    17fe:	e8 e0       	ldi	r30, 0x08	; 8
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	ed 96       	adiw	r28, 0x3d	; 61
    1804:	ff af       	std	Y+63, r31	; 0x3f
    1806:	ee af       	std	Y+62, r30	; 0x3e
    1808:	ed 97       	sbiw	r28, 0x3d	; 61
    180a:	27 e0       	ldi	r18, 0x07	; 7
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	ef 96       	adiw	r28, 0x3f	; 63
    1810:	3f af       	std	Y+63, r19	; 0x3f
    1812:	2e af       	std	Y+62, r18	; 0x3e
    1814:	ef 97       	sbiw	r28, 0x3f	; 63
    1816:	85 e0       	ldi	r24, 0x05	; 5
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	c1 58       	subi	r28, 0x81	; 129
    181c:	df 4f       	sbci	r29, 0xFF	; 255
    181e:	99 83       	std	Y+1, r25	; 0x01
    1820:	88 83       	st	Y, r24
    1822:	cf 57       	subi	r28, 0x7F	; 127
    1824:	d0 40       	sbci	r29, 0x00	; 0
    1826:	0f 2e       	mov	r0, r31
    1828:	fc e2       	ldi	r31, 0x2C	; 44
    182a:	cf 2e       	mov	r12, r31
    182c:	d1 2c       	mov	r13, r1
    182e:	f0 2d       	mov	r31, r0
    1830:	cf 57       	subi	r28, 0x7F	; 127
    1832:	df 4f       	sbci	r29, 0xFF	; 255
    1834:	d9 82       	std	Y+1, r13	; 0x01
    1836:	c8 82       	st	Y, r12
    1838:	c1 58       	subi	r28, 0x81	; 129
    183a:	d0 40       	sbci	r29, 0x00	; 0
    183c:	cd 57       	subi	r28, 0x7D	; 125
    183e:	df 4f       	sbci	r29, 0xFF	; 255
    1840:	f9 82       	std	Y+1, r15	; 0x01
    1842:	e8 82       	st	Y, r14
    1844:	c3 58       	subi	r28, 0x83	; 131
    1846:	d0 40       	sbci	r29, 0x00	; 0
    1848:	0f 2e       	mov	r0, r31
    184a:	f5 e3       	ldi	r31, 0x35	; 53
    184c:	ef 2e       	mov	r14, r31
    184e:	f1 2c       	mov	r15, r1
    1850:	f0 2d       	mov	r31, r0
    1852:	cb 57       	subi	r28, 0x7B	; 123
    1854:	df 4f       	sbci	r29, 0xFF	; 255
    1856:	f9 82       	std	Y+1, r15	; 0x01
    1858:	e8 82       	st	Y, r14
    185a:	c5 58       	subi	r28, 0x85	; 133
    185c:	d0 40       	sbci	r29, 0x00	; 0
    185e:	c9 57       	subi	r28, 0x79	; 121
    1860:	df 4f       	sbci	r29, 0xFF	; 255
    1862:	19 83       	std	Y+1, r17	; 0x01
    1864:	08 83       	st	Y, r16
    1866:	c7 58       	subi	r28, 0x87	; 135
    1868:	d0 40       	sbci	r29, 0x00	; 0
    186a:	c7 57       	subi	r28, 0x77	; 119
    186c:	df 4f       	sbci	r29, 0xFF	; 255
    186e:	b9 83       	std	Y+1, r27	; 0x01
    1870:	a8 83       	st	Y, r26
    1872:	c9 58       	subi	r28, 0x89	; 137
    1874:	d0 40       	sbci	r29, 0x00	; 0
    1876:	c5 57       	subi	r28, 0x75	; 117
    1878:	df 4f       	sbci	r29, 0xFF	; 255
    187a:	59 83       	std	Y+1, r21	; 0x01
    187c:	48 83       	st	Y, r20
    187e:	cb 58       	subi	r28, 0x8B	; 139
    1880:	d0 40       	sbci	r29, 0x00	; 0
    1882:	c3 57       	subi	r28, 0x73	; 115
    1884:	df 4f       	sbci	r29, 0xFF	; 255
    1886:	59 83       	std	Y+1, r21	; 0x01
    1888:	48 83       	st	Y, r20
    188a:	cd 58       	subi	r28, 0x8D	; 141
    188c:	d0 40       	sbci	r29, 0x00	; 0
    188e:	4b e3       	ldi	r20, 0x3B	; 59
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	c1 57       	subi	r28, 0x71	; 113
    1894:	df 4f       	sbci	r29, 0xFF	; 255
    1896:	59 83       	std	Y+1, r21	; 0x01
    1898:	48 83       	st	Y, r20
    189a:	cf 58       	subi	r28, 0x8F	; 143
    189c:	d0 40       	sbci	r29, 0x00	; 0
    189e:	cf 56       	subi	r28, 0x6F	; 111
    18a0:	df 4f       	sbci	r29, 0xFF	; 255
    18a2:	79 83       	std	Y+1, r23	; 0x01
    18a4:	68 83       	st	Y, r22
    18a6:	c1 59       	subi	r28, 0x91	; 145
    18a8:	d0 40       	sbci	r29, 0x00	; 0
    18aa:	4e e3       	ldi	r20, 0x3E	; 62
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	cd 56       	subi	r28, 0x6D	; 109
    18b0:	df 4f       	sbci	r29, 0xFF	; 255
    18b2:	59 83       	std	Y+1, r21	; 0x01
    18b4:	48 83       	st	Y, r20
    18b6:	c3 59       	subi	r28, 0x93	; 147
    18b8:	d0 40       	sbci	r29, 0x00	; 0
    18ba:	cb 56       	subi	r28, 0x6B	; 107
    18bc:	df 4f       	sbci	r29, 0xFF	; 255
    18be:	b9 82       	std	Y+1, r11	; 0x01
    18c0:	a8 82       	st	Y, r10
    18c2:	c5 59       	subi	r28, 0x95	; 149
    18c4:	d0 40       	sbci	r29, 0x00	; 0
    18c6:	c9 56       	subi	r28, 0x69	; 105
    18c8:	df 4f       	sbci	r29, 0xFF	; 255
    18ca:	99 82       	std	Y+1, r9	; 0x01
    18cc:	88 82       	st	Y, r8
    18ce:	c7 59       	subi	r28, 0x97	; 151
    18d0:	d0 40       	sbci	r29, 0x00	; 0
    18d2:	c7 56       	subi	r28, 0x67	; 103
    18d4:	df 4f       	sbci	r29, 0xFF	; 255
    18d6:	79 82       	std	Y+1, r7	; 0x01
    18d8:	68 82       	st	Y, r6
    18da:	c9 59       	subi	r28, 0x99	; 153
    18dc:	d0 40       	sbci	r29, 0x00	; 0
    18de:	46 e4       	ldi	r20, 0x46	; 70
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	c5 56       	subi	r28, 0x65	; 101
    18e4:	df 4f       	sbci	r29, 0xFF	; 255
    18e6:	59 83       	std	Y+1, r21	; 0x01
    18e8:	48 83       	st	Y, r20
    18ea:	cb 59       	subi	r28, 0x9B	; 155
    18ec:	d0 40       	sbci	r29, 0x00	; 0
    18ee:	c3 56       	subi	r28, 0x63	; 99
    18f0:	df 4f       	sbci	r29, 0xFF	; 255
    18f2:	59 82       	std	Y+1, r5	; 0x01
    18f4:	48 82       	st	Y, r4
    18f6:	cd 59       	subi	r28, 0x9D	; 157
    18f8:	d0 40       	sbci	r29, 0x00	; 0
    18fa:	c1 56       	subi	r28, 0x61	; 97
    18fc:	df 4f       	sbci	r29, 0xFF	; 255
    18fe:	39 82       	std	Y+1, r3	; 0x01
    1900:	28 82       	st	Y, r2
    1902:	cf 59       	subi	r28, 0x9F	; 159
    1904:	d0 40       	sbci	r29, 0x00	; 0
    1906:	4b e4       	ldi	r20, 0x4B	; 75
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	cf 55       	subi	r28, 0x5F	; 95
    190c:	df 4f       	sbci	r29, 0xFF	; 255
    190e:	59 83       	std	Y+1, r21	; 0x01
    1910:	48 83       	st	Y, r20
    1912:	c1 5a       	subi	r28, 0xA1	; 161
    1914:	d0 40       	sbci	r29, 0x00	; 0
    1916:	0f 2e       	mov	r0, r31
    1918:	fe e4       	ldi	r31, 0x4E	; 78
    191a:	cf 2e       	mov	r12, r31
    191c:	d1 2c       	mov	r13, r1
    191e:	f0 2d       	mov	r31, r0
    1920:	cd 55       	subi	r28, 0x5D	; 93
    1922:	df 4f       	sbci	r29, 0xFF	; 255
    1924:	d9 82       	std	Y+1, r13	; 0x01
    1926:	c8 82       	st	Y, r12
    1928:	c3 5a       	subi	r28, 0xA3	; 163
    192a:	d0 40       	sbci	r29, 0x00	; 0
    192c:	40 e5       	ldi	r20, 0x50	; 80
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	cb 55       	subi	r28, 0x5B	; 91
    1932:	df 4f       	sbci	r29, 0xFF	; 255
    1934:	59 83       	std	Y+1, r21	; 0x01
    1936:	48 83       	st	Y, r20
    1938:	c5 5a       	subi	r28, 0xA5	; 165
    193a:	d0 40       	sbci	r29, 0x00	; 0
    193c:	0f 2e       	mov	r0, r31
    193e:	f3 e5       	ldi	r31, 0x53	; 83
    1940:	cf 2e       	mov	r12, r31
    1942:	d1 2c       	mov	r13, r1
    1944:	f0 2d       	mov	r31, r0
    1946:	c9 55       	subi	r28, 0x59	; 89
    1948:	df 4f       	sbci	r29, 0xFF	; 255
    194a:	d9 82       	std	Y+1, r13	; 0x01
    194c:	c8 82       	st	Y, r12
    194e:	c7 5a       	subi	r28, 0xA7	; 167
    1950:	d0 40       	sbci	r29, 0x00	; 0
    1952:	45 e5       	ldi	r20, 0x55	; 85
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	c7 55       	subi	r28, 0x57	; 87
    1958:	df 4f       	sbci	r29, 0xFF	; 255
    195a:	59 83       	std	Y+1, r21	; 0x01
    195c:	48 83       	st	Y, r20
    195e:	c9 5a       	subi	r28, 0xA9	; 169
    1960:	d0 40       	sbci	r29, 0x00	; 0
    1962:	48 e5       	ldi	r20, 0x58	; 88
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	c5 55       	subi	r28, 0x55	; 85
    1968:	df 4f       	sbci	r29, 0xFF	; 255
    196a:	59 83       	std	Y+1, r21	; 0x01
    196c:	48 83       	st	Y, r20
    196e:	cb 5a       	subi	r28, 0xAB	; 171
    1970:	d0 40       	sbci	r29, 0x00	; 0
    1972:	4c e5       	ldi	r20, 0x5C	; 92
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	c3 55       	subi	r28, 0x53	; 83
    1978:	df 4f       	sbci	r29, 0xFF	; 255
    197a:	59 83       	std	Y+1, r21	; 0x01
    197c:	48 83       	st	Y, r20
    197e:	cd 5a       	subi	r28, 0xAD	; 173
    1980:	d0 40       	sbci	r29, 0x00	; 0
    1982:	4e e5       	ldi	r20, 0x5E	; 94
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	c1 55       	subi	r28, 0x51	; 81
    1988:	df 4f       	sbci	r29, 0xFF	; 255
    198a:	59 83       	std	Y+1, r21	; 0x01
    198c:	48 83       	st	Y, r20
    198e:	cf 5a       	subi	r28, 0xAF	; 175
    1990:	d0 40       	sbci	r29, 0x00	; 0
    1992:	0f 2e       	mov	r0, r31
    1994:	f3 e6       	ldi	r31, 0x63	; 99
    1996:	cf 2e       	mov	r12, r31
    1998:	d1 2c       	mov	r13, r1
    199a:	f0 2d       	mov	r31, r0
    199c:	cf 54       	subi	r28, 0x4F	; 79
    199e:	df 4f       	sbci	r29, 0xFF	; 255
    19a0:	d9 82       	std	Y+1, r13	; 0x01
    19a2:	c8 82       	st	Y, r12
    19a4:	c1 5b       	subi	r28, 0xB1	; 177
    19a6:	d0 40       	sbci	r29, 0x00	; 0
    19a8:	46 e6       	ldi	r20, 0x66	; 102
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	cd 54       	subi	r28, 0x4D	; 77
    19ae:	df 4f       	sbci	r29, 0xFF	; 255
    19b0:	59 83       	std	Y+1, r21	; 0x01
    19b2:	48 83       	st	Y, r20
    19b4:	c3 5b       	subi	r28, 0xB3	; 179
    19b6:	d0 40       	sbci	r29, 0x00	; 0
    19b8:	4b e6       	ldi	r20, 0x6B	; 107
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	cb 54       	subi	r28, 0x4B	; 75
    19be:	df 4f       	sbci	r29, 0xFF	; 255
    19c0:	59 83       	std	Y+1, r21	; 0x01
    19c2:	48 83       	st	Y, r20
    19c4:	c5 5b       	subi	r28, 0xB5	; 181
    19c6:	d0 40       	sbci	r29, 0x00	; 0
    19c8:	4e e6       	ldi	r20, 0x6E	; 110
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	c9 54       	subi	r28, 0x49	; 73
    19ce:	df 4f       	sbci	r29, 0xFF	; 255
    19d0:	59 83       	std	Y+1, r21	; 0x01
    19d2:	48 83       	st	Y, r20
    19d4:	c7 5b       	subi	r28, 0xB7	; 183
    19d6:	d0 40       	sbci	r29, 0x00	; 0
    19d8:	44 e7       	ldi	r20, 0x74	; 116
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	c7 54       	subi	r28, 0x47	; 71
    19de:	df 4f       	sbci	r29, 0xFF	; 255
    19e0:	59 83       	std	Y+1, r21	; 0x01
    19e2:	48 83       	st	Y, r20
    19e4:	c9 5b       	subi	r28, 0xB9	; 185
    19e6:	d0 40       	sbci	r29, 0x00	; 0
    19e8:	47 e7       	ldi	r20, 0x77	; 119
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	c5 54       	subi	r28, 0x45	; 69
    19ee:	df 4f       	sbci	r29, 0xFF	; 255
    19f0:	59 83       	std	Y+1, r21	; 0x01
    19f2:	48 83       	st	Y, r20
    19f4:	cb 5b       	subi	r28, 0xBB	; 187
    19f6:	d0 40       	sbci	r29, 0x00	; 0
    19f8:	4d e7       	ldi	r20, 0x7D	; 125
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	c3 54       	subi	r28, 0x43	; 67
    19fe:	df 4f       	sbci	r29, 0xFF	; 255
    1a00:	59 83       	std	Y+1, r21	; 0x01
    1a02:	48 83       	st	Y, r20
    1a04:	cd 5b       	subi	r28, 0xBD	; 189
    1a06:	d0 40       	sbci	r29, 0x00	; 0
    1a08:	40 e8       	ldi	r20, 0x80	; 128
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	c1 54       	subi	r28, 0x41	; 65
    1a0e:	df 4f       	sbci	r29, 0xFF	; 255
    1a10:	59 83       	std	Y+1, r21	; 0x01
    1a12:	48 83       	st	Y, r20
    1a14:	cf 5b       	subi	r28, 0xBF	; 191
    1a16:	d0 40       	sbci	r29, 0x00	; 0
    1a18:	47 e8       	ldi	r20, 0x87	; 135
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	cf 53       	subi	r28, 0x3F	; 63
    1a1e:	df 4f       	sbci	r29, 0xFF	; 255
    1a20:	59 83       	std	Y+1, r21	; 0x01
    1a22:	48 83       	st	Y, r20
    1a24:	c1 5c       	subi	r28, 0xC1	; 193
    1a26:	d0 40       	sbci	r29, 0x00	; 0
    1a28:	4b e8       	ldi	r20, 0x8B	; 139
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	cd 53       	subi	r28, 0x3D	; 61
    1a2e:	df 4f       	sbci	r29, 0xFF	; 255
    1a30:	59 83       	std	Y+1, r21	; 0x01
    1a32:	48 83       	st	Y, r20
    1a34:	c3 5c       	subi	r28, 0xC3	; 195
    1a36:	d0 40       	sbci	r29, 0x00	; 0
    1a38:	42 e9       	ldi	r20, 0x92	; 146
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	cb 53       	subi	r28, 0x3B	; 59
    1a3e:	df 4f       	sbci	r29, 0xFF	; 255
    1a40:	59 83       	std	Y+1, r21	; 0x01
    1a42:	48 83       	st	Y, r20
    1a44:	c5 5c       	subi	r28, 0xC5	; 197
    1a46:	d0 40       	sbci	r29, 0x00	; 0
    1a48:	46 e9       	ldi	r20, 0x96	; 150
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	c9 53       	subi	r28, 0x39	; 57
    1a4e:	df 4f       	sbci	r29, 0xFF	; 255
    1a50:	59 83       	std	Y+1, r21	; 0x01
    1a52:	48 83       	st	Y, r20
    1a54:	c7 5c       	subi	r28, 0xC7	; 199
    1a56:	d0 40       	sbci	r29, 0x00	; 0
    1a58:	4f e9       	ldi	r20, 0x9F	; 159
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	c7 53       	subi	r28, 0x37	; 55
    1a5e:	df 4f       	sbci	r29, 0xFF	; 255
    1a60:	59 83       	std	Y+1, r21	; 0x01
    1a62:	48 83       	st	Y, r20
    1a64:	c9 5c       	subi	r28, 0xC9	; 201
    1a66:	d0 40       	sbci	r29, 0x00	; 0
    1a68:	43 ea       	ldi	r20, 0xA3	; 163
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	c5 53       	subi	r28, 0x35	; 53
    1a6e:	df 4f       	sbci	r29, 0xFF	; 255
    1a70:	59 83       	std	Y+1, r21	; 0x01
    1a72:	48 83       	st	Y, r20
    1a74:	cb 5c       	subi	r28, 0xCB	; 203
    1a76:	d0 40       	sbci	r29, 0x00	; 0
    1a78:	4e ea       	ldi	r20, 0xAE	; 174
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	c3 53       	subi	r28, 0x33	; 51
    1a7e:	df 4f       	sbci	r29, 0xFF	; 255
    1a80:	59 83       	std	Y+1, r21	; 0x01
    1a82:	48 83       	st	Y, r20
    1a84:	cd 5c       	subi	r28, 0xCD	; 205
    1a86:	d0 40       	sbci	r29, 0x00	; 0
    1a88:	44 eb       	ldi	r20, 0xB4	; 180
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	c1 53       	subi	r28, 0x31	; 49
    1a8e:	df 4f       	sbci	r29, 0xFF	; 255
    1a90:	59 83       	std	Y+1, r21	; 0x01
    1a92:	48 83       	st	Y, r20
    1a94:	cf 5c       	subi	r28, 0xCF	; 207
    1a96:	d0 40       	sbci	r29, 0x00	; 0
    1a98:	40 ec       	ldi	r20, 0xC0	; 192
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	cf 52       	subi	r28, 0x2F	; 47
    1a9e:	df 4f       	sbci	r29, 0xFF	; 255
    1aa0:	59 83       	std	Y+1, r21	; 0x01
    1aa2:	48 83       	st	Y, r20
    1aa4:	c1 5d       	subi	r28, 0xD1	; 209
    1aa6:	d0 40       	sbci	r29, 0x00	; 0
    1aa8:	48 ec       	ldi	r20, 0xC8	; 200
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	cd 52       	subi	r28, 0x2D	; 45
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	59 83       	std	Y+1, r21	; 0x01
    1ab2:	48 83       	st	Y, r20
    1ab4:	c3 5d       	subi	r28, 0xD3	; 211
    1ab6:	d0 40       	sbci	r29, 0x00	; 0
    1ab8:	48 ed       	ldi	r20, 0xD8	; 216
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	cb 52       	subi	r28, 0x2B	; 43
    1abe:	df 4f       	sbci	r29, 0xFF	; 255
    1ac0:	59 83       	std	Y+1, r21	; 0x01
    1ac2:	48 83       	st	Y, r20
    1ac4:	c5 5d       	subi	r28, 0xD5	; 213
    1ac6:	d0 40       	sbci	r29, 0x00	; 0
    1ac8:	49 ee       	ldi	r20, 0xE9	; 233
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	c9 52       	subi	r28, 0x29	; 41
    1ace:	df 4f       	sbci	r29, 0xFF	; 255
    1ad0:	59 83       	std	Y+1, r21	; 0x01
    1ad2:	48 83       	st	Y, r20
    1ad4:	c7 5d       	subi	r28, 0xD7	; 215
    1ad6:	d0 40       	sbci	r29, 0x00	; 0
    1ad8:	43 ef       	ldi	r20, 0xF3	; 243
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	c7 52       	subi	r28, 0x27	; 39
    1ade:	df 4f       	sbci	r29, 0xFF	; 255
    1ae0:	59 83       	std	Y+1, r21	; 0x01
    1ae2:	48 83       	st	Y, r20
    1ae4:	c9 5d       	subi	r28, 0xD9	; 217
    1ae6:	d0 40       	sbci	r29, 0x00	; 0
    1ae8:	48 e0       	ldi	r20, 0x08	; 8
    1aea:	51 e0       	ldi	r21, 0x01	; 1
    1aec:	c5 52       	subi	r28, 0x25	; 37
    1aee:	df 4f       	sbci	r29, 0xFF	; 255
    1af0:	59 83       	std	Y+1, r21	; 0x01
    1af2:	48 83       	st	Y, r20
    1af4:	cb 5d       	subi	r28, 0xDB	; 219
    1af6:	d0 40       	sbci	r29, 0x00	; 0
    1af8:	46 e1       	ldi	r20, 0x16	; 22
    1afa:	51 e0       	ldi	r21, 0x01	; 1
    1afc:	c3 52       	subi	r28, 0x23	; 35
    1afe:	df 4f       	sbci	r29, 0xFF	; 255
    1b00:	59 83       	std	Y+1, r21	; 0x01
    1b02:	48 83       	st	Y, r20
    1b04:	cd 5d       	subi	r28, 0xDD	; 221
    1b06:	d0 40       	sbci	r29, 0x00	; 0
    1b08:	42 e3       	ldi	r20, 0x32	; 50
    1b0a:	51 e0       	ldi	r21, 0x01	; 1
    1b0c:	c1 52       	subi	r28, 0x21	; 33
    1b0e:	df 4f       	sbci	r29, 0xFF	; 255
    1b10:	59 83       	std	Y+1, r21	; 0x01
    1b12:	48 83       	st	Y, r20
    1b14:	cf 5d       	subi	r28, 0xDF	; 223
    1b16:	d0 40       	sbci	r29, 0x00	; 0
    1b18:	43 e4       	ldi	r20, 0x43	; 67
    1b1a:	51 e0       	ldi	r21, 0x01	; 1
    1b1c:	cf 51       	subi	r28, 0x1F	; 31
    1b1e:	df 4f       	sbci	r29, 0xFF	; 255
    1b20:	59 83       	std	Y+1, r21	; 0x01
    1b22:	48 83       	st	Y, r20
    1b24:	c1 5e       	subi	r28, 0xE1	; 225
    1b26:	d0 40       	sbci	r29, 0x00	; 0
    1b28:	47 e6       	ldi	r20, 0x67	; 103
    1b2a:	51 e0       	ldi	r21, 0x01	; 1
    1b2c:	cd 51       	subi	r28, 0x1D	; 29
    1b2e:	df 4f       	sbci	r29, 0xFF	; 255
    1b30:	59 83       	std	Y+1, r21	; 0x01
    1b32:	48 83       	st	Y, r20
    1b34:	c3 5e       	subi	r28, 0xE3	; 227
    1b36:	d0 40       	sbci	r29, 0x00	; 0
    1b38:	6d e7       	ldi	r22, 0x7D	; 125
    1b3a:	71 e0       	ldi	r23, 0x01	; 1
    1b3c:	cb 51       	subi	r28, 0x1B	; 27
    1b3e:	df 4f       	sbci	r29, 0xFF	; 255
    1b40:	79 83       	std	Y+1, r23	; 0x01
    1b42:	68 83       	st	Y, r22
    1b44:	c5 5e       	subi	r28, 0xE5	; 229
    1b46:	d0 40       	sbci	r29, 0x00	; 0
    1b48:	40 eb       	ldi	r20, 0xB0	; 176
    1b4a:	51 e0       	ldi	r21, 0x01	; 1
    1b4c:	c9 51       	subi	r28, 0x19	; 25
    1b4e:	df 4f       	sbci	r29, 0xFF	; 255
    1b50:	59 83       	std	Y+1, r21	; 0x01
    1b52:	48 83       	st	Y, r20
    1b54:	c7 5e       	subi	r28, 0xE7	; 231
    1b56:	d0 40       	sbci	r29, 0x00	; 0
    1b58:	42 ed       	ldi	r20, 0xD2	; 210
    1b5a:	51 e0       	ldi	r21, 0x01	; 1
    1b5c:	c7 51       	subi	r28, 0x17	; 23
    1b5e:	df 4f       	sbci	r29, 0xFF	; 255
    1b60:	59 83       	std	Y+1, r21	; 0x01
    1b62:	48 83       	st	Y, r20
    1b64:	c9 5e       	subi	r28, 0xE9	; 233
    1b66:	d0 40       	sbci	r29, 0x00	; 0
    1b68:	4e e1       	ldi	r20, 0x1E	; 30
    1b6a:	52 e0       	ldi	r21, 0x02	; 2
    1b6c:	c5 51       	subi	r28, 0x15	; 21
    1b6e:	df 4f       	sbci	r29, 0xFF	; 255
    1b70:	59 83       	std	Y+1, r21	; 0x01
    1b72:	48 83       	st	Y, r20
    1b74:	cb 5e       	subi	r28, 0xEB	; 235
    1b76:	d0 40       	sbci	r29, 0x00	; 0
    1b78:	4a e4       	ldi	r20, 0x4A	; 74
    1b7a:	52 e0       	ldi	r21, 0x02	; 2
    1b7c:	c3 51       	subi	r28, 0x13	; 19
    1b7e:	df 4f       	sbci	r29, 0xFF	; 255
    1b80:	59 83       	std	Y+1, r21	; 0x01
    1b82:	48 83       	st	Y, r20
    1b84:	cd 5e       	subi	r28, 0xED	; 237
    1b86:	d0 40       	sbci	r29, 0x00	; 0
    1b88:	4b eb       	ldi	r20, 0xBB	; 187
    1b8a:	52 e0       	ldi	r21, 0x02	; 2
    1b8c:	c1 51       	subi	r28, 0x11	; 17
    1b8e:	df 4f       	sbci	r29, 0xFF	; 255
    1b90:	59 83       	std	Y+1, r21	; 0x01
    1b92:	48 83       	st	Y, r20
    1b94:	cf 5e       	subi	r28, 0xEF	; 239
    1b96:	d0 40       	sbci	r29, 0x00	; 0
    1b98:	4b e0       	ldi	r20, 0x0B	; 11
    1b9a:	53 e0       	ldi	r21, 0x03	; 3
    1b9c:	cf 50       	subi	r28, 0x0F	; 15
    1b9e:	df 4f       	sbci	r29, 0xFF	; 255
    1ba0:	59 83       	std	Y+1, r21	; 0x01
    1ba2:	48 83       	st	Y, r20
    1ba4:	c1 5f       	subi	r28, 0xF1	; 241
    1ba6:	d0 40       	sbci	r29, 0x00	; 0
    1ba8:	44 ed       	ldi	r20, 0xD4	; 212
    1baa:	53 e0       	ldi	r21, 0x03	; 3
    1bac:	cd 50       	subi	r28, 0x0D	; 13
    1bae:	df 4f       	sbci	r29, 0xFF	; 255
    1bb0:	59 83       	std	Y+1, r21	; 0x01
    1bb2:	48 83       	st	Y, r20
    1bb4:	c3 5f       	subi	r28, 0xF3	; 243
    1bb6:	d0 40       	sbci	r29, 0x00	; 0
    1bb8:	4d e4       	ldi	r20, 0x4D	; 77
    1bba:	54 e0       	ldi	r21, 0x04	; 4
    1bbc:	cb 50       	subi	r28, 0x0B	; 11
    1bbe:	df 4f       	sbci	r29, 0xFF	; 255
    1bc0:	59 83       	std	Y+1, r21	; 0x01
    1bc2:	48 83       	st	Y, r20
    1bc4:	c5 5f       	subi	r28, 0xF5	; 245
    1bc6:	d0 40       	sbci	r29, 0x00	; 0
    1bc8:	4a e9       	ldi	r20, 0x9A	; 154
    1bca:	55 e0       	ldi	r21, 0x05	; 5
    1bcc:	c9 50       	subi	r28, 0x09	; 9
    1bce:	df 4f       	sbci	r29, 0xFF	; 255
    1bd0:	59 83       	std	Y+1, r21	; 0x01
    1bd2:	48 83       	st	Y, r20
    1bd4:	c7 5f       	subi	r28, 0xF7	; 247
    1bd6:	d0 40       	sbci	r29, 0x00	; 0
    1bd8:	44 e9       	ldi	r20, 0x94	; 148
    1bda:	56 e0       	ldi	r21, 0x06	; 6
    1bdc:	c7 50       	subi	r28, 0x07	; 7
    1bde:	df 4f       	sbci	r29, 0xFF	; 255
    1be0:	59 83       	std	Y+1, r21	; 0x01
    1be2:	48 83       	st	Y, r20
    1be4:	c9 5f       	subi	r28, 0xF9	; 249
    1be6:	d0 40       	sbci	r29, 0x00	; 0
    1be8:	49 e6       	ldi	r20, 0x69	; 105
    1bea:	59 e0       	ldi	r21, 0x09	; 9
    1bec:	c5 50       	subi	r28, 0x05	; 5
    1bee:	df 4f       	sbci	r29, 0xFF	; 255
    1bf0:	59 83       	std	Y+1, r21	; 0x01
    1bf2:	48 83       	st	Y, r20
    1bf4:	cb 5f       	subi	r28, 0xFB	; 251
    1bf6:	d0 40       	sbci	r29, 0x00	; 0
    1bf8:	4b e8       	ldi	r20, 0x8B	; 139
    1bfa:	5b e0       	ldi	r21, 0x0B	; 11
    1bfc:	c3 50       	subi	r28, 0x03	; 3
    1bfe:	df 4f       	sbci	r29, 0xFF	; 255
    1c00:	59 83       	std	Y+1, r21	; 0x01
    1c02:	48 83       	st	Y, r20
    1c04:	cd 5f       	subi	r28, 0xFD	; 253
    1c06:	d0 40       	sbci	r29, 0x00	; 0
    1c08:	43 ed       	ldi	r20, 0xD3	; 211
    1c0a:	51 e1       	ldi	r21, 0x11	; 17
    1c0c:	c1 50       	subi	r28, 0x01	; 1
    1c0e:	df 4f       	sbci	r29, 0xFF	; 255
    1c10:	59 83       	std	Y+1, r21	; 0x01
    1c12:	48 83       	st	Y, r20
    1c14:	cf 5f       	subi	r28, 0xFF	; 255
    1c16:	d0 40       	sbci	r29, 0x00	; 0
    1c18:	cf 5f       	subi	r28, 0xFF	; 255
    1c1a:	de 4f       	sbci	r29, 0xFE	; 254
    1c1c:	f9 83       	std	Y+1, r31	; 0x01
    1c1e:	e8 83       	st	Y, r30
    1c20:	c1 50       	subi	r28, 0x01	; 1
    1c22:	d1 40       	sbci	r29, 0x01	; 1
    1c24:	cd 5f       	subi	r28, 0xFD	; 253
    1c26:	de 4f       	sbci	r29, 0xFE	; 254
    1c28:	39 83       	std	Y+1, r19	; 0x01
    1c2a:	28 83       	st	Y, r18
    1c2c:	c3 50       	subi	r28, 0x03	; 3
    1c2e:	d1 40       	sbci	r29, 0x01	; 1
    1c30:	cb 5f       	subi	r28, 0xFB	; 251
    1c32:	de 4f       	sbci	r29, 0xFE	; 254
    1c34:	39 83       	std	Y+1, r19	; 0x01
    1c36:	28 83       	st	Y, r18
    1c38:	c5 50       	subi	r28, 0x05	; 5
    1c3a:	d1 40       	sbci	r29, 0x01	; 1
    1c3c:	26 e0       	ldi	r18, 0x06	; 6
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	c9 5f       	subi	r28, 0xF9	; 249
    1c42:	de 4f       	sbci	r29, 0xFE	; 254
    1c44:	39 83       	std	Y+1, r19	; 0x01
    1c46:	28 83       	st	Y, r18
    1c48:	c7 50       	subi	r28, 0x07	; 7
    1c4a:	d1 40       	sbci	r29, 0x01	; 1
    1c4c:	c7 5f       	subi	r28, 0xF7	; 247
    1c4e:	de 4f       	sbci	r29, 0xFE	; 254
    1c50:	39 83       	std	Y+1, r19	; 0x01
    1c52:	28 83       	st	Y, r18
    1c54:	c9 50       	subi	r28, 0x09	; 9
    1c56:	d1 40       	sbci	r29, 0x01	; 1
    1c58:	c5 5f       	subi	r28, 0xF5	; 245
    1c5a:	de 4f       	sbci	r29, 0xFE	; 254
    1c5c:	39 83       	std	Y+1, r19	; 0x01
    1c5e:	28 83       	st	Y, r18
    1c60:	cb 50       	subi	r28, 0x0B	; 11
    1c62:	d1 40       	sbci	r29, 0x01	; 1
    1c64:	c3 5f       	subi	r28, 0xF3	; 243
    1c66:	de 4f       	sbci	r29, 0xFE	; 254
    1c68:	99 83       	std	Y+1, r25	; 0x01
    1c6a:	88 83       	st	Y, r24
    1c6c:	cd 50       	subi	r28, 0x0D	; 13
    1c6e:	d1 40       	sbci	r29, 0x01	; 1
    1c70:	c1 5f       	subi	r28, 0xF1	; 241
    1c72:	de 4f       	sbci	r29, 0xFE	; 254
    1c74:	99 83       	std	Y+1, r25	; 0x01
    1c76:	88 83       	st	Y, r24
    1c78:	cf 50       	subi	r28, 0x0F	; 15
    1c7a:	d1 40       	sbci	r29, 0x01	; 1
    1c7c:	cf 5e       	subi	r28, 0xEF	; 239
    1c7e:	de 4f       	sbci	r29, 0xFE	; 254
    1c80:	99 83       	std	Y+1, r25	; 0x01
    1c82:	88 83       	st	Y, r24
    1c84:	c1 51       	subi	r28, 0x11	; 17
    1c86:	d1 40       	sbci	r29, 0x01	; 1
    1c88:	84 e0       	ldi	r24, 0x04	; 4
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	cd 5e       	subi	r28, 0xED	; 237
    1c8e:	de 4f       	sbci	r29, 0xFE	; 254
    1c90:	99 83       	std	Y+1, r25	; 0x01
    1c92:	88 83       	st	Y, r24
    1c94:	c3 51       	subi	r28, 0x13	; 19
    1c96:	d1 40       	sbci	r29, 0x01	; 1
    1c98:	cb 5e       	subi	r28, 0xEB	; 235
    1c9a:	de 4f       	sbci	r29, 0xFE	; 254
    1c9c:	99 83       	std	Y+1, r25	; 0x01
    1c9e:	88 83       	st	Y, r24
    1ca0:	c5 51       	subi	r28, 0x15	; 21
    1ca2:	d1 40       	sbci	r29, 0x01	; 1
    1ca4:	c9 5e       	subi	r28, 0xE9	; 233
    1ca6:	de 4f       	sbci	r29, 0xFE	; 254
    1ca8:	99 83       	std	Y+1, r25	; 0x01
    1caa:	88 83       	st	Y, r24
    1cac:	c7 51       	subi	r28, 0x17	; 23
    1cae:	d1 40       	sbci	r29, 0x01	; 1
    1cb0:	83 e0       	ldi	r24, 0x03	; 3
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	c7 5e       	subi	r28, 0xE7	; 231
    1cb6:	de 4f       	sbci	r29, 0xFE	; 254
    1cb8:	99 83       	std	Y+1, r25	; 0x01
    1cba:	88 83       	st	Y, r24
    1cbc:	c9 51       	subi	r28, 0x19	; 25
    1cbe:	d1 40       	sbci	r29, 0x01	; 1
    1cc0:	c5 5e       	subi	r28, 0xE5	; 229
    1cc2:	de 4f       	sbci	r29, 0xFE	; 254
    1cc4:	99 83       	std	Y+1, r25	; 0x01
    1cc6:	88 83       	st	Y, r24
    1cc8:	cb 51       	subi	r28, 0x1B	; 27
    1cca:	d1 40       	sbci	r29, 0x01	; 1
    1ccc:	c3 5e       	subi	r28, 0xE3	; 227
    1cce:	de 4f       	sbci	r29, 0xFE	; 254
    1cd0:	99 83       	std	Y+1, r25	; 0x01
    1cd2:	88 83       	st	Y, r24
    1cd4:	cd 51       	subi	r28, 0x1D	; 29
    1cd6:	d1 40       	sbci	r29, 0x01	; 1
    1cd8:	c1 5e       	subi	r28, 0xE1	; 225
    1cda:	de 4f       	sbci	r29, 0xFE	; 254
    1cdc:	99 83       	std	Y+1, r25	; 0x01
    1cde:	88 83       	st	Y, r24
    1ce0:	cf 51       	subi	r28, 0x1F	; 31
    1ce2:	d1 40       	sbci	r29, 0x01	; 1
    1ce4:	cf 5d       	subi	r28, 0xDF	; 223
    1ce6:	de 4f       	sbci	r29, 0xFE	; 254
    1ce8:	99 83       	std	Y+1, r25	; 0x01
    1cea:	88 83       	st	Y, r24
    1cec:	c1 52       	subi	r28, 0x21	; 33
    1cee:	d1 40       	sbci	r29, 0x01	; 1
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	cd 5d       	subi	r28, 0xDD	; 221
    1cf6:	de 4f       	sbci	r29, 0xFE	; 254
    1cf8:	99 83       	std	Y+1, r25	; 0x01
    1cfa:	88 83       	st	Y, r24
    1cfc:	c3 52       	subi	r28, 0x23	; 35
    1cfe:	d1 40       	sbci	r29, 0x01	; 1
    1d00:	cb 5d       	subi	r28, 0xDB	; 219
    1d02:	de 4f       	sbci	r29, 0xFE	; 254
    1d04:	99 83       	std	Y+1, r25	; 0x01
    1d06:	88 83       	st	Y, r24
    1d08:	c5 52       	subi	r28, 0x25	; 37
    1d0a:	d1 40       	sbci	r29, 0x01	; 1
    1d0c:	c9 5d       	subi	r28, 0xD9	; 217
    1d0e:	de 4f       	sbci	r29, 0xFE	; 254
    1d10:	99 83       	std	Y+1, r25	; 0x01
    1d12:	88 83       	st	Y, r24
    1d14:	c7 52       	subi	r28, 0x27	; 39
    1d16:	d1 40       	sbci	r29, 0x01	; 1
    1d18:	c7 5d       	subi	r28, 0xD7	; 215
    1d1a:	de 4f       	sbci	r29, 0xFE	; 254
    1d1c:	99 83       	std	Y+1, r25	; 0x01
    1d1e:	88 83       	st	Y, r24
    1d20:	c9 52       	subi	r28, 0x29	; 41
    1d22:	d1 40       	sbci	r29, 0x01	; 1
    1d24:	c5 5d       	subi	r28, 0xD5	; 213
    1d26:	de 4f       	sbci	r29, 0xFE	; 254
    1d28:	99 83       	std	Y+1, r25	; 0x01
    1d2a:	88 83       	st	Y, r24
    1d2c:	cb 52       	subi	r28, 0x2B	; 43
    1d2e:	d1 40       	sbci	r29, 0x01	; 1
    1d30:	c3 5d       	subi	r28, 0xD3	; 211
    1d32:	de 4f       	sbci	r29, 0xFE	; 254
    1d34:	99 83       	std	Y+1, r25	; 0x01
    1d36:	88 83       	st	Y, r24
    1d38:	cd 52       	subi	r28, 0x2D	; 45
    1d3a:	d1 40       	sbci	r29, 0x01	; 1
    1d3c:	c1 5d       	subi	r28, 0xD1	; 209
    1d3e:	de 4f       	sbci	r29, 0xFE	; 254
    1d40:	99 83       	std	Y+1, r25	; 0x01
    1d42:	88 83       	st	Y, r24
    1d44:	cf 52       	subi	r28, 0x2F	; 47
    1d46:	d1 40       	sbci	r29, 0x01	; 1
    1d48:	21 e0       	ldi	r18, 0x01	; 1
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	cf 5c       	subi	r28, 0xCF	; 207
    1d4e:	de 4f       	sbci	r29, 0xFE	; 254
    1d50:	39 83       	std	Y+1, r19	; 0x01
    1d52:	28 83       	st	Y, r18
    1d54:	c1 53       	subi	r28, 0x31	; 49
    1d56:	d1 40       	sbci	r29, 0x01	; 1
    1d58:	cd 5c       	subi	r28, 0xCD	; 205
    1d5a:	de 4f       	sbci	r29, 0xFE	; 254
    1d5c:	39 83       	std	Y+1, r19	; 0x01
    1d5e:	28 83       	st	Y, r18
    1d60:	c3 53       	subi	r28, 0x33	; 51
    1d62:	d1 40       	sbci	r29, 0x01	; 1
    1d64:	cb 5c       	subi	r28, 0xCB	; 203
    1d66:	de 4f       	sbci	r29, 0xFE	; 254
    1d68:	39 83       	std	Y+1, r19	; 0x01
    1d6a:	28 83       	st	Y, r18
    1d6c:	c5 53       	subi	r28, 0x35	; 53
    1d6e:	d1 40       	sbci	r29, 0x01	; 1
    1d70:	c9 5c       	subi	r28, 0xC9	; 201
    1d72:	de 4f       	sbci	r29, 0xFE	; 254
    1d74:	39 83       	std	Y+1, r19	; 0x01
    1d76:	28 83       	st	Y, r18
    1d78:	c7 53       	subi	r28, 0x37	; 55
    1d7a:	d1 40       	sbci	r29, 0x01	; 1
    1d7c:	c7 5c       	subi	r28, 0xC7	; 199
    1d7e:	de 4f       	sbci	r29, 0xFE	; 254
    1d80:	39 83       	std	Y+1, r19	; 0x01
    1d82:	28 83       	st	Y, r18
    1d84:	c9 53       	subi	r28, 0x39	; 57
    1d86:	d1 40       	sbci	r29, 0x01	; 1
    1d88:	c5 5c       	subi	r28, 0xC5	; 197
    1d8a:	de 4f       	sbci	r29, 0xFE	; 254
    1d8c:	39 83       	std	Y+1, r19	; 0x01
    1d8e:	28 83       	st	Y, r18
    1d90:	cb 53       	subi	r28, 0x3B	; 59
    1d92:	d1 40       	sbci	r29, 0x01	; 1
    1d94:	c3 5c       	subi	r28, 0xC3	; 195
    1d96:	de 4f       	sbci	r29, 0xFE	; 254
    1d98:	39 83       	std	Y+1, r19	; 0x01
    1d9a:	28 83       	st	Y, r18
    1d9c:	cd 53       	subi	r28, 0x3D	; 61
    1d9e:	d1 40       	sbci	r29, 0x01	; 1
    1da0:	c1 5c       	subi	r28, 0xC1	; 193
    1da2:	de 4f       	sbci	r29, 0xFE	; 254
    1da4:	39 83       	std	Y+1, r19	; 0x01
    1da6:	28 83       	st	Y, r18
    1da8:	cf 53       	subi	r28, 0x3F	; 63
    1daa:	d1 40       	sbci	r29, 0x01	; 1
    1dac:	cf 5b       	subi	r28, 0xBF	; 191
    1dae:	de 4f       	sbci	r29, 0xFE	; 254
    1db0:	39 83       	std	Y+1, r19	; 0x01
    1db2:	28 83       	st	Y, r18
    1db4:	c1 54       	subi	r28, 0x41	; 65
    1db6:	d1 40       	sbci	r29, 0x01	; 1
    1db8:	cd 5b       	subi	r28, 0xBD	; 189
    1dba:	de 4f       	sbci	r29, 0xFE	; 254
    1dbc:	39 83       	std	Y+1, r19	; 0x01
    1dbe:	28 83       	st	Y, r18
    1dc0:	c3 54       	subi	r28, 0x43	; 67
    1dc2:	d1 40       	sbci	r29, 0x01	; 1
    1dc4:	cb 5b       	subi	r28, 0xBB	; 187
    1dc6:	de 4f       	sbci	r29, 0xFE	; 254
    1dc8:	39 83       	std	Y+1, r19	; 0x01
    1dca:	28 83       	st	Y, r18
    1dcc:	c5 54       	subi	r28, 0x45	; 69
    1dce:	d1 40       	sbci	r29, 0x01	; 1
    1dd0:	c9 5b       	subi	r28, 0xB9	; 185
    1dd2:	de 4f       	sbci	r29, 0xFE	; 254
    1dd4:	39 83       	std	Y+1, r19	; 0x01
    1dd6:	28 83       	st	Y, r18
    1dd8:	c7 54       	subi	r28, 0x47	; 71
    1dda:	d1 40       	sbci	r29, 0x01	; 1
    1ddc:	c7 5b       	subi	r28, 0xB7	; 183
    1dde:	de 4f       	sbci	r29, 0xFE	; 254
    1de0:	39 83       	std	Y+1, r19	; 0x01
    1de2:	28 83       	st	Y, r18
    1de4:	c9 54       	subi	r28, 0x49	; 73
    1de6:	d1 40       	sbci	r29, 0x01	; 1
    1de8:	c5 5b       	subi	r28, 0xB5	; 181
    1dea:	de 4f       	sbci	r29, 0xFE	; 254
    1dec:	39 83       	std	Y+1, r19	; 0x01
    1dee:	28 83       	st	Y, r18
    1df0:	cb 54       	subi	r28, 0x4B	; 75
    1df2:	d1 40       	sbci	r29, 0x01	; 1
    1df4:	c3 5b       	subi	r28, 0xB3	; 179
    1df6:	de 4f       	sbci	r29, 0xFE	; 254
    1df8:	39 83       	std	Y+1, r19	; 0x01
    1dfa:	28 83       	st	Y, r18
    1dfc:	cd 54       	subi	r28, 0x4D	; 77
    1dfe:	d1 40       	sbci	r29, 0x01	; 1
    1e00:	80 ed       	ldi	r24, 0xD0	; 208
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	cf 57       	subi	r28, 0x7F	; 127
    1e06:	de 4f       	sbci	r29, 0xFE	; 254
    1e08:	99 83       	std	Y+1, r25	; 0x01
    1e0a:	88 83       	st	Y, r24
    1e0c:	c1 58       	subi	r28, 0x81	; 129
    1e0e:	d1 40       	sbci	r29, 0x01	; 1
    1e10:	8b ed       	ldi	r24, 0xDB	; 219
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	cd 57       	subi	r28, 0x7D	; 125
    1e16:	de 4f       	sbci	r29, 0xFE	; 254
    1e18:	99 83       	std	Y+1, r25	; 0x01
    1e1a:	88 83       	st	Y, r24
    1e1c:	c3 58       	subi	r28, 0x83	; 131
    1e1e:	d1 40       	sbci	r29, 0x01	; 1
    1e20:	88 ee       	ldi	r24, 0xE8	; 232
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	cb 57       	subi	r28, 0x7B	; 123
    1e26:	de 4f       	sbci	r29, 0xFE	; 254
    1e28:	99 83       	std	Y+1, r25	; 0x01
    1e2a:	88 83       	st	Y, r24
    1e2c:	c5 58       	subi	r28, 0x85	; 133
    1e2e:	d1 40       	sbci	r29, 0x01	; 1
    1e30:	84 ef       	ldi	r24, 0xF4	; 244
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	c9 57       	subi	r28, 0x79	; 121
    1e36:	de 4f       	sbci	r29, 0xFE	; 254
    1e38:	99 83       	std	Y+1, r25	; 0x01
    1e3a:	88 83       	st	Y, r24
    1e3c:	c7 58       	subi	r28, 0x87	; 135
    1e3e:	d1 40       	sbci	r29, 0x01	; 1
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	91 e0       	ldi	r25, 0x01	; 1
    1e44:	c7 57       	subi	r28, 0x77	; 119
    1e46:	de 4f       	sbci	r29, 0xFE	; 254
    1e48:	99 83       	std	Y+1, r25	; 0x01
    1e4a:	88 83       	st	Y, r24
    1e4c:	c9 58       	subi	r28, 0x89	; 137
    1e4e:	d1 40       	sbci	r29, 0x01	; 1
    1e50:	80 e1       	ldi	r24, 0x10	; 16
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	c5 57       	subi	r28, 0x75	; 117
    1e56:	de 4f       	sbci	r29, 0xFE	; 254
    1e58:	99 83       	std	Y+1, r25	; 0x01
    1e5a:	88 83       	st	Y, r24
    1e5c:	cb 58       	subi	r28, 0x8B	; 139
    1e5e:	d1 40       	sbci	r29, 0x01	; 1
    1e60:	8f e1       	ldi	r24, 0x1F	; 31
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	c3 57       	subi	r28, 0x73	; 115
    1e66:	de 4f       	sbci	r29, 0xFE	; 254
    1e68:	99 83       	std	Y+1, r25	; 0x01
    1e6a:	88 83       	st	Y, r24
    1e6c:	cd 58       	subi	r28, 0x8D	; 141
    1e6e:	d1 40       	sbci	r29, 0x01	; 1
    1e70:	8f e2       	ldi	r24, 0x2F	; 47
    1e72:	91 e0       	ldi	r25, 0x01	; 1
    1e74:	c1 57       	subi	r28, 0x71	; 113
    1e76:	de 4f       	sbci	r29, 0xFE	; 254
    1e78:	99 83       	std	Y+1, r25	; 0x01
    1e7a:	88 83       	st	Y, r24
    1e7c:	cf 58       	subi	r28, 0x8F	; 143
    1e7e:	d1 40       	sbci	r29, 0x01	; 1
    1e80:	80 e4       	ldi	r24, 0x40	; 64
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	cf 56       	subi	r28, 0x6F	; 111
    1e86:	de 4f       	sbci	r29, 0xFE	; 254
    1e88:	99 83       	std	Y+1, r25	; 0x01
    1e8a:	88 83       	st	Y, r24
    1e8c:	c1 59       	subi	r28, 0x91	; 145
    1e8e:	d1 40       	sbci	r29, 0x01	; 1
    1e90:	82 e5       	ldi	r24, 0x52	; 82
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	cd 56       	subi	r28, 0x6D	; 109
    1e96:	de 4f       	sbci	r29, 0xFE	; 254
    1e98:	99 83       	std	Y+1, r25	; 0x01
    1e9a:	88 83       	st	Y, r24
    1e9c:	c3 59       	subi	r28, 0x93	; 147
    1e9e:	d1 40       	sbci	r29, 0x01	; 1
    1ea0:	85 e6       	ldi	r24, 0x65	; 101
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	cb 56       	subi	r28, 0x6B	; 107
    1ea6:	de 4f       	sbci	r29, 0xFE	; 254
    1ea8:	99 83       	std	Y+1, r25	; 0x01
    1eaa:	88 83       	st	Y, r24
    1eac:	c5 59       	subi	r28, 0x95	; 149
    1eae:	d1 40       	sbci	r29, 0x01	; 1
    1eb0:	88 e7       	ldi	r24, 0x78	; 120
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	c9 56       	subi	r28, 0x69	; 105
    1eb6:	de 4f       	sbci	r29, 0xFE	; 254
    1eb8:	99 83       	std	Y+1, r25	; 0x01
    1eba:	88 83       	st	Y, r24
    1ebc:	c7 59       	subi	r28, 0x97	; 151
    1ebe:	d1 40       	sbci	r29, 0x01	; 1
    1ec0:	8d e8       	ldi	r24, 0x8D	; 141
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	c7 56       	subi	r28, 0x67	; 103
    1ec6:	de 4f       	sbci	r29, 0xFE	; 254
    1ec8:	99 83       	std	Y+1, r25	; 0x01
    1eca:	88 83       	st	Y, r24
    1ecc:	c9 59       	subi	r28, 0x99	; 153
    1ece:	d1 40       	sbci	r29, 0x01	; 1
    1ed0:	83 ea       	ldi	r24, 0xA3	; 163
    1ed2:	91 e0       	ldi	r25, 0x01	; 1
    1ed4:	c5 56       	subi	r28, 0x65	; 101
    1ed6:	de 4f       	sbci	r29, 0xFE	; 254
    1ed8:	99 83       	std	Y+1, r25	; 0x01
    1eda:	88 83       	st	Y, r24
    1edc:	cb 59       	subi	r28, 0x9B	; 155
    1ede:	d1 40       	sbci	r29, 0x01	; 1
    1ee0:	8a eb       	ldi	r24, 0xBA	; 186
    1ee2:	91 e0       	ldi	r25, 0x01	; 1
    1ee4:	c3 56       	subi	r28, 0x63	; 99
    1ee6:	de 4f       	sbci	r29, 0xFE	; 254
    1ee8:	99 83       	std	Y+1, r25	; 0x01
    1eea:	88 83       	st	Y, r24
    1eec:	cd 59       	subi	r28, 0x9D	; 157
    1eee:	d1 40       	sbci	r29, 0x01	; 1
    1ef0:	83 ed       	ldi	r24, 0xD3	; 211
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	c1 56       	subi	r28, 0x61	; 97
    1ef6:	de 4f       	sbci	r29, 0xFE	; 254
    1ef8:	99 83       	std	Y+1, r25	; 0x01
    1efa:	88 83       	st	Y, r24
    1efc:	cf 59       	subi	r28, 0x9F	; 159
    1efe:	d1 40       	sbci	r29, 0x01	; 1
    1f00:	8d ee       	ldi	r24, 0xED	; 237
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	cf 55       	subi	r28, 0x5F	; 95
    1f06:	de 4f       	sbci	r29, 0xFE	; 254
    1f08:	99 83       	std	Y+1, r25	; 0x01
    1f0a:	88 83       	st	Y, r24
    1f0c:	c1 5a       	subi	r28, 0xA1	; 161
    1f0e:	d1 40       	sbci	r29, 0x01	; 1
    1f10:	83 e0       	ldi	r24, 0x03	; 3
    1f12:	92 e0       	ldi	r25, 0x02	; 2
    1f14:	cd 55       	subi	r28, 0x5D	; 93
    1f16:	de 4f       	sbci	r29, 0xFE	; 254
    1f18:	99 83       	std	Y+1, r25	; 0x01
    1f1a:	88 83       	st	Y, r24
    1f1c:	c3 5a       	subi	r28, 0xA3	; 163
    1f1e:	d1 40       	sbci	r29, 0x01	; 1
    1f20:	80 e2       	ldi	r24, 0x20	; 32
    1f22:	92 e0       	ldi	r25, 0x02	; 2
    1f24:	cb 55       	subi	r28, 0x5B	; 91
    1f26:	de 4f       	sbci	r29, 0xFE	; 254
    1f28:	99 83       	std	Y+1, r25	; 0x01
    1f2a:	88 83       	st	Y, r24
    1f2c:	c5 5a       	subi	r28, 0xA5	; 165
    1f2e:	d1 40       	sbci	r29, 0x01	; 1
    1f30:	8e e3       	ldi	r24, 0x3E	; 62
    1f32:	92 e0       	ldi	r25, 0x02	; 2
    1f34:	c9 55       	subi	r28, 0x59	; 89
    1f36:	de 4f       	sbci	r29, 0xFE	; 254
    1f38:	99 83       	std	Y+1, r25	; 0x01
    1f3a:	88 83       	st	Y, r24
    1f3c:	c7 5a       	subi	r28, 0xA7	; 167
    1f3e:	d1 40       	sbci	r29, 0x01	; 1
    1f40:	8d e5       	ldi	r24, 0x5D	; 93
    1f42:	92 e0       	ldi	r25, 0x02	; 2
    1f44:	c7 55       	subi	r28, 0x57	; 87
    1f46:	de 4f       	sbci	r29, 0xFE	; 254
    1f48:	99 83       	std	Y+1, r25	; 0x01
    1f4a:	88 83       	st	Y, r24
    1f4c:	c9 5a       	subi	r28, 0xA9	; 169
    1f4e:	d1 40       	sbci	r29, 0x01	; 1
    1f50:	8f e7       	ldi	r24, 0x7F	; 127
    1f52:	92 e0       	ldi	r25, 0x02	; 2
    1f54:	c5 55       	subi	r28, 0x55	; 85
    1f56:	de 4f       	sbci	r29, 0xFE	; 254
    1f58:	99 83       	std	Y+1, r25	; 0x01
    1f5a:	88 83       	st	Y, r24
    1f5c:	cb 5a       	subi	r28, 0xAB	; 171
    1f5e:	d1 40       	sbci	r29, 0x01	; 1
    1f60:	82 ea       	ldi	r24, 0xA2	; 162
    1f62:	92 e0       	ldi	r25, 0x02	; 2
    1f64:	c3 55       	subi	r28, 0x53	; 83
    1f66:	de 4f       	sbci	r29, 0xFE	; 254
    1f68:	99 83       	std	Y+1, r25	; 0x01
    1f6a:	88 83       	st	Y, r24
    1f6c:	cd 5a       	subi	r28, 0xAD	; 173
    1f6e:	d1 40       	sbci	r29, 0x01	; 1
    1f70:	88 ec       	ldi	r24, 0xC8	; 200
    1f72:	92 e0       	ldi	r25, 0x02	; 2
    1f74:	c1 55       	subi	r28, 0x51	; 81
    1f76:	de 4f       	sbci	r29, 0xFE	; 254
    1f78:	99 83       	std	Y+1, r25	; 0x01
    1f7a:	88 83       	st	Y, r24
    1f7c:	cf 5a       	subi	r28, 0xAF	; 175
    1f7e:	d1 40       	sbci	r29, 0x01	; 1
    1f80:	8f ee       	ldi	r24, 0xEF	; 239
    1f82:	92 e0       	ldi	r25, 0x02	; 2
    1f84:	cf 54       	subi	r28, 0x4F	; 79
    1f86:	de 4f       	sbci	r29, 0xFE	; 254
    1f88:	99 83       	std	Y+1, r25	; 0x01
    1f8a:	88 83       	st	Y, r24
    1f8c:	c1 5b       	subi	r28, 0xB1	; 177
    1f8e:	d1 40       	sbci	r29, 0x01	; 1
    1f90:	89 e1       	ldi	r24, 0x19	; 25
    1f92:	93 e0       	ldi	r25, 0x03	; 3
    1f94:	cd 54       	subi	r28, 0x4D	; 77
    1f96:	de 4f       	sbci	r29, 0xFE	; 254
    1f98:	99 83       	std	Y+1, r25	; 0x01
    1f9a:	88 83       	st	Y, r24
    1f9c:	c3 5b       	subi	r28, 0xB3	; 179
    1f9e:	d1 40       	sbci	r29, 0x01	; 1
    1fa0:	88 e3       	ldi	r24, 0x38	; 56
    1fa2:	93 e0       	ldi	r25, 0x03	; 3
    1fa4:	cb 54       	subi	r28, 0x4B	; 75
    1fa6:	de 4f       	sbci	r29, 0xFE	; 254
    1fa8:	99 83       	std	Y+1, r25	; 0x01
    1faa:	88 83       	st	Y, r24
    1fac:	c5 5b       	subi	r28, 0xB5	; 181
    1fae:	d1 40       	sbci	r29, 0x01	; 1
    1fb0:	84 e6       	ldi	r24, 0x64	; 100
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	c9 54       	subi	r28, 0x49	; 73
    1fb6:	de 4f       	sbci	r29, 0xFE	; 254
    1fb8:	99 83       	std	Y+1, r25	; 0x01
    1fba:	88 83       	st	Y, r24
    1fbc:	c7 5b       	subi	r28, 0xB7	; 183
    1fbe:	d1 40       	sbci	r29, 0x01	; 1
    1fc0:	82 e9       	ldi	r24, 0x92	; 146
    1fc2:	93 e0       	ldi	r25, 0x03	; 3
    1fc4:	c7 54       	subi	r28, 0x47	; 71
    1fc6:	de 4f       	sbci	r29, 0xFE	; 254
    1fc8:	99 83       	std	Y+1, r25	; 0x01
    1fca:	88 83       	st	Y, r24
    1fcc:	c9 5b       	subi	r28, 0xB9	; 185
    1fce:	d1 40       	sbci	r29, 0x01	; 1
    1fd0:	84 ec       	ldi	r24, 0xC4	; 196
    1fd2:	93 e0       	ldi	r25, 0x03	; 3
    1fd4:	c5 54       	subi	r28, 0x45	; 69
    1fd6:	de 4f       	sbci	r29, 0xFE	; 254
    1fd8:	99 83       	std	Y+1, r25	; 0x01
    1fda:	88 83       	st	Y, r24
    1fdc:	cb 5b       	subi	r28, 0xBB	; 187
    1fde:	d1 40       	sbci	r29, 0x01	; 1
    1fe0:	89 ef       	ldi	r24, 0xF9	; 249
    1fe2:	93 e0       	ldi	r25, 0x03	; 3
    1fe4:	c3 54       	subi	r28, 0x43	; 67
    1fe6:	de 4f       	sbci	r29, 0xFE	; 254
    1fe8:	99 83       	std	Y+1, r25	; 0x01
    1fea:	88 83       	st	Y, r24
    1fec:	cd 5b       	subi	r28, 0xBD	; 189
    1fee:	d1 40       	sbci	r29, 0x01	; 1
    1ff0:	82 e3       	ldi	r24, 0x32	; 50
    1ff2:	94 e0       	ldi	r25, 0x04	; 4
    1ff4:	c1 54       	subi	r28, 0x41	; 65
    1ff6:	de 4f       	sbci	r29, 0xFE	; 254
    1ff8:	99 83       	std	Y+1, r25	; 0x01
    1ffa:	88 83       	st	Y, r24
    1ffc:	cf 5b       	subi	r28, 0xBF	; 191
    1ffe:	d1 40       	sbci	r29, 0x01	; 1
    2000:	8e e6       	ldi	r24, 0x6E	; 110
    2002:	94 e0       	ldi	r25, 0x04	; 4
    2004:	cf 53       	subi	r28, 0x3F	; 63
    2006:	de 4f       	sbci	r29, 0xFE	; 254
    2008:	99 83       	std	Y+1, r25	; 0x01
    200a:	88 83       	st	Y, r24
    200c:	c1 5c       	subi	r28, 0xC1	; 193
    200e:	d1 40       	sbci	r29, 0x01	; 1
    2010:	8d ea       	ldi	r24, 0xAD	; 173
    2012:	94 e0       	ldi	r25, 0x04	; 4
    2014:	cd 53       	subi	r28, 0x3D	; 61
    2016:	de 4f       	sbci	r29, 0xFE	; 254
    2018:	99 83       	std	Y+1, r25	; 0x01
    201a:	88 83       	st	Y, r24
    201c:	c3 5c       	subi	r28, 0xC3	; 195
    201e:	d1 40       	sbci	r29, 0x01	; 1
    2020:	8f ee       	ldi	r24, 0xEF	; 239
    2022:	94 e0       	ldi	r25, 0x04	; 4
    2024:	cb 53       	subi	r28, 0x3B	; 59
    2026:	de 4f       	sbci	r29, 0xFE	; 254
    2028:	99 83       	std	Y+1, r25	; 0x01
    202a:	88 83       	st	Y, r24
    202c:	c5 5c       	subi	r28, 0xC5	; 197
    202e:	d1 40       	sbci	r29, 0x01	; 1
    2030:	85 e3       	ldi	r24, 0x35	; 53
    2032:	95 e0       	ldi	r25, 0x05	; 5
    2034:	c9 53       	subi	r28, 0x39	; 57
    2036:	de 4f       	sbci	r29, 0xFE	; 254
    2038:	99 83       	std	Y+1, r25	; 0x01
    203a:	88 83       	st	Y, r24
    203c:	c7 5c       	subi	r28, 0xC7	; 199
    203e:	d1 40       	sbci	r29, 0x01	; 1
    2040:	8f e7       	ldi	r24, 0x7F	; 127
    2042:	95 e0       	ldi	r25, 0x05	; 5
    2044:	c7 53       	subi	r28, 0x37	; 55
    2046:	de 4f       	sbci	r29, 0xFE	; 254
    2048:	99 83       	std	Y+1, r25	; 0x01
    204a:	88 83       	st	Y, r24
    204c:	c9 5c       	subi	r28, 0xC9	; 201
    204e:	d1 40       	sbci	r29, 0x01	; 1
    2050:	8d ec       	ldi	r24, 0xCD	; 205
    2052:	95 e0       	ldi	r25, 0x05	; 5
    2054:	c5 53       	subi	r28, 0x35	; 53
    2056:	de 4f       	sbci	r29, 0xFE	; 254
    2058:	99 83       	std	Y+1, r25	; 0x01
    205a:	88 83       	st	Y, r24
    205c:	cb 5c       	subi	r28, 0xCB	; 203
    205e:	d1 40       	sbci	r29, 0x01	; 1
    2060:	8c ef       	ldi	r24, 0xFC	; 252
    2062:	95 e0       	ldi	r25, 0x05	; 5
    2064:	c3 53       	subi	r28, 0x33	; 51
    2066:	de 4f       	sbci	r29, 0xFE	; 254
    2068:	99 83       	std	Y+1, r25	; 0x01
    206a:	88 83       	st	Y, r24
    206c:	cd 5c       	subi	r28, 0xCD	; 205
    206e:	d1 40       	sbci	r29, 0x01	; 1
    2070:	8e e4       	ldi	r24, 0x4E	; 78
    2072:	96 e0       	ldi	r25, 0x06	; 6
    2074:	c1 53       	subi	r28, 0x31	; 49
    2076:	de 4f       	sbci	r29, 0xFE	; 254
    2078:	99 83       	std	Y+1, r25	; 0x01
    207a:	88 83       	st	Y, r24
    207c:	cf 5c       	subi	r28, 0xCF	; 207
    207e:	d1 40       	sbci	r29, 0x01	; 1
    2080:	87 ea       	ldi	r24, 0xA7	; 167
    2082:	96 e0       	ldi	r25, 0x06	; 6
    2084:	cf 52       	subi	r28, 0x2F	; 47
    2086:	de 4f       	sbci	r29, 0xFE	; 254
    2088:	99 83       	std	Y+1, r25	; 0x01
    208a:	88 83       	st	Y, r24
    208c:	c1 5d       	subi	r28, 0xD1	; 209
    208e:	d1 40       	sbci	r29, 0x01	; 1
    2090:	86 e0       	ldi	r24, 0x06	; 6
    2092:	97 e0       	ldi	r25, 0x07	; 7
    2094:	cd 52       	subi	r28, 0x2D	; 45
    2096:	de 4f       	sbci	r29, 0xFE	; 254
    2098:	99 83       	std	Y+1, r25	; 0x01
    209a:	88 83       	st	Y, r24
    209c:	c3 5d       	subi	r28, 0xD3	; 211
    209e:	d1 40       	sbci	r29, 0x01	; 1
    20a0:	84 e6       	ldi	r24, 0x64	; 100
    20a2:	97 e0       	ldi	r25, 0x07	; 7
    20a4:	cb 52       	subi	r28, 0x2B	; 43
    20a6:	de 4f       	sbci	r29, 0xFE	; 254
    20a8:	99 83       	std	Y+1, r25	; 0x01
    20aa:	88 83       	st	Y, r24
    20ac:	c5 5d       	subi	r28, 0xD5	; 213
    20ae:	d1 40       	sbci	r29, 0x01	; 1
    20b0:	80 ed       	ldi	r24, 0xD0	; 208
    20b2:	97 e0       	ldi	r25, 0x07	; 7
    20b4:	c9 52       	subi	r28, 0x29	; 41
    20b6:	de 4f       	sbci	r29, 0xFE	; 254
    20b8:	99 83       	std	Y+1, r25	; 0x01
    20ba:	88 83       	st	Y, r24
    20bc:	c7 5d       	subi	r28, 0xD7	; 215
    20be:	d1 40       	sbci	r29, 0x01	; 1
    20c0:	83 e3       	ldi	r24, 0x33	; 51
    20c2:	98 e0       	ldi	r25, 0x08	; 8
    20c4:	c7 52       	subi	r28, 0x27	; 39
    20c6:	de 4f       	sbci	r29, 0xFE	; 254
    20c8:	99 83       	std	Y+1, r25	; 0x01
    20ca:	88 83       	st	Y, r24
    20cc:	c9 5d       	subi	r28, 0xD9	; 217
    20ce:	d1 40       	sbci	r29, 0x01	; 1
    20d0:	8b ea       	ldi	r24, 0xAB	; 171
    20d2:	98 e0       	ldi	r25, 0x08	; 8
    20d4:	c5 52       	subi	r28, 0x25	; 37
    20d6:	de 4f       	sbci	r29, 0xFE	; 254
    20d8:	99 83       	std	Y+1, r25	; 0x01
    20da:	88 83       	st	Y, r24
    20dc:	cb 5d       	subi	r28, 0xDB	; 219
    20de:	d1 40       	sbci	r29, 0x01	; 1
    20e0:	86 e2       	ldi	r24, 0x26	; 38
    20e2:	99 e0       	ldi	r25, 0x09	; 9
    20e4:	c3 52       	subi	r28, 0x23	; 35
    20e6:	de 4f       	sbci	r29, 0xFE	; 254
    20e8:	99 83       	std	Y+1, r25	; 0x01
    20ea:	88 83       	st	Y, r24
    20ec:	cd 5d       	subi	r28, 0xDD	; 221
    20ee:	d1 40       	sbci	r29, 0x01	; 1
    20f0:	88 ea       	ldi	r24, 0xA8	; 168
    20f2:	99 e0       	ldi	r25, 0x09	; 9
    20f4:	c1 52       	subi	r28, 0x21	; 33
    20f6:	de 4f       	sbci	r29, 0xFE	; 254
    20f8:	99 83       	std	Y+1, r25	; 0x01
    20fa:	88 83       	st	Y, r24
    20fc:	cf 5d       	subi	r28, 0xDF	; 223
    20fe:	d1 40       	sbci	r29, 0x01	; 1
    2100:	81 e3       	ldi	r24, 0x31	; 49
    2102:	9a e0       	ldi	r25, 0x0A	; 10
    2104:	cf 51       	subi	r28, 0x1F	; 31
    2106:	de 4f       	sbci	r29, 0xFE	; 254
    2108:	99 83       	std	Y+1, r25	; 0x01
    210a:	88 83       	st	Y, r24
    210c:	c1 5e       	subi	r28, 0xE1	; 225
    210e:	d1 40       	sbci	r29, 0x01	; 1
    2110:	82 ef       	ldi	r24, 0xF2	; 242
    2112:	92 e0       	ldi	r25, 0x02	; 2
    2114:	cd 51       	subi	r28, 0x1D	; 29
    2116:	de 4f       	sbci	r29, 0xFE	; 254
    2118:	99 83       	std	Y+1, r25	; 0x01
    211a:	88 83       	st	Y, r24
    211c:	c3 5e       	subi	r28, 0xE3	; 227
    211e:	d1 40       	sbci	r29, 0x01	; 1
    2120:	8a e5       	ldi	r24, 0x5A	; 90
    2122:	9b e0       	ldi	r25, 0x0B	; 11
    2124:	cb 51       	subi	r28, 0x1B	; 27
    2126:	de 4f       	sbci	r29, 0xFE	; 254
    2128:	99 83       	std	Y+1, r25	; 0x01
    212a:	88 83       	st	Y, r24
    212c:	c5 5e       	subi	r28, 0xE5	; 229
    212e:	d1 40       	sbci	r29, 0x01	; 1
    2130:	8d ed       	ldi	r24, 0xDD	; 221
    2132:	9b e0       	ldi	r25, 0x0B	; 11
    2134:	c9 51       	subi	r28, 0x19	; 25
    2136:	de 4f       	sbci	r29, 0xFE	; 254
    2138:	99 83       	std	Y+1, r25	; 0x01
    213a:	88 83       	st	Y, r24
    213c:	c7 5e       	subi	r28, 0xE7	; 231
    213e:	d1 40       	sbci	r29, 0x01	; 1
    2140:	85 e8       	ldi	r24, 0x85	; 133
    2142:	9c e0       	ldi	r25, 0x0C	; 12
    2144:	c7 51       	subi	r28, 0x17	; 23
    2146:	de 4f       	sbci	r29, 0xFE	; 254
    2148:	99 83       	std	Y+1, r25	; 0x01
    214a:	88 83       	st	Y, r24
    214c:	c9 5e       	subi	r28, 0xE9	; 233
    214e:	d1 40       	sbci	r29, 0x01	; 1
    2150:	87 e3       	ldi	r24, 0x37	; 55
    2152:	9d e0       	ldi	r25, 0x0D	; 13
    2154:	c5 51       	subi	r28, 0x15	; 21
    2156:	de 4f       	sbci	r29, 0xFE	; 254
    2158:	99 83       	std	Y+1, r25	; 0x01
    215a:	88 83       	st	Y, r24
    215c:	cb 5e       	subi	r28, 0xEB	; 235
    215e:	d1 40       	sbci	r29, 0x01	; 1
    2160:	82 ef       	ldi	r24, 0xF2	; 242
    2162:	9d e0       	ldi	r25, 0x0D	; 13
    2164:	c3 51       	subi	r28, 0x13	; 19
    2166:	de 4f       	sbci	r29, 0xFE	; 254
    2168:	99 83       	std	Y+1, r25	; 0x01
    216a:	88 83       	st	Y, r24
    216c:	cd 5e       	subi	r28, 0xED	; 237
    216e:	d1 40       	sbci	r29, 0x01	; 1
    2170:	88 eb       	ldi	r24, 0xB8	; 184
    2172:	9e e0       	ldi	r25, 0x0E	; 14
    2174:	c1 51       	subi	r28, 0x11	; 17
    2176:	de 4f       	sbci	r29, 0xFE	; 254
    2178:	99 83       	std	Y+1, r25	; 0x01
    217a:	88 83       	st	Y, r24
    217c:	cf 5e       	subi	r28, 0xEF	; 239
    217e:	d1 40       	sbci	r29, 0x01	; 1
    2180:	89 e8       	ldi	r24, 0x89	; 137
    2182:	9f e0       	ldi	r25, 0x0F	; 15
    2184:	cf 50       	subi	r28, 0x0F	; 15
    2186:	de 4f       	sbci	r29, 0xFE	; 254
    2188:	99 83       	std	Y+1, r25	; 0x01
    218a:	88 83       	st	Y, r24
    218c:	c1 5f       	subi	r28, 0xF1	; 241
    218e:	d1 40       	sbci	r29, 0x01	; 1
    2190:	85 e6       	ldi	r24, 0x65	; 101
    2192:	90 e1       	ldi	r25, 0x10	; 16
    2194:	cd 50       	subi	r28, 0x0D	; 13
    2196:	de 4f       	sbci	r29, 0xFE	; 254
    2198:	99 83       	std	Y+1, r25	; 0x01
    219a:	88 83       	st	Y, r24
    219c:	c3 5f       	subi	r28, 0xF3	; 243
    219e:	d1 40       	sbci	r29, 0x01	; 1
    21a0:	8e e4       	ldi	r24, 0x4E	; 78
    21a2:	91 e1       	ldi	r25, 0x11	; 17
    21a4:	cb 50       	subi	r28, 0x0B	; 11
    21a6:	de 4f       	sbci	r29, 0xFE	; 254
    21a8:	99 83       	std	Y+1, r25	; 0x01
    21aa:	88 83       	st	Y, r24
    21ac:	c5 5f       	subi	r28, 0xF5	; 245
    21ae:	d1 40       	sbci	r29, 0x01	; 1
    21b0:	83 e4       	ldi	r24, 0x43	; 67
    21b2:	92 e1       	ldi	r25, 0x12	; 18
    21b4:	c9 50       	subi	r28, 0x09	; 9
    21b6:	de 4f       	sbci	r29, 0xFE	; 254
    21b8:	99 83       	std	Y+1, r25	; 0x01
    21ba:	88 83       	st	Y, r24
    21bc:	c7 5f       	subi	r28, 0xF7	; 247
    21be:	d1 40       	sbci	r29, 0x01	; 1
    21c0:	86 e4       	ldi	r24, 0x46	; 70
    21c2:	93 e1       	ldi	r25, 0x13	; 19
    21c4:	c7 50       	subi	r28, 0x07	; 7
    21c6:	de 4f       	sbci	r29, 0xFE	; 254
    21c8:	99 83       	std	Y+1, r25	; 0x01
    21ca:	88 83       	st	Y, r24
    21cc:	c9 5f       	subi	r28, 0xF9	; 249
    21ce:	d1 40       	sbci	r29, 0x01	; 1
    21d0:	8b ec       	ldi	r24, 0xCB	; 203
    21d2:	93 e1       	ldi	r25, 0x13	; 19
    21d4:	c5 50       	subi	r28, 0x05	; 5
    21d6:	de 4f       	sbci	r29, 0xFE	; 254
    21d8:	99 83       	std	Y+1, r25	; 0x01
    21da:	88 83       	st	Y, r24
    21dc:	cb 5f       	subi	r28, 0xFB	; 251
    21de:	d1 40       	sbci	r29, 0x01	; 1
    21e0:	8b ec       	ldi	r24, 0xCB	; 203
    21e2:	94 e1       	ldi	r25, 0x14	; 20
    21e4:	c3 50       	subi	r28, 0x03	; 3
    21e6:	de 4f       	sbci	r29, 0xFE	; 254
    21e8:	99 83       	std	Y+1, r25	; 0x01
    21ea:	88 83       	st	Y, r24
    21ec:	cd 5f       	subi	r28, 0xFD	; 253
    21ee:	d1 40       	sbci	r29, 0x01	; 1
    21f0:	84 ee       	ldi	r24, 0xE4	; 228
    21f2:	95 e1       	ldi	r25, 0x15	; 21
    21f4:	c1 50       	subi	r28, 0x01	; 1
    21f6:	de 4f       	sbci	r29, 0xFE	; 254
    21f8:	99 83       	std	Y+1, r25	; 0x01
    21fa:	88 83       	st	Y, r24
    21fc:	cf 5f       	subi	r28, 0xFF	; 255
    21fe:	d1 40       	sbci	r29, 0x01	; 1
	135, 139, 146, 150, 159, 163, 174, 180, 192, 200, 216, 233, 243, 264, 278, 306, 323, 359, 381, 432, 466, 542, 586, 699, 779, 980, 1101, 1434, 1684, 2409, 2955, 4563}},//PPM values
	{{8, 7, 7, 6, 6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},{208, 219, 232, 244, 258, 272, 287, 303, 320, 338, 357, 376, 397, 419, 442, 467, 
	493, 515, 544, 574, 605, 639, 674, 712, 751, 793, 824, 868, 914, 964, 1017, 1074, 1134, 1197, 1263, 1333, 1407, 1485, 1532, 1614, 1703, 1798, 1892, 2000, 2099, 2219, 
	2342, 2472, 2609, 754, 2906, 3037, 3205, 3383, 3570, 3768, 3977, 4197, 4430, 4675, 4934, 5067, 5323, 5604, 5915, 6242, 6588, 6952, 7337, 7744, 8172, 8625, 9102, 9606, 10031, 205}}};
	baseIndexToTable = 0;
    2200:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <baseIndexToTable+0x1>
    2204:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <baseIndexToTable>
	interpolationNum = 0;
    2208:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <interpolationNum+0x1>
    220c:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <interpolationNum>
	numTimes256 = 0;
    2210:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <numTimes256+0x1>
    2214:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <numTimes256>
	valueOfIndex = 0;
    2218:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <valueOfIndex+0x1>
    221c:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <valueOfIndex>
	
	//Per sensor - make look-up table w/ values corresponding to out put. 
	//Get approx ppm
	//write equation
	//First sensor is CO
	numTimes256 = (raw_gas_vector[0]<<8)/(R0_VALS_GAS_SENSORS[0]); //temporary routine while there is only 1 sensor, will be put into a loop later
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <raw_gas_vector>
    2226:	cd d3       	rcall	.+1946   	; 0x29c2 <__udivmodhi4>
    2228:	70 93 d2 03 	sts	0x03D2, r23	; 0x8003d2 <numTimes256+0x1>
    222c:	60 93 d1 03 	sts	0x03D1, r22	; 0x8003d1 <numTimes256>
	interpolationNum = 0x03 || numTimes256;
    2230:	30 93 b4 03 	sts	0x03B4, r19	; 0x8003b4 <interpolationNum+0x1>
    2234:	20 93 b3 03 	sts	0x03B3, r18	; 0x8003b3 <interpolationNum>
	baseIndexToTable = numTimes256 >> 2;
    2238:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <numTimes256>
    223c:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <numTimes256+0x1>
    2240:	95 95       	asr	r25
    2242:	87 95       	ror	r24
    2244:	95 95       	asr	r25
    2246:	87 95       	ror	r24
    2248:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <baseIndexToTable+0x1>
    224c:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <baseIndexToTable>
	binary_search(R0_RATIOS_CO[0], 0, 63, baseIndexToTable);
    2250:	20 91 d7 03 	lds	r18, 0x03D7	; 0x8003d7 <baseIndexToTable>
    2254:	30 91 d8 03 	lds	r19, 0x03D8	; 0x8003d8 <baseIndexToTable+0x1>
    2258:	4f e3       	ldi	r20, 0x3F	; 63
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	ce 01       	movw	r24, r28
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	13 d9       	rcall	.-3546   	; 0x148c <binary_search>
	ppmValue[0] = (((R0_RATIOS_CO[1][valueOfIndex] - R0_RATIOS_CO[1][valueOfIndex-1])*interpolationNum)>>4) + R0_RATIOS_CO[1][valueOfIndex-1];
    2266:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <valueOfIndex>
    226a:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <valueOfIndex+0x1>
    226e:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <valueOfIndex>
    2272:	30 91 40 04 	lds	r19, 0x0440	; 0x800440 <valueOfIndex+0x1>
    2276:	40 91 3f 04 	lds	r20, 0x043F	; 0x80043f <valueOfIndex>
    227a:	50 91 40 04 	lds	r21, 0x0440	; 0x800440 <valueOfIndex+0x1>
    227e:	60 91 b3 03 	lds	r22, 0x03B3	; 0x8003b3 <interpolationNum>
    2282:	70 91 b4 03 	lds	r23, 0x03B4	; 0x8003b4 <interpolationNum+0x1>
    2286:	01 96       	adiw	r24, 0x01	; 1
    2288:	96 95       	lsr	r25
    228a:	98 2f       	mov	r25, r24
    228c:	88 27       	eor	r24, r24
    228e:	97 95       	ror	r25
    2290:	87 95       	ror	r24
    2292:	e1 e0       	ldi	r30, 0x01	; 1
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	ec 0f       	add	r30, r28
    2298:	fd 1f       	adc	r31, r29
    229a:	8e 0f       	add	r24, r30
    229c:	9f 1f       	adc	r25, r31
    229e:	41 50       	subi	r20, 0x01	; 1
    22a0:	51 09       	sbc	r21, r1
    22a2:	24 1b       	sub	r18, r20
    22a4:	35 0b       	sbc	r19, r21
    22a6:	36 95       	lsr	r19
    22a8:	32 2f       	mov	r19, r18
    22aa:	22 27       	eor	r18, r18
    22ac:	37 95       	ror	r19
    22ae:	27 95       	ror	r18
    22b0:	35 95       	asr	r19
    22b2:	27 95       	ror	r18
    22b4:	26 9f       	mul	r18, r22
    22b6:	a0 01       	movw	r20, r0
    22b8:	27 9f       	mul	r18, r23
    22ba:	50 0d       	add	r21, r0
    22bc:	36 9f       	mul	r19, r22
    22be:	50 0d       	add	r21, r0
    22c0:	11 24       	eor	r1, r1
    22c2:	9a 01       	movw	r18, r20
    22c4:	35 95       	asr	r19
    22c6:	27 95       	ror	r18
    22c8:	35 95       	asr	r19
    22ca:	27 95       	ror	r18
    22cc:	35 95       	asr	r19
    22ce:	27 95       	ror	r18
    22d0:	82 0f       	add	r24, r18
    22d2:	93 1f       	adc	r25, r19
    22d4:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <ppmValue+0x1>
    22d8:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <ppmValue>

}
    22dc:	ce 5f       	subi	r28, 0xFE	; 254
    22de:	d9 4f       	sbci	r29, 0xF9	; 249
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	ff 90       	pop	r15
    22f4:	ef 90       	pop	r14
    22f6:	df 90       	pop	r13
    22f8:	cf 90       	pop	r12
    22fa:	bf 90       	pop	r11
    22fc:	af 90       	pop	r10
    22fe:	9f 90       	pop	r9
    2300:	8f 90       	pop	r8
    2302:	7f 90       	pop	r7
    2304:	6f 90       	pop	r6
    2306:	5f 90       	pop	r5
    2308:	4f 90       	pop	r4
    230a:	3f 90       	pop	r3
    230c:	2f 90       	pop	r2
    230e:	08 95       	ret

00002310 <main>:
	// *************************************************************************
	//        Initialization code & device configuration
	// *************************************************************************
 	//
	// Set the I/O pins
	canary_io_pin_initialization();
    2310:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <canary_io_pin_initialization>
	//
	// Set a simple counter for the loop below.  Debug only.
	seconds=0;
    2314:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <seconds+0x1>
    2318:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <seconds>
	ItsTime=0;
    231c:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <ItsTime>
	//
	// set up our output for handling printf and string operations,,,
	stdout = &mystdout;
    2320:	8b e2       	ldi	r24, 0x2B	; 43
    2322:	91 e0       	ldi	r25, 0x01	; 1
    2324:	90 93 4a 06 	sts	0x064A, r25	; 0x80064a <__iob+0x3>
    2328:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <__iob+0x2>
	//
	// Initialize the timer counter 1 for 1Hz interrupt
	// This interrupt is only enabled if we don't have the GPS sensor connected.
	initialize_timer_counter_1();
    232c:	79 d1       	rcall	.+754    	; 0x2620 <initialize_timer_counter_1>
	//
	// Initialize our main communication to the ground (UART0)
	USART0_init(MYUBRR0);
    232e:	81 e8       	ldi	r24, 0x81	; 129
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	73 d2       	rcall	.+1254   	; 0x281a <USART0_init>
	//
	// Initialize the connection to the GPS sensor (UART1)
	USART1_init(MYUBRR1);
    2334:	81 e8       	ldi	r24, 0x81	; 129
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	cb d2       	rcall	.+1430   	; 0x28d0 <USART1_init>
	//
	// Initialize the TWI peripheral
	TWI_Master_Initialise();
    233a:	92 d1       	rcall	.+804    	; 0x2660 <TWI_Master_Initialise>
	//
	// Initialize the Analog to digital hardware - and test the I/F.
	ADC_init();
    233c:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_init>
	//
	// initialize the gas sensors
	gas_sensors_init();
    2340:	0e 94 25 09 	call	0x124a	; 0x124a <gas_sensors_init>
	//
	// Test our bad interrupt light...
	SetBit(PORTB, PORTB2);
    2344:	2a 9a       	sbi	0x05, 2	; 5
	ClearBit(PORTB, PORTB2);
    2346:	2a 98       	cbi	0x05, 2	; 5
	// 
	// Start all interrupts
	sei();
    2348:	78 94       	sei
	//
	// Initialize and check the BME interface...
	bme280basic_init();
    234a:	0e 94 aa 02 	call	0x554	; 0x554 <bme280basic_init>
	// Wait here for the start/standby button to be selected.. (PORTB pin 3).
	// Now call the routines to "kick off" the sensor measurements
	//
	// ===================================================
	// The next few lines are for debugging the (working at one time) UART0 routines...remove these lines once it is working again.
	printf("\n%s",String);
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	91 e0       	ldi	r25, 0x01	; 1
    2352:	9f 93       	push	r25
    2354:	8f 93       	push	r24
    2356:	8a e3       	ldi	r24, 0x3A	; 58
    2358:	91 e0       	ldi	r25, 0x01	; 1
    235a:	9f 93       	push	r25
    235c:	8f 93       	push	r24
    235e:	e3 d4       	rcall	.+2502   	; 0x2d26 <printf>
	//wait until button is pushed before proceeding to loop
	ToggleBit(PORTB, PORTB0); //will keep yellow LED until button is pressed.
    2360:	95 b1       	in	r25, 0x05	; 5
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	98 27       	eor	r25, r24
    2366:	95 b9       	out	0x05, r25	; 5
	// ====================================================
	////////////////////////////////////////////////////////////////////////////
 	// *************************************************************************
 	// main loop
 	// *************************************************************************
	ToggleBit(PORTB, PORTB0);
    2368:	95 b1       	in	r25, 0x05	; 5
    236a:	89 27       	eor	r24, r25
    236c:	85 b9       	out	0x05, r24	; 5
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
		// to 1 whenever we get a $GPGGA message from that sensor.
		///////////////////////////////////////////////////////////
		if (ItsTime == 1){ //wait for our 1Hz flag (from GPS or Interrupt)
			ItsTime = 0; 
 			seconds++;
 			printf("\nSeconds = %u", seconds);
    2376:	0f 2e       	mov	r0, r31
    2378:	fe e3       	ldi	r31, 0x3E	; 62
    237a:	af 2e       	mov	r10, r31
    237c:	f1 e0       	ldi	r31, 0x01	; 1
    237e:	bf 2e       	mov	r11, r31
    2380:	f0 2d       	mov	r31, r0
			// - Send the data over the serial port
			// - Wait for the transmission to complete, then
			// - go to the next sensor 
			//**********************************
			// The GPS message triggers the whole collection cycle, so we can send it now...
			printf("\n%s",messageWant);
    2382:	0f 2e       	mov	r0, r31
    2384:	f7 e4       	ldi	r31, 0x47	; 71
    2386:	cf 2e       	mov	r12, r31
    2388:	f5 e0       	ldi	r31, 0x05	; 5
    238a:	df 2e       	mov	r13, r31
    238c:	f0 2d       	mov	r31, r0
    238e:	0f 2e       	mov	r0, r31
    2390:	fa e3       	ldi	r31, 0x3A	; 58
    2392:	ef 2e       	mov	r14, r31
    2394:	f1 e0       	ldi	r31, 0x01	; 1
    2396:	ff 2e       	mov	r15, r31
    2398:	f0 2d       	mov	r31, r0
			// each time through this loop.  Comment out the code you
			// don't want to use when debugging the code you are adding... 
			//============================
			 //Now test reading the LIDAR interface
// 			distance = LIDAR_distance();
 			printf("\nLIDAR distance = %u", distance);
    239a:	0f 2e       	mov	r0, r31
    239c:	fc e4       	ldi	r31, 0x4C	; 76
    239e:	8f 2e       	mov	r8, r31
    23a0:	f1 e0       	ldi	r31, 0x01	; 1
    23a2:	9f 2e       	mov	r9, r31
    23a4:	f0 2d       	mov	r31, r0
//  			printf("\nCarbon Monoxide = %u", raw_gas_vector[0]);
//  			printf("\nHydrogen = %u", raw_gas_vector[1]);
//  			printf("\nAmmonia = %u", raw_gas_vector[2]);
//  			printf("\nMethane = %u", raw_gas_vector[3]);
//  			printf("\nOzone = %u\n", raw_gas_vector[4]);
 			printf("\nCO = %u", raw_gas_vector[0]);
    23a6:	c2 ee       	ldi	r28, 0xE2	; 226
    23a8:	d3 e0       	ldi	r29, 0x03	; 3
    23aa:	0f 2e       	mov	r0, r31
    23ac:	f1 e6       	ldi	r31, 0x61	; 97
    23ae:	6f 2e       	mov	r6, r31
    23b0:	f1 e0       	ldi	r31, 0x01	; 1
    23b2:	7f 2e       	mov	r7, r31
    23b4:	f0 2d       	mov	r31, r0
		// reached steady state...do nothing for the moment - wait for interrupts.
		// The variable ItsTime gets set to 1 every second using the 1Hz interrupt
		// When GPS is connected and enabled, then ItsTime gets set 
		// to 1 whenever we get a $GPGGA message from that sensor.
		///////////////////////////////////////////////////////////
		if (ItsTime == 1){ //wait for our 1Hz flag (from GPS or Interrupt)
    23b6:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <ItsTime>
    23ba:	81 30       	cpi	r24, 0x01	; 1
    23bc:	e1 f7       	brne	.-8      	; 0x23b6 <main+0xa6>
			ItsTime = 0; 
    23be:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <ItsTime>
 			seconds++;
    23c2:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <seconds>
    23c6:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <seconds+0x1>
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <seconds+0x1>
    23d0:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <seconds>
 			printf("\nSeconds = %u", seconds);
    23d4:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <seconds>
    23d8:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <seconds+0x1>
    23dc:	9f 93       	push	r25
    23de:	8f 93       	push	r24
    23e0:	bf 92       	push	r11
    23e2:	af 92       	push	r10
    23e4:	a0 d4       	rcall	.+2368   	; 0x2d26 <printf>
			// - Send the data over the serial port
			// - Wait for the transmission to complete, then
			// - go to the next sensor 
			//**********************************
			// The GPS message triggers the whole collection cycle, so we can send it now...
			printf("\n%s",messageWant);
    23e6:	df 92       	push	r13
    23e8:	cf 92       	push	r12
    23ea:	ff 92       	push	r15
    23ec:	ef 92       	push	r14
    23ee:	9b d4       	rcall	.+2358   	; 0x2d26 <printf>
			// each time through this loop.  Comment out the code you
			// don't want to use when debugging the code you are adding... 
			//============================
			 //Now test reading the LIDAR interface
// 			distance = LIDAR_distance();
 			printf("\nLIDAR distance = %u", distance);
    23f0:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <distance+0x1>
    23f4:	8f 93       	push	r24
    23f6:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <distance>
    23fa:	8f 93       	push	r24
    23fc:	9f 92       	push	r9
    23fe:	8f 92       	push	r8
    2400:	92 d4       	rcall	.+2340   	; 0x2d26 <printf>
// 				}
// 			}
// 			printf("Z");
			//============================
			// Now test the gas sensor interface...
			start_gas_sensor_read();
    2402:	0e 94 a5 09 	call	0x134a	; 0x134a <start_gas_sensor_read>
//  			printf("\nCarbon Monoxide = %u", raw_gas_vector[0]);
//  			printf("\nHydrogen = %u", raw_gas_vector[1]);
//  			printf("\nAmmonia = %u", raw_gas_vector[2]);
//  			printf("\nMethane = %u", raw_gas_vector[3]);
//  			printf("\nOzone = %u\n", raw_gas_vector[4]);
 			printf("\nCO = %u", raw_gas_vector[0]);
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	8f 93       	push	r24
    240a:	88 81       	ld	r24, Y
    240c:	8f 93       	push	r24
    240e:	7f 92       	push	r7
    2410:	6f 92       	push	r6
    2412:	89 d4       	rcall	.+2322   	; 0x2d26 <printf>
			while(UART0TransmitInProgress) {}
 			printf("\nH = %u", raw_gas_vector[1]);
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	8f 93       	push	r24
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	8f 93       	push	r24
    241c:	aa e6       	ldi	r26, 0x6A	; 106
    241e:	b1 e0       	ldi	r27, 0x01	; 1
    2420:	bf 93       	push	r27
    2422:	af 93       	push	r26
    2424:	80 d4       	rcall	.+2304   	; 0x2d26 <printf>
			while(UART0TransmitInProgress) {}
 			printf("\nNA = %u", raw_gas_vector[2]);
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	8f 93       	push	r24
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	8f 93       	push	r24
    242e:	a2 e7       	ldi	r26, 0x72	; 114
    2430:	b1 e0       	ldi	r27, 0x01	; 1
    2432:	bf 93       	push	r27
    2434:	af 93       	push	r26
    2436:	77 d4       	rcall	.+2286   	; 0x2d26 <printf>
			while(UART0TransmitInProgress) {} 
 			printf("\nCH4 = %u", raw_gas_vector[3]);
    2438:	8f 81       	ldd	r24, Y+7	; 0x07
    243a:	8f 93       	push	r24
    243c:	8e 81       	ldd	r24, Y+6	; 0x06
    243e:	8f 93       	push	r24
    2440:	ab e7       	ldi	r26, 0x7B	; 123
    2442:	b1 e0       	ldi	r27, 0x01	; 1
    2444:	bf 93       	push	r27
    2446:	af 93       	push	r26
    2448:	6e d4       	rcall	.+2268   	; 0x2d26 <printf>
			while(UART0TransmitInProgress) {}
 			printf("\nO3 = %u", raw_gas_vector[4]);
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	8f 93       	push	r24
    244e:	88 85       	ldd	r24, Y+8	; 0x08
    2450:	8f 93       	push	r24
    2452:	a5 e8       	ldi	r26, 0x85	; 133
    2454:	b1 e0       	ldi	r27, 0x01	; 1
    2456:	bf 93       	push	r27
    2458:	af 93       	push	r26
    245a:	65 d4       	rcall	.+2250   	; 0x2d26 <printf>
			while(UART0TransmitInProgress) {}
			//
			//============================
			// Now read the BME interface...
 			bme280basic_bulk_data_read();
    245c:	8d b7       	in	r24, 0x3d	; 61
    245e:	9e b7       	in	r25, 0x3e	; 62
    2460:	80 96       	adiw	r24, 0x20	; 32
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	9e bf       	out	0x3e, r25	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	8d bf       	out	0x3d, r24	; 61
    246c:	0e 94 13 03 	call	0x626	; 0x626 <bme280basic_bulk_data_read>
 			// Calculate the temperature and print it
			tempCelsius = BME280_compensate_T_int32(rawTemp);
    2470:	60 91 b8 03 	lds	r22, 0x03B8	; 0x8003b8 <rawTemp>
    2474:	70 91 b9 03 	lds	r23, 0x03B9	; 0x8003b9 <rawTemp+0x1>
    2478:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <rawTemp+0x2>
    247c:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <rawTemp+0x3>
    2480:	0e 94 02 04 	call	0x804	; 0x804 <BME280_compensate_T_int32>
    2484:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <tempCelsius>
    2488:	70 93 b0 03 	sts	0x03B0, r23	; 0x8003b0 <tempCelsius+0x1>
    248c:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <tempCelsius+0x2>
    2490:	90 93 b2 03 	sts	0x03B2, r25	; 0x8003b2 <tempCelsius+0x3>
// 			sprintf(temperatureBuf, "%lu", tempCelsius);
  			printf("\nCelsius = %lu", tempCelsius);
    2494:	9f 93       	push	r25
    2496:	8f 93       	push	r24
    2498:	7f 93       	push	r23
    249a:	6f 93       	push	r22
    249c:	ae e8       	ldi	r26, 0x8E	; 142
    249e:	b1 e0       	ldi	r27, 0x01	; 1
    24a0:	bf 93       	push	r27
    24a2:	af 93       	push	r26
    24a4:	40 d4       	rcall	.+2176   	; 0x2d26 <printf>
			while(UART0TransmitInProgress) {}
 			// Calculate the pressure and print it
			pressure = BME280_compensate_P_int64(rawPress);
    24a6:	60 91 f0 03 	lds	r22, 0x03F0	; 0x8003f0 <rawPress>
    24aa:	70 91 f1 03 	lds	r23, 0x03F1	; 0x8003f1 <rawPress+0x1>
    24ae:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <rawPress+0x2>
    24b2:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <rawPress+0x3>
    24b6:	0e 94 90 04 	call	0x920	; 0x920 <BME280_compensate_P_int64>
    24ba:	60 93 d3 03 	sts	0x03D3, r22	; 0x8003d3 <pressure>
    24be:	70 93 d4 03 	sts	0x03D4, r23	; 0x8003d4 <pressure+0x1>
    24c2:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <pressure+0x2>
    24c6:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <pressure+0x3>
 			printf("\nPressure in Pa = %lu", pressure>>8);
    24ca:	bb 27       	eor	r27, r27
    24cc:	97 fd       	sbrc	r25, 7
    24ce:	ba 95       	dec	r27
    24d0:	a9 2f       	mov	r26, r25
    24d2:	98 2f       	mov	r25, r24
    24d4:	87 2f       	mov	r24, r23
    24d6:	bf 93       	push	r27
    24d8:	af 93       	push	r26
    24da:	9f 93       	push	r25
    24dc:	8f 93       	push	r24
    24de:	ad e9       	ldi	r26, 0x9D	; 157
    24e0:	b1 e0       	ldi	r27, 0x01	; 1
    24e2:	bf 93       	push	r27
    24e4:	af 93       	push	r26
    24e6:	1f d4       	rcall	.+2110   	; 0x2d26 <printf>
			while(UART0TransmitInProgress) {}
 			// Calculate the humidity and print it
			 humidity = bme280_compensate_H_int32(rawHum);
    24e8:	60 91 f4 03 	lds	r22, 0x03F4	; 0x8003f4 <rawHum>
    24ec:	70 91 f5 03 	lds	r23, 0x03F5	; 0x8003f5 <rawHum+0x1>
    24f0:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <rawHum+0x2>
    24f4:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <rawHum+0x3>
    24f8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <bme280_compensate_H_int32>
    24fc:	1b 01       	movw	r2, r22
    24fe:	2c 01       	movw	r4, r24
    2500:	60 93 dd 03 	sts	0x03DD, r22	; 0x8003dd <humidity>
    2504:	70 93 de 03 	sts	0x03DE, r23	; 0x8003de <humidity+0x1>
    2508:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <humidity+0x2>
    250c:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <humidity+0x3>
 			printf("\nHumidity%% = %lu.%lu\n", humidity>>10, ((humidity*1000)>>10));
    2510:	a8 ee       	ldi	r26, 0xE8	; 232
    2512:	b3 e0       	ldi	r27, 0x03	; 3
    2514:	9b 01       	movw	r18, r22
    2516:	ac 01       	movw	r20, r24
    2518:	71 d2       	rcall	.+1250   	; 0x29fc <__muluhisi3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	07 2e       	mov	r0, r23
    2520:	7a e0       	ldi	r23, 0x0A	; 10
    2522:	b5 95       	asr	r27
    2524:	a7 95       	ror	r26
    2526:	97 95       	ror	r25
    2528:	87 95       	ror	r24
    252a:	7a 95       	dec	r23
    252c:	d1 f7       	brne	.-12     	; 0x2522 <main+0x212>
    252e:	70 2d       	mov	r23, r0
    2530:	bf 93       	push	r27
    2532:	af 93       	push	r26
    2534:	9f 93       	push	r25
    2536:	8f 93       	push	r24
    2538:	d2 01       	movw	r26, r4
    253a:	c1 01       	movw	r24, r2
    253c:	07 2e       	mov	r0, r23
    253e:	7a e0       	ldi	r23, 0x0A	; 10
    2540:	b5 95       	asr	r27
    2542:	a7 95       	ror	r26
    2544:	97 95       	ror	r25
    2546:	87 95       	ror	r24
    2548:	7a 95       	dec	r23
    254a:	d1 f7       	brne	.-12     	; 0x2540 <main+0x230>
    254c:	70 2d       	mov	r23, r0
    254e:	bf 93       	push	r27
    2550:	af 93       	push	r26
    2552:	9f 93       	push	r25
    2554:	8f 93       	push	r24
    2556:	a3 eb       	ldi	r26, 0xB3	; 179
    2558:	b1 e0       	ldi	r27, 0x01	; 1
    255a:	bf 93       	push	r27
    255c:	af 93       	push	r26
    255e:	e3 d3       	rcall	.+1990   	; 0x2d26 <printf>
    2560:	8d b7       	in	r24, 0x3d	; 61
    2562:	9e b7       	in	r25, 0x3e	; 62
    2564:	46 96       	adiw	r24, 0x16	; 22
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	9e bf       	out	0x3e, r25	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	8d bf       	out	0x3d, r24	; 61
    2570:	10 e0       	ldi	r17, 0x00	; 0
			//
			//============================
			
			for(int i = 0; i < 5; i++)
			{
				convert_to_ppm(i); //only works for co right now
    2572:	81 2f       	mov	r24, r17
    2574:	0e 94 8f 0a 	call	0x151e	; 0x151e <convert_to_ppm>
    2578:	1f 5f       	subi	r17, 0xFF	; 255
			while(UART0TransmitInProgress) {}
// 			printf("\n BME message = http://canary.chordsrt.com/measurements/url_create?instrument_id=1&temp=%.5s.%.5s&pres=%lu&hum=%lu&key=4e6fba7420ec9e881f510bcddb%.3s:%.4s:%.3s", temp, temp+2, pressure, humidity, time, time+2, time+4); //need key
			//
			//============================
			
			for(int i = 0; i < 5; i++)
    257a:	15 30       	cpi	r17, 0x05	; 5
    257c:	d1 f7       	brne	.-12     	; 0x2572 <main+0x262>
			
			//convert_to_ppm(0); //only works for co right now
			
			
			
			printf("ppm value CO: %d", ppmValue[0]);
    257e:	00 ec       	ldi	r16, 0xC0	; 192
    2580:	13 e0       	ldi	r17, 0x03	; 3
    2582:	d8 01       	movw	r26, r16
    2584:	8d 91       	ld	r24, X+
    2586:	9c 91       	ld	r25, X
    2588:	9f 93       	push	r25
    258a:	8f 93       	push	r24
    258c:	8a ec       	ldi	r24, 0xCA	; 202
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	9f 93       	push	r25
    2592:	8f 93       	push	r24
    2594:	c8 d3       	rcall	.+1936   	; 0x2d26 <printf>
			
			printf("ppm value H2: %d", ppmValue[1]);
    2596:	f8 01       	movw	r30, r16
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	93 81       	ldd	r25, Z+3	; 0x03
    259c:	9f 93       	push	r25
    259e:	8f 93       	push	r24
    25a0:	8b ed       	ldi	r24, 0xDB	; 219
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	9f 93       	push	r25
    25a6:	8f 93       	push	r24
    25a8:	be d3       	rcall	.+1916   	; 0x2d26 <printf>
			printf("ppm value NH3: %d", ppmValue[2]);
    25aa:	d8 01       	movw	r26, r16
    25ac:	14 96       	adiw	r26, 0x04	; 4
    25ae:	8d 91       	ld	r24, X+
    25b0:	9c 91       	ld	r25, X
    25b2:	15 97       	sbiw	r26, 0x05	; 5
    25b4:	9f 93       	push	r25
    25b6:	8f 93       	push	r24
    25b8:	8c ee       	ldi	r24, 0xEC	; 236
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	9f 93       	push	r25
    25be:	8f 93       	push	r24
    25c0:	b2 d3       	rcall	.+1892   	; 0x2d26 <printf>
			printf("ppm value CH4: %d", ppmValue[3]);
    25c2:	f8 01       	movw	r30, r16
    25c4:	86 81       	ldd	r24, Z+6	; 0x06
    25c6:	97 81       	ldd	r25, Z+7	; 0x07
    25c8:	9f 93       	push	r25
    25ca:	8f 93       	push	r24
    25cc:	8e ef       	ldi	r24, 0xFE	; 254
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	9f 93       	push	r25
    25d2:	8f 93       	push	r24
    25d4:	a8 d3       	rcall	.+1872   	; 0x2d26 <printf>
			printf("ppm value O3: %d", ppmValue[4]);
    25d6:	d8 01       	movw	r26, r16
    25d8:	18 96       	adiw	r26, 0x08	; 8
    25da:	8d 91       	ld	r24, X+
    25dc:	9c 91       	ld	r25, X
    25de:	19 97       	sbiw	r26, 0x09	; 9
    25e0:	9f 93       	push	r25
    25e2:	8f 93       	push	r24
    25e4:	80 e1       	ldi	r24, 0x10	; 16
    25e6:	92 e0       	ldi	r25, 0x02	; 2
    25e8:	9f 93       	push	r25
    25ea:	8f 93       	push	r24
    25ec:	9c d3       	rcall	.+1848   	; 0x2d26 <printf>
			
			
			
			//re-enable the GPS receiver & interrupt after processing all sensor data
			UCSR1B |= ((1<<RXCIE1)|(1<<RXEN1));
    25ee:	e9 ec       	ldi	r30, 0xC9	; 201
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	80 69       	ori	r24, 0x90	; 144
    25f6:	80 83       	st	Z, r24
    25f8:	ed b7       	in	r30, 0x3d	; 61
    25fa:	fe b7       	in	r31, 0x3e	; 62
    25fc:	74 96       	adiw	r30, 0x14	; 20
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	fe bf       	out	0x3e, r31	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	ed bf       	out	0x3d, r30	; 61
    2608:	d6 ce       	rjmp	.-596    	; 0x23b6 <main+0xa6>

0000260a <__vector_default>:
						Interrupt Service Routines
*********************************************************************************
********************************************************************************/

ISR(BADISR_vect)
{
    260a:	1f 92       	push	r1
    260c:	0f 92       	push	r0
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	0f 92       	push	r0
    2612:	11 24       	eor	r1, r1
	// Code should never reach this point.  This is a bad interrupt trap.
	SetBit(PORTB, PORTB2);
    2614:	2a 9a       	sbi	0x05, 2	; 5
    2616:	0f 90       	pop	r0
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	0f 90       	pop	r0
    261c:	1f 90       	pop	r1
    261e:	18 95       	reti

00002620 <initialize_timer_counter_1>:
	Not using any of the other compare features, so all other CR bits are 0
	Finally, we have to enable the interrupt vector on compare register A
	TCCR1A = 0; Control Register A is reset to 0x00 on startup. */
	//  
	// Set the WGM mode and prescaler select in control register B
	TCCR1B = ((1<<WGM12) | (1<<CS12) | (1<<CS10));
    2620:	8d e0       	ldi	r24, 0x0D	; 13
    2622:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// TCCR1C = 0; Control Register C is reset to 0x00 on startup.
	// Now we need to enter out TOP value in OCR1A
	OCR1A = 19530;
    2626:	8a e4       	ldi	r24, 0x4A	; 74
    2628:	9c e4       	ldi	r25, 0x4C	; 76
    262a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    262e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2632:	08 95       	ret

00002634 <__vector_16>:
*********************************************************************************
********************************************************************************/


// 100Hz timer interrupt generated by OC0A and used by the FATFS code.
EMPTY_INTERRUPT(TIMER0_COMPA_vect);
    2634:	18 95       	reti

00002636 <__vector_13>:
// }



ISR(TIMER1_COMPA_vect)
{
    2636:	1f 92       	push	r1
    2638:	0f 92       	push	r0
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	0f 92       	push	r0
    263e:	11 24       	eor	r1, r1
    2640:	8f 93       	push	r24
    2642:	9f 93       	push	r25
	ToggleBit(PORTB, PORTB1); //for now, just toggle the green status LED
    2644:	95 b1       	in	r25, 0x05	; 5
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	89 27       	eor	r24, r25
    264a:	85 b9       	out	0x05, r24	; 5
	ItsTime = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <ItsTime>
}
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	0f 90       	pop	r0
    265c:	1f 90       	pop	r1
    265e:	18 95       	reti

00002660 <TWI_Master_Initialise>:
    2660:	81 e1       	ldi	r24, 0x11	; 17
    2662:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    266c:	84 e0       	ldi	r24, 0x04	; 4
    266e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2672:	08 95       	ret

00002674 <TWI_Transceiver_Busy>:
    2674:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2678:	81 78       	andi	r24, 0x81	; 129
    267a:	08 95       	ret

0000267c <TWI_Start_Transceiver_With_Data>:
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	ec 01       	movw	r28, r24
    2682:	ec eb       	ldi	r30, 0xBC	; 188
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	90 81       	ld	r25, Z
    2688:	91 78       	andi	r25, 0x81	; 129
    268a:	e9 f7       	brne	.-6      	; 0x2686 <TWI_Start_Transceiver_With_Data+0xa>
    268c:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <TWI_msgSize>
    2690:	88 81       	ld	r24, Y
    2692:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <TWI_buf>
    2696:	80 fd       	sbrc	r24, 0
    2698:	12 c0       	rjmp	.+36     	; 0x26be <TWI_Start_Transceiver_With_Data+0x42>
    269a:	62 30       	cpi	r22, 0x02	; 2
    269c:	80 f0       	brcs	.+32     	; 0x26be <TWI_Start_Transceiver_With_Data+0x42>
    269e:	fe 01       	movw	r30, r28
    26a0:	31 96       	adiw	r30, 0x01	; 1
    26a2:	aa e2       	ldi	r26, 0x2A	; 42
    26a4:	b2 e0       	ldi	r27, 0x02	; 2
    26a6:	62 50       	subi	r22, 0x02	; 2
    26a8:	26 2f       	mov	r18, r22
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	2e 5f       	subi	r18, 0xFE	; 254
    26ae:	3f 4f       	sbci	r19, 0xFF	; 255
    26b0:	2c 0f       	add	r18, r28
    26b2:	3d 1f       	adc	r19, r29
    26b4:	91 91       	ld	r25, Z+
    26b6:	9d 93       	st	X+, r25
    26b8:	e2 17       	cp	r30, r18
    26ba:	f3 07       	cpc	r31, r19
    26bc:	d9 f7       	brne	.-10     	; 0x26b4 <TWI_Start_Transceiver_With_Data+0x38>
    26be:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TWI_statusReg>
    26c2:	88 ef       	ldi	r24, 0xF8	; 248
    26c4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <TWI_state>
    26c8:	85 ea       	ldi	r24, 0xA5	; 165
    26ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	08 95       	ret

000026d4 <TWI_Get_Data_From_Transceiver>:
    26d4:	ac 01       	movw	r20, r24
    26d6:	ec eb       	ldi	r30, 0xBC	; 188
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	90 81       	ld	r25, Z
    26dc:	91 78       	andi	r25, 0x81	; 129
    26de:	e9 f7       	brne	.-6      	; 0x26da <TWI_Get_Data_From_Transceiver+0x6>
    26e0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TWI_statusReg>
    26e4:	80 ff       	sbrs	r24, 0
    26e6:	11 c0       	rjmp	.+34     	; 0x270a <TWI_Get_Data_From_Transceiver+0x36>
    26e8:	66 23       	and	r22, r22
    26ea:	79 f0       	breq	.+30     	; 0x270a <TWI_Get_Data_From_Transceiver+0x36>
    26ec:	a9 e2       	ldi	r26, 0x29	; 41
    26ee:	b2 e0       	ldi	r27, 0x02	; 2
    26f0:	fa 01       	movw	r30, r20
    26f2:	61 50       	subi	r22, 0x01	; 1
    26f4:	26 2f       	mov	r18, r22
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	2f 5f       	subi	r18, 0xFF	; 255
    26fa:	3f 4f       	sbci	r19, 0xFF	; 255
    26fc:	24 0f       	add	r18, r20
    26fe:	35 1f       	adc	r19, r21
    2700:	9d 91       	ld	r25, X+
    2702:	91 93       	st	Z+, r25
    2704:	e2 17       	cp	r30, r18
    2706:	f3 07       	cpc	r31, r19
    2708:	d9 f7       	brne	.-10     	; 0x2700 <TWI_Get_Data_From_Transceiver+0x2c>
    270a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TWI_statusReg>
    270e:	81 70       	andi	r24, 0x01	; 1
    2710:	08 95       	ret

00002712 <__vector_26>:
    2712:	1f 92       	push	r1
    2714:	0f 92       	push	r0
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	0f 92       	push	r0
    271a:	11 24       	eor	r1, r1
    271c:	0b b6       	in	r0, 0x3b	; 59
    271e:	0f 92       	push	r0
    2720:	2f 93       	push	r18
    2722:	3f 93       	push	r19
    2724:	8f 93       	push	r24
    2726:	9f 93       	push	r25
    2728:	af 93       	push	r26
    272a:	bf 93       	push	r27
    272c:	ef 93       	push	r30
    272e:	ff 93       	push	r31
    2730:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2734:	8e 2f       	mov	r24, r30
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	fc 01       	movw	r30, r24
    273a:	38 97       	sbiw	r30, 0x08	; 8
    273c:	e1 35       	cpi	r30, 0x51	; 81
    273e:	f1 05       	cpc	r31, r1
    2740:	08 f0       	brcs	.+2      	; 0x2744 <__vector_26+0x32>
    2742:	55 c0       	rjmp	.+170    	; 0x27ee <__vector_26+0xdc>
    2744:	ea 5b       	subi	r30, 0xBA	; 186
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	50 c1       	rjmp	.+672    	; 0x29ea <__tablejump2__>
    274a:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <TWI_bufPtr.1555>
    274e:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <TWI_bufPtr.1555>
    2752:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <TWI_msgSize>
    2756:	e8 17       	cp	r30, r24
    2758:	70 f4       	brcc	.+28     	; 0x2776 <__vector_26+0x64>
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	8e 0f       	add	r24, r30
    275e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <TWI_bufPtr.1555>
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	e7 5d       	subi	r30, 0xD7	; 215
    2766:	fd 4f       	sbci	r31, 0xFD	; 253
    2768:	80 81       	ld	r24, Z
    276a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    276e:	85 e8       	ldi	r24, 0x85	; 133
    2770:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2774:	43 c0       	rjmp	.+134    	; 0x27fc <__vector_26+0xea>
    2776:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TWI_statusReg>
    277a:	81 60       	ori	r24, 0x01	; 1
    277c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <TWI_statusReg>
    2780:	84 e9       	ldi	r24, 0x94	; 148
    2782:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2786:	3a c0       	rjmp	.+116    	; 0x27fc <__vector_26+0xea>
    2788:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <TWI_bufPtr.1555>
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	8e 0f       	add	r24, r30
    2790:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <TWI_bufPtr.1555>
    2794:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	e7 5d       	subi	r30, 0xD7	; 215
    279c:	fd 4f       	sbci	r31, 0xFD	; 253
    279e:	80 83       	st	Z, r24
    27a0:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <TWI_bufPtr.1555>
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <TWI_msgSize>
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	28 17       	cp	r18, r24
    27b0:	39 07       	cpc	r19, r25
    27b2:	24 f4       	brge	.+8      	; 0x27bc <__vector_26+0xaa>
    27b4:	85 ec       	ldi	r24, 0xC5	; 197
    27b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    27ba:	20 c0       	rjmp	.+64     	; 0x27fc <__vector_26+0xea>
    27bc:	85 e8       	ldi	r24, 0x85	; 133
    27be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    27c2:	1c c0       	rjmp	.+56     	; 0x27fc <__vector_26+0xea>
    27c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    27c8:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <TWI_bufPtr.1555>
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	e7 5d       	subi	r30, 0xD7	; 215
    27d0:	fd 4f       	sbci	r31, 0xFD	; 253
    27d2:	80 83       	st	Z, r24
    27d4:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TWI_statusReg>
    27d8:	81 60       	ori	r24, 0x01	; 1
    27da:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <TWI_statusReg>
    27de:	84 e9       	ldi	r24, 0x94	; 148
    27e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    27e4:	0b c0       	rjmp	.+22     	; 0x27fc <__vector_26+0xea>
    27e6:	85 ea       	ldi	r24, 0xA5	; 165
    27e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    27ec:	07 c0       	rjmp	.+14     	; 0x27fc <__vector_26+0xea>
    27ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    27f2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <TWI_state>
    27f6:	84 e0       	ldi	r24, 0x04	; 4
    27f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    27fc:	ff 91       	pop	r31
    27fe:	ef 91       	pop	r30
    2800:	bf 91       	pop	r27
    2802:	af 91       	pop	r26
    2804:	9f 91       	pop	r25
    2806:	8f 91       	pop	r24
    2808:	3f 91       	pop	r19
    280a:	2f 91       	pop	r18
    280c:	0f 90       	pop	r0
    280e:	0b be       	out	0x3b, r0	; 59
    2810:	0f 90       	pop	r0
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	0f 90       	pop	r0
    2816:	1f 90       	pop	r1
    2818:	18 95       	reti

0000281a <USART0_init>:
void USART0_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
		USART0_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
    281a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    281e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    2822:	88 e0       	ldi	r24, 0x08	; 8
    2824:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2828:	86 e0       	ldi	r24, 0x06	; 6
    282a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    282e:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <UART0_RxTail>
    2832:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <UART0_RxHead>
    2836:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <UART0_TxTail>
    283a:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <UART0_TxHead>
    283e:	08 95       	ret

00002840 <USART0_Transmit_IO>:
    2840:	91 e0       	ldi	r25, 0x01	; 1
    2842:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <UART0TransmitInProgress>
    2846:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <UART0_TxHead>
    284a:	2f 5f       	subi	r18, 0xFF	; 255
    284c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <UART0_TxTail>
    2850:	29 17       	cp	r18, r25
    2852:	e1 f3       	breq	.-8      	; 0x284c <USART0_Transmit_IO+0xc>
    2854:	e2 2f       	mov	r30, r18
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	e5 5c       	subi	r30, 0xC5	; 197
    285a:	fd 4f       	sbci	r31, 0xFD	; 253
    285c:	80 83       	st	Z, r24
    285e:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <UART0_TxHead>
    2862:	e1 ec       	ldi	r30, 0xC1	; 193
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	80 62       	ori	r24, 0x20	; 32
    286a:	80 83       	st	Z, r24
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	08 95       	ret

00002872 <__vector_21>:
	// Store received data in buffer 
	UART0_RxBuf[tmphead] = data;
}*/

ISR(USART0_UDRE_vect)
{
    2872:	1f 92       	push	r1
    2874:	0f 92       	push	r0
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	0f 92       	push	r0
    287a:	11 24       	eor	r1, r1
    287c:	0b b6       	in	r0, 0x3b	; 59
    287e:	0f 92       	push	r0
    2880:	8f 93       	push	r24
    2882:	9f 93       	push	r25
    2884:	ef 93       	push	r30
    2886:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted 
	if (UART0_TxHead != UART0_TxTail) {
    2888:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <UART0_TxHead>
    288c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <UART0_TxTail>
    2890:	98 17       	cp	r25, r24
    2892:	61 f0       	breq	.+24     	; 0x28ac <__vector_21+0x3a>
		// Calculate buffer index
		tmptail = ( UART0_TxTail + 1 ) & UART0_TX_BUFFER_MASK;
    2894:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <UART0_TxTail>
    2898:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index 
		UART0_TxTail = tmptail;
    289a:	e0 93 39 02 	sts	0x0239, r30	; 0x800239 <UART0_TxTail>
		// Start transmission 
		UDR0 = UART0_TxBuf[tmptail];
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	e5 5c       	subi	r30, 0xC5	; 197
    28a2:	fd 4f       	sbci	r31, 0xFD	; 253
    28a4:	80 81       	ld	r24, Z
    28a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    28aa:	07 c0       	rjmp	.+14     	; 0x28ba <__vector_21+0x48>
		} 
		else {
		// Disable UDRE interrupt 
		UCSR0B &= ~(1<<UDRIE0);
    28ac:	e1 ec       	ldi	r30, 0xC1	; 193
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	8f 7d       	andi	r24, 0xDF	; 223
    28b4:	80 83       	st	Z, r24
		// Indicate transmission is complete
		UART0TransmitInProgress = 0;
    28b6:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <UART0TransmitInProgress>
	}
    28ba:	ff 91       	pop	r31
    28bc:	ef 91       	pop	r30
    28be:	9f 91       	pop	r25
    28c0:	8f 91       	pop	r24
    28c2:	0f 90       	pop	r0
    28c4:	0b be       	out	0x3b, r0	; 59
    28c6:	0f 90       	pop	r0
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	0f 90       	pop	r0
    28cc:	1f 90       	pop	r1
    28ce:	18 95       	reti

000028d0 <USART1_init>:
void USART1_putstring(char* StringPtr) {
	while(*StringPtr != 0x00) {
		USART1_TransmitByte(*StringPtr);
		StringPtr++;
	}
}
    28d0:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    28d4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    28d8:	80 e9       	ldi	r24, 0x90	; 144
    28da:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    28de:	86 e0       	ldi	r24, 0x06	; 6
    28e0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    28e4:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <UART1_RxTail>
    28e8:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <UART1_RxHead>
    28ec:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <UART1_TxTail>
    28f0:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <UART1_TxHead>
    28f4:	08 95       	ret

000028f6 <__vector_28>:
*********************************************************************************
********************************************************************************/


ISR(USART1_RX_vect)
{
    28f6:	1f 92       	push	r1
    28f8:	0f 92       	push	r0
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	0f 92       	push	r0
    28fe:	11 24       	eor	r1, r1
    2900:	0b b6       	in	r0, 0x3b	; 59
    2902:	0f 92       	push	r0
    2904:	2f 93       	push	r18
    2906:	3f 93       	push	r19
    2908:	8f 93       	push	r24
    290a:	9f 93       	push	r25
    290c:	af 93       	push	r26
    290e:	bf 93       	push	r27
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	ef 93       	push	r30
    2916:	ff 93       	push	r31
	unsigned char data;
	unsigned char tmphead;
	unsigned char i;
	// Read the received data 
	data = UDR1;
    2918:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	// Calculate buffer index 
	tmphead = (UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
    291c:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <UART1_RxHead>
    2920:	8f 5f       	subi	r24, 0xFF	; 255
	// Store new index 
	UART1_RxHead = tmphead;
    2922:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <UART1_RxHead>

	if (tmphead == UART1_RxTail) {
    2926:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <UART1_RxTail>
		// ERROR! Receive buffer overflow 
	}
	// Store received data in buffer 
	UART1_RxBuf[tmphead] = data;
    292a:	e8 2f       	mov	r30, r24
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	e9 5b       	subi	r30, 0xB9	; 185
    2930:	fb 4f       	sbci	r31, 0xFB	; 251
    2932:	90 83       	st	Z, r25
	
	if (data == 10)
    2934:	9a 30       	cpi	r25, 0x0A	; 10
    2936:	29 f5       	brne	.+74     	; 0x2982 <__vector_28+0x8c>
	{
		//USART0_TransmitByte('n');
		if (UART1_RxBuf[5] == 'G')
    2938:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <UART1_RxBuf+0x5>
    293c:	97 34       	cpi	r25, 0x47	; 71
    293e:	e9 f4       	brne	.+58     	; 0x297a <__vector_28+0x84>
    2940:	e0 e0       	ldi	r30, 0x00	; 0
		{
			//USART0_TransmitByte(UART1_RxBuf[5]);
			for (i = 0; i<= tmphead; i++)
			{
				messageWant[i] = UART1_RxBuf[i+1]; //UART1_RxBuf[i];
    2942:	2e 2f       	mov	r18, r30
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	d9 01       	movw	r26, r18
    2948:	a9 5b       	subi	r26, 0xB9	; 185
    294a:	ba 4f       	sbci	r27, 0xFA	; 250
    294c:	e9 01       	movw	r28, r18
    294e:	c9 5b       	subi	r28, 0xB9	; 185
    2950:	db 4f       	sbci	r29, 0xFB	; 251
    2952:	99 81       	ldd	r25, Y+1	; 0x01
    2954:	9c 93       	st	X, r25
	{
		//USART0_TransmitByte('n');
		if (UART1_RxBuf[5] == 'G')
		{
			//USART0_TransmitByte(UART1_RxBuf[5]);
			for (i = 0; i<= tmphead; i++)
    2956:	ef 5f       	subi	r30, 0xFF	; 255
    2958:	8e 17       	cp	r24, r30
    295a:	98 f7       	brcc	.-26     	; 0x2942 <__vector_28+0x4c>
			{
				messageWant[i] = UART1_RxBuf[i+1]; //UART1_RxBuf[i];

			}
			messageWant[i-3]=0x00; //This sets the end of the string after the checksum, removing the CR/LF codes from the string.
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	ec 5b       	subi	r30, 0xBC	; 188
    2960:	fa 4f       	sbci	r31, 0xFA	; 250
    2962:	10 82       	st	Z, r1
 			UCSR1B &= !((1<<RXCIE1)|(1<<RXEN1));  //Clear the receive interrupt on USART 1 until we're done reading all other sensors.
    2964:	e9 ec       	ldi	r30, 0xC9	; 201
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	10 82       	st	Z, r1
 			ItsTime = 1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <ItsTime>
 			ToggleBit(PORTB, PORTB1);
    2972:	95 b1       	in	r25, 0x05	; 5
    2974:	82 e0       	ldi	r24, 0x02	; 2
    2976:	89 27       	eor	r24, r25
    2978:	85 b9       	out	0x05, r24	; 5
		}
		UART1_RxTail = 0;
    297a:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <UART1_RxTail>
		UART1_RxHead = 0;
    297e:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <UART1_RxHead>
	}
}
    2982:	ff 91       	pop	r31
    2984:	ef 91       	pop	r30
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	bf 91       	pop	r27
    298c:	af 91       	pop	r26
    298e:	9f 91       	pop	r25
    2990:	8f 91       	pop	r24
    2992:	3f 91       	pop	r19
    2994:	2f 91       	pop	r18
    2996:	0f 90       	pop	r0
    2998:	0b be       	out	0x3b, r0	; 59
    299a:	0f 90       	pop	r0
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	0f 90       	pop	r0
    29a0:	1f 90       	pop	r1
    29a2:	18 95       	reti

000029a4 <__mulsi3>:
    29a4:	db 01       	movw	r26, r22
    29a6:	8f 93       	push	r24
    29a8:	9f 93       	push	r25
    29aa:	28 d0       	rcall	.+80     	; 0x29fc <__muluhisi3>
    29ac:	bf 91       	pop	r27
    29ae:	af 91       	pop	r26
    29b0:	a2 9f       	mul	r26, r18
    29b2:	80 0d       	add	r24, r0
    29b4:	91 1d       	adc	r25, r1
    29b6:	a3 9f       	mul	r26, r19
    29b8:	90 0d       	add	r25, r0
    29ba:	b2 9f       	mul	r27, r18
    29bc:	90 0d       	add	r25, r0
    29be:	11 24       	eor	r1, r1
    29c0:	08 95       	ret

000029c2 <__udivmodhi4>:
    29c2:	aa 1b       	sub	r26, r26
    29c4:	bb 1b       	sub	r27, r27
    29c6:	51 e1       	ldi	r21, 0x11	; 17
    29c8:	07 c0       	rjmp	.+14     	; 0x29d8 <__udivmodhi4_ep>

000029ca <__udivmodhi4_loop>:
    29ca:	aa 1f       	adc	r26, r26
    29cc:	bb 1f       	adc	r27, r27
    29ce:	a6 17       	cp	r26, r22
    29d0:	b7 07       	cpc	r27, r23
    29d2:	10 f0       	brcs	.+4      	; 0x29d8 <__udivmodhi4_ep>
    29d4:	a6 1b       	sub	r26, r22
    29d6:	b7 0b       	sbc	r27, r23

000029d8 <__udivmodhi4_ep>:
    29d8:	88 1f       	adc	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	5a 95       	dec	r21
    29de:	a9 f7       	brne	.-22     	; 0x29ca <__udivmodhi4_loop>
    29e0:	80 95       	com	r24
    29e2:	90 95       	com	r25
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	08 95       	ret

000029ea <__tablejump2__>:
    29ea:	ee 0f       	add	r30, r30
    29ec:	ff 1f       	adc	r31, r31
    29ee:	00 24       	eor	r0, r0
    29f0:	00 1c       	adc	r0, r0
    29f2:	0b be       	out	0x3b, r0	; 59
    29f4:	07 90       	elpm	r0, Z+
    29f6:	f6 91       	elpm	r31, Z
    29f8:	e0 2d       	mov	r30, r0
    29fa:	09 94       	ijmp

000029fc <__muluhisi3>:
    29fc:	85 d1       	rcall	.+778    	; 0x2d08 <__umulhisi3>
    29fe:	a5 9f       	mul	r26, r21
    2a00:	90 0d       	add	r25, r0
    2a02:	b4 9f       	mul	r27, r20
    2a04:	90 0d       	add	r25, r0
    2a06:	a4 9f       	mul	r26, r20
    2a08:	80 0d       	add	r24, r0
    2a0a:	91 1d       	adc	r25, r1
    2a0c:	11 24       	eor	r1, r1
    2a0e:	08 95       	ret

00002a10 <__mulshisi3>:
    2a10:	b7 ff       	sbrs	r27, 7
    2a12:	f4 cf       	rjmp	.-24     	; 0x29fc <__muluhisi3>

00002a14 <__mulohisi3>:
    2a14:	f3 df       	rcall	.-26     	; 0x29fc <__muluhisi3>
    2a16:	82 1b       	sub	r24, r18
    2a18:	93 0b       	sbc	r25, r19
    2a1a:	08 95       	ret

00002a1c <__muldi3>:
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	1f 93       	push	r17
    2a22:	0f 93       	push	r16
    2a24:	9a 9d       	mul	r25, r10
    2a26:	f0 2d       	mov	r31, r0
    2a28:	21 9f       	mul	r18, r17
    2a2a:	f0 0d       	add	r31, r0
    2a2c:	8b 9d       	mul	r24, r11
    2a2e:	f0 0d       	add	r31, r0
    2a30:	8a 9d       	mul	r24, r10
    2a32:	e0 2d       	mov	r30, r0
    2a34:	f1 0d       	add	r31, r1
    2a36:	03 9f       	mul	r16, r19
    2a38:	f0 0d       	add	r31, r0
    2a3a:	02 9f       	mul	r16, r18
    2a3c:	e0 0d       	add	r30, r0
    2a3e:	f1 1d       	adc	r31, r1
    2a40:	4e 9d       	mul	r20, r14
    2a42:	e0 0d       	add	r30, r0
    2a44:	f1 1d       	adc	r31, r1
    2a46:	5e 9d       	mul	r21, r14
    2a48:	f0 0d       	add	r31, r0
    2a4a:	4f 9d       	mul	r20, r15
    2a4c:	f0 0d       	add	r31, r0
    2a4e:	7f 93       	push	r23
    2a50:	6f 93       	push	r22
    2a52:	bf 92       	push	r11
    2a54:	af 92       	push	r10
    2a56:	5f 93       	push	r21
    2a58:	4f 93       	push	r20
    2a5a:	d5 01       	movw	r26, r10
    2a5c:	55 d1       	rcall	.+682    	; 0x2d08 <__umulhisi3>
    2a5e:	8b 01       	movw	r16, r22
    2a60:	ac 01       	movw	r20, r24
    2a62:	d7 01       	movw	r26, r14
    2a64:	51 d1       	rcall	.+674    	; 0x2d08 <__umulhisi3>
    2a66:	eb 01       	movw	r28, r22
    2a68:	e8 0f       	add	r30, r24
    2a6a:	f9 1f       	adc	r31, r25
    2a6c:	d6 01       	movw	r26, r12
    2a6e:	1f d0       	rcall	.+62     	; 0x2aae <__muldi3_6>
    2a70:	2f 91       	pop	r18
    2a72:	3f 91       	pop	r19
    2a74:	d6 01       	movw	r26, r12
    2a76:	48 d1       	rcall	.+656    	; 0x2d08 <__umulhisi3>
    2a78:	c6 0f       	add	r28, r22
    2a7a:	d7 1f       	adc	r29, r23
    2a7c:	e8 1f       	adc	r30, r24
    2a7e:	f9 1f       	adc	r31, r25
    2a80:	af 91       	pop	r26
    2a82:	bf 91       	pop	r27
    2a84:	14 d0       	rcall	.+40     	; 0x2aae <__muldi3_6>
    2a86:	2f 91       	pop	r18
    2a88:	3f 91       	pop	r19
    2a8a:	3e d1       	rcall	.+636    	; 0x2d08 <__umulhisi3>
    2a8c:	c6 0f       	add	r28, r22
    2a8e:	d7 1f       	adc	r29, r23
    2a90:	e8 1f       	adc	r30, r24
    2a92:	f9 1f       	adc	r31, r25
    2a94:	d6 01       	movw	r26, r12
    2a96:	38 d1       	rcall	.+624    	; 0x2d08 <__umulhisi3>
    2a98:	e6 0f       	add	r30, r22
    2a9a:	f7 1f       	adc	r31, r23
    2a9c:	98 01       	movw	r18, r16
    2a9e:	be 01       	movw	r22, r28
    2aa0:	cf 01       	movw	r24, r30
    2aa2:	11 24       	eor	r1, r1
    2aa4:	0f 91       	pop	r16
    2aa6:	1f 91       	pop	r17
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <__muldi3_6>:
    2aae:	2c d1       	rcall	.+600    	; 0x2d08 <__umulhisi3>
    2ab0:	46 0f       	add	r20, r22
    2ab2:	57 1f       	adc	r21, r23
    2ab4:	c8 1f       	adc	r28, r24
    2ab6:	d9 1f       	adc	r29, r25
    2ab8:	08 f4       	brcc	.+2      	; 0x2abc <__muldi3_6+0xe>
    2aba:	31 96       	adiw	r30, 0x01	; 1
    2abc:	08 95       	ret

00002abe <__moddi3>:
    2abe:	68 94       	set
    2ac0:	01 c0       	rjmp	.+2      	; 0x2ac4 <__divdi3_moddi3>

00002ac2 <__divdi3>:
    2ac2:	e8 94       	clt

00002ac4 <__divdi3_moddi3>:
    2ac4:	f9 2f       	mov	r31, r25
    2ac6:	f1 2b       	or	r31, r17
    2ac8:	0a f0       	brmi	.+2      	; 0x2acc <__divdi3_moddi3+0x8>
    2aca:	27 c0       	rjmp	.+78     	; 0x2b1a <__udivdi3_umoddi3>
    2acc:	a0 e0       	ldi	r26, 0x00	; 0
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	eb e6       	ldi	r30, 0x6B	; 107
    2ad2:	f5 e1       	ldi	r31, 0x15	; 21
    2ad4:	93 c0       	rjmp	.+294    	; 0x2bfc <__prologue_saves__+0xc>
    2ad6:	09 2e       	mov	r0, r25
    2ad8:	05 94       	asr	r0
    2ada:	1a f4       	brpl	.+6      	; 0x2ae2 <__divdi3_moddi3+0x1e>
    2adc:	79 d0       	rcall	.+242    	; 0x2bd0 <__negdi2>
    2ade:	11 23       	and	r17, r17
    2ae0:	92 f4       	brpl	.+36     	; 0x2b06 <__divdi3_moddi3+0x42>
    2ae2:	f0 e8       	ldi	r31, 0x80	; 128
    2ae4:	0f 26       	eor	r0, r31
    2ae6:	ff ef       	ldi	r31, 0xFF	; 255
    2ae8:	e0 94       	com	r14
    2aea:	f0 94       	com	r15
    2aec:	00 95       	com	r16
    2aee:	10 95       	com	r17
    2af0:	b0 94       	com	r11
    2af2:	c0 94       	com	r12
    2af4:	d0 94       	com	r13
    2af6:	a1 94       	neg	r10
    2af8:	bf 0a       	sbc	r11, r31
    2afa:	cf 0a       	sbc	r12, r31
    2afc:	df 0a       	sbc	r13, r31
    2afe:	ef 0a       	sbc	r14, r31
    2b00:	ff 0a       	sbc	r15, r31
    2b02:	0f 0b       	sbc	r16, r31
    2b04:	1f 0b       	sbc	r17, r31
    2b06:	13 d0       	rcall	.+38     	; 0x2b2e <__udivmod64>
    2b08:	07 fc       	sbrc	r0, 7
    2b0a:	62 d0       	rcall	.+196    	; 0x2bd0 <__negdi2>
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	ec e0       	ldi	r30, 0x0C	; 12
    2b12:	90 c0       	rjmp	.+288    	; 0x2c34 <__epilogue_restores__+0xc>

00002b14 <__umoddi3>:
    2b14:	68 94       	set
    2b16:	01 c0       	rjmp	.+2      	; 0x2b1a <__udivdi3_umoddi3>

00002b18 <__udivdi3>:
    2b18:	e8 94       	clt

00002b1a <__udivdi3_umoddi3>:
    2b1a:	8f 92       	push	r8
    2b1c:	9f 92       	push	r9
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	05 d0       	rcall	.+10     	; 0x2b2e <__udivmod64>
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	9f 90       	pop	r9
    2b2a:	8f 90       	pop	r8
    2b2c:	08 95       	ret

00002b2e <__udivmod64>:
    2b2e:	88 24       	eor	r8, r8
    2b30:	99 24       	eor	r9, r9
    2b32:	f4 01       	movw	r30, r8
    2b34:	e4 01       	movw	r28, r8
    2b36:	b0 e4       	ldi	r27, 0x40	; 64
    2b38:	9f 93       	push	r25
    2b3a:	aa 27       	eor	r26, r26
    2b3c:	9a 15       	cp	r25, r10
    2b3e:	8b 04       	cpc	r8, r11
    2b40:	9c 04       	cpc	r9, r12
    2b42:	ed 05       	cpc	r30, r13
    2b44:	fe 05       	cpc	r31, r14
    2b46:	cf 05       	cpc	r28, r15
    2b48:	d0 07       	cpc	r29, r16
    2b4a:	a1 07       	cpc	r26, r17
    2b4c:	98 f4       	brcc	.+38     	; 0x2b74 <__udivmod64+0x46>
    2b4e:	ad 2f       	mov	r26, r29
    2b50:	dc 2f       	mov	r29, r28
    2b52:	cf 2f       	mov	r28, r31
    2b54:	fe 2f       	mov	r31, r30
    2b56:	e9 2d       	mov	r30, r9
    2b58:	98 2c       	mov	r9, r8
    2b5a:	89 2e       	mov	r8, r25
    2b5c:	98 2f       	mov	r25, r24
    2b5e:	87 2f       	mov	r24, r23
    2b60:	76 2f       	mov	r23, r22
    2b62:	65 2f       	mov	r22, r21
    2b64:	54 2f       	mov	r21, r20
    2b66:	43 2f       	mov	r20, r19
    2b68:	32 2f       	mov	r19, r18
    2b6a:	22 27       	eor	r18, r18
    2b6c:	b8 50       	subi	r27, 0x08	; 8
    2b6e:	31 f7       	brne	.-52     	; 0x2b3c <__udivmod64+0xe>
    2b70:	bf 91       	pop	r27
    2b72:	27 c0       	rjmp	.+78     	; 0x2bc2 <__udivmod64+0x94>
    2b74:	1b 2e       	mov	r1, r27
    2b76:	bf 91       	pop	r27
    2b78:	bb 27       	eor	r27, r27
    2b7a:	22 0f       	add	r18, r18
    2b7c:	33 1f       	adc	r19, r19
    2b7e:	44 1f       	adc	r20, r20
    2b80:	55 1f       	adc	r21, r21
    2b82:	66 1f       	adc	r22, r22
    2b84:	77 1f       	adc	r23, r23
    2b86:	88 1f       	adc	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	88 1c       	adc	r8, r8
    2b8c:	99 1c       	adc	r9, r9
    2b8e:	ee 1f       	adc	r30, r30
    2b90:	ff 1f       	adc	r31, r31
    2b92:	cc 1f       	adc	r28, r28
    2b94:	dd 1f       	adc	r29, r29
    2b96:	aa 1f       	adc	r26, r26
    2b98:	bb 1f       	adc	r27, r27
    2b9a:	8a 14       	cp	r8, r10
    2b9c:	9b 04       	cpc	r9, r11
    2b9e:	ec 05       	cpc	r30, r12
    2ba0:	fd 05       	cpc	r31, r13
    2ba2:	ce 05       	cpc	r28, r14
    2ba4:	df 05       	cpc	r29, r15
    2ba6:	a0 07       	cpc	r26, r16
    2ba8:	b1 07       	cpc	r27, r17
    2baa:	48 f0       	brcs	.+18     	; 0x2bbe <__udivmod64+0x90>
    2bac:	8a 18       	sub	r8, r10
    2bae:	9b 08       	sbc	r9, r11
    2bb0:	ec 09       	sbc	r30, r12
    2bb2:	fd 09       	sbc	r31, r13
    2bb4:	ce 09       	sbc	r28, r14
    2bb6:	df 09       	sbc	r29, r15
    2bb8:	a0 0b       	sbc	r26, r16
    2bba:	b1 0b       	sbc	r27, r17
    2bbc:	21 60       	ori	r18, 0x01	; 1
    2bbe:	1a 94       	dec	r1
    2bc0:	e1 f6       	brne	.-72     	; 0x2b7a <__udivmod64+0x4c>
    2bc2:	2e f4       	brtc	.+10     	; 0x2bce <__udivmod64+0xa0>
    2bc4:	94 01       	movw	r18, r8
    2bc6:	af 01       	movw	r20, r30
    2bc8:	be 01       	movw	r22, r28
    2bca:	cd 01       	movw	r24, r26
    2bcc:	00 0c       	add	r0, r0
    2bce:	08 95       	ret

00002bd0 <__negdi2>:
    2bd0:	60 95       	com	r22
    2bd2:	70 95       	com	r23
    2bd4:	80 95       	com	r24
    2bd6:	90 95       	com	r25
    2bd8:	30 95       	com	r19
    2bda:	40 95       	com	r20
    2bdc:	50 95       	com	r21
    2bde:	21 95       	neg	r18
    2be0:	3f 4f       	sbci	r19, 0xFF	; 255
    2be2:	4f 4f       	sbci	r20, 0xFF	; 255
    2be4:	5f 4f       	sbci	r21, 0xFF	; 255
    2be6:	6f 4f       	sbci	r22, 0xFF	; 255
    2be8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bea:	8f 4f       	sbci	r24, 0xFF	; 255
    2bec:	9f 4f       	sbci	r25, 0xFF	; 255
    2bee:	08 95       	ret

00002bf0 <__prologue_saves__>:
    2bf0:	2f 92       	push	r2
    2bf2:	3f 92       	push	r3
    2bf4:	4f 92       	push	r4
    2bf6:	5f 92       	push	r5
    2bf8:	6f 92       	push	r6
    2bfa:	7f 92       	push	r7
    2bfc:	8f 92       	push	r8
    2bfe:	9f 92       	push	r9
    2c00:	af 92       	push	r10
    2c02:	bf 92       	push	r11
    2c04:	cf 92       	push	r12
    2c06:	df 92       	push	r13
    2c08:	ef 92       	push	r14
    2c0a:	ff 92       	push	r15
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	ca 1b       	sub	r28, r26
    2c1a:	db 0b       	sbc	r29, r27
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	09 94       	ijmp

00002c28 <__epilogue_restores__>:
    2c28:	2a 88       	ldd	r2, Y+18	; 0x12
    2c2a:	39 88       	ldd	r3, Y+17	; 0x11
    2c2c:	48 88       	ldd	r4, Y+16	; 0x10
    2c2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c30:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c32:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c34:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c36:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c38:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c3a:	b9 84       	ldd	r11, Y+9	; 0x09
    2c3c:	c8 84       	ldd	r12, Y+8	; 0x08
    2c3e:	df 80       	ldd	r13, Y+7	; 0x07
    2c40:	ee 80       	ldd	r14, Y+6	; 0x06
    2c42:	fd 80       	ldd	r15, Y+5	; 0x05
    2c44:	0c 81       	ldd	r16, Y+4	; 0x04
    2c46:	1b 81       	ldd	r17, Y+3	; 0x03
    2c48:	aa 81       	ldd	r26, Y+2	; 0x02
    2c4a:	b9 81       	ldd	r27, Y+1	; 0x01
    2c4c:	ce 0f       	add	r28, r30
    2c4e:	d1 1d       	adc	r29, r1
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	ed 01       	movw	r28, r26
    2c5c:	08 95       	ret

00002c5e <__ashldi3>:
    2c5e:	0f 93       	push	r16
    2c60:	08 30       	cpi	r16, 0x08	; 8
    2c62:	90 f0       	brcs	.+36     	; 0x2c88 <__ashldi3+0x2a>
    2c64:	98 2f       	mov	r25, r24
    2c66:	87 2f       	mov	r24, r23
    2c68:	76 2f       	mov	r23, r22
    2c6a:	65 2f       	mov	r22, r21
    2c6c:	54 2f       	mov	r21, r20
    2c6e:	43 2f       	mov	r20, r19
    2c70:	32 2f       	mov	r19, r18
    2c72:	22 27       	eor	r18, r18
    2c74:	08 50       	subi	r16, 0x08	; 8
    2c76:	f4 cf       	rjmp	.-24     	; 0x2c60 <__ashldi3+0x2>
    2c78:	22 0f       	add	r18, r18
    2c7a:	33 1f       	adc	r19, r19
    2c7c:	44 1f       	adc	r20, r20
    2c7e:	55 1f       	adc	r21, r21
    2c80:	66 1f       	adc	r22, r22
    2c82:	77 1f       	adc	r23, r23
    2c84:	88 1f       	adc	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	0a 95       	dec	r16
    2c8a:	b2 f7       	brpl	.-20     	; 0x2c78 <__ashldi3+0x1a>
    2c8c:	0f 91       	pop	r16
    2c8e:	08 95       	ret

00002c90 <__ashrdi3>:
    2c90:	97 fb       	bst	r25, 7
    2c92:	10 f8       	bld	r1, 0

00002c94 <__lshrdi3>:
    2c94:	16 94       	lsr	r1
    2c96:	00 08       	sbc	r0, r0
    2c98:	0f 93       	push	r16
    2c9a:	08 30       	cpi	r16, 0x08	; 8
    2c9c:	98 f0       	brcs	.+38     	; 0x2cc4 <__lshrdi3+0x30>
    2c9e:	08 50       	subi	r16, 0x08	; 8
    2ca0:	23 2f       	mov	r18, r19
    2ca2:	34 2f       	mov	r19, r20
    2ca4:	45 2f       	mov	r20, r21
    2ca6:	56 2f       	mov	r21, r22
    2ca8:	67 2f       	mov	r22, r23
    2caa:	78 2f       	mov	r23, r24
    2cac:	89 2f       	mov	r24, r25
    2cae:	90 2d       	mov	r25, r0
    2cb0:	f4 cf       	rjmp	.-24     	; 0x2c9a <__lshrdi3+0x6>
    2cb2:	05 94       	asr	r0
    2cb4:	97 95       	ror	r25
    2cb6:	87 95       	ror	r24
    2cb8:	77 95       	ror	r23
    2cba:	67 95       	ror	r22
    2cbc:	57 95       	ror	r21
    2cbe:	47 95       	ror	r20
    2cc0:	37 95       	ror	r19
    2cc2:	27 95       	ror	r18
    2cc4:	0a 95       	dec	r16
    2cc6:	aa f7       	brpl	.-22     	; 0x2cb2 <__lshrdi3+0x1e>
    2cc8:	0f 91       	pop	r16
    2cca:	08 95       	ret

00002ccc <__adddi3>:
    2ccc:	2a 0d       	add	r18, r10
    2cce:	3b 1d       	adc	r19, r11
    2cd0:	4c 1d       	adc	r20, r12
    2cd2:	5d 1d       	adc	r21, r13
    2cd4:	6e 1d       	adc	r22, r14
    2cd6:	7f 1d       	adc	r23, r15
    2cd8:	80 1f       	adc	r24, r16
    2cda:	91 1f       	adc	r25, r17
    2cdc:	08 95       	ret

00002cde <__subdi3>:
    2cde:	2a 19       	sub	r18, r10
    2ce0:	3b 09       	sbc	r19, r11
    2ce2:	4c 09       	sbc	r20, r12
    2ce4:	5d 09       	sbc	r21, r13
    2ce6:	6e 09       	sbc	r22, r14
    2ce8:	7f 09       	sbc	r23, r15
    2cea:	80 0b       	sbc	r24, r16
    2cec:	91 0b       	sbc	r25, r17
    2cee:	08 95       	ret

00002cf0 <__cmpdi2_s8>:
    2cf0:	00 24       	eor	r0, r0
    2cf2:	a7 fd       	sbrc	r26, 7
    2cf4:	00 94       	com	r0
    2cf6:	2a 17       	cp	r18, r26
    2cf8:	30 05       	cpc	r19, r0
    2cfa:	40 05       	cpc	r20, r0
    2cfc:	50 05       	cpc	r21, r0
    2cfe:	60 05       	cpc	r22, r0
    2d00:	70 05       	cpc	r23, r0
    2d02:	80 05       	cpc	r24, r0
    2d04:	90 05       	cpc	r25, r0
    2d06:	08 95       	ret

00002d08 <__umulhisi3>:
    2d08:	a2 9f       	mul	r26, r18
    2d0a:	b0 01       	movw	r22, r0
    2d0c:	b3 9f       	mul	r27, r19
    2d0e:	c0 01       	movw	r24, r0
    2d10:	a3 9f       	mul	r26, r19
    2d12:	70 0d       	add	r23, r0
    2d14:	81 1d       	adc	r24, r1
    2d16:	11 24       	eor	r1, r1
    2d18:	91 1d       	adc	r25, r1
    2d1a:	b2 9f       	mul	r27, r18
    2d1c:	70 0d       	add	r23, r0
    2d1e:	81 1d       	adc	r24, r1
    2d20:	11 24       	eor	r1, r1
    2d22:	91 1d       	adc	r25, r1
    2d24:	08 95       	ret

00002d26 <printf>:
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	ae 01       	movw	r20, r28
    2d30:	4b 5f       	subi	r20, 0xFB	; 251
    2d32:	5f 4f       	sbci	r21, 0xFF	; 255
    2d34:	fa 01       	movw	r30, r20
    2d36:	61 91       	ld	r22, Z+
    2d38:	71 91       	ld	r23, Z+
    2d3a:	af 01       	movw	r20, r30
    2d3c:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <__iob+0x2>
    2d40:	90 91 4a 06 	lds	r25, 0x064A	; 0x80064a <__iob+0x3>
    2d44:	03 d0       	rcall	.+6      	; 0x2d4c <vfprintf>
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	08 95       	ret

00002d4c <vfprintf>:
    2d4c:	2f 92       	push	r2
    2d4e:	3f 92       	push	r3
    2d50:	4f 92       	push	r4
    2d52:	5f 92       	push	r5
    2d54:	6f 92       	push	r6
    2d56:	7f 92       	push	r7
    2d58:	8f 92       	push	r8
    2d5a:	9f 92       	push	r9
    2d5c:	af 92       	push	r10
    2d5e:	bf 92       	push	r11
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	2c 97       	sbiw	r28, 0x0c	; 12
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	7c 01       	movw	r14, r24
    2d82:	6b 01       	movw	r12, r22
    2d84:	8a 01       	movw	r16, r20
    2d86:	fc 01       	movw	r30, r24
    2d88:	17 82       	std	Z+7, r1	; 0x07
    2d8a:	16 82       	std	Z+6, r1	; 0x06
    2d8c:	83 81       	ldd	r24, Z+3	; 0x03
    2d8e:	81 ff       	sbrs	r24, 1
    2d90:	b0 c1       	rjmp	.+864    	; 0x30f2 <vfprintf+0x3a6>
    2d92:	ce 01       	movw	r24, r28
    2d94:	01 96       	adiw	r24, 0x01	; 1
    2d96:	4c 01       	movw	r8, r24
    2d98:	f7 01       	movw	r30, r14
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	f6 01       	movw	r30, r12
    2d9e:	93 fd       	sbrc	r25, 3
    2da0:	85 91       	lpm	r24, Z+
    2da2:	93 ff       	sbrs	r25, 3
    2da4:	81 91       	ld	r24, Z+
    2da6:	6f 01       	movw	r12, r30
    2da8:	88 23       	and	r24, r24
    2daa:	09 f4       	brne	.+2      	; 0x2dae <vfprintf+0x62>
    2dac:	9e c1       	rjmp	.+828    	; 0x30ea <vfprintf+0x39e>
    2dae:	85 32       	cpi	r24, 0x25	; 37
    2db0:	39 f4       	brne	.+14     	; 0x2dc0 <vfprintf+0x74>
    2db2:	93 fd       	sbrc	r25, 3
    2db4:	85 91       	lpm	r24, Z+
    2db6:	93 ff       	sbrs	r25, 3
    2db8:	81 91       	ld	r24, Z+
    2dba:	6f 01       	movw	r12, r30
    2dbc:	85 32       	cpi	r24, 0x25	; 37
    2dbe:	21 f4       	brne	.+8      	; 0x2dc8 <vfprintf+0x7c>
    2dc0:	b7 01       	movw	r22, r14
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	c7 d1       	rcall	.+910    	; 0x3154 <fputc>
    2dc6:	e8 cf       	rjmp	.-48     	; 0x2d98 <vfprintf+0x4c>
    2dc8:	51 2c       	mov	r5, r1
    2dca:	31 2c       	mov	r3, r1
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	20 32       	cpi	r18, 0x20	; 32
    2dd0:	a0 f4       	brcc	.+40     	; 0x2dfa <vfprintf+0xae>
    2dd2:	8b 32       	cpi	r24, 0x2B	; 43
    2dd4:	69 f0       	breq	.+26     	; 0x2df0 <vfprintf+0xa4>
    2dd6:	30 f4       	brcc	.+12     	; 0x2de4 <vfprintf+0x98>
    2dd8:	80 32       	cpi	r24, 0x20	; 32
    2dda:	59 f0       	breq	.+22     	; 0x2df2 <vfprintf+0xa6>
    2ddc:	83 32       	cpi	r24, 0x23	; 35
    2dde:	69 f4       	brne	.+26     	; 0x2dfa <vfprintf+0xae>
    2de0:	20 61       	ori	r18, 0x10	; 16
    2de2:	2c c0       	rjmp	.+88     	; 0x2e3c <vfprintf+0xf0>
    2de4:	8d 32       	cpi	r24, 0x2D	; 45
    2de6:	39 f0       	breq	.+14     	; 0x2df6 <vfprintf+0xaa>
    2de8:	80 33       	cpi	r24, 0x30	; 48
    2dea:	39 f4       	brne	.+14     	; 0x2dfa <vfprintf+0xae>
    2dec:	21 60       	ori	r18, 0x01	; 1
    2dee:	26 c0       	rjmp	.+76     	; 0x2e3c <vfprintf+0xf0>
    2df0:	22 60       	ori	r18, 0x02	; 2
    2df2:	24 60       	ori	r18, 0x04	; 4
    2df4:	23 c0       	rjmp	.+70     	; 0x2e3c <vfprintf+0xf0>
    2df6:	28 60       	ori	r18, 0x08	; 8
    2df8:	21 c0       	rjmp	.+66     	; 0x2e3c <vfprintf+0xf0>
    2dfa:	27 fd       	sbrc	r18, 7
    2dfc:	27 c0       	rjmp	.+78     	; 0x2e4c <vfprintf+0x100>
    2dfe:	30 ed       	ldi	r19, 0xD0	; 208
    2e00:	38 0f       	add	r19, r24
    2e02:	3a 30       	cpi	r19, 0x0A	; 10
    2e04:	78 f4       	brcc	.+30     	; 0x2e24 <vfprintf+0xd8>
    2e06:	26 ff       	sbrs	r18, 6
    2e08:	06 c0       	rjmp	.+12     	; 0x2e16 <vfprintf+0xca>
    2e0a:	fa e0       	ldi	r31, 0x0A	; 10
    2e0c:	5f 9e       	mul	r5, r31
    2e0e:	30 0d       	add	r19, r0
    2e10:	11 24       	eor	r1, r1
    2e12:	53 2e       	mov	r5, r19
    2e14:	13 c0       	rjmp	.+38     	; 0x2e3c <vfprintf+0xf0>
    2e16:	8a e0       	ldi	r24, 0x0A	; 10
    2e18:	38 9e       	mul	r3, r24
    2e1a:	30 0d       	add	r19, r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	33 2e       	mov	r3, r19
    2e20:	20 62       	ori	r18, 0x20	; 32
    2e22:	0c c0       	rjmp	.+24     	; 0x2e3c <vfprintf+0xf0>
    2e24:	8e 32       	cpi	r24, 0x2E	; 46
    2e26:	21 f4       	brne	.+8      	; 0x2e30 <vfprintf+0xe4>
    2e28:	26 fd       	sbrc	r18, 6
    2e2a:	5f c1       	rjmp	.+702    	; 0x30ea <vfprintf+0x39e>
    2e2c:	20 64       	ori	r18, 0x40	; 64
    2e2e:	06 c0       	rjmp	.+12     	; 0x2e3c <vfprintf+0xf0>
    2e30:	8c 36       	cpi	r24, 0x6C	; 108
    2e32:	11 f4       	brne	.+4      	; 0x2e38 <vfprintf+0xec>
    2e34:	20 68       	ori	r18, 0x80	; 128
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <vfprintf+0xf0>
    2e38:	88 36       	cpi	r24, 0x68	; 104
    2e3a:	41 f4       	brne	.+16     	; 0x2e4c <vfprintf+0x100>
    2e3c:	f6 01       	movw	r30, r12
    2e3e:	93 fd       	sbrc	r25, 3
    2e40:	85 91       	lpm	r24, Z+
    2e42:	93 ff       	sbrs	r25, 3
    2e44:	81 91       	ld	r24, Z+
    2e46:	6f 01       	movw	r12, r30
    2e48:	81 11       	cpse	r24, r1
    2e4a:	c1 cf       	rjmp	.-126    	; 0x2dce <vfprintf+0x82>
    2e4c:	98 2f       	mov	r25, r24
    2e4e:	9f 7d       	andi	r25, 0xDF	; 223
    2e50:	95 54       	subi	r25, 0x45	; 69
    2e52:	93 30       	cpi	r25, 0x03	; 3
    2e54:	28 f4       	brcc	.+10     	; 0x2e60 <vfprintf+0x114>
    2e56:	0c 5f       	subi	r16, 0xFC	; 252
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	ff e3       	ldi	r31, 0x3F	; 63
    2e5c:	f9 83       	std	Y+1, r31	; 0x01
    2e5e:	0d c0       	rjmp	.+26     	; 0x2e7a <vfprintf+0x12e>
    2e60:	83 36       	cpi	r24, 0x63	; 99
    2e62:	31 f0       	breq	.+12     	; 0x2e70 <vfprintf+0x124>
    2e64:	83 37       	cpi	r24, 0x73	; 115
    2e66:	71 f0       	breq	.+28     	; 0x2e84 <vfprintf+0x138>
    2e68:	83 35       	cpi	r24, 0x53	; 83
    2e6a:	09 f0       	breq	.+2      	; 0x2e6e <vfprintf+0x122>
    2e6c:	57 c0       	rjmp	.+174    	; 0x2f1c <vfprintf+0x1d0>
    2e6e:	21 c0       	rjmp	.+66     	; 0x2eb2 <vfprintf+0x166>
    2e70:	f8 01       	movw	r30, r16
    2e72:	80 81       	ld	r24, Z
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	0e 5f       	subi	r16, 0xFE	; 254
    2e78:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7a:	44 24       	eor	r4, r4
    2e7c:	43 94       	inc	r4
    2e7e:	51 2c       	mov	r5, r1
    2e80:	54 01       	movw	r10, r8
    2e82:	14 c0       	rjmp	.+40     	; 0x2eac <vfprintf+0x160>
    2e84:	38 01       	movw	r6, r16
    2e86:	f2 e0       	ldi	r31, 0x02	; 2
    2e88:	6f 0e       	add	r6, r31
    2e8a:	71 1c       	adc	r7, r1
    2e8c:	f8 01       	movw	r30, r16
    2e8e:	a0 80       	ld	r10, Z
    2e90:	b1 80       	ldd	r11, Z+1	; 0x01
    2e92:	26 ff       	sbrs	r18, 6
    2e94:	03 c0       	rjmp	.+6      	; 0x2e9c <vfprintf+0x150>
    2e96:	65 2d       	mov	r22, r5
    2e98:	70 e0       	ldi	r23, 0x00	; 0
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <vfprintf+0x154>
    2e9c:	6f ef       	ldi	r22, 0xFF	; 255
    2e9e:	7f ef       	ldi	r23, 0xFF	; 255
    2ea0:	c5 01       	movw	r24, r10
    2ea2:	2c 87       	std	Y+12, r18	; 0x0c
    2ea4:	4c d1       	rcall	.+664    	; 0x313e <strnlen>
    2ea6:	2c 01       	movw	r4, r24
    2ea8:	83 01       	movw	r16, r6
    2eaa:	2c 85       	ldd	r18, Y+12	; 0x0c
    2eac:	2f 77       	andi	r18, 0x7F	; 127
    2eae:	22 2e       	mov	r2, r18
    2eb0:	16 c0       	rjmp	.+44     	; 0x2ede <vfprintf+0x192>
    2eb2:	38 01       	movw	r6, r16
    2eb4:	f2 e0       	ldi	r31, 0x02	; 2
    2eb6:	6f 0e       	add	r6, r31
    2eb8:	71 1c       	adc	r7, r1
    2eba:	f8 01       	movw	r30, r16
    2ebc:	a0 80       	ld	r10, Z
    2ebe:	b1 80       	ldd	r11, Z+1	; 0x01
    2ec0:	26 ff       	sbrs	r18, 6
    2ec2:	03 c0       	rjmp	.+6      	; 0x2eca <vfprintf+0x17e>
    2ec4:	65 2d       	mov	r22, r5
    2ec6:	70 e0       	ldi	r23, 0x00	; 0
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <vfprintf+0x182>
    2eca:	6f ef       	ldi	r22, 0xFF	; 255
    2ecc:	7f ef       	ldi	r23, 0xFF	; 255
    2ece:	c5 01       	movw	r24, r10
    2ed0:	2c 87       	std	Y+12, r18	; 0x0c
    2ed2:	2a d1       	rcall	.+596    	; 0x3128 <strnlen_P>
    2ed4:	2c 01       	movw	r4, r24
    2ed6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ed8:	20 68       	ori	r18, 0x80	; 128
    2eda:	22 2e       	mov	r2, r18
    2edc:	83 01       	movw	r16, r6
    2ede:	23 fc       	sbrc	r2, 3
    2ee0:	19 c0       	rjmp	.+50     	; 0x2f14 <vfprintf+0x1c8>
    2ee2:	83 2d       	mov	r24, r3
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	48 16       	cp	r4, r24
    2ee8:	59 06       	cpc	r5, r25
    2eea:	a0 f4       	brcc	.+40     	; 0x2f14 <vfprintf+0x1c8>
    2eec:	b7 01       	movw	r22, r14
    2eee:	80 e2       	ldi	r24, 0x20	; 32
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	30 d1       	rcall	.+608    	; 0x3154 <fputc>
    2ef4:	3a 94       	dec	r3
    2ef6:	f5 cf       	rjmp	.-22     	; 0x2ee2 <vfprintf+0x196>
    2ef8:	f5 01       	movw	r30, r10
    2efa:	27 fc       	sbrc	r2, 7
    2efc:	85 91       	lpm	r24, Z+
    2efe:	27 fe       	sbrs	r2, 7
    2f00:	81 91       	ld	r24, Z+
    2f02:	5f 01       	movw	r10, r30
    2f04:	b7 01       	movw	r22, r14
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	25 d1       	rcall	.+586    	; 0x3154 <fputc>
    2f0a:	31 10       	cpse	r3, r1
    2f0c:	3a 94       	dec	r3
    2f0e:	f1 e0       	ldi	r31, 0x01	; 1
    2f10:	4f 1a       	sub	r4, r31
    2f12:	51 08       	sbc	r5, r1
    2f14:	41 14       	cp	r4, r1
    2f16:	51 04       	cpc	r5, r1
    2f18:	79 f7       	brne	.-34     	; 0x2ef8 <vfprintf+0x1ac>
    2f1a:	de c0       	rjmp	.+444    	; 0x30d8 <vfprintf+0x38c>
    2f1c:	84 36       	cpi	r24, 0x64	; 100
    2f1e:	11 f0       	breq	.+4      	; 0x2f24 <vfprintf+0x1d8>
    2f20:	89 36       	cpi	r24, 0x69	; 105
    2f22:	31 f5       	brne	.+76     	; 0x2f70 <vfprintf+0x224>
    2f24:	f8 01       	movw	r30, r16
    2f26:	27 ff       	sbrs	r18, 7
    2f28:	07 c0       	rjmp	.+14     	; 0x2f38 <vfprintf+0x1ec>
    2f2a:	60 81       	ld	r22, Z
    2f2c:	71 81       	ldd	r23, Z+1	; 0x01
    2f2e:	82 81       	ldd	r24, Z+2	; 0x02
    2f30:	93 81       	ldd	r25, Z+3	; 0x03
    2f32:	0c 5f       	subi	r16, 0xFC	; 252
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	08 c0       	rjmp	.+16     	; 0x2f48 <vfprintf+0x1fc>
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	07 2e       	mov	r0, r23
    2f3e:	00 0c       	add	r0, r0
    2f40:	88 0b       	sbc	r24, r24
    2f42:	99 0b       	sbc	r25, r25
    2f44:	0e 5f       	subi	r16, 0xFE	; 254
    2f46:	1f 4f       	sbci	r17, 0xFF	; 255
    2f48:	2f 76       	andi	r18, 0x6F	; 111
    2f4a:	72 2e       	mov	r7, r18
    2f4c:	97 ff       	sbrs	r25, 7
    2f4e:	09 c0       	rjmp	.+18     	; 0x2f62 <vfprintf+0x216>
    2f50:	90 95       	com	r25
    2f52:	80 95       	com	r24
    2f54:	70 95       	com	r23
    2f56:	61 95       	neg	r22
    2f58:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5e:	20 68       	ori	r18, 0x80	; 128
    2f60:	72 2e       	mov	r7, r18
    2f62:	2a e0       	ldi	r18, 0x0A	; 10
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	a4 01       	movw	r20, r8
    2f68:	2d d1       	rcall	.+602    	; 0x31c4 <__ultoa_invert>
    2f6a:	a8 2e       	mov	r10, r24
    2f6c:	a8 18       	sub	r10, r8
    2f6e:	43 c0       	rjmp	.+134    	; 0x2ff6 <vfprintf+0x2aa>
    2f70:	85 37       	cpi	r24, 0x75	; 117
    2f72:	29 f4       	brne	.+10     	; 0x2f7e <vfprintf+0x232>
    2f74:	2f 7e       	andi	r18, 0xEF	; 239
    2f76:	b2 2e       	mov	r11, r18
    2f78:	2a e0       	ldi	r18, 0x0A	; 10
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	25 c0       	rjmp	.+74     	; 0x2fc8 <vfprintf+0x27c>
    2f7e:	f2 2f       	mov	r31, r18
    2f80:	f9 7f       	andi	r31, 0xF9	; 249
    2f82:	bf 2e       	mov	r11, r31
    2f84:	8f 36       	cpi	r24, 0x6F	; 111
    2f86:	c1 f0       	breq	.+48     	; 0x2fb8 <vfprintf+0x26c>
    2f88:	18 f4       	brcc	.+6      	; 0x2f90 <vfprintf+0x244>
    2f8a:	88 35       	cpi	r24, 0x58	; 88
    2f8c:	79 f0       	breq	.+30     	; 0x2fac <vfprintf+0x260>
    2f8e:	ad c0       	rjmp	.+346    	; 0x30ea <vfprintf+0x39e>
    2f90:	80 37       	cpi	r24, 0x70	; 112
    2f92:	19 f0       	breq	.+6      	; 0x2f9a <vfprintf+0x24e>
    2f94:	88 37       	cpi	r24, 0x78	; 120
    2f96:	21 f0       	breq	.+8      	; 0x2fa0 <vfprintf+0x254>
    2f98:	a8 c0       	rjmp	.+336    	; 0x30ea <vfprintf+0x39e>
    2f9a:	2f 2f       	mov	r18, r31
    2f9c:	20 61       	ori	r18, 0x10	; 16
    2f9e:	b2 2e       	mov	r11, r18
    2fa0:	b4 fe       	sbrs	r11, 4
    2fa2:	0d c0       	rjmp	.+26     	; 0x2fbe <vfprintf+0x272>
    2fa4:	8b 2d       	mov	r24, r11
    2fa6:	84 60       	ori	r24, 0x04	; 4
    2fa8:	b8 2e       	mov	r11, r24
    2faa:	09 c0       	rjmp	.+18     	; 0x2fbe <vfprintf+0x272>
    2fac:	24 ff       	sbrs	r18, 4
    2fae:	0a c0       	rjmp	.+20     	; 0x2fc4 <vfprintf+0x278>
    2fb0:	9f 2f       	mov	r25, r31
    2fb2:	96 60       	ori	r25, 0x06	; 6
    2fb4:	b9 2e       	mov	r11, r25
    2fb6:	06 c0       	rjmp	.+12     	; 0x2fc4 <vfprintf+0x278>
    2fb8:	28 e0       	ldi	r18, 0x08	; 8
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	05 c0       	rjmp	.+10     	; 0x2fc8 <vfprintf+0x27c>
    2fbe:	20 e1       	ldi	r18, 0x10	; 16
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <vfprintf+0x27c>
    2fc4:	20 e1       	ldi	r18, 0x10	; 16
    2fc6:	32 e0       	ldi	r19, 0x02	; 2
    2fc8:	f8 01       	movw	r30, r16
    2fca:	b7 fe       	sbrs	r11, 7
    2fcc:	07 c0       	rjmp	.+14     	; 0x2fdc <vfprintf+0x290>
    2fce:	60 81       	ld	r22, Z
    2fd0:	71 81       	ldd	r23, Z+1	; 0x01
    2fd2:	82 81       	ldd	r24, Z+2	; 0x02
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	0c 5f       	subi	r16, 0xFC	; 252
    2fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fda:	06 c0       	rjmp	.+12     	; 0x2fe8 <vfprintf+0x29c>
    2fdc:	60 81       	ld	r22, Z
    2fde:	71 81       	ldd	r23, Z+1	; 0x01
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 5f       	subi	r16, 0xFE	; 254
    2fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe8:	a4 01       	movw	r20, r8
    2fea:	ec d0       	rcall	.+472    	; 0x31c4 <__ultoa_invert>
    2fec:	a8 2e       	mov	r10, r24
    2fee:	a8 18       	sub	r10, r8
    2ff0:	fb 2d       	mov	r31, r11
    2ff2:	ff 77       	andi	r31, 0x7F	; 127
    2ff4:	7f 2e       	mov	r7, r31
    2ff6:	76 fe       	sbrs	r7, 6
    2ff8:	0b c0       	rjmp	.+22     	; 0x3010 <vfprintf+0x2c4>
    2ffa:	37 2d       	mov	r19, r7
    2ffc:	3e 7f       	andi	r19, 0xFE	; 254
    2ffe:	a5 14       	cp	r10, r5
    3000:	50 f4       	brcc	.+20     	; 0x3016 <vfprintf+0x2ca>
    3002:	74 fe       	sbrs	r7, 4
    3004:	0a c0       	rjmp	.+20     	; 0x301a <vfprintf+0x2ce>
    3006:	72 fc       	sbrc	r7, 2
    3008:	08 c0       	rjmp	.+16     	; 0x301a <vfprintf+0x2ce>
    300a:	37 2d       	mov	r19, r7
    300c:	3e 7e       	andi	r19, 0xEE	; 238
    300e:	05 c0       	rjmp	.+10     	; 0x301a <vfprintf+0x2ce>
    3010:	ba 2c       	mov	r11, r10
    3012:	37 2d       	mov	r19, r7
    3014:	03 c0       	rjmp	.+6      	; 0x301c <vfprintf+0x2d0>
    3016:	ba 2c       	mov	r11, r10
    3018:	01 c0       	rjmp	.+2      	; 0x301c <vfprintf+0x2d0>
    301a:	b5 2c       	mov	r11, r5
    301c:	34 ff       	sbrs	r19, 4
    301e:	0d c0       	rjmp	.+26     	; 0x303a <vfprintf+0x2ee>
    3020:	fe 01       	movw	r30, r28
    3022:	ea 0d       	add	r30, r10
    3024:	f1 1d       	adc	r31, r1
    3026:	80 81       	ld	r24, Z
    3028:	80 33       	cpi	r24, 0x30	; 48
    302a:	11 f4       	brne	.+4      	; 0x3030 <vfprintf+0x2e4>
    302c:	39 7e       	andi	r19, 0xE9	; 233
    302e:	09 c0       	rjmp	.+18     	; 0x3042 <vfprintf+0x2f6>
    3030:	32 ff       	sbrs	r19, 2
    3032:	06 c0       	rjmp	.+12     	; 0x3040 <vfprintf+0x2f4>
    3034:	b3 94       	inc	r11
    3036:	b3 94       	inc	r11
    3038:	04 c0       	rjmp	.+8      	; 0x3042 <vfprintf+0x2f6>
    303a:	83 2f       	mov	r24, r19
    303c:	86 78       	andi	r24, 0x86	; 134
    303e:	09 f0       	breq	.+2      	; 0x3042 <vfprintf+0x2f6>
    3040:	b3 94       	inc	r11
    3042:	33 fd       	sbrc	r19, 3
    3044:	12 c0       	rjmp	.+36     	; 0x306a <vfprintf+0x31e>
    3046:	30 ff       	sbrs	r19, 0
    3048:	06 c0       	rjmp	.+12     	; 0x3056 <vfprintf+0x30a>
    304a:	5a 2c       	mov	r5, r10
    304c:	b3 14       	cp	r11, r3
    304e:	18 f4       	brcc	.+6      	; 0x3056 <vfprintf+0x30a>
    3050:	53 0c       	add	r5, r3
    3052:	5b 18       	sub	r5, r11
    3054:	b3 2c       	mov	r11, r3
    3056:	b3 14       	cp	r11, r3
    3058:	60 f4       	brcc	.+24     	; 0x3072 <vfprintf+0x326>
    305a:	b7 01       	movw	r22, r14
    305c:	80 e2       	ldi	r24, 0x20	; 32
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	3c 87       	std	Y+12, r19	; 0x0c
    3062:	78 d0       	rcall	.+240    	; 0x3154 <fputc>
    3064:	b3 94       	inc	r11
    3066:	3c 85       	ldd	r19, Y+12	; 0x0c
    3068:	f6 cf       	rjmp	.-20     	; 0x3056 <vfprintf+0x30a>
    306a:	b3 14       	cp	r11, r3
    306c:	10 f4       	brcc	.+4      	; 0x3072 <vfprintf+0x326>
    306e:	3b 18       	sub	r3, r11
    3070:	01 c0       	rjmp	.+2      	; 0x3074 <vfprintf+0x328>
    3072:	31 2c       	mov	r3, r1
    3074:	34 ff       	sbrs	r19, 4
    3076:	11 c0       	rjmp	.+34     	; 0x309a <vfprintf+0x34e>
    3078:	b7 01       	movw	r22, r14
    307a:	80 e3       	ldi	r24, 0x30	; 48
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	3c 87       	std	Y+12, r19	; 0x0c
    3080:	69 d0       	rcall	.+210    	; 0x3154 <fputc>
    3082:	3c 85       	ldd	r19, Y+12	; 0x0c
    3084:	32 ff       	sbrs	r19, 2
    3086:	16 c0       	rjmp	.+44     	; 0x30b4 <vfprintf+0x368>
    3088:	31 fd       	sbrc	r19, 1
    308a:	03 c0       	rjmp	.+6      	; 0x3092 <vfprintf+0x346>
    308c:	88 e7       	ldi	r24, 0x78	; 120
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <vfprintf+0x34a>
    3092:	88 e5       	ldi	r24, 0x58	; 88
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	b7 01       	movw	r22, r14
    3098:	0c c0       	rjmp	.+24     	; 0x30b2 <vfprintf+0x366>
    309a:	83 2f       	mov	r24, r19
    309c:	86 78       	andi	r24, 0x86	; 134
    309e:	51 f0       	breq	.+20     	; 0x30b4 <vfprintf+0x368>
    30a0:	31 ff       	sbrs	r19, 1
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <vfprintf+0x35c>
    30a4:	8b e2       	ldi	r24, 0x2B	; 43
    30a6:	01 c0       	rjmp	.+2      	; 0x30aa <vfprintf+0x35e>
    30a8:	80 e2       	ldi	r24, 0x20	; 32
    30aa:	37 fd       	sbrc	r19, 7
    30ac:	8d e2       	ldi	r24, 0x2D	; 45
    30ae:	b7 01       	movw	r22, r14
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	50 d0       	rcall	.+160    	; 0x3154 <fputc>
    30b4:	a5 14       	cp	r10, r5
    30b6:	30 f4       	brcc	.+12     	; 0x30c4 <vfprintf+0x378>
    30b8:	b7 01       	movw	r22, r14
    30ba:	80 e3       	ldi	r24, 0x30	; 48
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	4a d0       	rcall	.+148    	; 0x3154 <fputc>
    30c0:	5a 94       	dec	r5
    30c2:	f8 cf       	rjmp	.-16     	; 0x30b4 <vfprintf+0x368>
    30c4:	aa 94       	dec	r10
    30c6:	f4 01       	movw	r30, r8
    30c8:	ea 0d       	add	r30, r10
    30ca:	f1 1d       	adc	r31, r1
    30cc:	80 81       	ld	r24, Z
    30ce:	b7 01       	movw	r22, r14
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	40 d0       	rcall	.+128    	; 0x3154 <fputc>
    30d4:	a1 10       	cpse	r10, r1
    30d6:	f6 cf       	rjmp	.-20     	; 0x30c4 <vfprintf+0x378>
    30d8:	33 20       	and	r3, r3
    30da:	09 f4       	brne	.+2      	; 0x30de <vfprintf+0x392>
    30dc:	5d ce       	rjmp	.-838    	; 0x2d98 <vfprintf+0x4c>
    30de:	b7 01       	movw	r22, r14
    30e0:	80 e2       	ldi	r24, 0x20	; 32
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	37 d0       	rcall	.+110    	; 0x3154 <fputc>
    30e6:	3a 94       	dec	r3
    30e8:	f7 cf       	rjmp	.-18     	; 0x30d8 <vfprintf+0x38c>
    30ea:	f7 01       	movw	r30, r14
    30ec:	86 81       	ldd	r24, Z+6	; 0x06
    30ee:	97 81       	ldd	r25, Z+7	; 0x07
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <vfprintf+0x3aa>
    30f2:	8f ef       	ldi	r24, 0xFF	; 255
    30f4:	9f ef       	ldi	r25, 0xFF	; 255
    30f6:	2c 96       	adiw	r28, 0x0c	; 12
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	ff 90       	pop	r15
    310c:	ef 90       	pop	r14
    310e:	df 90       	pop	r13
    3110:	cf 90       	pop	r12
    3112:	bf 90       	pop	r11
    3114:	af 90       	pop	r10
    3116:	9f 90       	pop	r9
    3118:	8f 90       	pop	r8
    311a:	7f 90       	pop	r7
    311c:	6f 90       	pop	r6
    311e:	5f 90       	pop	r5
    3120:	4f 90       	pop	r4
    3122:	3f 90       	pop	r3
    3124:	2f 90       	pop	r2
    3126:	08 95       	ret

00003128 <strnlen_P>:
    3128:	fc 01       	movw	r30, r24
    312a:	05 90       	lpm	r0, Z+
    312c:	61 50       	subi	r22, 0x01	; 1
    312e:	70 40       	sbci	r23, 0x00	; 0
    3130:	01 10       	cpse	r0, r1
    3132:	d8 f7       	brcc	.-10     	; 0x312a <strnlen_P+0x2>
    3134:	80 95       	com	r24
    3136:	90 95       	com	r25
    3138:	8e 0f       	add	r24, r30
    313a:	9f 1f       	adc	r25, r31
    313c:	08 95       	ret

0000313e <strnlen>:
    313e:	fc 01       	movw	r30, r24
    3140:	61 50       	subi	r22, 0x01	; 1
    3142:	70 40       	sbci	r23, 0x00	; 0
    3144:	01 90       	ld	r0, Z+
    3146:	01 10       	cpse	r0, r1
    3148:	d8 f7       	brcc	.-10     	; 0x3140 <strnlen+0x2>
    314a:	80 95       	com	r24
    314c:	90 95       	com	r25
    314e:	8e 0f       	add	r24, r30
    3150:	9f 1f       	adc	r25, r31
    3152:	08 95       	ret

00003154 <fputc>:
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	fb 01       	movw	r30, r22
    315e:	23 81       	ldd	r18, Z+3	; 0x03
    3160:	21 fd       	sbrc	r18, 1
    3162:	03 c0       	rjmp	.+6      	; 0x316a <fputc+0x16>
    3164:	8f ef       	ldi	r24, 0xFF	; 255
    3166:	9f ef       	ldi	r25, 0xFF	; 255
    3168:	28 c0       	rjmp	.+80     	; 0x31ba <fputc+0x66>
    316a:	22 ff       	sbrs	r18, 2
    316c:	16 c0       	rjmp	.+44     	; 0x319a <fputc+0x46>
    316e:	46 81       	ldd	r20, Z+6	; 0x06
    3170:	57 81       	ldd	r21, Z+7	; 0x07
    3172:	24 81       	ldd	r18, Z+4	; 0x04
    3174:	35 81       	ldd	r19, Z+5	; 0x05
    3176:	42 17       	cp	r20, r18
    3178:	53 07       	cpc	r21, r19
    317a:	44 f4       	brge	.+16     	; 0x318c <fputc+0x38>
    317c:	a0 81       	ld	r26, Z
    317e:	b1 81       	ldd	r27, Z+1	; 0x01
    3180:	9d 01       	movw	r18, r26
    3182:	2f 5f       	subi	r18, 0xFF	; 255
    3184:	3f 4f       	sbci	r19, 0xFF	; 255
    3186:	31 83       	std	Z+1, r19	; 0x01
    3188:	20 83       	st	Z, r18
    318a:	8c 93       	st	X, r24
    318c:	26 81       	ldd	r18, Z+6	; 0x06
    318e:	37 81       	ldd	r19, Z+7	; 0x07
    3190:	2f 5f       	subi	r18, 0xFF	; 255
    3192:	3f 4f       	sbci	r19, 0xFF	; 255
    3194:	37 83       	std	Z+7, r19	; 0x07
    3196:	26 83       	std	Z+6, r18	; 0x06
    3198:	10 c0       	rjmp	.+32     	; 0x31ba <fputc+0x66>
    319a:	eb 01       	movw	r28, r22
    319c:	09 2f       	mov	r16, r25
    319e:	18 2f       	mov	r17, r24
    31a0:	00 84       	ldd	r0, Z+8	; 0x08
    31a2:	f1 85       	ldd	r31, Z+9	; 0x09
    31a4:	e0 2d       	mov	r30, r0
    31a6:	09 95       	icall
    31a8:	89 2b       	or	r24, r25
    31aa:	e1 f6       	brne	.-72     	; 0x3164 <fputc+0x10>
    31ac:	8e 81       	ldd	r24, Y+6	; 0x06
    31ae:	9f 81       	ldd	r25, Y+7	; 0x07
    31b0:	01 96       	adiw	r24, 0x01	; 1
    31b2:	9f 83       	std	Y+7, r25	; 0x07
    31b4:	8e 83       	std	Y+6, r24	; 0x06
    31b6:	81 2f       	mov	r24, r17
    31b8:	90 2f       	mov	r25, r16
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	1f 91       	pop	r17
    31c0:	0f 91       	pop	r16
    31c2:	08 95       	ret

000031c4 <__ultoa_invert>:
    31c4:	fa 01       	movw	r30, r20
    31c6:	aa 27       	eor	r26, r26
    31c8:	28 30       	cpi	r18, 0x08	; 8
    31ca:	51 f1       	breq	.+84     	; 0x3220 <__ultoa_invert+0x5c>
    31cc:	20 31       	cpi	r18, 0x10	; 16
    31ce:	81 f1       	breq	.+96     	; 0x3230 <__ultoa_invert+0x6c>
    31d0:	e8 94       	clt
    31d2:	6f 93       	push	r22
    31d4:	6e 7f       	andi	r22, 0xFE	; 254
    31d6:	6e 5f       	subi	r22, 0xFE	; 254
    31d8:	7f 4f       	sbci	r23, 0xFF	; 255
    31da:	8f 4f       	sbci	r24, 0xFF	; 255
    31dc:	9f 4f       	sbci	r25, 0xFF	; 255
    31de:	af 4f       	sbci	r26, 0xFF	; 255
    31e0:	b1 e0       	ldi	r27, 0x01	; 1
    31e2:	3e d0       	rcall	.+124    	; 0x3260 <__ultoa_invert+0x9c>
    31e4:	b4 e0       	ldi	r27, 0x04	; 4
    31e6:	3c d0       	rcall	.+120    	; 0x3260 <__ultoa_invert+0x9c>
    31e8:	67 0f       	add	r22, r23
    31ea:	78 1f       	adc	r23, r24
    31ec:	89 1f       	adc	r24, r25
    31ee:	9a 1f       	adc	r25, r26
    31f0:	a1 1d       	adc	r26, r1
    31f2:	68 0f       	add	r22, r24
    31f4:	79 1f       	adc	r23, r25
    31f6:	8a 1f       	adc	r24, r26
    31f8:	91 1d       	adc	r25, r1
    31fa:	a1 1d       	adc	r26, r1
    31fc:	6a 0f       	add	r22, r26
    31fe:	71 1d       	adc	r23, r1
    3200:	81 1d       	adc	r24, r1
    3202:	91 1d       	adc	r25, r1
    3204:	a1 1d       	adc	r26, r1
    3206:	20 d0       	rcall	.+64     	; 0x3248 <__ultoa_invert+0x84>
    3208:	09 f4       	brne	.+2      	; 0x320c <__ultoa_invert+0x48>
    320a:	68 94       	set
    320c:	3f 91       	pop	r19
    320e:	2a e0       	ldi	r18, 0x0A	; 10
    3210:	26 9f       	mul	r18, r22
    3212:	11 24       	eor	r1, r1
    3214:	30 19       	sub	r19, r0
    3216:	30 5d       	subi	r19, 0xD0	; 208
    3218:	31 93       	st	Z+, r19
    321a:	de f6       	brtc	.-74     	; 0x31d2 <__ultoa_invert+0xe>
    321c:	cf 01       	movw	r24, r30
    321e:	08 95       	ret
    3220:	46 2f       	mov	r20, r22
    3222:	47 70       	andi	r20, 0x07	; 7
    3224:	40 5d       	subi	r20, 0xD0	; 208
    3226:	41 93       	st	Z+, r20
    3228:	b3 e0       	ldi	r27, 0x03	; 3
    322a:	0f d0       	rcall	.+30     	; 0x324a <__ultoa_invert+0x86>
    322c:	c9 f7       	brne	.-14     	; 0x3220 <__ultoa_invert+0x5c>
    322e:	f6 cf       	rjmp	.-20     	; 0x321c <__ultoa_invert+0x58>
    3230:	46 2f       	mov	r20, r22
    3232:	4f 70       	andi	r20, 0x0F	; 15
    3234:	40 5d       	subi	r20, 0xD0	; 208
    3236:	4a 33       	cpi	r20, 0x3A	; 58
    3238:	18 f0       	brcs	.+6      	; 0x3240 <__ultoa_invert+0x7c>
    323a:	49 5d       	subi	r20, 0xD9	; 217
    323c:	31 fd       	sbrc	r19, 1
    323e:	40 52       	subi	r20, 0x20	; 32
    3240:	41 93       	st	Z+, r20
    3242:	02 d0       	rcall	.+4      	; 0x3248 <__ultoa_invert+0x84>
    3244:	a9 f7       	brne	.-22     	; 0x3230 <__ultoa_invert+0x6c>
    3246:	ea cf       	rjmp	.-44     	; 0x321c <__ultoa_invert+0x58>
    3248:	b4 e0       	ldi	r27, 0x04	; 4
    324a:	a6 95       	lsr	r26
    324c:	97 95       	ror	r25
    324e:	87 95       	ror	r24
    3250:	77 95       	ror	r23
    3252:	67 95       	ror	r22
    3254:	ba 95       	dec	r27
    3256:	c9 f7       	brne	.-14     	; 0x324a <__ultoa_invert+0x86>
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	61 05       	cpc	r22, r1
    325c:	71 05       	cpc	r23, r1
    325e:	08 95       	ret
    3260:	9b 01       	movw	r18, r22
    3262:	ac 01       	movw	r20, r24
    3264:	0a 2e       	mov	r0, r26
    3266:	06 94       	lsr	r0
    3268:	57 95       	ror	r21
    326a:	47 95       	ror	r20
    326c:	37 95       	ror	r19
    326e:	27 95       	ror	r18
    3270:	ba 95       	dec	r27
    3272:	c9 f7       	brne	.-14     	; 0x3266 <__ultoa_invert+0xa2>
    3274:	62 0f       	add	r22, r18
    3276:	73 1f       	adc	r23, r19
    3278:	84 1f       	adc	r24, r20
    327a:	95 1f       	adc	r25, r21
    327c:	a0 1d       	adc	r26, r0
    327e:	08 95       	ret

00003280 <eeprom_read_word>:
    3280:	a8 e1       	ldi	r26, 0x18	; 24
    3282:	b0 e0       	ldi	r27, 0x00	; 0
    3284:	42 e0       	ldi	r20, 0x02	; 2
    3286:	50 e0       	ldi	r21, 0x00	; 0
    3288:	02 c0       	rjmp	.+4      	; 0x328e <eeprom_read_blraw>

0000328a <eeprom_read_block>:
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22

0000328e <eeprom_read_blraw>:
    328e:	fc 01       	movw	r30, r24
    3290:	f9 99       	sbic	0x1f, 1	; 31
    3292:	fe cf       	rjmp	.-4      	; 0x3290 <eeprom_read_blraw+0x2>
    3294:	06 c0       	rjmp	.+12     	; 0x32a2 <eeprom_read_blraw+0x14>
    3296:	f2 bd       	out	0x22, r31	; 34
    3298:	e1 bd       	out	0x21, r30	; 33
    329a:	f8 9a       	sbi	0x1f, 0	; 31
    329c:	31 96       	adiw	r30, 0x01	; 1
    329e:	00 b4       	in	r0, 0x20	; 32
    32a0:	0d 92       	st	X+, r0
    32a2:	41 50       	subi	r20, 0x01	; 1
    32a4:	50 40       	sbci	r21, 0x00	; 0
    32a6:	b8 f7       	brcc	.-18     	; 0x3296 <eeprom_read_blraw+0x8>
    32a8:	08 95       	ret

000032aa <_exit>:
    32aa:	f8 94       	cli

000032ac <__stop_program>:
    32ac:	ff cf       	rjmp	.-2      	; 0x32ac <__stop_program>
